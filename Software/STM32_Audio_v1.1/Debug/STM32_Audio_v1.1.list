
STM32_Audio_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a2a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033f3c  0801a448  0801a448  0002a448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804e384  0804e384  00060a94  2**0
                  CONTENTS
  4 .ARM          00000008  0804e384  0804e384  0005e384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804e38c  0804e38c  00060a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804e38c  0804e38c  0005e38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804e390  0804e390  0005e390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a94  20000000  0804e394  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ed90  20000a98  0804ee28  00060a98  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001f828  0804ee28  0006f828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060a94  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037186  00000000  00000000  00060ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000086c8  00000000  00000000  00097c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002970  00000000  00000000  000a0318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002568  00000000  00000000  000a2c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026488  00000000  00000000  000a51f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f88a  00000000  00000000  000cb678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6c3f  00000000  00000000  0010af02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c1b41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc1c  00000000  00000000  001c1b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000a98 	.word	0x20000a98
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801a42c 	.word	0x0801a42c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000a9c 	.word	0x20000a9c
 80001dc:	0801a42c 	.word	0x0801a42c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f20:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f22:	4a2d      	ldr	r2, [pc, #180]	; (8000fd8 <MX_ADC1_Init+0xdc>)
 8000f24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f26:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f50:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f6e:	4819      	ldr	r0, [pc, #100]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f70:	f006 fc6a 	bl	8007848 <HAL_ADC_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000f7a:	f000 fe99 	bl	8001cb0 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_ADC1_Init+0xe4>)
 8000f80:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000f9c:	f006 fec4 	bl	8007d28 <HAL_ADC_AnalogWDGConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000fa6:	f000 fe83 	bl	8001cb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000faa:	2303      	movs	r3, #3
 8000fac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_ADC1_Init+0xd8>)
 8000fbc:	f006 fd82 	bl	8007ac4 <HAL_ADC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000fc6:	f000 fe73 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000ab4 	.word	0x20000ab4
 8000fd8:	40012000 	.word	0x40012000
 8000fdc:	0f000001 	.word	0x0f000001
 8000fe0:	00800200 	.word	0x00800200

08000fe4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a2e      	ldr	r2, [pc, #184]	; (80010bc <HAL_ADC_MspInit+0xd8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d156      	bne.n	80010b4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_ADC_MspInit+0xdc>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a2c      	ldr	r2, [pc, #176]	; (80010c0 <HAL_ADC_MspInit+0xdc>)
 8001010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <HAL_ADC_MspInit+0xdc>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <HAL_ADC_MspInit+0xdc>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a25      	ldr	r2, [pc, #148]	; (80010c0 <HAL_ADC_MspInit+0xdc>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_ADC_MspInit+0xdc>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = Volume_Pin;
 800103e:	2308      	movs	r3, #8
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001042:	2303      	movs	r3, #3
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Volume_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	481c      	ldr	r0, [pc, #112]	; (80010c4 <HAL_ADC_MspInit+0xe0>)
 8001052:	f007 fce3 	bl	8008a1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_ADC_MspInit+0xe8>)
 800105a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 8001070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001074:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 8001078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800107c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 8001080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001084:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 800109a:	f007 f921 	bl	80082e0 <HAL_DMA_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80010a4:	f000 fe04 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 80010ac:	639a      	str	r2, [r3, #56]	; 0x38
 80010ae:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <HAL_ADC_MspInit+0xe4>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40012000 	.word	0x40012000
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	20000afc 	.word	0x20000afc
 80010cc:	40026410 	.word	0x40026410

080010d0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_CRC_Init+0x20>)
 80010d6:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <MX_CRC_Init+0x24>)
 80010d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_CRC_Init+0x20>)
 80010dc:	f007 f8e4 	bl	80082a8 <HAL_CRC_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80010e6:	f000 fde3 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000b5c 	.word	0x20000b5c
 80010f4:	40023000 	.word	0x40023000

080010f8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <HAL_CRC_MspInit+0x3c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d10d      	bne.n	8001126 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_CRC_MspInit+0x40>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <HAL_CRC_MspInit+0x40>)
 8001114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <HAL_CRC_MspInit+0x40>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023000 	.word	0x40023000
 8001138:	40023800 	.word	0x40023800

0800113c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_DMA_Init+0x6c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <MX_DMA_Init+0x6c>)
 800114c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_DMA_Init+0x6c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	210a      	movs	r1, #10
 8001162:	2038      	movs	r0, #56	; 0x38
 8001164:	f007 f876 	bl	8008254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001168:	2038      	movs	r0, #56	; 0x38
 800116a:	f007 f88f 	bl	800828c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2108      	movs	r1, #8
 8001172:	203a      	movs	r0, #58	; 0x3a
 8001174:	f007 f86e 	bl	8008254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001178:	203a      	movs	r0, #58	; 0x3a
 800117a:	f007 f887 	bl	800828c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2105      	movs	r1, #5
 8001182:	203b      	movs	r0, #59	; 0x3b
 8001184:	f007 f866 	bl	8008254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001188:	203b      	movs	r0, #59	; 0x3b
 800118a:	f007 f87f 	bl	800828c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2105      	movs	r1, #5
 8001192:	203c      	movs	r0, #60	; 0x3c
 8001194:	f007 f85e 	bl	8008254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001198:	203c      	movs	r0, #60	; 0x3c
 800119a:	f007 f877 	bl	800828c <HAL_NVIC_EnableIRQ>

}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <vApplicationGetIdleTaskMemory>:
void StartUpdateScreenLCDTask(void const * argument);
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80011bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <vApplicationGetIdleTaskMemory+0x30>)
 80011c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	20000b74 	.word	0x20000b74
 80011dc:	20000c1c 	.word	0x20000c1c

080011e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b098      	sub	sp, #96	; 0x60
 80011e4:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binSemaphoreDisplay */
  osSemaphoreDef(binSemaphoreDisplay);
 80011e6:	2300      	movs	r3, #0
 80011e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80011ea:	2300      	movs	r3, #0
 80011ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  binSemaphoreDisplayHandle = osSemaphoreCreate(osSemaphore(binSemaphoreDisplay), 1);
 80011ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f012 fc7b 	bl	8013af0 <osSemaphoreCreate>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <MX_FREERTOS_Init+0x98>)
 80011fe:	6013      	str	r3, [r2, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
#endif
  /* add threads, ... */
  osThreadDef(batteryMonitoringTask, StartBatteryMonitoringTask, osPriorityNormal, 1, 1 * 1024);
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <MX_FREERTOS_Init+0x9c>)
 8001202:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001206:	461d      	mov	r5, r3
 8001208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  batteryMonitoringTaskHandle = osThreadCreate(osThread(batteryMonitoringTask), NULL);
 8001214:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f012 fbf3 	bl	8013a06 <osThreadCreate>
 8001220:	4603      	mov	r3, r0
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <MX_FREERTOS_Init+0xa0>)
 8001224:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  osThreadDef(playAudioTask, StartPlayAudioTask, osPriorityNormal, 1, 2 * 1024);
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_FREERTOS_Init+0xa4>)
 8001228:	f107 0420 	add.w	r4, r7, #32
 800122c:	461d      	mov	r5, r3
 800122e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001232:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001236:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  playAudioTaskHandle = osThreadCreate(osThread(playAudioTask), NULL);
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f012 fbe0 	bl	8013a06 <osThreadCreate>
 8001246:	4603      	mov	r3, r0
 8001248:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <MX_FREERTOS_Init+0xa8>)
 800124a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  osThreadDef(updateScreenLCDTask, StartUpdateScreenLCDTask, osPriorityNormal, 1, 1 * 1024);
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_FREERTOS_Init+0xac>)
 800124e:	1d3c      	adds	r4, r7, #4
 8001250:	461d      	mov	r5, r3
 8001252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800125a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  updateScreenLCDTaskHandle = osThreadCreate(osThread(updateScreenLCDTask), NULL);
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f012 fbcf 	bl	8013a06 <osThreadCreate>
 8001268:	4603      	mov	r3, r0
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <MX_FREERTOS_Init+0xb0>)
 800126c:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 800126e:	bf00      	nop
 8001270:	3760      	adds	r7, #96	; 0x60
 8001272:	46bd      	mov	sp, r7
 8001274:	bdb0      	pop	{r4, r5, r7, pc}
 8001276:	bf00      	nop
 8001278:	20000b64 	.word	0x20000b64
 800127c:	0801a484 	.word	0x0801a484
 8001280:	20000b6c 	.word	0x20000b6c
 8001284:	0801a4a0 	.word	0x0801a4a0
 8001288:	20000b68 	.word	0x20000b68
 800128c:	0801a4bc 	.word	0x0801a4bc
 8001290:	20000b70 	.word	0x20000b70

08001294 <StartUpdateScreenLCDTask>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
#endif
void StartUpdateScreenLCDTask(void const * argument)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    //printf("4. Update screen LCD task running...\n");
    Display_Update();
 800129c:	f004 f8b4 	bl	8005408 <Display_Update>
    //MX_TouchGFX_Process();
    osDelay(10);
 80012a0:	200a      	movs	r0, #10
 80012a2:	f012 fc11 	bl	8013ac8 <osDelay>
    Display_Update();
 80012a6:	e7f9      	b.n	800129c <StartUpdateScreenLCDTask+0x8>

080012a8 <StartPlayAudioTask>:
  }
}
void StartPlayAudioTask(void const * argument)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    printf("2. Play Audio task running...\n");
 80012b0:	487b      	ldr	r0, [pc, #492]	; (80014a0 <StartPlayAudioTask+0x1f8>)
 80012b2:	f016 fe2f 	bl	8017f14 <puts>
    if(Display.Mode == INITIALIZE || Display.Mode == CREATE_PLAY_MUSIC || Display.Mode == PLAY_MUSIC)
 80012b6:	4b7b      	ldr	r3, [pc, #492]	; (80014a4 <StartPlayAudioTask+0x1fc>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d007      	beq.n	80012ce <StartPlayAudioTask+0x26>
 80012be:	4b79      	ldr	r3, [pc, #484]	; (80014a4 <StartPlayAudioTask+0x1fc>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d003      	beq.n	80012ce <StartPlayAudioTask+0x26>
 80012c6:	4b77      	ldr	r3, [pc, #476]	; (80014a4 <StartPlayAudioTask+0x1fc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d10e      	bne.n	80012ec <StartPlayAudioTask+0x44>
    {
      osSemaphoreWait(binSemaphoreDisplayHandle, osWaitForever);
 80012ce:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <StartPlayAudioTask+0x200>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f04f 31ff 	mov.w	r1, #4294967295
 80012d6:	4618      	mov	r0, r3
 80012d8:	f012 fc4a 	bl	8013b70 <osSemaphoreWait>
      Display.Mode = CREATE_PLAY_MUSIC;
 80012dc:	4b71      	ldr	r3, [pc, #452]	; (80014a4 <StartPlayAudioTask+0x1fc>)
 80012de:	2202      	movs	r2, #2
 80012e0:	701a      	strb	r2, [r3, #0]
      osSemaphoreRelease(binSemaphoreDisplayHandle);
 80012e2:	4b71      	ldr	r3, [pc, #452]	; (80014a8 <StartPlayAudioTask+0x200>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f012 fc90 	bl	8013c0c <osSemaphoreRelease>
    }
    PlayWaveFile();
 80012ec:	f001 ffb4 	bl	8003258 <PlayWaveFile>
    osSemaphoreWait(binSemaphoreDisplayHandle, osWaitForever);
 80012f0:	4b6d      	ldr	r3, [pc, #436]	; (80014a8 <StartPlayAudioTask+0x200>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	4618      	mov	r0, r3
 80012fa:	f012 fc39 	bl	8013b70 <osSemaphoreWait>
    if(Audio.NewSongEvent != BACK_TO_PREVIOUS_SONG) // Update if event is not back to previous song
 80012fe:	4b6b      	ldr	r3, [pc, #428]	; (80014ac <StartPlayAudioTask+0x204>)
 8001300:	78db      	ldrb	r3, [r3, #3]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d00c      	beq.n	8001320 <StartPlayAudioTask+0x78>
    {
      Audio.PreviousSong = Audio.CurrentSong;// Save the previous song
 8001306:	4b69      	ldr	r3, [pc, #420]	; (80014ac <StartPlayAudioTask+0x204>)
 8001308:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800130c:	f8b3 21d4 	ldrh.w	r2, [r3, #468]	; 0x1d4
 8001310:	4b66      	ldr	r3, [pc, #408]	; (80014ac <StartPlayAudioTask+0x204>)
 8001312:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001316:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
      Audio_AddPreviousSong(); // add to previous list
 800131a:	f001 fa87 	bl	800282c <Audio_AddPreviousSong>
 800131e:	e00b      	b.n	8001338 <StartPlayAudioTask+0x90>
    }
    else
    {
      Audio_GetPreviousSong(); // get the latest previous song
 8001320:	f001 fa9c 	bl	800285c <Audio_GetPreviousSong>
      Audio.CurrentSong = Audio.PreviousSong;
 8001324:	4b61      	ldr	r3, [pc, #388]	; (80014ac <StartPlayAudioTask+0x204>)
 8001326:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800132a:	f8b3 21d6 	ldrh.w	r2, [r3, #470]	; 0x1d6
 800132e:	4b5f      	ldr	r3, [pc, #380]	; (80014ac <StartPlayAudioTask+0x204>)
 8001330:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001334:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
    }
    // Check event for new song
    if(Audio.NewSongEvent == SELECT_SONG)// If User select song
 8001338:	4b5c      	ldr	r3, [pc, #368]	; (80014ac <StartPlayAudioTask+0x204>)
 800133a:	78db      	ldrb	r3, [r3, #3]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d10a      	bne.n	8001356 <StartPlayAudioTask+0xae>
    {
      Audio.CurrentSong = Display.CursorListMusic;
 8001340:	4b58      	ldr	r3, [pc, #352]	; (80014a4 <StartPlayAudioTask+0x1fc>)
 8001342:	891a      	ldrh	r2, [r3, #8]
 8001344:	4b59      	ldr	r3, [pc, #356]	; (80014ac <StartPlayAudioTask+0x204>)
 8001346:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800134a:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
      Audio.NewSongEvent = AUTO;
 800134e:	4b57      	ldr	r3, [pc, #348]	; (80014ac <StartPlayAudioTask+0x204>)
 8001350:	2200      	movs	r2, #0
 8001352:	70da      	strb	r2, [r3, #3]
 8001354:	e092      	b.n	800147c <StartPlayAudioTask+0x1d4>
    }
    else if(Audio.NewSongEvent == NEXT_SONG) // If User want to next song
 8001356:	4b55      	ldr	r3, [pc, #340]	; (80014ac <StartPlayAudioTask+0x204>)
 8001358:	78db      	ldrb	r3, [r3, #3]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d144      	bne.n	80013e8 <StartPlayAudioTask+0x140>
    {
      if(Setting.Music_RandomSong == true) // If setting random song
 800135e:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <StartPlayAudioTask+0x208>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d01d      	beq.n	80013a4 <StartPlayAudioTask+0xfc>
      {
        if(Audio.MaxSong)
 8001368:	4b50      	ldr	r3, [pc, #320]	; (80014ac <StartPlayAudioTask+0x204>)
 800136a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800136e:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d034      	beq.n	80013e0 <StartPlayAudioTask+0x138>
        {
          Audio.CurrentSong = RandomVariableWithoutValue(0, Audio.MaxSong, Audio.CurrentSong); // random song
 8001376:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <StartPlayAudioTask+0x204>)
 8001378:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800137c:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8001380:	4619      	mov	r1, r3
 8001382:	4b4a      	ldr	r3, [pc, #296]	; (80014ac <StartPlayAudioTask+0x204>)
 8001384:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001388:	f8b3 31d4 	ldrh.w	r3, [r3, #468]	; 0x1d4
 800138c:	461a      	mov	r2, r3
 800138e:	2000      	movs	r0, #0
 8001390:	f00e f984 	bl	800f69c <RandomVariableWithoutValue>
 8001394:	4603      	mov	r3, r0
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b44      	ldr	r3, [pc, #272]	; (80014ac <StartPlayAudioTask+0x204>)
 800139a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800139e:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
 80013a2:	e01d      	b.n	80013e0 <StartPlayAudioTask+0x138>
        }
      }
      else // If setting next +1 song
      {
        Audio.CurrentSong++;// point to next song
 80013a4:	4b41      	ldr	r3, [pc, #260]	; (80014ac <StartPlayAudioTask+0x204>)
 80013a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80013aa:	f8b3 31d4 	ldrh.w	r3, [r3, #468]	; 0x1d4
 80013ae:	3301      	adds	r3, #1
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <StartPlayAudioTask+0x204>)
 80013b4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80013b8:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
        if(Audio.CurrentSong >= Audio.MaxSong)
 80013bc:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <StartPlayAudioTask+0x204>)
 80013be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80013c2:	f8b3 21d4 	ldrh.w	r2, [r3, #468]	; 0x1d4
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <StartPlayAudioTask+0x204>)
 80013c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80013cc:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d305      	bcc.n	80013e0 <StartPlayAudioTask+0x138>
        {
          Audio.CurrentSong = 0;
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <StartPlayAudioTask+0x204>)
 80013d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80013da:	2200      	movs	r2, #0
 80013dc:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
        }
      }
      Audio.NewSongEvent = AUTO;
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <StartPlayAudioTask+0x204>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	70da      	strb	r2, [r3, #3]
 80013e6:	e049      	b.n	800147c <StartPlayAudioTask+0x1d4>
    }
    else if(Audio.NewSongEvent == AUTO)// If setting NewSongEvent == AUTO
 80013e8:	4b30      	ldr	r3, [pc, #192]	; (80014ac <StartPlayAudioTask+0x204>)
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d145      	bne.n	800147c <StartPlayAudioTask+0x1d4>
    {
      if(Setting.Music_LoopOneSong == true)// If auto and loop one song
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <StartPlayAudioTask+0x208>)
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d140      	bne.n	800147c <StartPlayAudioTask+0x1d4>
      {
        // nothing to do, dont need to point to next song
      }
      else// If just auto
      {
        if(Setting.Music_RandomSong == true) // If setting random song
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <StartPlayAudioTask+0x208>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d01d      	beq.n	8001440 <StartPlayAudioTask+0x198>
        {
          if(Audio.MaxSong)
 8001404:	4b29      	ldr	r3, [pc, #164]	; (80014ac <StartPlayAudioTask+0x204>)
 8001406:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800140a:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d034      	beq.n	800147c <StartPlayAudioTask+0x1d4>
          {
            Audio.CurrentSong = RandomVariableWithoutValue(0, Audio.MaxSong, Audio.CurrentSong); // random song
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <StartPlayAudioTask+0x204>)
 8001414:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001418:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800141c:	4619      	mov	r1, r3
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <StartPlayAudioTask+0x204>)
 8001420:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001424:	f8b3 31d4 	ldrh.w	r3, [r3, #468]	; 0x1d4
 8001428:	461a      	mov	r2, r3
 800142a:	2000      	movs	r0, #0
 800142c:	f00e f936 	bl	800f69c <RandomVariableWithoutValue>
 8001430:	4603      	mov	r3, r0
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <StartPlayAudioTask+0x204>)
 8001436:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800143a:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
 800143e:	e01d      	b.n	800147c <StartPlayAudioTask+0x1d4>
          }
        }
        else //
        {
          Audio.CurrentSong++;// point to next song
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <StartPlayAudioTask+0x204>)
 8001442:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001446:	f8b3 31d4 	ldrh.w	r3, [r3, #468]	; 0x1d4
 800144a:	3301      	adds	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <StartPlayAudioTask+0x204>)
 8001450:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001454:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
          if(Audio.CurrentSong >= Audio.MaxSong)
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <StartPlayAudioTask+0x204>)
 800145a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800145e:	f8b3 21d4 	ldrh.w	r2, [r3, #468]	; 0x1d4
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <StartPlayAudioTask+0x204>)
 8001464:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001468:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800146c:	429a      	cmp	r2, r3
 800146e:	d305      	bcc.n	800147c <StartPlayAudioTask+0x1d4>
          {
            Audio.CurrentSong = 0;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <StartPlayAudioTask+0x204>)
 8001472:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001476:	2200      	movs	r2, #0
 8001478:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
    }
    else // If setting NewSongEvent == BACK_TO_PREVIOUS_SONG
    {
      // No need update because This is handle by above
    }
    if(Display.Mode == LIST_MUSIC)
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <StartPlayAudioTask+0x1fc>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b05      	cmp	r3, #5
 8001482:	d102      	bne.n	800148a <StartPlayAudioTask+0x1e2>
    {
      Display.NeedToUpdateListMusic = true;// Update list music
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <StartPlayAudioTask+0x1fc>)
 8001486:	2201      	movs	r2, #1
 8001488:	705a      	strb	r2, [r3, #1]
    }
    Database_SaveDataMusic();
 800148a:	f002 fc4b 	bl	8003d24 <Database_SaveDataMusic>
    osSemaphoreRelease(binSemaphoreDisplayHandle);
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <StartPlayAudioTask+0x200>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f012 fbba 	bl	8013c0c <osSemaphoreRelease>

    osDelay(100);
 8001498:	2064      	movs	r0, #100	; 0x64
 800149a:	f012 fb15 	bl	8013ac8 <osDelay>
    printf("2. Play Audio task running...\n");
 800149e:	e707      	b.n	80012b0 <StartPlayAudioTask+0x8>
 80014a0:	0801a4d8 	.word	0x0801a4d8
 80014a4:	20014cb8 	.word	0x20014cb8
 80014a8:	20000b64 	.word	0x20000b64
 80014ac:	2000cc84 	.word	0x2000cc84
 80014b0:	200197f4 	.word	0x200197f4

080014b4 <StartBatteryMonitoringTask>:
  }

  /* USER CODE END StartDefaultTask */
}
void StartBatteryMonitoringTask(void const * argument)
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  HAL_StatusTypeDef res = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
    printf("3. Battery monitoring task running...\n");
 80014c0:	481b      	ldr	r0, [pc, #108]	; (8001530 <StartBatteryMonitoringTask+0x7c>)
 80014c2:	f016 fd27 	bl	8017f14 <puts>
    res = STC3100_Get(&Batt, BATTERY_PROP_VOLTAGE_NOW);
 80014c6:	2101      	movs	r1, #1
 80014c8:	481a      	ldr	r0, [pc, #104]	; (8001534 <StartBatteryMonitoringTask+0x80>)
 80014ca:	f002 fb3f 	bl	8003b4c <STC3100_Get>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]
#ifdef BATTERY_MONITORING_CURRENT
    res |= STC3100_Get(&Batt, BATTERY_PROP_CURRENT_NOW);
    res |= STC3100_Get(&Batt, BATTERY_PROP_UNIQUEID);
#endif
    if(res == HAL_OK)
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d122      	bne.n	800151e <StartBatteryMonitoringTask+0x6a>
    {
      //printf("STC3100 ID = %d\n", Batt.ids[0]);
      printf("Battery voltage = %f, current = %f\n", Batt.voltage , Batt.current);
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <StartBatteryMonitoringTask+0x80>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f83b 	bl	8000558 <__aeabi_f2d>
 80014e2:	4604      	mov	r4, r0
 80014e4:	460d      	mov	r5, r1
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <StartBatteryMonitoringTask+0x80>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f834 	bl	8000558 <__aeabi_f2d>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	e9cd 2300 	strd	r2, r3, [sp]
 80014f8:	4622      	mov	r2, r4
 80014fa:	462b      	mov	r3, r5
 80014fc:	480e      	ldr	r0, [pc, #56]	; (8001538 <StartBatteryMonitoringTask+0x84>)
 80014fe:	f016 fc83 	bl	8017e08 <iprintf>
      Draw_BatteryLevel(200, 5, BatteryPercentCalculation(Batt.voltage));
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <StartBatteryMonitoringTask+0x80>)
 8001504:	edd3 7a01 	vldr	s15, [r3, #4]
 8001508:	eeb0 0a67 	vmov.f32	s0, s15
 800150c:	f00e f8f0 	bl	800f6f0 <BatteryPercentCalculation>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	2105      	movs	r1, #5
 8001516:	20c8      	movs	r0, #200	; 0xc8
 8001518:	f004 fce4 	bl	8005ee4 <Draw_BatteryLevel>
 800151c:	e002      	b.n	8001524 <StartBatteryMonitoringTask+0x70>
    }
    else
    {
      BatteryStatus = 1;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <StartBatteryMonitoringTask+0x88>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
    }
    osDelay(10000);
 8001524:	f242 7010 	movw	r0, #10000	; 0x2710
 8001528:	f012 face 	bl	8013ac8 <osDelay>
    printf("3. Battery monitoring task running...\n");
 800152c:	e7c8      	b.n	80014c0 <StartBatteryMonitoringTask+0xc>
 800152e:	bf00      	nop
 8001530:	0801a4f8 	.word	0x0801a4f8
 8001534:	2000007c 	.word	0x2000007c
 8001538:	0801a520 	.word	0x0801a520
 800153c:	20014cb0 	.word	0x20014cb0

08001540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <MX_GPIO_Init+0x194>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a5d      	ldr	r2, [pc, #372]	; (80016d4 <MX_GPIO_Init+0x194>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <MX_GPIO_Init+0x194>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <MX_GPIO_Init+0x194>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a56      	ldr	r2, [pc, #344]	; (80016d4 <MX_GPIO_Init+0x194>)
 800157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <MX_GPIO_Init+0x194>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <MX_GPIO_Init+0x194>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a4f      	ldr	r2, [pc, #316]	; (80016d4 <MX_GPIO_Init+0x194>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <MX_GPIO_Init+0x194>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <MX_GPIO_Init+0x194>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a48      	ldr	r2, [pc, #288]	; (80016d4 <MX_GPIO_Init+0x194>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b46      	ldr	r3, [pc, #280]	; (80016d4 <MX_GPIO_Init+0x194>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80015cc:	4842      	ldr	r0, [pc, #264]	; (80016d8 <MX_GPIO_Init+0x198>)
 80015ce:	f007 fbc1 	bl	8008d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2103      	movs	r1, #3
 80015d6:	4841      	ldr	r0, [pc, #260]	; (80016dc <MX_GPIO_Init+0x19c>)
 80015d8:	f007 fbbc 	bl	8008d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	2110      	movs	r1, #16
 80015e0:	483e      	ldr	r0, [pc, #248]	; (80016dc <MX_GPIO_Init+0x19c>)
 80015e2:	f007 fbb7 	bl	8008d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80015e6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4836      	ldr	r0, [pc, #216]	; (80016d8 <MX_GPIO_Init+0x198>)
 8001600:	f007 fa0c 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001604:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800160e:	2302      	movs	r3, #2
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	482e      	ldr	r0, [pc, #184]	; (80016d8 <MX_GPIO_Init+0x198>)
 800161e:	f007 f9fd 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001622:	2303      	movs	r3, #3
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4828      	ldr	r0, [pc, #160]	; (80016dc <MX_GPIO_Init+0x19c>)
 800163a:	f007 f9ef 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800163e:	2304      	movs	r3, #4
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001642:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4822      	ldr	r0, [pc, #136]	; (80016dc <MX_GPIO_Init+0x19c>)
 8001654:	f007 f9e2 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001658:	2310      	movs	r3, #16
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001660:	2301      	movs	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	481b      	ldr	r0, [pc, #108]	; (80016dc <MX_GPIO_Init+0x19c>)
 8001670:	f007 f9d4 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BAT_CHARGE_Pin;
 8001674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800167a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_CHARGE_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4815      	ldr	r0, [pc, #84]	; (80016e0 <MX_GPIO_Init+0x1a0>)
 800168c:	f007 f9c6 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	480e      	ldr	r0, [pc, #56]	; (80016e0 <MX_GPIO_Init+0x1a0>)
 80016a6:	f007 f9b9 	bl	8008a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2105      	movs	r1, #5
 80016ae:	2008      	movs	r0, #8
 80016b0:	f006 fdd0 	bl	8008254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80016b4:	2008      	movs	r0, #8
 80016b6:	f006 fde9 	bl	800828c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 11, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	210b      	movs	r1, #11
 80016be:	2028      	movs	r0, #40	; 0x28
 80016c0:	f006 fdc8 	bl	8008254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016c4:	2028      	movs	r0, #40	; 0x28
 80016c6:	f006 fde1 	bl	800828c <HAL_NVIC_EnableIRQ>

}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	; 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020800 	.word	0x40020800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400

080016e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_I2C1_Init+0x50>)
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <MX_I2C1_Init+0x54>)
 80016ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_I2C1_Init+0x50>)
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <MX_I2C1_Init+0x58>)
 80016f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_I2C1_Init+0x50>)
 8001702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <MX_I2C1_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_I2C1_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_I2C1_Init+0x50>)
 8001722:	f007 fb49 	bl	8008db8 <HAL_I2C_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800172c:	f000 fac0 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20001c1c 	.word	0x20001c1c
 8001738:	40005400 	.word	0x40005400
 800173c:	00061a80 	.word	0x00061a80

08001740 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_I2C_MspInit+0x84>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d12c      	bne.n	80017bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
    //__HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_I2C_MspInit+0x88>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_I2C_MspInit+0x88>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_I2C_MspInit+0x88>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800177e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001784:	2312      	movs	r3, #18
 8001786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001790:	2304      	movs	r3, #4
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <HAL_I2C_MspInit+0x8c>)
 800179c:	f007 f93e 	bl	8008a1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_I2C_MspInit+0x88>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_I2C_MspInit+0x88>)
 80017aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_I2C_MspInit+0x88>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40005400 	.word	0x40005400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020400 	.word	0x40020400

080017d0 <MX_I2S5_Init>:
I2S_HandleTypeDef hi2s5;
DMA_HandleTypeDef hdma_spi5_tx;

/* I2S5 init function */
void MX_I2S5_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S5_Init 0 */

  /* USER CODE BEGIN I2S5_Init 1 */

  /* USER CODE END I2S5_Init 1 */
  hi2s5.Instance = SPI5;
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_I2S5_Init+0x54>)
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <MX_I2S5_Init+0x58>)
 80017d8:	601a      	str	r2, [r3, #0]
  hi2s5.Init.Mode = I2S_MODE_MASTER_TX;
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_I2S5_Init+0x54>)
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	605a      	str	r2, [r3, #4]
  hi2s5.Init.Standard = I2S_STANDARD_PHILIPS;
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_I2S5_Init+0x54>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  hi2s5.Init.DataFormat = I2S_DATAFORMAT_16B;
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_I2S5_Init+0x54>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  hi2s5.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <MX_I2S5_Init+0x54>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  hi2s5.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_I2S5_Init+0x54>)
 80017f6:	f64a 4244 	movw	r2, #44100	; 0xac44
 80017fa:	615a      	str	r2, [r3, #20]
  hi2s5.Init.CPOL = I2S_CPOL_HIGH;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_I2S5_Init+0x54>)
 80017fe:	2208      	movs	r2, #8
 8001800:	619a      	str	r2, [r3, #24]
  hi2s5.Init.ClockSource = I2S_CLOCK_PLL;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_I2S5_Init+0x54>)
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
  hi2s5.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_I2S5_Init+0x54>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s5) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_I2S5_Init+0x54>)
 8001810:	f008 fa68 	bl	8009ce4 <HAL_I2S_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_I2S5_Init+0x4e>
  {
    Error_Handler();
 800181a:	f000 fa49 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S5_Init 2 */

  /* USER CODE END I2S5_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20001c70 	.word	0x20001c70
 8001828:	40015000 	.word	0x40015000

0800182c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b090      	sub	sp, #64	; 0x40
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
 8001854:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI5)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a50      	ldr	r2, [pc, #320]	; (800199c <HAL_I2S_MspInit+0x170>)
 800185c:	4293      	cmp	r3, r2
 800185e:	f040 8098 	bne.w	8001992 <HAL_I2S_MspInit+0x166>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001862:	2301      	movs	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 302;
 8001866:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800186a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800186c:	2310      	movs	r3, #16
 800186e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001870:	2302      	movs	r3, #2
 8001872:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4618      	mov	r0, r3
 800187a:	f009 fc4f 	bl	800b11c <HAL_RCCEx_PeriphCLKConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_I2S_MspInit+0x5c>
    {
      Error_Handler();
 8001884:	f000 fa14 	bl	8001cb0 <Error_Handler>
    }

    /* I2S5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <HAL_I2S_MspInit+0x174>)
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	4a43      	ldr	r2, [pc, #268]	; (80019a0 <HAL_I2S_MspInit+0x174>)
 8001892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001896:	6453      	str	r3, [r2, #68]	; 0x44
 8001898:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_I2S_MspInit+0x174>)
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_I2S_MspInit+0x174>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a3c      	ldr	r2, [pc, #240]	; (80019a0 <HAL_I2S_MspInit+0x174>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	6313      	str	r3, [r2, #48]	; 0x30
 80018b4:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <HAL_I2S_MspInit+0x174>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_I2S_MspInit+0x174>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4a35      	ldr	r2, [pc, #212]	; (80019a0 <HAL_I2S_MspInit+0x174>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6313      	str	r3, [r2, #48]	; 0x30
 80018d0:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_I2S_MspInit+0x174>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    /**I2S5 GPIO Configuration
    PB0     ------> I2S5_CK
    PB1     ------> I2S5_WS
    PA10     ------> I2S5_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018dc:	2303      	movs	r3, #3
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80018ec:	2306      	movs	r3, #6
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f4:	4619      	mov	r1, r3
 80018f6:	482b      	ldr	r0, [pc, #172]	; (80019a4 <HAL_I2S_MspInit+0x178>)
 80018f8:	f007 f890 	bl	8008a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800190e:	2306      	movs	r3, #6
 8001910:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001916:	4619      	mov	r1, r3
 8001918:	4823      	ldr	r0, [pc, #140]	; (80019a8 <HAL_I2S_MspInit+0x17c>)
 800191a:	f007 f87f 	bl	8008a1c <HAL_GPIO_Init>

    /* I2S5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 800191e:	4b23      	ldr	r3, [pc, #140]	; (80019ac <HAL_I2S_MspInit+0x180>)
 8001920:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <HAL_I2S_MspInit+0x184>)
 8001922:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_I2S_MspInit+0x180>)
 8001926:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800192a:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800192c:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <HAL_I2S_MspInit+0x180>)
 800192e:	2240      	movs	r2, #64	; 0x40
 8001930:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_I2S_MspInit+0x180>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_I2S_MspInit+0x180>)
 800193a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193e:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_I2S_MspInit+0x180>)
 8001942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001946:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_I2S_MspInit+0x180>)
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_I2S_MspInit+0x180>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_I2S_MspInit+0x180>)
 8001958:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800195c:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_I2S_MspInit+0x180>)
 8001960:	2204      	movs	r2, #4
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi5_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_I2S_MspInit+0x180>)
 8001966:	2203      	movs	r2, #3
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi5_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_I2S_MspInit+0x180>)
 800196c:	2200      	movs	r2, #0
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_I2S_MspInit+0x180>)
 8001972:	2200      	movs	r2, #0
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <HAL_I2S_MspInit+0x180>)
 8001978:	f006 fcb2 	bl	80082e0 <HAL_DMA_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 8001982:	f000 f995 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi5_tx);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_I2S_MspInit+0x180>)
 800198a:	639a      	str	r2, [r3, #56]	; 0x38
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_I2S_MspInit+0x180>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001992:	bf00      	nop
 8001994:	3740      	adds	r7, #64	; 0x40
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40015000 	.word	0x40015000
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40020000 	.word	0x40020000
 80019ac:	20001cb8 	.word	0x20001cb8
 80019b0:	40026470 	.word	0x40026470

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_StatusTypeDef res = HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019be:	f005 fedd 	bl	800777c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c2:	f000 f877 	bl	8001ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c6:	f7ff fdbb 	bl	8001540 <MX_GPIO_Init>
  MX_DMA_Init();
 80019ca:	f7ff fbb7 	bl	800113c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80019ce:	f000 fdf9 	bl	80025c4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80019d2:	f000 fa51 	bl	8001e78 <MX_SPI1_Init>
  MX_I2C1_Init();
 80019d6:	f7ff fe85 	bl	80016e4 <MX_I2C1_Init>
  MX_I2S5_Init();
 80019da:	f7ff fef9 	bl	80017d0 <MX_I2S5_Init>
  MX_SDIO_SD_Init();
 80019de:	f000 f96d 	bl	8001cbc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80019e2:	f00d febb 	bl	800f75c <MX_FATFS_Init>
  MX_TIM3_Init();
 80019e6:	f000 fd5b 	bl	80024a0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80019ea:	f7ff fa87 	bl	8000efc <MX_ADC1_Init>
  MX_CRC_Init();
 80019ee:	f7ff fb6f 	bl	80010d0 <MX_CRC_Init>
  MX_TIM2_Init();
 80019f2:	f000 fd07 	bl	8002404 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 80019f6:	f005 f821 	bl	8006a3c <ST7789_Init>
  printf("Initialize successfully\n");
 80019fa:	4825      	ldr	r0, [pc, #148]	; (8001a90 <main+0xdc>)
 80019fc:	f016 fa8a 	bl	8017f14 <puts>
//  res = SX1509B_Init();

  res = IO_Expand_Init();
 8001a00:	f003 f858 	bl	8004ab4 <IO_Expand_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	71fb      	strb	r3, [r7, #7]
  if(res == HAL_OK)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <main+0x62>
  {
    printf("SX1509B_Init complete !!!\r\n");
 8001a0e:	4821      	ldr	r0, [pc, #132]	; (8001a94 <main+0xe0>)
 8001a10:	f016 fa80 	bl	8017f14 <puts>
 8001a14:	e004      	b.n	8001a20 <main+0x6c>
  }
  else
  {
    printf("SX1509B_Init fail ! Error code: %d\r\n", res);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	481f      	ldr	r0, [pc, #124]	; (8001a98 <main+0xe4>)
 8001a1c:	f016 f9f4 	bl	8017e08 <iprintf>
  }
  res = STC3100_Init();
 8001a20:	f001 ff30 	bl	8003884 <STC3100_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
  if(res == HAL_OK)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d103      	bne.n	8001a36 <main+0x82>
  {
    printf("STC3100_Init complete !!!\r\n");
 8001a2e:	481b      	ldr	r0, [pc, #108]	; (8001a9c <main+0xe8>)
 8001a30:	f016 fa70 	bl	8017f14 <puts>
 8001a34:	e004      	b.n	8001a40 <main+0x8c>
  }
  else
  {
    printf("STC3100_Init fail ! Error code: %d\r\n", res);
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <main+0xec>)
 8001a3c:	f016 f9e4 	bl	8017e08 <iprintf>
  }
  res = STC3100_Get(&Batt, BATTERY_PROP_VOLTAGE_NOW);
 8001a40:	2101      	movs	r1, #1
 8001a42:	4818      	ldr	r0, [pc, #96]	; (8001aa4 <main+0xf0>)
 8001a44:	f002 f882 	bl	8003b4c <STC3100_Get>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  //res = WM8960_Init();
  res = WM8960_Init_PLL();
 8001a4c:	f001 fdaa 	bl	80035a4 <WM8960_Init_PLL>
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
  if(res == HAL_OK)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d103      	bne.n	8001a62 <main+0xae>
  {
    printf("WM89060_Init complete !!!\r\n");
 8001a5a:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <main+0xf4>)
 8001a5c:	f016 fa5a 	bl	8017f14 <puts>
 8001a60:	e004      	b.n	8001a6c <main+0xb8>
  }
  else
  {
    printf("WM89060_Init fail ! Error code: %d\r\n", res);
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	4619      	mov	r1, r3
 8001a66:	4811      	ldr	r0, [pc, #68]	; (8001aac <main+0xf8>)
 8001a68:	f016 f9ce 	bl	8017e08 <iprintf>
  }
  ScanSDCard();
 8001a6c:	f00d fec2 	bl	800f7f4 <ScanSDCard>
  Setting_Init();
 8001a70:	f00d fc80 	bl	800f374 <Setting_Init>
  W25Qxx_Init();
 8001a74:	f002 f9d4 	bl	8003e20 <W25Qxx_Init>
  Database_LoadData();
 8001a78:	f002 f90e 	bl	8003c98 <Database_LoadData>
  ListMusic_Init();
 8001a7c:	f003 fb10 	bl	80050a0 <ListMusic_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001a80:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <main+0xfc>)
 8001a82:	f00b ff1d 	bl	800d8c0 <HAL_TIM_Base_Start_IT>
  //MX_TouchGFX_Init();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001a86:	f7ff fbab 	bl	80011e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a8a:	f011 ffb5 	bl	80139f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <main+0xda>
 8001a90:	0801a544 	.word	0x0801a544
 8001a94:	0801a55c 	.word	0x0801a55c
 8001a98:	0801a578 	.word	0x0801a578
 8001a9c:	0801a5a0 	.word	0x0801a5a0
 8001aa0:	0801a5bc 	.word	0x0801a5bc
 8001aa4:	2000007c 	.word	0x2000007c
 8001aa8:	0801a5e4 	.word	0x0801a5e4
 8001aac:	0801a600 	.word	0x0801a600
 8001ab0:	20001f48 	.word	0x20001f48

08001ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b094      	sub	sp, #80	; 0x50
 8001ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aba:	f107 0320 	add.w	r3, r7, #32
 8001abe:	2230      	movs	r2, #48	; 0x30
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f015 fd2e 	bl	8017524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <SystemClock_Config+0xcc>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	4a27      	ldr	r2, [pc, #156]	; (8001b80 <SystemClock_Config+0xcc>)
 8001ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <SystemClock_Config+0xcc>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <SystemClock_Config+0xd0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <SystemClock_Config+0xd0>)
 8001afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <SystemClock_Config+0xd0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b10:	2302      	movs	r3, #2
 8001b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b14:	2301      	movs	r3, #1
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b18:	2310      	movs	r3, #16
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b20:	2300      	movs	r3, #0
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001b24:	2310      	movs	r3, #16
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001b28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001b2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001b32:	230a      	movs	r3, #10
 8001b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b36:	f107 0320 	add.w	r3, r7, #32
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f008 fe64 	bl	800a808 <HAL_RCC_OscConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b46:	f000 f8b3 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	2103      	movs	r1, #3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f009 f8c6 	bl	800acf8 <HAL_RCC_ClockConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b72:	f000 f89d 	bl	8001cb0 <Error_Handler>
  }
}
 8001b76:	bf00      	nop
 8001b78:	3750      	adds	r7, #80	; 0x50
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000

08001b88 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
#ifdef USE_DEBUG_UART
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001b90:	1d39      	adds	r1, r7, #4
 8001b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b96:	2201      	movs	r2, #1
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <__io_putchar+0x20>)
 8001b9a:	f00c fb02 	bl	800e1a2 <HAL_UART_Transmit>
#endif
  return ch;
 8001b9e:	687b      	ldr	r3, [r7, #4]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20001f90 	.word	0x20001f90

08001bac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bbc:	d154      	bne.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0xbc>
  {
    // update current music time
    Display.CurrentTime++;
 8001bbe:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a33      	ldr	r2, [pc, #204]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001bc6:	6053      	str	r3, [r2, #4]
    //printf("Display.CurrentTime = %ld\n", Display.CurrentTime);
    if(Display.CurrentTime > 0 && Display.CurrentTime > Display.DurationTime)
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00b      	beq.n	8001be8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d905      	bls.n	8001be8 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
      Display.CurrentTime = 0;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
      HAL_TIM_Base_Stop_IT(&htim2);
 8001be2:	482d      	ldr	r0, [pc, #180]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001be4:	f00b fece 	bl	800d984 <HAL_TIM_Base_Stop_IT>
    }
    Display.NeedToUpdateCurrentTime = true;
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	771a      	strb	r2, [r3, #28]
    //touchgfxSignalVSync();
    // LCD back light
    if(Setting.Always_Display == false)
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001bf0:	789b      	ldrb	r3, [r3, #2]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f083 0301 	eor.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d01b      	beq.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x8a>
    {
      if(Display.LCDBacklightStatus == true)
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c00:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d016      	beq.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x8a>
      {
        Display.LCDBackLightTime--;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c0a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        if(Display.LCDBackLightTime == 0)
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c1a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x8a>
        {
          LCD_BackLight_Off();
 8001c22:	f003 fa31 	bl	8005088 <LCD_BackLight_Off>
          Display.LCDBackLightTime = 20;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c28:	2214      	movs	r2, #20
 8001c2a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
          Display.LCDBacklightStatus = false;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        }
      }
    }
    // invisible volume
    if(Display.NeedToInvisibleVolume == true)
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0xbc>
    {
      Display.TimeForDisplayVolume++;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c42:	8bdb      	ldrh	r3, [r3, #30]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c4a:	83da      	strh	r2, [r3, #30]
      if(Display.TimeForDisplayVolume == 5)
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c4e:	8bdb      	ldrh	r3, [r3, #30]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d109      	bne.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0xbc>
      {
        Display.NeedToInvisibleVolume = 0;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2020 	strb.w	r2, [r3, #32]
        Display.NeedToInvisibleVolume = false;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2020 	strb.w	r2, [r3, #32]
        Draw_VolumeInvisible();
 8001c64:	f004 fb3c 	bl	80062e0 <Draw_VolumeInvisible>
      }
    }
  }
  // Use for calculate random variable & ADC period
  if(htim->Instance == TIM3)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d104      	bne.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0xd0>
  {
#if (SELECT_RANDOM == USE_MANUAL_TIMER)
    IncreaseCounter();
#endif
    HAL_ADC_Start_DMA(&hadc1, &volumeDigital, 1);
 8001c72:	2201      	movs	r2, #1
 8001c74:	490b      	ldr	r1, [pc, #44]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001c76:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001c78:	f005 fe2a 	bl	80078d0 <HAL_ADC_Start_DMA>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0xde>
    HAL_IncTick();
 8001c86:	f005 fd9b 	bl	80077c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20014cb8 	.word	0x20014cb8
 8001c98:	20001f00 	.word	0x20001f00
 8001c9c:	200197f4 	.word	0x200197f4
 8001ca0:	40000400 	.word	0x40000400
 8001ca4:	20001fd4 	.word	0x20001fd4
 8001ca8:	20000ab4 	.word	0x20000ab4
 8001cac:	40000c00 	.word	0x40000c00

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <Error_Handler+0x8>
	...

08001cbc <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_SDIO_SD_Init+0x44>)
 8001cc2:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <MX_SDIO_SD_Init+0x48>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_SDIO_SD_Init+0x44>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_SDIO_SD_Init+0x44>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_ENABLE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_SDIO_SD_Init+0x44>)
 8001cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd8:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_SDIO_SD_Init+0x44>)
 8001cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ce0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <MX_SDIO_SD_Init+0x44>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <MX_SDIO_SD_Init+0x44>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <MX_SDIO_SD_Init+0x44>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20001d18 	.word	0x20001d18
 8001d04:	40012c00 	.word	0x40012c00

08001d08 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_SD_MspInit+0x158>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	f040 8096 	bne.w	8001e58 <HAL_SD_MspInit+0x150>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <HAL_SD_MspInit+0x15c>)
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	4a4b      	ldr	r2, [pc, #300]	; (8001e64 <HAL_SD_MspInit+0x15c>)
 8001d36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3c:	4b49      	ldr	r3, [pc, #292]	; (8001e64 <HAL_SD_MspInit+0x15c>)
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	4b45      	ldr	r3, [pc, #276]	; (8001e64 <HAL_SD_MspInit+0x15c>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a44      	ldr	r2, [pc, #272]	; (8001e64 <HAL_SD_MspInit+0x15c>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <HAL_SD_MspInit+0x15c>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <HAL_SD_MspInit+0x15c>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4a3d      	ldr	r2, [pc, #244]	; (8001e64 <HAL_SD_MspInit+0x15c>)
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	6313      	str	r3, [r2, #48]	; 0x30
 8001d74:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_SD_MspInit+0x15c>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001d80:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001d92:	230c      	movs	r3, #12
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4832      	ldr	r0, [pc, #200]	; (8001e68 <HAL_SD_MspInit+0x160>)
 8001d9e:	f006 fe3d 	bl	8008a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8001da2:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001db4:	230c      	movs	r3, #12
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	482b      	ldr	r0, [pc, #172]	; (8001e6c <HAL_SD_MspInit+0x164>)
 8001dc0:	f006 fe2c 	bl	8008a1c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO Init */
    hdma_sdio.Instance = DMA2_Stream3;
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001dc6:	4a2b      	ldr	r2, [pc, #172]	; (8001e74 <HAL_SD_MspInit+0x16c>)
 8001dc8:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001dcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd0:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd2:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001de0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de4:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001de8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dec:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001df0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001df4:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001df8:	2220      	movs	r2, #32
 8001dfa:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001dfe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e02:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001e06:	2204      	movs	r2, #4
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001e12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 8001e18:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001e1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 8001e20:	4813      	ldr	r0, [pc, #76]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001e22:	f006 fa5d 	bl	80082e0 <HAL_DMA_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_SD_MspInit+0x128>
    {
      Error_Handler();
 8001e2c:	f7ff ff40 	bl	8001cb0 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001e40:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e42:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <HAL_SD_MspInit+0x168>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2105      	movs	r1, #5
 8001e4c:	2031      	movs	r0, #49	; 0x31
 8001e4e:	f006 fa01 	bl	8008254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001e52:	2031      	movs	r0, #49	; 0x31
 8001e54:	f006 fa1a 	bl	800828c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	20001d9c 	.word	0x20001d9c
 8001e74:	40026458 	.word	0x40026458

08001e78 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <MX_SPI1_Init+0x64>)
 8001e7e:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <MX_SPI1_Init+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <MX_SPI1_Init+0x64>)
 8001e84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <MX_SPI1_Init+0x64>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <MX_SPI1_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <MX_SPI1_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <MX_SPI1_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <MX_SPI1_Init+0x64>)
 8001ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <MX_SPI1_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <MX_SPI1_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <MX_SPI1_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <MX_SPI1_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <MX_SPI1_Init+0x64>)
 8001ec4:	220a      	movs	r2, #10
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <MX_SPI1_Init+0x64>)
 8001eca:	f00a fdaa 	bl	800ca22 <HAL_SPI_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ed4:	f7ff feec 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20001dfc 	.word	0x20001dfc
 8001ee0:	40013000 	.word	0x40013000

08001ee4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <HAL_SPI_MspInit+0x11c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d177      	bne.n	8001ff6 <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <HAL_SPI_MspInit+0x120>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a3d      	ldr	r2, [pc, #244]	; (8002004 <HAL_SPI_MspInit+0x120>)
 8001f10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_SPI_MspInit+0x120>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <HAL_SPI_MspInit+0x120>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a36      	ldr	r2, [pc, #216]	; (8002004 <HAL_SPI_MspInit+0x120>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b34      	ldr	r3, [pc, #208]	; (8002004 <HAL_SPI_MspInit+0x120>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_SPI_MspInit+0x120>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a2f      	ldr	r2, [pc, #188]	; (8002004 <HAL_SPI_MspInit+0x120>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_SPI_MspInit+0x120>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f5a:	23a0      	movs	r3, #160	; 0xa0
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	4824      	ldr	r0, [pc, #144]	; (8002008 <HAL_SPI_MspInit+0x124>)
 8001f76:	f006 fd51 	bl	8008a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f7a:	2310      	movs	r3, #16
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	481d      	ldr	r0, [pc, #116]	; (800200c <HAL_SPI_MspInit+0x128>)
 8001f96:	f006 fd41 	bl	8008a1c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_SPI_MspInit+0x130>)
 8001f9e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001fa2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fa6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fda:	480d      	ldr	r0, [pc, #52]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001fdc:	f006 f980 	bl	80082e0 <HAL_DMA_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001fe6:	f7ff fe63 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a08      	ldr	r2, [pc, #32]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001fee:	649a      	str	r2, [r3, #72]	; 0x48
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_SPI_MspInit+0x12c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40013000 	.word	0x40013000
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400
 8002010:	20001e54 	.word	0x20001e54
 8002014:	40026440 	.word	0x40026440

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_MspInit+0x54>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_MspInit+0x54>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_MspInit+0x54>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_MspInit+0x54>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_MspInit+0x54>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_MspInit+0x54>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	210f      	movs	r1, #15
 800205a:	f06f 0001 	mvn.w	r0, #1
 800205e:	f006 f8f9 	bl	8008254 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08e      	sub	sp, #56	; 0x38
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_InitTick+0xe4>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	4a32      	ldr	r2, [pc, #200]	; (8002154 <HAL_InitTick+0xe4>)
 800208a:	f043 0308 	orr.w	r3, r3, #8
 800208e:	6413      	str	r3, [r2, #64]	; 0x40
 8002090:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_InitTick+0xe4>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800209c:	f107 0210 	add.w	r2, r7, #16
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f009 f806 	bl	800b0b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d103      	bne.n	80020be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020b6:	f008 ffd7 	bl	800b068 <HAL_RCC_GetPCLK1Freq>
 80020ba:	6378      	str	r0, [r7, #52]	; 0x34
 80020bc:	e004      	b.n	80020c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020be:	f008 ffd3 	bl	800b068 <HAL_RCC_GetPCLK1Freq>
 80020c2:	4603      	mov	r3, r0
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	4a23      	ldr	r2, [pc, #140]	; (8002158 <HAL_InitTick+0xe8>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	0c9b      	lsrs	r3, r3, #18
 80020d2:	3b01      	subs	r3, #1
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_InitTick+0xec>)
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <HAL_InitTick+0xf0>)
 80020da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <HAL_InitTick+0xec>)
 80020de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020e2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_InitTick+0xec>)
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_InitTick+0xec>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_InitTick+0xec>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_InitTick+0xec>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80020fc:	4817      	ldr	r0, [pc, #92]	; (800215c <HAL_InitTick+0xec>)
 80020fe:	f00b fb8f 	bl	800d820 <HAL_TIM_Base_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002108:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800210c:	2b00      	cmp	r3, #0
 800210e:	d11b      	bne.n	8002148 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002110:	4812      	ldr	r0, [pc, #72]	; (800215c <HAL_InitTick+0xec>)
 8002112:	f00b fbd5 	bl	800d8c0 <HAL_TIM_Base_Start_IT>
 8002116:	4603      	mov	r3, r0
 8002118:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800211c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002120:	2b00      	cmp	r3, #0
 8002122:	d111      	bne.n	8002148 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002124:	2032      	movs	r0, #50	; 0x32
 8002126:	f006 f8b1 	bl	800828c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b0f      	cmp	r3, #15
 800212e:	d808      	bhi.n	8002142 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002130:	2200      	movs	r2, #0
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	2032      	movs	r0, #50	; 0x32
 8002136:	f006 f88d 	bl	8008254 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_InitTick+0xf4>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e002      	b.n	8002148 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002148:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800214c:	4618      	mov	r0, r3
 800214e:	3738      	adds	r7, #56	; 0x38
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40023800 	.word	0x40023800
 8002158:	431bde83 	.word	0x431bde83
 800215c:	20001eb4 	.word	0x20001eb4
 8002160:	40000c00 	.word	0x40000c00
 8002164:	200008a4 	.word	0x200008a4

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002198:	2004      	movs	r0, #4
 800219a:	f006 fdf5 	bl	8008d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <TIM2_IRQHandler+0x10>)
 80021aa:	f00b fc1a 	bl	800d9e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20001f00 	.word	0x20001f00

080021b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <TIM3_IRQHandler+0x10>)
 80021be:	f00b fc10 	bl	800d9e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20001f48 	.word	0x20001f48

080021cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BAT_CHARGE_Pin);
 80021d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021d4:	f006 fdd8 	bl	8008d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}

080021dc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <SDIO_IRQHandler+0x10>)
 80021e2:	f009 fb63 	bl	800b8ac <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20001d18 	.word	0x20001d18

080021f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <TIM5_IRQHandler+0x10>)
 80021f6:	f00b fbf4 	bl	800d9e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20001eb4 	.word	0x20001eb4

08002204 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <DMA2_Stream0_IRQHandler+0x10>)
 800220a:	f006 f991 	bl	8008530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000afc 	.word	0x20000afc

08002218 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <DMA2_Stream2_IRQHandler+0x10>)
 800221e:	f006 f987 	bl	8008530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20001e54 	.word	0x20001e54

0800222c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <DMA2_Stream3_IRQHandler+0x10>)
 8002232:	f006 f97d 	bl	8008530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20001d9c 	.word	0x20001d9c

08002240 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <DMA2_Stream4_IRQHandler+0x10>)
 8002246:	f006 f973 	bl	8008530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20001cb8 	.word	0x20001cb8

08002254 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
	return 1;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_kill>:

int _kill(int pid, int sig)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800226e:	f015 f921 	bl	80174b4 <__errno>
 8002272:	4603      	mov	r3, r0
 8002274:	2216      	movs	r2, #22
 8002276:	601a      	str	r2, [r3, #0]
	return -1;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <_exit>:

void _exit (int status)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ffe7 	bl	8002264 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002296:	e7fe      	b.n	8002296 <_exit+0x12>

08002298 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e00a      	b.n	80022c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022aa:	f3af 8000 	nop.w
 80022ae:	4601      	mov	r1, r0
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	60ba      	str	r2, [r7, #8]
 80022b6:	b2ca      	uxtb	r2, r1
 80022b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dbf0      	blt.n	80022aa <_read+0x12>
	}

return len;
 80022c8:	687b      	ldr	r3, [r7, #4]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e009      	b.n	80022f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	60ba      	str	r2, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fc4b 	bl	8001b88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dbf1      	blt.n	80022e4 <_write+0x12>
	}
	return len;
 8002300:	687b      	ldr	r3, [r7, #4]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_close>:

int _close(int file)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
	return -1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002332:	605a      	str	r2, [r3, #4]
	return 0;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <_isatty>:

int _isatty(int file)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
	return 1;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
	return 0;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <_sbrk+0x5c>)
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <_sbrk+0x60>)
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <_sbrk+0x64>)
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <_sbrk+0x68>)
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <_sbrk+0x64>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d207      	bcs.n	80023b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a4:	f015 f886 	bl	80174b4 <__errno>
 80023a8:	4603      	mov	r3, r0
 80023aa:	220c      	movs	r2, #12
 80023ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	e009      	b.n	80023c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <_sbrk+0x64>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <_sbrk+0x64>)
 80023c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20020000 	.word	0x20020000
 80023d4:	00000400 	.word	0x00000400
 80023d8:	20001efc 	.word	0x20001efc
 80023dc:	2001f828 	.word	0x2001f828

080023e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <SystemInit+0x20>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <SystemInit+0x20>)
 80023ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240a:	f107 0308 	add.w	r3, r7, #8
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002418:	463b      	mov	r3, r7
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <MX_TIM2_Init+0x98>)
 8002422:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002426:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49999;
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <MX_TIM2_Init+0x98>)
 800242a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800242e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <MX_TIM2_Init+0x98>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <MX_TIM2_Init+0x98>)
 8002438:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800243c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <MX_TIM2_Init+0x98>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <MX_TIM2_Init+0x98>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800244a:	4814      	ldr	r0, [pc, #80]	; (800249c <MX_TIM2_Init+0x98>)
 800244c:	f00b f9e8 	bl	800d820 <HAL_TIM_Base_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002456:	f7ff fc2b 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	4619      	mov	r1, r3
 8002466:	480d      	ldr	r0, [pc, #52]	; (800249c <MX_TIM2_Init+0x98>)
 8002468:	f00b fbc3 	bl	800dbf2 <HAL_TIM_ConfigClockSource>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002472:	f7ff fc1d 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800247e:	463b      	mov	r3, r7
 8002480:	4619      	mov	r1, r3
 8002482:	4806      	ldr	r0, [pc, #24]	; (800249c <MX_TIM2_Init+0x98>)
 8002484:	f00b fdbe 	bl	800e004 <HAL_TIMEx_MasterConfigSynchronization>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800248e:	f7ff fc0f 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20001f00 	.word	0x20001f00

080024a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a6:	f107 0308 	add.w	r3, r7, #8
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b4:	463b      	mov	r3, r7
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <MX_TIM3_Init+0x94>)
 80024be:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <MX_TIM3_Init+0x98>)
 80024c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <MX_TIM3_Init+0x94>)
 80024c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <MX_TIM3_Init+0x94>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <MX_TIM3_Init+0x94>)
 80024d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80024d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <MX_TIM3_Init+0x94>)
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <MX_TIM3_Init+0x94>)
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024e4:	4813      	ldr	r0, [pc, #76]	; (8002534 <MX_TIM3_Init+0x94>)
 80024e6:	f00b f99b 	bl	800d820 <HAL_TIM_Base_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80024f0:	f7ff fbde 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	4619      	mov	r1, r3
 8002500:	480c      	ldr	r0, [pc, #48]	; (8002534 <MX_TIM3_Init+0x94>)
 8002502:	f00b fb76 	bl	800dbf2 <HAL_TIM_ConfigClockSource>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800250c:	f7ff fbd0 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002510:	2300      	movs	r3, #0
 8002512:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002518:	463b      	mov	r3, r7
 800251a:	4619      	mov	r1, r3
 800251c:	4805      	ldr	r0, [pc, #20]	; (8002534 <MX_TIM3_Init+0x94>)
 800251e:	f00b fd71 	bl	800e004 <HAL_TIMEx_MasterConfigSynchronization>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002528:	f7ff fbc2 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800252c:	bf00      	nop
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20001f48 	.word	0x20001f48
 8002538:	40000400 	.word	0x40000400

0800253c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d116      	bne.n	800257c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 9, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2109      	movs	r1, #9
 800256e:	201c      	movs	r0, #28
 8002570:	f005 fe70 	bl	8008254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002574:	201c      	movs	r0, #28
 8002576:	f005 fe89 	bl	800828c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800257a:	e01a      	b.n	80025b2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <HAL_TIM_Base_MspInit+0x84>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d115      	bne.n	80025b2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 12, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	210c      	movs	r1, #12
 80025a6:	201d      	movs	r0, #29
 80025a8:	f005 fe54 	bl	8008254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025ac:	201d      	movs	r0, #29
 80025ae:	f005 fe6d 	bl	800828c <HAL_NVIC_EnableIRQ>
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40000400 	.word	0x40000400

080025c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <MX_USART1_UART_Init+0x4c>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <MX_USART1_UART_Init+0x50>)
 80025cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <MX_USART1_UART_Init+0x4c>)
 80025d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <MX_USART1_UART_Init+0x4c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <MX_USART1_UART_Init+0x4c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <MX_USART1_UART_Init+0x4c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <MX_USART1_UART_Init+0x4c>)
 80025ea:	220c      	movs	r2, #12
 80025ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <MX_USART1_UART_Init+0x4c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <MX_USART1_UART_Init+0x4c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <MX_USART1_UART_Init+0x4c>)
 80025fc:	f00b fd84 	bl	800e108 <HAL_UART_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002606:	f7ff fb53 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20001f90 	.word	0x20001f90
 8002614:	40011000 	.word	0x40011000

08002618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a19      	ldr	r2, [pc, #100]	; (800269c <HAL_UART_MspInit+0x84>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d12b      	bne.n	8002692 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_UART_MspInit+0x88>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <HAL_UART_MspInit+0x88>)
 8002644:	f043 0310 	orr.w	r3, r3, #16
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_UART_MspInit+0x88>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_UART_MspInit+0x88>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <HAL_UART_MspInit+0x88>)
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_UART_MspInit+0x88>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002672:	2348      	movs	r3, #72	; 0x48
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002682:	2307      	movs	r3, #7
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <HAL_UART_MspInit+0x8c>)
 800268e:	f006 f9c5 	bl	8008a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	; 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40011000 	.word	0x40011000
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020400 	.word	0x40020400

080026a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026ac:	480d      	ldr	r0, [pc, #52]	; (80026e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ae:	490e      	ldr	r1, [pc, #56]	; (80026e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026b0:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b4:	e002      	b.n	80026bc <LoopCopyDataInit>

080026b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ba:	3304      	adds	r3, #4

080026bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c0:	d3f9      	bcc.n	80026b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c2:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026c4:	4c0b      	ldr	r4, [pc, #44]	; (80026f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c8:	e001      	b.n	80026ce <LoopFillZerobss>

080026ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026cc:	3204      	adds	r2, #4

080026ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d0:	d3fb      	bcc.n	80026ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026d2:	f7ff fe85 	bl	80023e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026d6:	f014 fef3 	bl	80174c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026da:	f7ff f96b 	bl	80019b4 <main>
  bx  lr    
 80026de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e8:	20000a94 	.word	0x20000a94
  ldr r2, =_sidata
 80026ec:	0804e394 	.word	0x0804e394
  ldr r2, =_sbss
 80026f0:	20000a98 	.word	0x20000a98
  ldr r4, =_ebss
 80026f4:	2001f828 	.word	0x2001f828

080026f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f8:	e7fe      	b.n	80026f8 <ADC_IRQHandler>

080026fa <HAL_ADC_ConvHalfCpltCallback>:
// 0                   100                              1111111b = 127
// 4095                0                                0101111b = 47 (Mute)
// z                   100 - (z * 100 / 4095) = x       y = ax + b = 0.8 * x + 47

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]

}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  // Conversion Complete & DMA Transfer Complete As Well
  // Convert to volumeSet
  volumeSet =  100 - (volumeDigital * 100) / 4095;
 8002718:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <HAL_ADC_ConvCpltCallback+0xc8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2264      	movs	r2, #100	; 0x64
 800271e:	fb03 f202 	mul.w	r2, r3, r2
 8002722:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <HAL_ADC_ConvCpltCallback+0xcc>)
 8002724:	fba3 1302 	umull	r1, r3, r3, r2
 8002728:	1ad2      	subs	r2, r2, r3
 800272a:	0852      	lsrs	r2, r2, #1
 800272c:	4413      	add	r3, r2
 800272e:	0adb      	lsrs	r3, r3, #11
 8002730:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002734:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002736:	6013      	str	r3, [r2, #0]
  //printf("Volume Digital = %ld\n", volumeSet);
  if(abs(volumeSet - volumePreSet) <= VOLUME_ODD) return; // if ODD is insignificant, don't need to set new volume to WM8960
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_ADC_ConvCpltCallback+0xd0>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HAL_ADC_ConvCpltCallback+0xd4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	bfb8      	it	lt
 8002746:	425b      	neglt	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	dd41      	ble.n	80027d0 <HAL_ADC_ConvCpltCallback+0xc0>
  volumePreSet = volumeSet;
 800274c:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_ADC_ConvCpltCallback+0xd0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a24      	ldr	r2, [pc, #144]	; (80027e4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8002752:	6013      	str	r3, [r2, #0]
  //Else Update HP_L and HP_R OUTPUTS volume
  volumeSetToWM8960 = volumeSet * 8 / 10 + 47;
 8002754:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4a23      	ldr	r2, [pc, #140]	; (80027e8 <HAL_ADC_ConvCpltCallback+0xd8>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	08db      	lsrs	r3, r3, #3
 8002762:	b29b      	uxth	r3, r3
 8002764:	332f      	adds	r3, #47	; 0x2f
 8002766:	b29a      	uxth	r2, r3
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_ADC_ConvCpltCallback+0xdc>)
 800276a:	801a      	strh	r2, [r3, #0]
  printf("Set volume = %ld\n", volumeSet);
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_ADC_ConvCpltCallback+0xd0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	481f      	ldr	r0, [pc, #124]	; (80027f0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002774:	f015 fb48 	bl	8017e08 <iprintf>
  WM8960_Write_Reg(0x02, HEADPHONE_VOLUME_UPDATE | volumeSetToWM8960);  //LOUT1 Volume Set
 8002778:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_ADC_ConvCpltCallback+0xdc>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	b29b      	uxth	r3, r3
 8002782:	4619      	mov	r1, r3
 8002784:	2002      	movs	r0, #2
 8002786:	f000 fed7 	bl	8003538 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x03, HEADPHONE_VOLUME_UPDATE | volumeSetToWM8960);  //ROUT1 Volume Set
 800278a:	4b18      	ldr	r3, [pc, #96]	; (80027ec <HAL_ADC_ConvCpltCallback+0xdc>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002792:	b29b      	uxth	r3, r3
 8002794:	4619      	mov	r1, r3
 8002796:	2003      	movs	r0, #3
 8002798:	f000 fece 	bl	8003538 <WM8960_Write_Reg>
  if(Display.Mode == PLAY_MUSIC)
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_ADC_ConvCpltCallback+0xe4>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d116      	bne.n	80027d2 <HAL_ADC_ConvCpltCallback+0xc2>
  {
    osSemaphoreWait(binSemaphoreDisplayHandle, osWaitForever);
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_ADC_ConvCpltCallback+0xe8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	4618      	mov	r0, r3
 80027ae:	f011 f9df 	bl	8013b70 <osSemaphoreWait>
    Draw_Volume();
 80027b2:	f003 fdb7 	bl	8006324 <Draw_Volume>
    osSemaphoreRelease(binSemaphoreDisplayHandle);
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_ADC_ConvCpltCallback+0xe8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f011 fa26 	bl	8013c0c <osSemaphoreRelease>
    Display.TimeForDisplayVolume = 0;
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_ADC_ConvCpltCallback+0xe4>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	83da      	strh	r2, [r3, #30]
    Display.NeedToInvisibleVolume = true;
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_ADC_ConvCpltCallback+0xe4>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2020 	strb.w	r2, [r3, #32]
 80027ce:	e000      	b.n	80027d2 <HAL_ADC_ConvCpltCallback+0xc2>
  if(abs(volumeSet - volumePreSet) <= VOLUME_ODD) return; // if ODD is insignificant, don't need to set new volume to WM8960
 80027d0:	bf00      	nop
  }
}
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20001fd4 	.word	0x20001fd4
 80027dc:	00100101 	.word	0x00100101
 80027e0:	20001fd8 	.word	0x20001fd8
 80027e4:	20001fdc 	.word	0x20001fdc
 80027e8:	cccccccd 	.word	0xcccccccd
 80027ec:	20001fe0 	.word	0x20001fe0
 80027f0:	0801a628 	.word	0x0801a628
 80027f4:	20014cb8 	.word	0x20014cb8
 80027f8:	20000b64 	.word	0x20000b64

080027fc <Audio_CreatePreviousSongList>:
uint16_t ListBuff[10];
_Alignas(8) uint8_t TempBuf[WAV_BUFFER_SIZE/2];
uint8_t *WAV_HalfBuffer = (uint8_t*) TempBuf;

void Audio_CreatePreviousSongList(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  RingBuffer_LIFO_Init(&PreviousSong_List, ListBuff, sizeof(ListBuff) / 2);
 8002800:	220a      	movs	r2, #10
 8002802:	4907      	ldr	r1, [pc, #28]	; (8002820 <Audio_CreatePreviousSongList+0x24>)
 8002804:	4807      	ldr	r0, [pc, #28]	; (8002824 <Audio_CreatePreviousSongList+0x28>)
 8002806:	f00c fea1 	bl	800f54c <RingBuffer_LIFO_Init>
  // Add at least one previous song to avoid empty
  RingBuffer_LIFO_Push(&PreviousSong_List, Audio.PreviousSong);
 800280a:	4b07      	ldr	r3, [pc, #28]	; (8002828 <Audio_CreatePreviousSongList+0x2c>)
 800280c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002810:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	; 0x1d6
 8002814:	4619      	mov	r1, r3
 8002816:	4803      	ldr	r0, [pc, #12]	; (8002824 <Audio_CreatePreviousSongList+0x28>)
 8002818:	f00c fecc 	bl	800f5b4 <RingBuffer_LIFO_Push>
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	2000fe70 	.word	0x2000fe70
 8002824:	2000fe5c 	.word	0x2000fe5c
 8002828:	2000cc84 	.word	0x2000cc84

0800282c <Audio_AddPreviousSong>:
LIFO_STATUS Audio_AddPreviousSong(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
  LIFO_STATUS res;
  res = RingBuffer_LIFO_Push(&PreviousSong_List, Audio.PreviousSong);
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <Audio_AddPreviousSong+0x28>)
 8002834:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002838:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	; 0x1d6
 800283c:	4619      	mov	r1, r3
 800283e:	4806      	ldr	r0, [pc, #24]	; (8002858 <Audio_AddPreviousSong+0x2c>)
 8002840:	f00c feb8 	bl	800f5b4 <RingBuffer_LIFO_Push>
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  return res;
 8002848:	79fb      	ldrb	r3, [r7, #7]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000cc84 	.word	0x2000cc84
 8002858:	2000fe5c 	.word	0x2000fe5c

0800285c <Audio_GetPreviousSong>:
LIFO_STATUS Audio_GetPreviousSong(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
  LIFO_STATUS res;
  res = RingBuffer_LIFO_Pop(&PreviousSong_List, &Audio.PreviousSong);
 8002862:	4905      	ldr	r1, [pc, #20]	; (8002878 <Audio_GetPreviousSong+0x1c>)
 8002864:	4805      	ldr	r0, [pc, #20]	; (800287c <Audio_GetPreviousSong+0x20>)
 8002866:	f00c fee0 	bl	800f62a <RingBuffer_LIFO_Pop>
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  return res;
 800286e:	79fb      	ldrb	r3, [r7, #7]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	2000fe5a 	.word	0x2000fe5a
 800287c:	2000fe5c 	.word	0x2000fe5c

08002880 <ScanWavefiles>:
/**
  * @brief  Scan the WAV files that set the path.
  * @param  path: Path to scan.
  * @retval None
  */
FRESULT ScanWavefiles(char* path) {
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b0d9      	sub	sp, #356	; 0x164
 8002884:	af00      	add	r7, sp, #0
 8002886:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800288a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800288e:	6018      	str	r0, [r3, #0]
  FRESULT res;
  FILINFO fno;
  DIR dir;
  uint16_t i,j;

  res = f_opendir(&dir, path);    //Open the directory
 8002890:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002894:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002898:	f107 020c 	add.w	r2, r7, #12
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	4610      	mov	r0, r2
 80028a0:	f010 fe07 	bl	80134b2 <f_opendir>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  if(res != FR_OK)  {
 80028aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <ScanWavefiles+0x3e>
    printf("f_opendir error !\r\n");
 80028b2:	487d      	ldr	r0, [pc, #500]	; (8002aa8 <ScanWavefiles+0x228>)
 80028b4:	f015 fb2e 	bl	8017f14 <puts>
    return res;
 80028b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80028bc:	e0ef      	b.n	8002a9e <ScanWavefiles+0x21e>
  }

  for(i=0;;i++) {                 //Scan the files in the directory
 80028be:	2300      	movs	r3, #0
 80028c0:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
    res = f_readdir(&dir, &fno);  //read a item
 80028c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f010 fed2 	bl	8013678 <f_readdir>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
    if(res != FR_OK)  {
 80028da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <ScanWavefiles+0x6e>
      printf("f_readdir error !\r\n");
 80028e2:	4872      	ldr	r0, [pc, #456]	; (8002aac <ScanWavefiles+0x22c>)
 80028e4:	f015 fb16 	bl	8017f14 <puts>
      return res;
 80028e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80028ec:	e0d7      	b.n	8002a9e <ScanWavefiles+0x21e>
    }
    if(fno.fname[0] == 0)         //scan to the end of the path
 80028ee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80028f6:	7d9b      	ldrb	r3, [r3, #22]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 809e 	beq.w	8002a3a <ScanWavefiles+0x1ba>
      break;

    for(j=0;j<_MAX_LFN;j++) {
 80028fe:	2300      	movs	r3, #0
 8002900:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8002904:	e00e      	b.n	8002924 <ScanWavefiles+0xa4>
      if(fno.fname[j] == '.')     //Check if the type of the file is WAV
 8002906:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800290a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800290e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8002912:	4413      	add	r3, r2
 8002914:	7d9b      	ldrb	r3, [r3, #22]
 8002916:	2b2e      	cmp	r3, #46	; 0x2e
 8002918:	d009      	beq.n	800292e <ScanWavefiles+0xae>
    for(j=0;j<_MAX_LFN;j++) {
 800291a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800291e:	3301      	adds	r3, #1
 8002920:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8002924:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8002928:	2bfe      	cmp	r3, #254	; 0xfe
 800292a:	d9ec      	bls.n	8002906 <ScanWavefiles+0x86>
 800292c:	e000      	b.n	8002930 <ScanWavefiles+0xb0>
      break;
 800292e:	bf00      	nop
    }

    if(((fno.fname[j+1] == 'w')||(fno.fname[j+1] == 'W'))
 8002930:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8002934:	3301      	adds	r3, #1
 8002936:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800293a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800293e:	4413      	add	r3, r2
 8002940:	7d9b      	ldrb	r3, [r3, #22]
 8002942:	2b77      	cmp	r3, #119	; 0x77
 8002944:	d00a      	beq.n	800295c <ScanWavefiles+0xdc>
 8002946:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800294a:	3301      	adds	r3, #1
 800294c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002950:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8002954:	4413      	add	r3, r2
 8002956:	7d9b      	ldrb	r3, [r3, #22]
 8002958:	2b57      	cmp	r3, #87	; 0x57
 800295a:	d168      	bne.n	8002a2e <ScanWavefiles+0x1ae>
        &&((fno.fname[j+2] == 'a')||(fno.fname[j+2] == 'A'))
 800295c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8002960:	3302      	adds	r3, #2
 8002962:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002966:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800296a:	4413      	add	r3, r2
 800296c:	7d9b      	ldrb	r3, [r3, #22]
 800296e:	2b61      	cmp	r3, #97	; 0x61
 8002970:	d00a      	beq.n	8002988 <ScanWavefiles+0x108>
 8002972:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8002976:	3302      	adds	r3, #2
 8002978:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800297c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8002980:	4413      	add	r3, r2
 8002982:	7d9b      	ldrb	r3, [r3, #22]
 8002984:	2b41      	cmp	r3, #65	; 0x41
 8002986:	d152      	bne.n	8002a2e <ScanWavefiles+0x1ae>
        &&((fno.fname[j+3] == 'v')||(fno.fname[j+3] == 'V'))) //The file is WAV
 8002988:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800298c:	3303      	adds	r3, #3
 800298e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002992:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8002996:	4413      	add	r3, r2
 8002998:	7d9b      	ldrb	r3, [r3, #22]
 800299a:	2b76      	cmp	r3, #118	; 0x76
 800299c:	d00a      	beq.n	80029b4 <ScanWavefiles+0x134>
 800299e:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80029a2:	3303      	adds	r3, #3
 80029a4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80029a8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80029ac:	4413      	add	r3, r2
 80029ae:	7d9b      	ldrb	r3, [r3, #22]
 80029b0:	2b56      	cmp	r3, #86	; 0x56
 80029b2:	d13c      	bne.n	8002a2e <ScanWavefiles+0x1ae>
    {
      strcpy(Audio.PlayList[i], path);     //Copy type of file is WAV
 80029b4:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 80029b8:	2232      	movs	r2, #50	; 0x32
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <ScanWavefiles+0x230>)
 80029c0:	4413      	add	r3, r2
 80029c2:	1d1a      	adds	r2, r3, #4
 80029c4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029c8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	4610      	mov	r0, r2
 80029d0:	f015 fad7 	bl	8017f82 <strcpy>
      strcat(Audio.PlayList[i],"/");       // Add '/' to the buffer
 80029d4:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 80029d8:	2232      	movs	r2, #50	; 0x32
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	4a34      	ldr	r2, [pc, #208]	; (8002ab0 <ScanWavefiles+0x230>)
 80029e0:	4413      	add	r3, r2
 80029e2:	1d1c      	adds	r4, r3, #4
 80029e4:	4620      	mov	r0, r4
 80029e6:	f7fd fbfb 	bl	80001e0 <strlen>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4423      	add	r3, r4
 80029ee:	4931      	ldr	r1, [pc, #196]	; (8002ab4 <ScanWavefiles+0x234>)
 80029f0:	461a      	mov	r2, r3
 80029f2:	460b      	mov	r3, r1
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	8013      	strh	r3, [r2, #0]
      strcat(Audio.PlayList[i],fno.fname); // Add file name to the buffer
 80029f8:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 80029fc:	2232      	movs	r2, #50	; 0x32
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	4a2b      	ldr	r2, [pc, #172]	; (8002ab0 <ScanWavefiles+0x230>)
 8002a04:	4413      	add	r3, r2
 8002a06:	1d1a      	adds	r2, r3, #4
 8002a08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a0c:	3316      	adds	r3, #22
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f015 faa7 	bl	8017f64 <strcat>
      printf("%s\r\n", Audio.PlayList[i]); // print the whole file path to the UART
 8002a16:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8002a1a:	2232      	movs	r2, #50	; 0x32
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <ScanWavefiles+0x230>)
 8002a22:	4413      	add	r3, r2
 8002a24:	3304      	adds	r3, #4
 8002a26:	4619      	mov	r1, r3
 8002a28:	4823      	ldr	r0, [pc, #140]	; (8002ab8 <ScanWavefiles+0x238>)
 8002a2a:	f015 f9ed 	bl	8017e08 <iprintf>
  for(i=0;;i++) {                 //Scan the files in the directory
 8002a2e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8002a32:	3301      	adds	r3, #1
 8002a34:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
    res = f_readdir(&dir, &fno);  //read a item
 8002a38:	e744      	b.n	80028c4 <ScanWavefiles+0x44>
      break;
 8002a3a:	bf00      	nop
    }
  }
  res = f_closedir(&dir);             //Close the directory
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	4618      	mov	r0, r3
 8002a42:	f010 fdf3 	bl	801362c <f_closedir>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  if(res != FR_OK)  {
 8002a4c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <ScanWavefiles+0x1e0>
    printf("f_closedir error !\r\n");
 8002a54:	4819      	ldr	r0, [pc, #100]	; (8002abc <ScanWavefiles+0x23c>)
 8002a56:	f015 fa5d 	bl	8017f14 <puts>
    return res;
 8002a5a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a5e:	e01e      	b.n	8002a9e <ScanWavefiles+0x21e>
  }

  Audio.MaxSong = i;
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <ScanWavefiles+0x230>)
 8002a62:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002a66:	461a      	mov	r2, r3
 8002a68:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8002a6c:	f8a2 31d2 	strh.w	r3, [r2, #466]	; 0x1d2

  printf("Scan WAV Files complete ! Audio.CurrentSong = %d\r\n",Audio.MaxSong);
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <ScanWavefiles+0x230>)
 8002a72:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002a76:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4810      	ldr	r0, [pc, #64]	; (8002ac0 <ScanWavefiles+0x240>)
 8002a7e:	f015 f9c3 	bl	8017e08 <iprintf>
  SCREEN_MUSIC_MAX_LIST = (Audio.MaxSong >= SCREEN_MAX_LIST) ? SCREEN_MAX_LIST : Audio.MaxSong;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <ScanWavefiles+0x230>)
 8002a84:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002a88:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	bf28      	it	cs
 8002a90:	2305      	movcs	r3, #5
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <ScanWavefiles+0x244>)
 8002a98:	701a      	strb	r2, [r3, #0]
  return res;
 8002a9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}
 8002aa8:	0801a63c 	.word	0x0801a63c
 8002aac:	0801a650 	.word	0x0801a650
 8002ab0:	2000cc84 	.word	0x2000cc84
 8002ab4:	0801a664 	.word	0x0801a664
 8002ab8:	0801a668 	.word	0x0801a668
 8002abc:	0801a670 	.word	0x0801a670
 8002ac0:	0801a684 	.word	0x0801a684
 8002ac4:	20014ce4 	.word	0x20014ce4

08002ac8 <Get_WAV_Message>:


uint8_t Get_WAV_Message(char* fname, wavctrl* wavx) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]

  uint8_t res = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	77fb      	strb	r3, [r7, #31]
  UINT br = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
  ChunkRIFF *riff;
  ChunkFMT *fmt;
  ChunkFACT *fact;
  ChunkDATA *data;

  res = f_open(&WAV_File, (TCHAR *)fname, FA_READ);     //Open the file
 8002ada:	2201      	movs	r2, #1
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4885      	ldr	r0, [pc, #532]	; (8002cf4 <Get_WAV_Message+0x22c>)
 8002ae0:	f00f fdf4 	bl	80126cc <f_open>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	77fb      	strb	r3, [r7, #31]
  if(res == FR_OK) {
 8002ae8:	7ffb      	ldrb	r3, [r7, #31]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 80f2 	bne.w	8002cd4 <Get_WAV_Message+0x20c>

    CloseFileFlag = 1;
 8002af0:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <Get_WAV_Message+0x230>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]

    f_read(&WAV_File, TempBuf, WAV_BUFFER_SIZE/2, &br); //Read WAV_BUFFER_SIZE/2 bytes data
 8002af6:	f107 0308 	add.w	r3, r7, #8
 8002afa:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002afe:	497f      	ldr	r1, [pc, #508]	; (8002cfc <Get_WAV_Message+0x234>)
 8002b00:	487c      	ldr	r0, [pc, #496]	; (8002cf4 <Get_WAV_Message+0x22c>)
 8002b02:	f010 f8ab 	bl	8012c5c <f_read>

    riff = (ChunkRIFF *)TempBuf;      //Get RIFF Chunk
 8002b06:	4b7d      	ldr	r3, [pc, #500]	; (8002cfc <Get_WAV_Message+0x234>)
 8002b08:	61bb      	str	r3, [r7, #24]

    if(riff->Format == 0x45564157)  { //Format = "WAV"
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	4a7c      	ldr	r2, [pc, #496]	; (8002d00 <Get_WAV_Message+0x238>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	f040 80d9 	bne.w	8002cc8 <Get_WAV_Message+0x200>

      fmt = (ChunkFMT *)(TempBuf+12); //Get FMT Chunk
 8002b16:	4b7b      	ldr	r3, [pc, #492]	; (8002d04 <Get_WAV_Message+0x23c>)
 8002b18:	617b      	str	r3, [r7, #20]
      if(fmt->AudioFormat==1||fmt->AudioFormat==3)        //Linear PCM or 32 bits WAVE
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	891b      	ldrh	r3, [r3, #8]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d005      	beq.n	8002b30 <Get_WAV_Message+0x68>
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	891b      	ldrh	r3, [r3, #8]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	f040 80c6 	bne.w	8002cbc <Get_WAV_Message+0x1f4>
      {
        fact=(ChunkFACT *)(TempBuf+12+8+fmt->ChunkSize);  //Read FACT chunk
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	3314      	adds	r3, #20
 8002b36:	4a71      	ldr	r2, [pc, #452]	; (8002cfc <Get_WAV_Message+0x234>)
 8002b38:	4413      	add	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]

        if((fact->ChunkID == 0x74636166)||(fact->ChunkID==0X5453494C))
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a71      	ldr	r2, [pc, #452]	; (8002d08 <Get_WAV_Message+0x240>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d004      	beq.n	8002b50 <Get_WAV_Message+0x88>
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a70      	ldr	r2, [pc, #448]	; (8002d0c <Get_WAV_Message+0x244>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d109      	bne.n	8002b64 <Get_WAV_Message+0x9c>
          wavx->datastart=12+8+fmt->ChunkSize+8+fact->ChunkSize;  //When there is fact/LIST Chunk.
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f103 021c 	add.w	r2, r3, #28
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	61da      	str	r2, [r3, #28]
 8002b62:	e005      	b.n	8002b70 <Get_WAV_Message+0xa8>
        else
          wavx->datastart=12+8+fmt->ChunkSize;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f103 0214 	add.w	r2, r3, #20
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	61da      	str	r2, [r3, #28]
        data = (ChunkDATA *)(TempBuf+wavx->datastart);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4a61      	ldr	r2, [pc, #388]	; (8002cfc <Get_WAV_Message+0x234>)
 8002b76:	4413      	add	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
        if(data->ChunkID==0X61746164) {           //Read DATA Chunk success
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a64      	ldr	r2, [pc, #400]	; (8002d10 <Get_WAV_Message+0x248>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	f040 808f 	bne.w	8002ca4 <Get_WAV_Message+0x1dc>
          wavx->audioformat=fmt->AudioFormat;     //Audio Format
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	891b      	ldrh	r3, [r3, #8]
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	801a      	strh	r2, [r3, #0]
          wavx->nchannels=fmt->NumOfChannels;     //channel number
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	895b      	ldrh	r3, [r3, #10]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	805a      	strh	r2, [r3, #2]
          wavx->samplerate=fmt->SampleRate;       //Sample Rate
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f8c3 2016 	str.w	r2, [r3, #22]
          wavx->bitrate=fmt->ByteRate*8;          //Byte Rate
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	00da      	lsls	r2, r3, #3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f8c3 2012 	str.w	r2, [r3, #18]
          wavx->blockalign=fmt->BlockAlign;       //Block Align
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	8a9b      	ldrh	r3, [r3, #20]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	809a      	strh	r2, [r3, #4]
          wavx->bps=fmt->BitsPerSample;           //number of chunk, 8/16/24/32 bits
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	8adb      	ldrh	r3, [r3, #22]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	835a      	strh	r2, [r3, #26]
          wavx->datasize=data->ChunkSize;         //Size of audio data chunk
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	f8c3 2006 	str.w	r2, [r3, #6]
          wavx->datastart=wavx->datastart+8;      //data stream start offest
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f103 0208 	add.w	r2, r3, #8
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	61da      	str	r2, [r3, #28]
          wavx->totsec = data->ChunkSize / fmt->ByteRate;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f8c3 200a 	str.w	r2, [r3, #10]
          // fixed
          wavx->datastart=280;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f042 0218 	orr.w	r2, r2, #24
 8002bf4:	771a      	strb	r2, [r3, #28]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	775a      	strb	r2, [r3, #29]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	779a      	strb	r2, [r3, #30]
 8002c02:	2200      	movs	r2, #0
 8002c04:	77da      	strb	r2, [r3, #31]
          printf("WAV.audioformat:%d\n",wavx->audioformat);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4841      	ldr	r0, [pc, #260]	; (8002d14 <Get_WAV_Message+0x24c>)
 8002c10:	f015 f8fa 	bl	8017e08 <iprintf>
          printf("WAV.nchannels:%d\n",wavx->nchannels);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	885b      	ldrh	r3, [r3, #2]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	483e      	ldr	r0, [pc, #248]	; (8002d18 <Get_WAV_Message+0x250>)
 8002c1e:	f015 f8f3 	bl	8017e08 <iprintf>
          printf("WAV.samplerate:%ld\n",wavx->samplerate);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	483c      	ldr	r0, [pc, #240]	; (8002d1c <Get_WAV_Message+0x254>)
 8002c2c:	f015 f8ec 	bl	8017e08 <iprintf>
          printf("WAV.bitrate:%ld\n",wavx->bitrate);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002c36:	4619      	mov	r1, r3
 8002c38:	4839      	ldr	r0, [pc, #228]	; (8002d20 <Get_WAV_Message+0x258>)
 8002c3a:	f015 f8e5 	bl	8017e08 <iprintf>
          printf("WAV.blockalign:%d\n",wavx->blockalign);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	889b      	ldrh	r3, [r3, #4]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4619      	mov	r1, r3
 8002c46:	4837      	ldr	r0, [pc, #220]	; (8002d24 <Get_WAV_Message+0x25c>)
 8002c48:	f015 f8de 	bl	8017e08 <iprintf>
          printf("WAV.bps:%d\n",wavx->bps);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	8b5b      	ldrh	r3, [r3, #26]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	4619      	mov	r1, r3
 8002c54:	4834      	ldr	r0, [pc, #208]	; (8002d28 <Get_WAV_Message+0x260>)
 8002c56:	f015 f8d7 	bl	8017e08 <iprintf>
          printf("WAV.datasize:%ld\n",wavx->datasize);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002c60:	4619      	mov	r1, r3
 8002c62:	4832      	ldr	r0, [pc, #200]	; (8002d2c <Get_WAV_Message+0x264>)
 8002c64:	f015 f8d0 	bl	8017e08 <iprintf>
          printf("WAV.datastart:%ld\n",wavx->datastart);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4830      	ldr	r0, [pc, #192]	; (8002d30 <Get_WAV_Message+0x268>)
 8002c70:	f015 f8ca 	bl	8017e08 <iprintf>
          printf("WAV.totsec %ld:%02ld\n",wavx->totsec / 60, wavx->totsec % 60);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8002c7a:	4a2e      	ldr	r2, [pc, #184]	; (8002d34 <Get_WAV_Message+0x26c>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	0958      	lsrs	r0, r3, #5
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8002c88:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <Get_WAV_Message+0x26c>)
 8002c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c8e:	095a      	lsrs	r2, r3, #5
 8002c90:	4613      	mov	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	1aca      	subs	r2, r1, r3
 8002c9a:	4601      	mov	r1, r0
 8002c9c:	4826      	ldr	r0, [pc, #152]	; (8002d38 <Get_WAV_Message+0x270>)
 8002c9e:	f015 f8b3 	bl	8017e08 <iprintf>
        if(data->ChunkID==0X61746164) {           //Read DATA Chunk success
 8002ca2:	e01c      	b.n	8002cde <Get_WAV_Message+0x216>
        }
        else  {
          printf("Not find data chunk !!\r\n");
 8002ca4:	4825      	ldr	r0, [pc, #148]	; (8002d3c <Get_WAV_Message+0x274>)
 8002ca6:	f015 f935 	bl	8017f14 <puts>
          printf("data->ChunkID = 0x%lx\r\n",data->ChunkID);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4823      	ldr	r0, [pc, #140]	; (8002d40 <Get_WAV_Message+0x278>)
 8002cb2:	f015 f8a9 	bl	8017e08 <iprintf>
          res = 4;
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	77fb      	strb	r3, [r7, #31]
        if(data->ChunkID==0X61746164) {           //Read DATA Chunk success
 8002cba:	e010      	b.n	8002cde <Get_WAV_Message+0x216>
        }
      }
      else  {
        printf("Not linear PCM, not support !!\r\n");
 8002cbc:	4821      	ldr	r0, [pc, #132]	; (8002d44 <Get_WAV_Message+0x27c>)
 8002cbe:	f015 f929 	bl	8017f14 <puts>
        res = 3;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	77fb      	strb	r3, [r7, #31]
 8002cc6:	e00a      	b.n	8002cde <Get_WAV_Message+0x216>
      }
    }
    else  {
      printf("Not WAV file !!\r\n");
 8002cc8:	481f      	ldr	r0, [pc, #124]	; (8002d48 <Get_WAV_Message+0x280>)
 8002cca:	f015 f923 	bl	8017f14 <puts>
      res = 2;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	77fb      	strb	r3, [r7, #31]
 8002cd2:	e004      	b.n	8002cde <Get_WAV_Message+0x216>
    }
  }
  else  {
    printf("Get_WAV_Message.f_open error !!\r\n");
 8002cd4:	481d      	ldr	r0, [pc, #116]	; (8002d4c <Get_WAV_Message+0x284>)
 8002cd6:	f015 f91d 	bl	8017f14 <puts>
    res = 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	77fb      	strb	r3, [r7, #31]
  }
  WAV_LastData = wavx->datasize;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002ce4:	4a1a      	ldr	r2, [pc, #104]	; (8002d50 <Get_WAV_Message+0x288>)
 8002ce6:	6013      	str	r3, [r2, #0]

  return res;
 8002ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20001fe8 	.word	0x20001fe8
 8002cf8:	20001fe2 	.word	0x20001fe2
 8002cfc:	2000fe88 	.word	0x2000fe88
 8002d00:	45564157 	.word	0x45564157
 8002d04:	2000fe94 	.word	0x2000fe94
 8002d08:	74636166 	.word	0x74636166
 8002d0c:	5453494c 	.word	0x5453494c
 8002d10:	61746164 	.word	0x61746164
 8002d14:	0801a6b8 	.word	0x0801a6b8
 8002d18:	0801a6cc 	.word	0x0801a6cc
 8002d1c:	0801a6e0 	.word	0x0801a6e0
 8002d20:	0801a6f4 	.word	0x0801a6f4
 8002d24:	0801a708 	.word	0x0801a708
 8002d28:	0801a71c 	.word	0x0801a71c
 8002d2c:	0801a728 	.word	0x0801a728
 8002d30:	0801a73c 	.word	0x0801a73c
 8002d34:	88888889 	.word	0x88888889
 8002d38:	0801a750 	.word	0x0801a750
 8002d3c:	0801a768 	.word	0x0801a768
 8002d40:	0801a780 	.word	0x0801a780
 8002d44:	0801a798 	.word	0x0801a798
 8002d48:	0801a7b8 	.word	0x0801a7b8
 8002d4c:	0801a7cc 	.word	0x0801a7cc
 8002d50:	2000cc7c 	.word	0x2000cc7c

08002d54 <Fill_WAV_Buffer>:
  * @brief  Open the WAV file, get the message of the file.
  * @param  BUFF: the pointer of the buffer to cached data.
  * @param  size: the byte mumber of data.
  * @retval None
  */
FRESULT Fill_WAV_Buffer(uint8_t *BUFF, uint16_t size) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]

  uint32_t NeedReadSize=0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
  uint32_t ReadSize;
  uint32_t i;
  uint8_t *p;
  float *f;
  int sound;
  FRESULT res = FR_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	76fb      	strb	r3, [r7, #27]
  //It has been read last time, return.
  if(EndFileFlag==1)
 8002d68:	4b99      	ldr	r3, [pc, #612]	; (8002fd0 <Fill_WAV_Buffer+0x27c>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <Fill_WAV_Buffer+0x20>
    return FR_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e261      	b.n	8003238 <Fill_WAV_Buffer+0x4e4>

  if(WaveCtrlData.nchannels==2) {
 8002d74:	4b97      	ldr	r3, [pc, #604]	; (8002fd4 <Fill_WAV_Buffer+0x280>)
 8002d76:	885b      	ldrh	r3, [r3, #2]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	f040 80e9 	bne.w	8002f50 <Fill_WAV_Buffer+0x1fc>
    if(WaveCtrlData.bps == 16)          //16-bit audio,read data directly
 8002d7e:	4b95      	ldr	r3, [pc, #596]	; (8002fd4 <Fill_WAV_Buffer+0x280>)
 8002d80:	8b5b      	ldrh	r3, [r3, #26]
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d109      	bne.n	8002d9a <Fill_WAV_Buffer+0x46>
    {

      res = f_read(&WAV_File,BUFF,size,(UINT*)&ReadSize);
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	f107 030c 	add.w	r3, r7, #12
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4892      	ldr	r0, [pc, #584]	; (8002fd8 <Fill_WAV_Buffer+0x284>)
 8002d90:	f00f ff64 	bl	8012c5c <f_read>
 8002d94:	4603      	mov	r3, r0
 8002d96:	76fb      	strb	r3, [r7, #27]
 8002d98:	e22d      	b.n	80031f6 <Fill_WAV_Buffer+0x4a2>
    }
    else if(WaveCtrlData.bps==24)       //24-bit audio, adjust the order between the read data and the DMA cache
 8002d9a:	4b8e      	ldr	r3, [pc, #568]	; (8002fd4 <Fill_WAV_Buffer+0x280>)
 8002d9c:	8b5b      	ldrh	r3, [r3, #26]
 8002d9e:	2b18      	cmp	r3, #24
 8002da0:	d147      	bne.n	8002e32 <Fill_WAV_Buffer+0xde>
    {
      printf("WaveCtrlData.bps = %d\r\n",WaveCtrlData.bps);
 8002da2:	4b8c      	ldr	r3, [pc, #560]	; (8002fd4 <Fill_WAV_Buffer+0x280>)
 8002da4:	8b5b      	ldrh	r3, [r3, #26]
 8002da6:	4619      	mov	r1, r3
 8002da8:	488c      	ldr	r0, [pc, #560]	; (8002fdc <Fill_WAV_Buffer+0x288>)
 8002daa:	f015 f82d 	bl	8017e08 <iprintf>
      NeedReadSize=(size/4)*3;                                  //Number of bytes to read
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
      res = f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);  //Read data
 8002dbe:	f107 030c 	add.w	r3, r7, #12
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4986      	ldr	r1, [pc, #536]	; (8002fe0 <Fill_WAV_Buffer+0x28c>)
 8002dc6:	4884      	ldr	r0, [pc, #528]	; (8002fd8 <Fill_WAV_Buffer+0x284>)
 8002dc8:	f00f ff48 	bl	8012c5c <f_read>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	76fb      	strb	r3, [r7, #27]
      p=TempBuf;
 8002dd0:	4b83      	ldr	r3, [pc, #524]	; (8002fe0 <Fill_WAV_Buffer+0x28c>)
 8002dd2:	623b      	str	r3, [r7, #32]
      ReadSize=(ReadSize/3)*4;                                  //Size of data after fill
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a83      	ldr	r2, [pc, #524]	; (8002fe4 <Fill_WAV_Buffer+0x290>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	085b      	lsrs	r3, r3, #1
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	60fb      	str	r3, [r7, #12]
      //printf("%d\r\n",ReadSize);
      for(i=0;i<ReadSize;)
 8002de2:	2300      	movs	r3, #0
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	e01f      	b.n	8002e28 <Fill_WAV_Buffer+0xd4>
      {
        BUFF[i]=p[1];
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	4413      	add	r3, r2
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	7852      	ldrb	r2, [r2, #1]
 8002df2:	701a      	strb	r2, [r3, #0]
        BUFF[i+1]=p[2];
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	3301      	adds	r3, #1
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	6a3a      	ldr	r2, [r7, #32]
 8002dfe:	7892      	ldrb	r2, [r2, #2]
 8002e00:	701a      	strb	r2, [r3, #0]
        BUFF[i+2]=0;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	3302      	adds	r3, #2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
        BUFF[i+3]=p[0];
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	3303      	adds	r3, #3
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	6a3a      	ldr	r2, [r7, #32]
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	701a      	strb	r2, [r3, #0]
        i+=4;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	3304      	adds	r3, #4
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
        p+=3;
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	3303      	adds	r3, #3
 8002e26:	623b      	str	r3, [r7, #32]
      for(i=0;i<ReadSize;)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d3db      	bcc.n	8002de8 <Fill_WAV_Buffer+0x94>
 8002e30:	e1e1      	b.n	80031f6 <Fill_WAV_Buffer+0x4a2>
      }
    }
    else if(WaveCtrlData.bps == 8)      //8-bit audio, data need to be transformed to 16-bit mode before play
 8002e32:	4b68      	ldr	r3, [pc, #416]	; (8002fd4 <Fill_WAV_Buffer+0x280>)
 8002e34:	8b5b      	ldrh	r3, [r3, #26]
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d133      	bne.n	8002ea2 <Fill_WAV_Buffer+0x14e>
    {
      printf("WaveCtrlData.bps = %d\r\n",WaveCtrlData.bps);
 8002e3a:	4b66      	ldr	r3, [pc, #408]	; (8002fd4 <Fill_WAV_Buffer+0x280>)
 8002e3c:	8b5b      	ldrh	r3, [r3, #26]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4866      	ldr	r0, [pc, #408]	; (8002fdc <Fill_WAV_Buffer+0x288>)
 8002e42:	f014 ffe1 	bl	8017e08 <iprintf>
      NeedReadSize=size/2;                                      //Number of bytes to read
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	617b      	str	r3, [r7, #20]
      res = f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);  //Read data
 8002e4e:	f107 030c 	add.w	r3, r7, #12
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4962      	ldr	r1, [pc, #392]	; (8002fe0 <Fill_WAV_Buffer+0x28c>)
 8002e56:	4860      	ldr	r0, [pc, #384]	; (8002fd8 <Fill_WAV_Buffer+0x284>)
 8002e58:	f00f ff00 	bl	8012c5c <f_read>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	76fb      	strb	r3, [r7, #27]
      p=TempBuf;
 8002e60:	4b5f      	ldr	r3, [pc, #380]	; (8002fe0 <Fill_WAV_Buffer+0x28c>)
 8002e62:	623b      	str	r3, [r7, #32]
      ReadSize=ReadSize*2;                                      //Size of data after fill
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
      for(i=0;i<ReadSize;)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6e:	e013      	b.n	8002e98 <Fill_WAV_Buffer+0x144>
      {
        BUFF[i]=0;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	4413      	add	r3, r2
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
        BUFF[i+1]=*p+0x80;
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	3301      	adds	r3, #1
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	440b      	add	r3, r1
 8002e86:	3a80      	subs	r2, #128	; 0x80
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]
        p++;
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	623b      	str	r3, [r7, #32]
        i=i+2;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	3302      	adds	r3, #2
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
      for(i=0;i<ReadSize;)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d3e7      	bcc.n	8002e70 <Fill_WAV_Buffer+0x11c>
 8002ea0:	e1a9      	b.n	80031f6 <Fill_WAV_Buffer+0x4a2>
      }
    }
    else if(WaveCtrlData.bps == 32)     //32bit WAVE, floating-point numbers [(-1) ~ 1] to represent sound
 8002ea2:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <Fill_WAV_Buffer+0x280>)
 8002ea4:	8b5b      	ldrh	r3, [r3, #26]
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d148      	bne.n	8002f3c <Fill_WAV_Buffer+0x1e8>
    {
      printf("WaveCtrlData.bps = %d\r\n",WaveCtrlData.bps);
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <Fill_WAV_Buffer+0x280>)
 8002eac:	8b5b      	ldrh	r3, [r3, #26]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	484a      	ldr	r0, [pc, #296]	; (8002fdc <Fill_WAV_Buffer+0x288>)
 8002eb2:	f014 ffa9 	bl	8017e08 <iprintf>
      res = f_read(&WAV_File,TempBuf,size,(UINT*)&ReadSize);          //Read data
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	4948      	ldr	r1, [pc, #288]	; (8002fe0 <Fill_WAV_Buffer+0x28c>)
 8002ebe:	4846      	ldr	r0, [pc, #280]	; (8002fd8 <Fill_WAV_Buffer+0x284>)
 8002ec0:	f00f fecc 	bl	8012c5c <f_read>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	76fb      	strb	r3, [r7, #27]
      f=(float*)TempBuf;
 8002ec8:	4b45      	ldr	r3, [pc, #276]	; (8002fe0 <Fill_WAV_Buffer+0x28c>)
 8002eca:	61fb      	str	r3, [r7, #28]
      for(i=0;i<ReadSize;)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed0:	e02f      	b.n	8002f32 <Fill_WAV_Buffer+0x1de>
      {
        //printf("f=%f\r\n",*f);
        sound=0x7FFFFFFF*(*f);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002fe8 <Fill_WAV_Buffer+0x294>
 8002edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ee4:	ee17 3a90 	vmov	r3, s15
 8002ee8:	613b      	str	r3, [r7, #16]
        BUFF[i]=(uint8_t)(sound>>16);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1419      	asrs	r1, r3, #16
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	4413      	add	r3, r2
 8002ef4:	b2ca      	uxtb	r2, r1
 8002ef6:	701a      	strb	r2, [r3, #0]
        BUFF[i+1]=(uint8_t)(sound>>24);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1619      	asrs	r1, r3, #24
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	3301      	adds	r3, #1
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	b2ca      	uxtb	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]
        BUFF[i+2]=(uint8_t)(sound);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	4413      	add	r3, r2
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]
        BUFF[i+3]=(uint8_t)(sound>>8);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1219      	asrs	r1, r3, #8
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	3303      	adds	r3, #3
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	b2ca      	uxtb	r2, r1
 8002f24:	701a      	strb	r2, [r3, #0]
        f++;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	61fb      	str	r3, [r7, #28]
        i=i+4;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	3304      	adds	r3, #4
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
      for(i=0;i<ReadSize;)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d3cb      	bcc.n	8002ed2 <Fill_WAV_Buffer+0x17e>
 8002f3a:	e15c      	b.n	80031f6 <Fill_WAV_Buffer+0x4a2>
      }
    }
    else  {
      printf("WaveCtrlData.bps = %d\r\n",WaveCtrlData.bps);
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <Fill_WAV_Buffer+0x280>)
 8002f3e:	8b5b      	ldrh	r3, [r3, #26]
 8002f40:	4619      	mov	r1, r3
 8002f42:	4826      	ldr	r0, [pc, #152]	; (8002fdc <Fill_WAV_Buffer+0x288>)
 8002f44:	f014 ff60 	bl	8017e08 <iprintf>
      printf("Error !!\r\n");
 8002f48:	4828      	ldr	r0, [pc, #160]	; (8002fec <Fill_WAV_Buffer+0x298>)
 8002f4a:	f014 ffe3 	bl	8017f14 <puts>
 8002f4e:	e152      	b.n	80031f6 <Fill_WAV_Buffer+0x4a2>
    }
  }
  //Signal channel��adjust to dual channel data for playback
  else
  {
    if(WaveCtrlData.bps==16)
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <Fill_WAV_Buffer+0x280>)
 8002f52:	8b5b      	ldrh	r3, [r3, #26]
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d14b      	bne.n	8002ff0 <Fill_WAV_Buffer+0x29c>
    {
      NeedReadSize=size/2;                                      //Number of bytes to read
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	617b      	str	r3, [r7, #20]
      res = f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);  //Read data
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	491e      	ldr	r1, [pc, #120]	; (8002fe0 <Fill_WAV_Buffer+0x28c>)
 8002f68:	481b      	ldr	r0, [pc, #108]	; (8002fd8 <Fill_WAV_Buffer+0x284>)
 8002f6a:	f00f fe77 	bl	8012c5c <f_read>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	76fb      	strb	r3, [r7, #27]
      p=TempBuf;
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <Fill_WAV_Buffer+0x28c>)
 8002f74:	623b      	str	r3, [r7, #32]
      ReadSize=ReadSize*2;                                      //Size of data after fill
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
      for(i=0;i<ReadSize;)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f80:	e020      	b.n	8002fc4 <Fill_WAV_Buffer+0x270>
      {
        BUFF[i]=p[0];
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	4413      	add	r3, r2
 8002f88:	6a3a      	ldr	r2, [r7, #32]
 8002f8a:	7812      	ldrb	r2, [r2, #0]
 8002f8c:	701a      	strb	r2, [r3, #0]
        BUFF[i+1]=p[1];
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	3301      	adds	r3, #1
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	6a3a      	ldr	r2, [r7, #32]
 8002f98:	7852      	ldrb	r2, [r2, #1]
 8002f9a:	701a      	strb	r2, [r3, #0]
        BUFF[i+2]=p[0];
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	6a3a      	ldr	r2, [r7, #32]
 8002fa6:	7812      	ldrb	r2, [r2, #0]
 8002fa8:	701a      	strb	r2, [r3, #0]
        BUFF[i+3]=p[1];
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	3303      	adds	r3, #3
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	6a3a      	ldr	r2, [r7, #32]
 8002fb4:	7852      	ldrb	r2, [r2, #1]
 8002fb6:	701a      	strb	r2, [r3, #0]
        i+=4;
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	3304      	adds	r3, #4
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
        p=p+2;
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	623b      	str	r3, [r7, #32]
      for(i=0;i<ReadSize;)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d3da      	bcc.n	8002f82 <Fill_WAV_Buffer+0x22e>
 8002fcc:	e113      	b.n	80031f6 <Fill_WAV_Buffer+0x4a2>
 8002fce:	bf00      	nop
 8002fd0:	20001fe3 	.word	0x20001fe3
 8002fd4:	20003018 	.word	0x20003018
 8002fd8:	20001fe8 	.word	0x20001fe8
 8002fdc:	0801a7f0 	.word	0x0801a7f0
 8002fe0:	2000fe88 	.word	0x2000fe88
 8002fe4:	aaaaaaab 	.word	0xaaaaaaab
 8002fe8:	4f000000 	.word	0x4f000000
 8002fec:	0801a808 	.word	0x0801a808
      }
    }
    else if(WaveCtrlData.bps==24)                                 //24-bit audio
 8002ff0:	4b93      	ldr	r3, [pc, #588]	; (8003240 <Fill_WAV_Buffer+0x4ec>)
 8002ff2:	8b5b      	ldrh	r3, [r3, #26]
 8002ff4:	2b18      	cmp	r3, #24
 8002ff6:	d15c      	bne.n	80030b2 <Fill_WAV_Buffer+0x35e>
    {
      NeedReadSize=(size/8)*3;                                  //Number of bytes to read
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	08db      	lsrs	r3, r3, #3
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
      res = f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);  //Read data
 8003008:	f107 030c 	add.w	r3, r7, #12
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	498d      	ldr	r1, [pc, #564]	; (8003244 <Fill_WAV_Buffer+0x4f0>)
 8003010:	488d      	ldr	r0, [pc, #564]	; (8003248 <Fill_WAV_Buffer+0x4f4>)
 8003012:	f00f fe23 	bl	8012c5c <f_read>
 8003016:	4603      	mov	r3, r0
 8003018:	76fb      	strb	r3, [r7, #27]
      p=TempBuf;
 800301a:	4b8a      	ldr	r3, [pc, #552]	; (8003244 <Fill_WAV_Buffer+0x4f0>)
 800301c:	623b      	str	r3, [r7, #32]
      ReadSize=(ReadSize/3)*8;                                  //Size of data after fill
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a8a      	ldr	r2, [pc, #552]	; (800324c <Fill_WAV_Buffer+0x4f8>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	60fb      	str	r3, [r7, #12]
      for(i=0;i<ReadSize;)
 800302c:	2300      	movs	r3, #0
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
 8003030:	e03a      	b.n	80030a8 <Fill_WAV_Buffer+0x354>
      {
        BUFF[i]=p[1];
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	4413      	add	r3, r2
 8003038:	6a3a      	ldr	r2, [r7, #32]
 800303a:	7852      	ldrb	r2, [r2, #1]
 800303c:	701a      	strb	r2, [r3, #0]
        BUFF[i+1]=p[2];
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	3301      	adds	r3, #1
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	6a3a      	ldr	r2, [r7, #32]
 8003048:	7892      	ldrb	r2, [r2, #2]
 800304a:	701a      	strb	r2, [r3, #0]
        BUFF[i+2]=0;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	3302      	adds	r3, #2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
        BUFF[i+3]=p[0];
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	3303      	adds	r3, #3
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	6a3a      	ldr	r2, [r7, #32]
 8003062:	7812      	ldrb	r2, [r2, #0]
 8003064:	701a      	strb	r2, [r3, #0]
        BUFF[i+4]=p[1];
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	3304      	adds	r3, #4
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	6a3a      	ldr	r2, [r7, #32]
 8003070:	7852      	ldrb	r2, [r2, #1]
 8003072:	701a      	strb	r2, [r3, #0]
        BUFF[i+5]=p[2];
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	3305      	adds	r3, #5
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	6a3a      	ldr	r2, [r7, #32]
 800307e:	7892      	ldrb	r2, [r2, #2]
 8003080:	701a      	strb	r2, [r3, #0]
        BUFF[i+6]=0;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	3306      	adds	r3, #6
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4413      	add	r3, r2
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
        BUFF[i+7]=p[0];
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	3307      	adds	r3, #7
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	6a3a      	ldr	r2, [r7, #32]
 8003098:	7812      	ldrb	r2, [r2, #0]
 800309a:	701a      	strb	r2, [r3, #0]
        p+=3;
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	3303      	adds	r3, #3
 80030a0:	623b      	str	r3, [r7, #32]
        i+=8;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	3308      	adds	r3, #8
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
      for(i=0;i<ReadSize;)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d3c0      	bcc.n	8003032 <Fill_WAV_Buffer+0x2de>
 80030b0:	e0a1      	b.n	80031f6 <Fill_WAV_Buffer+0x4a2>
      }
    }
    else if(WaveCtrlData.bps==8)                                //8-bit audio
 80030b2:	4b63      	ldr	r3, [pc, #396]	; (8003240 <Fill_WAV_Buffer+0x4ec>)
 80030b4:	8b5b      	ldrh	r3, [r3, #26]
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d13c      	bne.n	8003134 <Fill_WAV_Buffer+0x3e0>
    {
      NeedReadSize=size/4;                                      //Number of bytes to read
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	b29b      	uxth	r3, r3
 80030c0:	617b      	str	r3, [r7, #20]
      res = f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);  //Read data
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	495e      	ldr	r1, [pc, #376]	; (8003244 <Fill_WAV_Buffer+0x4f0>)
 80030ca:	485f      	ldr	r0, [pc, #380]	; (8003248 <Fill_WAV_Buffer+0x4f4>)
 80030cc:	f00f fdc6 	bl	8012c5c <f_read>
 80030d0:	4603      	mov	r3, r0
 80030d2:	76fb      	strb	r3, [r7, #27]
      p=TempBuf;
 80030d4:	4b5b      	ldr	r3, [pc, #364]	; (8003244 <Fill_WAV_Buffer+0x4f0>)
 80030d6:	623b      	str	r3, [r7, #32]
      ReadSize=ReadSize*4;                                      //Size of data after fill
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	60fb      	str	r3, [r7, #12]
      for(i=0;i<ReadSize;)
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	e022      	b.n	800312a <Fill_WAV_Buffer+0x3d6>
      {
        BUFF[i]=0;
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	4413      	add	r3, r2
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
        BUFF[i+1]=*p+0x80;
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	3301      	adds	r3, #1
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	440b      	add	r3, r1
 80030fa:	3a80      	subs	r2, #128	; 0x80
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	701a      	strb	r2, [r3, #0]
        BUFF[i+2]=0;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	3302      	adds	r3, #2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4413      	add	r3, r2
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
        BUFF[i+3]=*p+0x80;
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	3303      	adds	r3, #3
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	440b      	add	r3, r1
 8003118:	3a80      	subs	r2, #128	; 0x80
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]
        i+=4;
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	3304      	adds	r3, #4
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
        p++;
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	3301      	adds	r3, #1
 8003128:	623b      	str	r3, [r7, #32]
      for(i=0;i<ReadSize;)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	429a      	cmp	r2, r3
 8003130:	d3d8      	bcc.n	80030e4 <Fill_WAV_Buffer+0x390>
 8003132:	e060      	b.n	80031f6 <Fill_WAV_Buffer+0x4a2>
      }
    }
    else                                                        //32-bit audio
    {
      NeedReadSize=size/2;                                      //Number of bytes to read
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	b29b      	uxth	r3, r3
 800313a:	617b      	str	r3, [r7, #20]
      res = f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);  //Read data
 800313c:	f107 030c 	add.w	r3, r7, #12
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4940      	ldr	r1, [pc, #256]	; (8003244 <Fill_WAV_Buffer+0x4f0>)
 8003144:	4840      	ldr	r0, [pc, #256]	; (8003248 <Fill_WAV_Buffer+0x4f4>)
 8003146:	f00f fd89 	bl	8012c5c <f_read>
 800314a:	4603      	mov	r3, r0
 800314c:	76fb      	strb	r3, [r7, #27]
      f=(float*)TempBuf;
 800314e:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <Fill_WAV_Buffer+0x4f0>)
 8003150:	61fb      	str	r3, [r7, #28]
      ReadSize=ReadSize*2;                                      //Size of data after fill
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
      for(i=0;i<ReadSize;)
 8003158:	2300      	movs	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
 800315c:	e047      	b.n	80031ee <Fill_WAV_Buffer+0x49a>
      {
        sound=0x7FFFFFFF*(*f);
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003250 <Fill_WAV_Buffer+0x4fc>
 8003168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800316c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003170:	ee17 3a90 	vmov	r3, s15
 8003174:	613b      	str	r3, [r7, #16]
        BUFF[i+4] = BUFF[i]   = (uint8_t)(sound>>16);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1419      	asrs	r1, r3, #16
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	4413      	add	r3, r2
 8003180:	b2ca      	uxtb	r2, r1
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003186:	3204      	adds	r2, #4
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	440a      	add	r2, r1
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	7013      	strb	r3, [r2, #0]
        BUFF[i+5] = BUFF[i+1] = (uint8_t)(sound>>24);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1619      	asrs	r1, r3, #24
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	3301      	adds	r3, #1
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	b2ca      	uxtb	r2, r1
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a2:	3205      	adds	r2, #5
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	440a      	add	r2, r1
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	7013      	strb	r3, [r2, #0]
        BUFF[i+6] = BUFF[i+2] = (uint8_t)(sound);
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	3302      	adds	r3, #2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	3206      	adds	r2, #6
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	440a      	add	r2, r1
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	7013      	strb	r3, [r2, #0]
        BUFF[i+7] = BUFF[i+3] = (uint8_t)(sound>>8);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1219      	asrs	r1, r3, #8
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	3303      	adds	r3, #3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	b2ca      	uxtb	r2, r1
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d8:	3207      	adds	r2, #7
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	440a      	add	r2, r1
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	7013      	strb	r3, [r2, #0]
        f++;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3304      	adds	r3, #4
 80031e6:	61fb      	str	r3, [r7, #28]
        i=i+8;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	3308      	adds	r3, #8
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
      for(i=0;i<ReadSize;)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d3b3      	bcc.n	800315e <Fill_WAV_Buffer+0x40a>
      }
    }
  }
  if(ReadSize<size)   //Data is not enough, supplementary '0'
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d913      	bls.n	8003226 <Fill_WAV_Buffer+0x4d2>
  {
    EndFileFlag=1;
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <Fill_WAV_Buffer+0x500>)
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]
    for(i=ReadSize;i<size-ReadSize;i++)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
 8003208:	e007      	b.n	800321a <Fill_WAV_Buffer+0x4c6>
      BUFF[i] = 0;
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	4413      	add	r3, r2
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
    for(i=ReadSize;i<size-ReadSize;i++)
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	3301      	adds	r3, #1
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	429a      	cmp	r2, r3
 8003224:	d3f1      	bcc.n	800320a <Fill_WAV_Buffer+0x4b6>
  }
  res |= f_sync(&WAV_File);
 8003226:	4808      	ldr	r0, [pc, #32]	; (8003248 <Fill_WAV_Buffer+0x4f4>)
 8003228:	f00f fe77 	bl	8012f1a <f_sync>
 800322c:	4603      	mov	r3, r0
 800322e:	461a      	mov	r2, r3
 8003230:	7efb      	ldrb	r3, [r7, #27]
 8003232:	4313      	orrs	r3, r2
 8003234:	76fb      	strb	r3, [r7, #27]
  return res;
 8003236:	7efb      	ldrb	r3, [r7, #27]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3728      	adds	r7, #40	; 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20003018 	.word	0x20003018
 8003244:	2000fe88 	.word	0x2000fe88
 8003248:	20001fe8 	.word	0x20001fe8
 800324c:	aaaaaaab 	.word	0xaaaaaaab
 8003250:	4f000000 	.word	0x4f000000
 8003254:	20001fe3 	.word	0x20001fe3

08003258 <PlayWaveFile>:
  * @brief  Play the WAV file that set the path.
  * @param  path: Path of the WAV file.
  * @retval None
  */
uint8_t PlayWaveFile(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0

  uint8_t res;
  FRESULT f_res;
  uint8_t retry;
  static uint16_t current_MusicNum = 0;
  CloseFileFlag = 0;
 800325e:	4b81      	ldr	r3, [pc, #516]	; (8003464 <PlayWaveFile+0x20c>)
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
  EndFileFlag = 0;
 8003264:	4b80      	ldr	r3, [pc, #512]	; (8003468 <PlayWaveFile+0x210>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
  FillBufFlag = 0xFF;
 800326a:	4b80      	ldr	r3, [pc, #512]	; (800346c <PlayWaveFile+0x214>)
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	701a      	strb	r2, [r3, #0]
  Audio.PlaySong = false;
 8003270:	4b7f      	ldr	r3, [pc, #508]	; (8003470 <PlayWaveFile+0x218>)
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
  Audio.EndSong = false;
 8003276:	4b7e      	ldr	r3, [pc, #504]	; (8003470 <PlayWaveFile+0x218>)
 8003278:	2200      	movs	r2, #0
 800327a:	705a      	strb	r2, [r3, #1]
  I2S_Flag = I2S_No_CallBack;
 800327c:	4b7d      	ldr	r3, [pc, #500]	; (8003474 <PlayWaveFile+0x21c>)
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
  osSemaphoreWait(binSemaphoreDisplayHandle, osWaitForever);
 8003282:	4b7d      	ldr	r3, [pc, #500]	; (8003478 <PlayWaveFile+0x220>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f04f 31ff 	mov.w	r1, #4294967295
 800328a:	4618      	mov	r0, r3
 800328c:	f010 fc70 	bl	8013b70 <osSemaphoreWait>
  current_MusicNum = Audio.CurrentSong;
 8003290:	4b77      	ldr	r3, [pc, #476]	; (8003470 <PlayWaveFile+0x218>)
 8003292:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003296:	f8b3 21d4 	ldrh.w	r2, [r3, #468]	; 0x1d4
 800329a:	4b78      	ldr	r3, [pc, #480]	; (800347c <PlayWaveFile+0x224>)
 800329c:	801a      	strh	r2, [r3, #0]
  printf("Now Playing: %s\r\n",Audio.PlayList[current_MusicNum]);
 800329e:	4b77      	ldr	r3, [pc, #476]	; (800347c <PlayWaveFile+0x224>)
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	2332      	movs	r3, #50	; 0x32
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	4a71      	ldr	r2, [pc, #452]	; (8003470 <PlayWaveFile+0x218>)
 80032ac:	4413      	add	r3, r2
 80032ae:	3304      	adds	r3, #4
 80032b0:	4619      	mov	r1, r3
 80032b2:	4873      	ldr	r0, [pc, #460]	; (8003480 <PlayWaveFile+0x228>)
 80032b4:	f014 fda8 	bl	8017e08 <iprintf>
  Get_WAV_Message(Audio.PlayList[current_MusicNum],&WaveCtrlData);    //Get the messages of the WAV file
 80032b8:	4b70      	ldr	r3, [pc, #448]	; (800347c <PlayWaveFile+0x224>)
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	2332      	movs	r3, #50	; 0x32
 80032c0:	fb02 f303 	mul.w	r3, r2, r3
 80032c4:	4a6a      	ldr	r2, [pc, #424]	; (8003470 <PlayWaveFile+0x218>)
 80032c6:	4413      	add	r3, r2
 80032c8:	3304      	adds	r3, #4
 80032ca:	496e      	ldr	r1, [pc, #440]	; (8003484 <PlayWaveFile+0x22c>)
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fbfb 	bl	8002ac8 <Get_WAV_Message>
  Display.DurationTime = WaveCtrlData.totsec;
 80032d2:	4b6c      	ldr	r3, [pc, #432]	; (8003484 <PlayWaveFile+0x22c>)
 80032d4:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80032d8:	4a6b      	ldr	r2, [pc, #428]	; (8003488 <PlayWaveFile+0x230>)
 80032da:	6193      	str	r3, [r2, #24]
  Display.CurrentTime = 0;
 80032dc:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <PlayWaveFile+0x230>)
 80032de:	2200      	movs	r2, #0
 80032e0:	605a      	str	r2, [r3, #4]
  printf("Display.DurationTime = %ld, Display.CurrentTime = %ld\n", Display.DurationTime, Display.CurrentTime);
 80032e2:	4b69      	ldr	r3, [pc, #420]	; (8003488 <PlayWaveFile+0x230>)
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	4a68      	ldr	r2, [pc, #416]	; (8003488 <PlayWaveFile+0x230>)
 80032e8:	6852      	ldr	r2, [r2, #4]
 80032ea:	4619      	mov	r1, r3
 80032ec:	4867      	ldr	r0, [pc, #412]	; (800348c <PlayWaveFile+0x234>)
 80032ee:	f014 fd8b 	bl	8017e08 <iprintf>
  HAL_TIM_Base_Start_IT(&htim2);
 80032f2:	4867      	ldr	r0, [pc, #412]	; (8003490 <PlayWaveFile+0x238>)
 80032f4:	f00a fae4 	bl	800d8c0 <HAL_TIM_Base_Start_IT>
  osSemaphoreRelease(binSemaphoreDisplayHandle);
 80032f8:	4b5f      	ldr	r3, [pc, #380]	; (8003478 <PlayWaveFile+0x220>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f010 fc85 	bl	8013c0c <osSemaphoreRelease>
  WAV_OFFSET = WaveCtrlData.datastart;
 8003302:	4b60      	ldr	r3, [pc, #384]	; (8003484 <PlayWaveFile+0x22c>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	4a63      	ldr	r2, [pc, #396]	; (8003494 <PlayWaveFile+0x23c>)
 8003308:	6013      	str	r3, [r2, #0]

  /*Start Play Music*/
  f_lseek(&WAV_File, WAV_OFFSET);
 800330a:	4b62      	ldr	r3, [pc, #392]	; (8003494 <PlayWaveFile+0x23c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4619      	mov	r1, r3
 8003310:	4861      	ldr	r0, [pc, #388]	; (8003498 <PlayWaveFile+0x240>)
 8003312:	f00f feaa 	bl	801306a <f_lseek>
  Fill_WAV_Buffer(WAV_Buffer, WAV_BUFFER_SIZE);
 8003316:	f649 4140 	movw	r1, #40000	; 0x9c40
 800331a:	4860      	ldr	r0, [pc, #384]	; (800349c <PlayWaveFile+0x244>)
 800331c:	f7ff fd1a 	bl	8002d54 <Fill_WAV_Buffer>
  WAV_OFFSET += WAV_BUFFER_SIZE;
 8003320:	4b5c      	ldr	r3, [pc, #368]	; (8003494 <PlayWaveFile+0x23c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003328:	3340      	adds	r3, #64	; 0x40
 800332a:	4a5a      	ldr	r2, [pc, #360]	; (8003494 <PlayWaveFile+0x23c>)
 800332c:	6013      	str	r3, [r2, #0]
  while(Audio.EndSong == false)
 800332e:	e07a      	b.n	8003426 <PlayWaveFile+0x1ce>
  {
    while(Audio.PlaySong == true)
    {
      //osThreadSuspend(updateScreenLCDTaskHandle);
      osThreadSetPriority(playAudioTaskHandle, osPriorityRealtime);
 8003330:	4b5b      	ldr	r3, [pc, #364]	; (80034a0 <PlayWaveFile+0x248>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2103      	movs	r1, #3
 8003336:	4618      	mov	r0, r3
 8003338:	f010 fbb1 	bl	8013a9e <osThreadSetPriority>
      retry = 5;
 800333c:	2305      	movs	r3, #5
 800333e:	71fb      	strb	r3, [r7, #7]
      do
      {
        // preparing data to transmit before DMA completed
        f_res = f_lseek(&WAV_File, WAV_OFFSET);
 8003340:	4b54      	ldr	r3, [pc, #336]	; (8003494 <PlayWaveFile+0x23c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	4854      	ldr	r0, [pc, #336]	; (8003498 <PlayWaveFile+0x240>)
 8003348:	f00f fe8f 	bl	801306a <f_lseek>
 800334c:	4603      	mov	r3, r0
 800334e:	717b      	strb	r3, [r7, #5]
        f_res |= Fill_WAV_Buffer(WAV_HalfBuffer, WAV_BUFFER_SIZE / 2);
 8003350:	4b54      	ldr	r3, [pc, #336]	; (80034a4 <PlayWaveFile+0x24c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fcfb 	bl	8002d54 <Fill_WAV_Buffer>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	797b      	ldrb	r3, [r7, #5]
 8003364:	4313      	orrs	r3, r2
 8003366:	717b      	strb	r3, [r7, #5]
      }
      while(f_res != FR_OK && --retry);// try 5 times to make sure read buffer of SD Card
 8003368:	797b      	ldrb	r3, [r7, #5]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <PlayWaveFile+0x122>
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	3b01      	subs	r3, #1
 8003372:	71fb      	strb	r3, [r7, #7]
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e2      	bne.n	8003340 <PlayWaveFile+0xe8>
      if(f_res != FR_OK)
 800337a:	797b      	ldrb	r3, [r7, #5]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <PlayWaveFile+0x13e>
      {
        printf("Failed times: %ld\r\n", ++stabilityTest);
 8003380:	4b49      	ldr	r3, [pc, #292]	; (80034a8 <PlayWaveFile+0x250>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3301      	adds	r3, #1
 8003386:	4a48      	ldr	r2, [pc, #288]	; (80034a8 <PlayWaveFile+0x250>)
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <PlayWaveFile+0x250>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4619      	mov	r1, r3
 8003390:	4846      	ldr	r0, [pc, #280]	; (80034ac <PlayWaveFile+0x254>)
 8003392:	f014 fd39 	bl	8017e08 <iprintf>
        //break;
      }
      WAV_OFFSET += WAV_BUFFER_SIZE / 2;
 8003396:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <PlayWaveFile+0x23c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800339e:	3320      	adds	r3, #32
 80033a0:	4a3c      	ldr	r2, [pc, #240]	; (8003494 <PlayWaveFile+0x23c>)
 80033a2:	6013      	str	r3, [r2, #0]
      I2S_Flag = I2S_No_CallBack;
 80033a4:	4b33      	ldr	r3, [pc, #204]	; (8003474 <PlayWaveFile+0x21c>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
      osThreadSetPriority(playAudioTaskHandle, osPriorityNormal);
 80033aa:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <PlayWaveFile+0x248>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f010 fb74 	bl	8013a9e <osThreadSetPriority>
      //osThreadResume(updateScreenLCDTaskHandle);
      while(I2S_Flag == I2S_No_CallBack)
 80033b6:	e000      	b.n	80033ba <PlayWaveFile+0x162>
      {
        // waiting for DMA transmit completed
        asm("NOP");
 80033b8:	bf00      	nop
      while(I2S_Flag == I2S_No_CallBack)
 80033ba:	4b2e      	ldr	r3, [pc, #184]	; (8003474 <PlayWaveFile+0x21c>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f9      	beq.n	80033b8 <PlayWaveFile+0x160>
      }
      if(I2S_Flag == I2S_Half_Callback)
 80033c4:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <PlayWaveFile+0x21c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d108      	bne.n	80033e0 <PlayWaveFile+0x188>
      {
        // Copy half first buffer to WAV_Buffer
        memcpy(WAV_Buffer, WAV_HalfBuffer, WAV_BUFFER_SIZE / 2);
 80033ce:	4b35      	ldr	r3, [pc, #212]	; (80034a4 <PlayWaveFile+0x24c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80033d6:	4619      	mov	r1, r3
 80033d8:	4830      	ldr	r0, [pc, #192]	; (800349c <PlayWaveFile+0x244>)
 80033da:	f014 f895 	bl	8017508 <memcpy>
 80033de:	e013      	b.n	8003408 <PlayWaveFile+0x1b0>
      }
      else if(I2S_Flag == I2S_Callback)
 80033e0:	4b24      	ldr	r3, [pc, #144]	; (8003474 <PlayWaveFile+0x21c>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d10e      	bne.n	8003408 <PlayWaveFile+0x1b0>
      {
        // Copy half remaining buffer to WAV_Buffer
        memcpy(WAV_Buffer + WAV_BUFFER_SIZE / 2, WAV_HalfBuffer, WAV_BUFFER_SIZE / 2);
 80033ea:	4831      	ldr	r0, [pc, #196]	; (80034b0 <PlayWaveFile+0x258>)
 80033ec:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <PlayWaveFile+0x24c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80033f4:	4619      	mov	r1, r3
 80033f6:	f014 f887 	bl	8017508 <memcpy>
        WAV_LastData -= WAV_BUFFER_SIZE;
 80033fa:	4b2e      	ldr	r3, [pc, #184]	; (80034b4 <PlayWaveFile+0x25c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8003402:	3b40      	subs	r3, #64	; 0x40
 8003404:	4a2b      	ldr	r2, [pc, #172]	; (80034b4 <PlayWaveFile+0x25c>)
 8003406:	6013      	str	r3, [r2, #0]
    while(Audio.PlaySong == true)
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <PlayWaveFile+0x218>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d18f      	bne.n	8003330 <PlayWaveFile+0xd8>
        //Key_Control();
      }


    }
    Audio.PlaySong = true;
 8003410:	4b17      	ldr	r3, [pc, #92]	; (8003470 <PlayWaveFile+0x218>)
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
#ifdef AUDIO_USE_I2S
    HAL_I2S_Transmit_DMA(&hi2s5,WAV_Buffer_16, WAV_BUFFER_SIZE / 2);
 8003416:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <PlayWaveFile+0x260>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800341e:	4619      	mov	r1, r3
 8003420:	4826      	ldr	r0, [pc, #152]	; (80034bc <PlayWaveFile+0x264>)
 8003422:	f006 fd9f 	bl	8009f64 <HAL_I2S_Transmit_DMA>
  while(Audio.EndSong == false)
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <PlayWaveFile+0x218>)
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	f083 0301 	eor.w	r3, r3, #1
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e9      	bne.n	8003408 <PlayWaveFile+0x1b0>
#elif AUDIO_USE_SAI
    HAL_SAI_Transmit_DMA(&hsai_BlockB1,WAV_Buffer, WAV_BUFFER_SIZE/2);
#endif
  }
  printf("End Play: %s\r\n",Audio.PlayList[current_MusicNum]);
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <PlayWaveFile+0x224>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	2332      	movs	r3, #50	; 0x32
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <PlayWaveFile+0x218>)
 8003442:	4413      	add	r3, r2
 8003444:	3304      	adds	r3, #4
 8003446:	4619      	mov	r1, r3
 8003448:	481d      	ldr	r0, [pc, #116]	; (80034c0 <PlayWaveFile+0x268>)
 800344a:	f014 fcdd 	bl	8017e08 <iprintf>
  res = f_close(&WAV_File);
 800344e:	4812      	ldr	r0, [pc, #72]	; (8003498 <PlayWaveFile+0x240>)
 8003450:	f00f fde1 	bl	8013016 <f_close>
 8003454:	4603      	mov	r3, r0
 8003456:	71bb      	strb	r3, [r7, #6]

  return res;
 8003458:	79bb      	ldrb	r3, [r7, #6]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20001fe2 	.word	0x20001fe2
 8003468:	20001fe3 	.word	0x20001fe3
 800346c:	20001fe4 	.word	0x20001fe4
 8003470:	2000cc84 	.word	0x2000cc84
 8003474:	2000cc80 	.word	0x2000cc80
 8003478:	20000b64 	.word	0x20000b64
 800347c:	20014ca8 	.word	0x20014ca8
 8003480:	0801a814 	.word	0x0801a814
 8003484:	20003018 	.word	0x20003018
 8003488:	20014cb8 	.word	0x20014cb8
 800348c:	0801a828 	.word	0x0801a828
 8003490:	20001f00 	.word	0x20001f00
 8003494:	2000cc78 	.word	0x2000cc78
 8003498:	20001fe8 	.word	0x20001fe8
 800349c:	20003038 	.word	0x20003038
 80034a0:	20000b68 	.word	0x20000b68
 80034a4:	20000008 	.word	0x20000008
 80034a8:	20014cac 	.word	0x20014cac
 80034ac:	0801a860 	.word	0x0801a860
 80034b0:	20007e58 	.word	0x20007e58
 80034b4:	2000cc7c 	.word	0x2000cc7c
 80034b8:	20000004 	.word	0x20000004
 80034bc:	20001c70 	.word	0x20001c70
 80034c0:	0801a874 	.word	0x0801a874

080034c4 <HAL_I2S_TxHalfCpltCallback>:
  * @param  fname: name of the file you want to get its massage.
  * @param  wavx: the struct of data control.
  * @retval None
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  //printf("I2S_Half_Callback !!\r\n");
  I2S_Flag = I2S_Half_Callback;
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]

}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	2000cc80 	.word	0x2000cc80

080034e4 <HAL_I2S_TxCpltCallback>:


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  //printf("I2S_Callback !!\r\n");
  I2S_Flag = I2S_Callback;
 80034ec:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <HAL_I2S_TxCpltCallback+0x40>)
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]

  if(WAV_LastData >= WAV_BUFFER_SIZE)
 80034f2:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <HAL_I2S_TxCpltCallback+0x44>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d908      	bls.n	8003510 <HAL_I2S_TxCpltCallback+0x2c>
  {
    HAL_I2S_Transmit_DMA(&hi2s5,WAV_Buffer_16, WAV_BUFFER_SIZE/2);
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_I2S_TxCpltCallback+0x48>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003506:	4619      	mov	r1, r3
 8003508:	4809      	ldr	r0, [pc, #36]	; (8003530 <HAL_I2S_TxCpltCallback+0x4c>)
 800350a:	f006 fd2b 	bl	8009f64 <HAL_I2S_Transmit_DMA>
  else
  {
    Audio.PlaySong = false;
    Audio.EndSong = true;
  }
}
 800350e:	e005      	b.n	800351c <HAL_I2S_TxCpltCallback+0x38>
    Audio.PlaySong = false;
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <HAL_I2S_TxCpltCallback+0x50>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
    Audio.EndSong = true;
 8003516:	4b07      	ldr	r3, [pc, #28]	; (8003534 <HAL_I2S_TxCpltCallback+0x50>)
 8003518:	2201      	movs	r2, #1
 800351a:	705a      	strb	r2, [r3, #1]
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	2000cc80 	.word	0x2000cc80
 8003528:	2000cc7c 	.word	0x2000cc7c
 800352c:	20000004 	.word	0x20000004
 8003530:	20001c70 	.word	0x20001c70
 8003534:	2000cc84 	.word	0x2000cc84

08003538 <WM8960_Write_Reg>:
  * @brief  Write register of WM8960.
  * @param  reg: The number of resigter which to be read.
  * @param  dat: The data which will be writeen to the register.
  * @retval The value of regsiter.
  */
uint8_t WM8960_Write_Reg(uint8_t reg, uint16_t dat)  {
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af02      	add	r7, sp, #8
 800353e:	4603      	mov	r3, r0
 8003540:	460a      	mov	r2, r1
 8003542:	71fb      	strb	r3, [r7, #7]
 8003544:	4613      	mov	r3, r2
 8003546:	80bb      	strh	r3, [r7, #4]

  uint8_t res,I2C_Data[2];

  I2C_Data[0] = (reg<<1)|((uint8_t)((dat>>8)&0x0001));  //RegAddr
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	b25a      	sxtb	r2, r3
 800354e:	88bb      	ldrh	r3, [r7, #4]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	b29b      	uxth	r3, r3
 8003554:	b25b      	sxtb	r3, r3
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	b25b      	sxtb	r3, r3
 800355c:	4313      	orrs	r3, r2
 800355e:	b25b      	sxtb	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	733b      	strb	r3, [r7, #12]
  I2C_Data[1] = (uint8_t)(dat&0x00FF);                  //RegValue
 8003564:	88bb      	ldrh	r3, [r7, #4]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	737b      	strb	r3, [r7, #13]

  res = HAL_I2C_Master_Transmit(&hi2c1,(WM8960_ADDRESS<<1),I2C_Data,2,1000);
 800356a:	f107 020c 	add.w	r2, r7, #12
 800356e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	2302      	movs	r3, #2
 8003576:	2134      	movs	r1, #52	; 0x34
 8003578:	4808      	ldr	r0, [pc, #32]	; (800359c <WM8960_Write_Reg+0x64>)
 800357a:	f005 fd61 	bl	8009040 <HAL_I2C_Master_Transmit>
 800357e:	4603      	mov	r3, r0
 8003580:	73fb      	strb	r3, [r7, #15]
  if(res == HAL_OK)
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <WM8960_Write_Reg+0x5a>
    WM8960_REG_VAL[reg] = dat;
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	4905      	ldr	r1, [pc, #20]	; (80035a0 <WM8960_Write_Reg+0x68>)
 800358c:	88ba      	ldrh	r2, [r7, #4]
 800358e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  return res;
 8003592:	7bfb      	ldrb	r3, [r7, #15]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20001c1c 	.word	0x20001c1c
 80035a0:	2000000c 	.word	0x2000000c

080035a4 <WM8960_Init_PLL>:
//|    (MHz) | (MHz)          |         |                 |                  |                      |            |        |         |
//|----------------------------------------------------------------------------------------------------------------------------------
//|    24    | 11.2896        | 90.3168 |            2    |       2          |            4         |    7.5264  |    7h  | 86C226h |
//-----------------------------------------------------------------------------------------------------------------------------------
uint8_t WM8960_Init_PLL(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
  uint8_t res;

  //Reset Device
  res = WM8960_Write_Reg(0x0f, 0x0000);
 80035aa:	2100      	movs	r1, #0
 80035ac:	200f      	movs	r0, #15
 80035ae:	f7ff ffc3 	bl	8003538 <WM8960_Write_Reg>
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  if(res != 0)
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <WM8960_Init_PLL+0x1c>
    return res;
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	e0f9      	b.n	80037b4 <WM8960_Init_PLL+0x210>
  else
    printf("WM8960 reset completed !!\r\n");
 80035c0:	487e      	ldr	r0, [pc, #504]	; (80037bc <WM8960_Init_PLL+0x218>)
 80035c2:	f014 fca7 	bl	8017f14 <puts>

  //Set Power Source
  res |=  WM8960_Write_Reg(0x19, 1<<8 | 1<<7 | 1<<6);
 80035c6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80035ca:	2019      	movs	r0, #25
 80035cc:	f7ff ffb4 	bl	8003538 <WM8960_Write_Reg>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	71fb      	strb	r3, [r7, #7]
  //res += WM8960_Write_Reg(0x1A, 1<<8 | 1<<7 | 1<<6 | 1<<5);// off speaker
  //res += WM8960_Write_Reg(0x1A, 1<<8 | 1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3);
  res |= WM8960_Write_Reg(0x2F, 1<<3 | 1<<2);
 80035da:	210c      	movs	r1, #12
 80035dc:	202f      	movs	r0, #47	; 0x2f
 80035de:	f7ff ffab 	bl	8003538 <WM8960_Write_Reg>
 80035e2:	4603      	mov	r3, r0
 80035e4:	461a      	mov	r2, r3
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	71fb      	strb	r3, [r7, #7]
//  if(res != 0)  {
//    printf("Source set fail !!\r\n");
//    printf("Error code: %d\r\n",res);
//    return res;
//  }
  res |= WM8960_Write_Reg(0x04, 0x000);
 80035ec:	2100      	movs	r1, #0
 80035ee:	2004      	movs	r0, #4
 80035f0:	f7ff ffa2 	bl	8003538 <WM8960_Write_Reg>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x1A,0x1E1);        // enable DAC and ROUTPUT LOUTPUT;bit0=1, PLL en 111100001
 80035fe:	f240 11e1 	movw	r1, #481	; 0x1e1
 8003602:	201a      	movs	r0, #26
 8003604:	f7ff ff98 	bl	8003538 <WM8960_Write_Reg>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	4313      	orrs	r3, r2
 8003610:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x04,0x005);        //DAC/ADC sample Freq = (11.2896)/(1*256)=44.1K bit[0](CLKSEL)置1：选择PLL输出的时钟（置0表示选择MCLK时钟）；bit[2:1](SYSCLKDIV)置10：分频（除以2）
 8003612:	2105      	movs	r1, #5
 8003614:	2004      	movs	r0, #4
 8003616:	f7ff ff8f 	bl	8003538 <WM8960_Write_Reg>
 800361a:	4603      	mov	r3, r0
 800361c:	461a      	mov	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	4313      	orrs	r3, r2
 8003622:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x07,0x042);  //bit6=1, Enable master mode; bit[1:0]=10,I2S Format;bit[3:2]=00,16 bits
 8003624:	2142      	movs	r1, #66	; 0x42
 8003626:	2007      	movs	r0, #7
 8003628:	f7ff ff86 	bl	8003538 <WM8960_Write_Reg>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	4313      	orrs	r3, r2
 8003634:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x08,0x1C4);     // BCLKDIV[3:0]=0100 BCLK Frequency = SYSCLK/4=11.2896/4=2.8224MHz
 8003636:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800363a:	2008      	movs	r0, #8
 800363c:	f7ff ff7c 	bl	8003538 <WM8960_Write_Reg>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	4313      	orrs	r3, r2
 8003648:	71fb      	strb	r3, [r7, #7]

  res |= WM8960_Write_Reg(0x34,0x037); //bit4(PLLPRESCALE)置1：预分频，如果MCLK=12M就不用设置该位了；bit[3:0](PLLN)置0111:设置PLLN的值；；bit5(SDM)置1：选择为小数模式；
 800364a:	2137      	movs	r1, #55	; 0x37
 800364c:	2034      	movs	r0, #52	; 0x34
 800364e:	f7ff ff73 	bl	8003538 <WM8960_Write_Reg>
 8003652:	4603      	mov	r3, r0
 8003654:	461a      	mov	r2, r3
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	4313      	orrs	r3, r2
 800365a:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x35,0x086);//bit[8:0](PLLK)置01000 0110：设置PLLK的值；
 800365c:	2186      	movs	r1, #134	; 0x86
 800365e:	2035      	movs	r0, #53	; 0x35
 8003660:	f7ff ff6a 	bl	8003538 <WM8960_Write_Reg>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	4313      	orrs	r3, r2
 800366c:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x36,0x0c2);//bit[8:0](PLLK)置01100 0010：设置PLLK的值；
 800366e:	21c2      	movs	r1, #194	; 0xc2
 8003670:	2036      	movs	r0, #54	; 0x36
 8003672:	f7ff ff61 	bl	8003538 <WM8960_Write_Reg>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	4313      	orrs	r3, r2
 800367e:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x37,0x026);//bit[8:0](PLLK)置00010 0110：设置PLLK的值；
 8003680:	2126      	movs	r1, #38	; 0x26
 8003682:	2037      	movs	r0, #55	; 0x37
 8003684:	f7ff ff58 	bl	8003538 <WM8960_Write_Reg>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	4313      	orrs	r3, r2
 8003690:	71fb      	strb	r3, [r7, #7]

  //res |= WM8960_Write_Reg(0x14,0x0f9); //NOISE GATE
  res |= WM8960_Write_Reg(0x14,0x01); //NOISE GATE
 8003692:	2101      	movs	r1, #1
 8003694:	2014      	movs	r0, #20
 8003696:	f7ff ff4f 	bl	8003538 <WM8960_Write_Reg>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x05, 0x004);
 80036a4:	2104      	movs	r1, #4
 80036a6:	2005      	movs	r0, #5
 80036a8:	f7ff ff46 	bl	8003538 <WM8960_Write_Reg>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	71fb      	strb	r3, [r7, #7]
  //Configure audio interface
  //I2S format 16 bits word length
  res |= WM8960_Write_Reg(0x07, 0x0002);
 80036b6:	2102      	movs	r1, #2
 80036b8:	2007      	movs	r0, #7
 80036ba:	f7ff ff3d 	bl	8003538 <WM8960_Write_Reg>
 80036be:	4603      	mov	r3, r0
 80036c0:	461a      	mov	r2, r3
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	71fb      	strb	r3, [r7, #7]

  //Configure HP_L and HP_R OUTPUTS
  res |= WM8960_Write_Reg(0x02, 0x005D | 0x0100);  //LOUT1 Volume Set
 80036c8:	f240 115d 	movw	r1, #349	; 0x15d
 80036cc:	2002      	movs	r0, #2
 80036ce:	f7ff ff33 	bl	8003538 <WM8960_Write_Reg>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	4313      	orrs	r3, r2
 80036da:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x03, 0x005D | 0x0100);  //ROUT1 Volume Set
 80036dc:	f240 115d 	movw	r1, #349	; 0x15d
 80036e0:	2003      	movs	r0, #3
 80036e2:	f7ff ff29 	bl	8003538 <WM8960_Write_Reg>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	71fb      	strb	r3, [r7, #7]

  //Configure SPK_RP and SPK_RN
  res |= WM8960_Write_Reg(0x28, 0x0000 | 0x0100); //Left Speaker Volume
 80036f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036f4:	2028      	movs	r0, #40	; 0x28
 80036f6:	f7ff ff1f 	bl	8003538 <WM8960_Write_Reg>
 80036fa:	4603      	mov	r3, r0
 80036fc:	461a      	mov	r2, r3
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	4313      	orrs	r3, r2
 8003702:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x29, 0x0000 | 0x0100); //Right Speaker Volume
 8003704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003708:	2029      	movs	r0, #41	; 0x29
 800370a:	f7ff ff15 	bl	8003538 <WM8960_Write_Reg>
 800370e:	4603      	mov	r3, r0
 8003710:	461a      	mov	r2, r3
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	4313      	orrs	r3, r2
 8003716:	71fb      	strb	r3, [r7, #7]

  //Enable the OUTPUTS
  res |= WM8960_Write_Reg(0x31, 0x00F7); //Enable Class D Speaker Outputs
 8003718:	21f7      	movs	r1, #247	; 0xf7
 800371a:	2031      	movs	r0, #49	; 0x31
 800371c:	f7ff ff0c 	bl	8003538 <WM8960_Write_Reg>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	4313      	orrs	r3, r2
 8003728:	71fb      	strb	r3, [r7, #7]

  //Configure DAC volume
  res |= WM8960_Write_Reg(0x0a, 0x00FF | 0x0100);
 800372a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800372e:	200a      	movs	r0, #10
 8003730:	f7ff ff02 	bl	8003538 <WM8960_Write_Reg>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	4313      	orrs	r3, r2
 800373c:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x0b, 0x00FF | 0x0100);
 800373e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003742:	200b      	movs	r0, #11
 8003744:	f7ff fef8 	bl	8003538 <WM8960_Write_Reg>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	4313      	orrs	r3, r2
 8003750:	71fb      	strb	r3, [r7, #7]
  //res |= WM8960_Write_Reg(0x10, 0x001F);

  //Configure MIXER
  //res |= WM8960_Write_Reg(0x22, 1<<8 | 1<<7);
  //res |= WM8960_Write_Reg(0x25, 1<<8 | 1<<7);
  res |= WM8960_Write_Reg(0x22, 1<<8);
 8003752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003756:	2022      	movs	r0, #34	; 0x22
 8003758:	f7ff feee 	bl	8003538 <WM8960_Write_Reg>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	4313      	orrs	r3, r2
 8003764:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x25, 1<<8);
 8003766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800376a:	2025      	movs	r0, #37	; 0x25
 800376c:	f7ff fee4 	bl	8003538 <WM8960_Write_Reg>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	4313      	orrs	r3, r2
 8003778:	71fb      	strb	r3, [r7, #7]
  //Jack Detect
  //res |= WM8960_Write_Reg(0x18, 1<<6 | 0<<5);
  res |= WM8960_Write_Reg(0x18, 1<<6);
 800377a:	2140      	movs	r1, #64	; 0x40
 800377c:	2018      	movs	r0, #24
 800377e:	f7ff fedb 	bl	8003538 <WM8960_Write_Reg>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	4313      	orrs	r3, r2
 800378a:	71fb      	strb	r3, [r7, #7]
  res |= WM8960_Write_Reg(0x17, 0x01C3);
 800378c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003790:	2017      	movs	r0, #23
 8003792:	f7ff fed1 	bl	8003538 <WM8960_Write_Reg>
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	4313      	orrs	r3, r2
 800379e:	71fb      	strb	r3, [r7, #7]
  //res |= WM8960_Write_Reg(0x30, 0x0009);//0x000D,0x0005
  res |= WM8960_Write_Reg(0x30, 0x0059);//0x000D,0x0005 // PLL lock,  JD2 used for jack detect input
 80037a0:	2159      	movs	r1, #89	; 0x59
 80037a2:	2030      	movs	r0, #48	; 0x30
 80037a4:	f7ff fec8 	bl	8003538 <WM8960_Write_Reg>
 80037a8:	4603      	mov	r3, r0
 80037aa:	461a      	mov	r2, r3
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	71fb      	strb	r3, [r7, #7]
  return res;
 80037b2:	79fb      	ldrb	r3, [r7, #7]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	0801a884 	.word	0x0801a884

080037c0 <STC3100_WriteReg>:
  * @param  buf Pointer to data buffer
  * @param  len Amount of data to be sent
  * @retval HAL status
  */
static HAL_StatusTypeDef STC3100_WriteReg(uint8_t regAddress, uint8_t *buf, uint8_t len)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b096      	sub	sp, #88	; 0x58
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	71fb      	strb	r3, [r7, #7]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  int i;
  uint8_t data[65];

  if (len>64) return HAL_ERROR;
 80037d0:	79bb      	ldrb	r3, [r7, #6]
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d901      	bls.n	80037da <STC3100_WriteReg+0x1a>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e026      	b.n	8003828 <STC3100_WriteReg+0x68>
  data[0] = regAddress;     // Register address
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	723b      	strb	r3, [r7, #8]
  for (i=0; i<len; i++)
 80037de:	2300      	movs	r3, #0
 80037e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e2:	e00c      	b.n	80037fe <STC3100_WriteReg+0x3e>
  {
    data[i+1]=buf[i]; // add data
 80037e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	441a      	add	r2, r3
 80037ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ec:	3301      	adds	r3, #1
 80037ee:	7812      	ldrb	r2, [r2, #0]
 80037f0:	3350      	adds	r3, #80	; 0x50
 80037f2:	443b      	add	r3, r7
 80037f4:	f803 2c48 	strb.w	r2, [r3, #-72]
  for (i=0; i<len; i++)
 80037f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fa:	3301      	adds	r3, #1
 80037fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037fe:	79bb      	ldrb	r3, [r7, #6]
 8003800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003802:	429a      	cmp	r2, r3
 8003804:	dbee      	blt.n	80037e4 <STC3100_WriteReg+0x24>
  }

  /** Target device address: The device 7 bits address must be shift at right before call interface */
  ret = HAL_I2C_Master_Transmit(&hi2c1, STC3100_I2C_ADDRESS << 1, data, len+1, 100);
 8003806:	79bb      	ldrb	r3, [r7, #6]
 8003808:	b29b      	uxth	r3, r3
 800380a:	3301      	adds	r3, #1
 800380c:	b29b      	uxth	r3, r3
 800380e:	f107 0208 	add.w	r2, r7, #8
 8003812:	2164      	movs	r1, #100	; 0x64
 8003814:	9100      	str	r1, [sp, #0]
 8003816:	21e0      	movs	r1, #224	; 0xe0
 8003818:	4805      	ldr	r0, [pc, #20]	; (8003830 <STC3100_WriteReg+0x70>)
 800381a:	f005 fc11 	bl	8009040 <HAL_I2C_Master_Transmit>
 800381e:	4603      	mov	r3, r0
 8003820:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  return ret;
 8003824:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
}
 8003828:	4618      	mov	r0, r3
 800382a:	3750      	adds	r7, #80	; 0x50
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20001c1c 	.word	0x20001c1c

08003834 <STC3100_ReadReg>:
  * @param  buf Pointer to data buffer
  * @param  len Amount of data to be read
  * @retval HAL status
  */
static HAL_StatusTypeDef STC3100_ReadReg(uint8_t regAddress, uint8_t *buf, uint8_t len)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af02      	add	r7, sp, #8
 800383a:	4603      	mov	r3, r0
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	71fb      	strb	r3, [r7, #7]
 8003840:	4613      	mov	r3, r2
 8003842:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;

  /** Target device address: The device 7 bits address must be shift at right before call interface */
  // first set the register pointer to the register wanted to be read
  ret = HAL_I2C_Master_Transmit(&hi2c1, STC3100_I2C_ADDRESS << 1, &regAddress, 1, 100);
 8003844:	1dfa      	adds	r2, r7, #7
 8003846:	2364      	movs	r3, #100	; 0x64
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2301      	movs	r3, #1
 800384c:	21e0      	movs	r1, #224	; 0xe0
 800384e:	480c      	ldr	r0, [pc, #48]	; (8003880 <STC3100_ReadReg+0x4c>)
 8003850:	f005 fbf6 	bl	8009040 <HAL_I2C_Master_Transmit>
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]
  if(ret == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <STC3100_ReadReg+0x40>
  {
    // receive the len x 8bit data into the receive buffer
    ret = HAL_I2C_Master_Receive(&hi2c1, STC3100_I2C_ADDRESS << 1 | 0x01, buf, len, 100);
 800385e:	79bb      	ldrb	r3, [r7, #6]
 8003860:	b29b      	uxth	r3, r3
 8003862:	2264      	movs	r2, #100	; 0x64
 8003864:	9200      	str	r2, [sp, #0]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	21e1      	movs	r1, #225	; 0xe1
 800386a:	4805      	ldr	r0, [pc, #20]	; (8003880 <STC3100_ReadReg+0x4c>)
 800386c:	f005 fce6 	bl	800923c <HAL_I2C_Master_Receive>
 8003870:	4603      	mov	r3, r0
 8003872:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20001c1c 	.word	0x20001c1c

08003884 <STC3100_Init>:

/**
 * Init the battery fuel gauge.
 */
HAL_StatusTypeDef STC3100_Init()
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	71fb      	strb	r3, [r7, #7]
  // first, check the presence of the STC3100 by reading first byte of dev. ID
//  ret = STC3100_ReadReg(STC3100_REG_ID0, &regs[0], 1);
//
//  if (ret!= 0x10) return HAL_ERROR;
  // read the REG_CTRL to reset the GG_EOC and VTM_EOC bits
  ret |= STC3100_ReadReg(STC3100_REG_CTRL, data, 1);
 800388e:	1d3b      	adds	r3, r7, #4
 8003890:	2201      	movs	r2, #1
 8003892:	4619      	mov	r1, r3
 8003894:	2001      	movs	r0, #1
 8003896:	f7ff ffcd 	bl	8003834 <STC3100_ReadReg>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	71fb      	strb	r3, [r7, #7]
  // Write mode
  data[0] = 0x10;
 80038a4:	2310      	movs	r3, #16
 80038a6:	713b      	strb	r3, [r7, #4]
  ret |= STC3100_WriteReg(STC3100_REG_MODE, data, 1);
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	2201      	movs	r2, #1
 80038ac:	4619      	mov	r1, r3
 80038ae:	2000      	movs	r0, #0
 80038b0:	f7ff ff86 	bl	80037c0 <STC3100_WriteReg>
 80038b4:	4603      	mov	r3, r0
 80038b6:	461a      	mov	r2, r3
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	71fb      	strb	r3, [r7, #7]
  // write CTRL
  data[0] = 0x02;
 80038be:	2302      	movs	r3, #2
 80038c0:	713b      	strb	r3, [r7, #4]
  ret |= STC3100_WriteReg(STC3100_REG_CTRL, data, 1);
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	2201      	movs	r2, #1
 80038c6:	4619      	mov	r1, r3
 80038c8:	2001      	movs	r0, #1
 80038ca:	f7ff ff79 	bl	80037c0 <STC3100_WriteReg>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	71fb      	strb	r3, [r7, #7]

  ret |= STC3100_ReadReg(STC3100_REG_MODE, data, 1);
 80038d8:	1d3b      	adds	r3, r7, #4
 80038da:	2201      	movs	r2, #1
 80038dc:	4619      	mov	r1, r3
 80038de:	2000      	movs	r0, #0
 80038e0:	f7ff ffa8 	bl	8003834 <STC3100_ReadReg>
 80038e4:	4603      	mov	r3, r0
 80038e6:	461a      	mov	r2, r3
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	71fb      	strb	r3, [r7, #7]
  printf("STC3100_REG_MODE = 0x%02X\n", data[0]);
 80038ee:	793b      	ldrb	r3, [r7, #4]
 80038f0:	4619      	mov	r1, r3
 80038f2:	4811      	ldr	r0, [pc, #68]	; (8003938 <STC3100_Init+0xb4>)
 80038f4:	f014 fa88 	bl	8017e08 <iprintf>
  ret |= STC3100_ReadReg(STC3100_REG_CTRL, data, 1);
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	2201      	movs	r2, #1
 80038fc:	4619      	mov	r1, r3
 80038fe:	2001      	movs	r0, #1
 8003900:	f7ff ff98 	bl	8003834 <STC3100_ReadReg>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	4313      	orrs	r3, r2
 800390c:	71fb      	strb	r3, [r7, #7]
  printf("STC3100_REG_CTRL = 0x%02X\n", data[0]);
 800390e:	793b      	ldrb	r3, [r7, #4]
 8003910:	4619      	mov	r1, r3
 8003912:	480a      	ldr	r0, [pc, #40]	; (800393c <STC3100_Init+0xb8>)
 8003914:	f014 fa78 	bl	8017e08 <iprintf>
  if(ret == HAL_OK)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <STC3100_Init+0xa2>
  {
    BatteryStatus = 0;// OK
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <STC3100_Init+0xbc>)
 8003920:	2200      	movs	r2, #0
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e002      	b.n	800392c <STC3100_Init+0xa8>
  }
  else
  {
    BatteryStatus = 1; // Not OK
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <STC3100_Init+0xbc>)
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 800392c:	79fb      	ldrb	r3, [r7, #7]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	0801a8fc 	.word	0x0801a8fc
 800393c:	0801a918 	.word	0x0801a918
 8003940:	20014cb0 	.word	0x20014cb0

08003944 <STC3100_ReadVoltage>:

/*
 * Read the battery Voltage in milivolts, return 0 if something wrong
 */
static HAL_StatusTypeDef STC3100_ReadVoltage(STC3100_INFO *bat)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint8_t data[2];

  float volt = 0;
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]

  ret = STC3100_ReadReg(STC3100_REG_VOLTL, data,2);
 8003952:	f107 0308 	add.w	r3, r7, #8
 8003956:	2202      	movs	r2, #2
 8003958:	4619      	mov	r1, r3
 800395a:	2008      	movs	r0, #8
 800395c:	f7ff ff6a 	bl	8003834 <STC3100_ReadReg>
 8003960:	4603      	mov	r3, r0
 8003962:	72fb      	strb	r3, [r7, #11]
  //printf("data[1] = 0x%02X, data[0] = 0x%02X\n", data[1], data[0]);
  // The battery voltage is coded in binary format, and the LSB value is 2.44 mV.
  if (ret == HAL_OK)
 8003964:	7afb      	ldrb	r3, [r7, #11]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d114      	bne.n	8003994 <STC3100_ReadVoltage+0x50>
  {
    volt = ((data[1] & 0x0f) << 8) + data[0];
 800396a:	7a7b      	ldrb	r3, [r7, #9]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003972:	7a3a      	ldrb	r2, [r7, #8]
 8003974:	4413      	add	r3, r2
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800397e:	edc7 7a03 	vstr	s15, [r7, #12]
    volt *= 2.44e-3f;
 8003982:	edd7 7a03 	vldr	s15, [r7, #12]
 8003986:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80039b0 <STC3100_ReadVoltage+0x6c>
 800398a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800398e:	edc7 7a03 	vstr	s15, [r7, #12]
 8003992:	e004      	b.n	800399e <STC3100_ReadVoltage+0x5a>
  }
  else
  {
    printf("Error: Cannot read STC3100\n");
 8003994:	4807      	ldr	r0, [pc, #28]	; (80039b4 <STC3100_ReadVoltage+0x70>)
 8003996:	f014 fabd 	bl	8017f14 <puts>
    volt = 0xFF;
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <STC3100_ReadVoltage+0x74>)
 800399c:	60fb      	str	r3, [r7, #12]
  }
  bat->voltage = volt;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	605a      	str	r2, [r3, #4]

  return ret;
 80039a4:	7afb      	ldrb	r3, [r7, #11]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	3b1fe868 	.word	0x3b1fe868
 80039b4:	0801a934 	.word	0x0801a934
 80039b8:	437f0000 	.word	0x437f0000

080039bc <STC3100_ReadID>:

/*
 * read the STC3100 unique ID, first byte must be 0x10
 */
static HAL_StatusTypeDef STC3100_ReadID(STC3100_INFO *bat)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  ret = STC3100_ReadReg(STC3100_REG_ID0,bat->ids,8);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3314      	adds	r3, #20
 80039c8:	2208      	movs	r2, #8
 80039ca:	4619      	mov	r1, r3
 80039cc:	2018      	movs	r0, #24
 80039ce:	f7ff ff31 	bl	8003834 <STC3100_ReadReg>
 80039d2:	4603      	mov	r3, r0
 80039d4:	73fb      	strb	r3, [r7, #15]
  return ret;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <STC3100_ReadCurrent>:
 * Return the battery average current
 * Note that current can be negative signed as well
 * Or 0 if something fails.
 */
static HAL_StatusTypeDef STC3100_ReadCurrent(STC3100_INFO *bat)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint8_t bytes[2];
  int16_t regval;
  float Acurrent = 0.0f;
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
/** The battery current is coded in 2�s complement 14 bit format, and the LSB value is 11.77 uV. */
  ret = STC3100_ReadReg(STC3100_REG_AIL,bytes,2);
 80039ee:	f107 030c 	add.w	r3, r7, #12
 80039f2:	2202      	movs	r2, #2
 80039f4:	4619      	mov	r1, r3
 80039f6:	2006      	movs	r0, #6
 80039f8:	f7ff ff1c 	bl	8003834 <STC3100_ReadReg>
 80039fc:	4603      	mov	r3, r0
 80039fe:	74fb      	strb	r3, [r7, #19]
  regval = (bytes[1]<<10) | (bytes[0] << 2);  // 16 bit signed
 8003a00:	7b7b      	ldrb	r3, [r7, #13]
 8003a02:	029b      	lsls	r3, r3, #10
 8003a04:	b21a      	sxth	r2, r3
 8003a06:	7b3b      	ldrb	r3, [r7, #12]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	b21b      	sxth	r3, r3
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	823b      	strh	r3, [r7, #16]
  regval /= 4;  // 16 to 14 bit format to get correct value
 8003a10:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	da00      	bge.n	8003a1a <STC3100_ReadCurrent+0x3a>
 8003a18:	3303      	adds	r3, #3
 8003a1a:	109b      	asrs	r3, r3, #2
 8003a1c:	823b      	strh	r3, [r7, #16]
  if (ret == HAL_OK)
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10f      	bne.n	8003a44 <STC3100_ReadCurrent+0x64>
  {
    ///current (A) = current_code * 11.77e-6 / Rsense (Ohm)
    Acurrent = (float)regval * 11.77e-6f / STC3100_RSENSE_RESISTANCE;
 8003a24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a30:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003a54 <STC3100_ReadCurrent+0x74>
 8003a34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a38:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003a58 <STC3100_ReadCurrent+0x78>
 8003a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a40:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  bat->current = Acurrent;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	609a      	str	r2, [r3, #8]

  return ret;
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	374577c4 	.word	0x374577c4
 8003a58:	3d4ccccd 	.word	0x3d4ccccd

08003a5c <STC3100_ReadRosc>:
/*
 * Return the battery Relative State-of-Charge
 * Or < 0 if something fails.
 */
static HAL_StatusTypeDef STC3100_ReadRosc(STC3100_INFO *bat)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint8_t bytes[2];
  int16_t regval;
  float Ah = -10000.0f;
 8003a64:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <STC3100_ReadRosc+0x74>)
 8003a66:	617b      	str	r3, [r7, #20]
// The charge data is coded in 2�s complement format, and the LSB value is 6.70 uV.h.
  ret = STC3100_ReadReg(STC3100_REG_RSOCL,bytes,2);
 8003a68:	f107 030c 	add.w	r3, r7, #12
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	2002      	movs	r0, #2
 8003a72:	f7ff fedf 	bl	8003834 <STC3100_ReadReg>
 8003a76:	4603      	mov	r3, r0
 8003a78:	74fb      	strb	r3, [r7, #19]
  regval = (bytes[1]<<10) | (bytes[0] << 2);  // 16 bit signed
 8003a7a:	7b7b      	ldrb	r3, [r7, #13]
 8003a7c:	029b      	lsls	r3, r3, #10
 8003a7e:	b21a      	sxth	r2, r3
 8003a80:	7b3b      	ldrb	r3, [r7, #12]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	b21b      	sxth	r3, r3
 8003a86:	4313      	orrs	r3, r2
 8003a88:	823b      	strh	r3, [r7, #16]
  regval /= 4;  // 16 to 14 bit format to get correct value
 8003a8a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	da00      	bge.n	8003a94 <STC3100_ReadRosc+0x38>
 8003a92:	3303      	adds	r3, #3
 8003a94:	109b      	asrs	r3, r3, #2
 8003a96:	823b      	strh	r3, [r7, #16]

  if (ret == HAL_OK)
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <STC3100_ReadRosc+0x62>
  {
    Ah = (float)regval * 6.70e-6f / STC3100_RSENSE_RESISTANCE;
 8003a9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aaa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003ad4 <STC3100_ReadRosc+0x78>
 8003aae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ab2:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003ad8 <STC3100_ReadRosc+0x7c>
 8003ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aba:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  bat->rsoc = Ah;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	60da      	str	r2, [r3, #12]

  return ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	c61c4000 	.word	0xc61c4000
 8003ad4:	36e0d090 	.word	0x36e0d090
 8003ad8:	3d4ccccd 	.word	0x3d4ccccd

08003adc <STC3100_ReadTemperature>:

/*
 * Return the STC3100 chip temperature or -1K if something wrong
 */
static HAL_StatusTypeDef STC3100_ReadTemperature(STC3100_INFO *bat)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint8_t bytes[2];
  int16_t regval;
  float tempdegC = -274.0f;
 8003ae4:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <STC3100_ReadTemperature+0x6c>)
 8003ae6:	617b      	str	r3, [r7, #20]
// The temperature value is coded in 2�s complement format, and the LSB value is 0.125� C.
  ret = STC3100_ReadReg(STC3100_REG_TEMPL,bytes,2);
 8003ae8:	f107 030c 	add.w	r3, r7, #12
 8003aec:	2202      	movs	r2, #2
 8003aee:	4619      	mov	r1, r3
 8003af0:	200a      	movs	r0, #10
 8003af2:	f7ff fe9f 	bl	8003834 <STC3100_ReadReg>
 8003af6:	4603      	mov	r3, r0
 8003af8:	74fb      	strb	r3, [r7, #19]
  regval = (bytes[1]<<10) | (bytes[0] << 2);  // 16 bit signed
 8003afa:	7b7b      	ldrb	r3, [r7, #13]
 8003afc:	029b      	lsls	r3, r3, #10
 8003afe:	b21a      	sxth	r2, r3
 8003b00:	7b3b      	ldrb	r3, [r7, #12]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	b21b      	sxth	r3, r3
 8003b06:	4313      	orrs	r3, r2
 8003b08:	823b      	strh	r3, [r7, #16]
  regval /= 4;  // 16 to 14 bit format to get correct value
 8003b0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	da00      	bge.n	8003b14 <STC3100_ReadTemperature+0x38>
 8003b12:	3303      	adds	r3, #3
 8003b14:	109b      	asrs	r3, r3, #2
 8003b16:	823b      	strh	r3, [r7, #16]

  if (ret == HAL_OK)
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <STC3100_ReadTemperature+0x5a>
  {
    tempdegC = (float)regval * 0.125f;
 8003b1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b2a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8003b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b32:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  bat->temperature = tempdegC;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	611a      	str	r2, [r3, #16]

  return ret;
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	c3890000 	.word	0xc3890000

08003b4c <STC3100_Get>:
  * @brief Get and update battery monitoring property
  * @param bat    pointer to Battery status structure
  * @param prop   specific property
  */
HAL_StatusTypeDef STC3100_Get(STC3100_INFO *bat, stc3100_battery_prop_t prop)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
  switch (prop)
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	d827      	bhi.n	8003bae <STC3100_Get+0x62>
 8003b5e:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <STC3100_Get+0x18>)
 8003b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b64:	08003baf 	.word	0x08003baf
 8003b68:	08003b7d 	.word	0x08003b7d
 8003b6c:	08003b87 	.word	0x08003b87
 8003b70:	08003b91 	.word	0x08003b91
 8003b74:	08003b9b 	.word	0x08003b9b
 8003b78:	08003ba5 	.word	0x08003ba5
    case BATTERY_PROP_PRESENT:

    break;

    case BATTERY_PROP_VOLTAGE_NOW:
      return STC3100_ReadVoltage(bat);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff fee1 	bl	8003944 <STC3100_ReadVoltage>
 8003b82:	4603      	mov	r3, r0
 8003b84:	e014      	b.n	8003bb0 <STC3100_Get+0x64>

    case BATTERY_PROP_CURRENT_NOW:
      return STC3100_ReadCurrent(bat);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ff2a 	bl	80039e0 <STC3100_ReadCurrent>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	e00f      	b.n	8003bb0 <STC3100_Get+0x64>

    case BATTERY_PROP_CAPACITY:
      return STC3100_ReadRosc(bat);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff63 	bl	8003a5c <STC3100_ReadRosc>
 8003b96:	4603      	mov	r3, r0
 8003b98:	e00a      	b.n	8003bb0 <STC3100_Get+0x64>

    case BATTERY_PROP_TEMP:
      return STC3100_ReadTemperature(bat);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ff9e 	bl	8003adc <STC3100_ReadTemperature>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	e005      	b.n	8003bb0 <STC3100_Get+0x64>

    case BATTERY_PROP_UNIQUEID:
      return STC3100_ReadID(bat);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff09 	bl	80039bc <STC3100_ReadID>
 8003baa:	4603      	mov	r3, r0
 8003bac:	e000      	b.n	8003bb0 <STC3100_Get+0x64>
      bat->charging = STC3100_ReadChargeStatus(bat);
    break;
#endif
  }

  return HAL_ERROR;  // unknown property
 8003bae:	2301      	movs	r3, #1

}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <Database_LoadDataSetting>:
#include "Play_wav.h"
extern __SETTING Setting;
extern AUDIO Audio;
extern volatile DISPLAY Display;
void Database_LoadDataSetting(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
  uint8_t database[DATABASE_SETTING_SIZE] = {0};
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <Database_LoadDataSetting+0x70>)
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	80bb      	strh	r3, [r7, #4]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	71bb      	strb	r3, [r7, #6]
  W25Qxx_Read(DATABASE_SETTING_BASE_ADDR, database, DATABASE_SETTING_SIZE);
 8003bc8:	1d3b      	adds	r3, r7, #4
 8003bca:	2203      	movs	r2, #3
 8003bcc:	4619      	mov	r1, r3
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f000 f964 	bl	8003e9c <W25Qxx_Read>
  for(uint8_t id = 0; id < DATABASE_SETTING_SIZE; id++)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	71fb      	strb	r3, [r7, #7]
 8003bd8:	e01e      	b.n	8003c18 <Database_LoadDataSetting+0x60>
  {
    if(database[id] == 0)
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	443b      	add	r3, r7
 8003be0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <Database_LoadDataSetting+0x42>
    {
      *((bool*)(Setting.Object[id].Event)) = false;
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <Database_LoadDataSetting+0x74>)
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	4413      	add	r3, r2
 8003bf0:	3310      	adds	r3, #16
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	e007      	b.n	8003c0a <Database_LoadDataSetting+0x52>

    }
    else
    {
      *((bool*)(Setting.Object[id].Event)) = true;
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	4a0b      	ldr	r2, [pc, #44]	; (8003c2c <Database_LoadDataSetting+0x74>)
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	4413      	add	r3, r2
 8003c02:	3310      	adds	r3, #16
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
    }
    Setting_SyncEvent(id);
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f00b fc6d 	bl	800f4ec <Setting_SyncEvent>
  for(uint8_t id = 0; id < DATABASE_SETTING_SIZE; id++)
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	3301      	adds	r3, #1
 8003c16:	71fb      	strb	r3, [r7, #7]
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d9dd      	bls.n	8003bda <Database_LoadDataSetting+0x22>
  }
}
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	0801a950 	.word	0x0801a950
 8003c2c:	200197f4 	.word	0x200197f4

08003c30 <Database_LoadDataMusic>:
void Database_LoadDataMusic(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  uint8_t database[DATABASE_MUSIC_SIZE] = {0};
 8003c36:	2300      	movs	r3, #0
 8003c38:	80bb      	strh	r3, [r7, #4]
  W25Qxx_Read(DATABASE_MUSIC_BASE_ADDR, database, DATABASE_MUSIC_SIZE);
 8003c3a:	1d3b      	adds	r3, r7, #4
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003c44:	f000 f92a 	bl	8003e9c <W25Qxx_Read>
  Audio.CurrentSong = ((uint16_t)database[1]) << 8 | database[0];
 8003c48:	797b      	ldrb	r3, [r7, #5]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	b21a      	sxth	r2, r3
 8003c4e:	793b      	ldrb	r3, [r7, #4]
 8003c50:	b21b      	sxth	r3, r3
 8003c52:	4313      	orrs	r3, r2
 8003c54:	b21b      	sxth	r3, r3
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <Database_LoadDataMusic+0x64>)
 8003c5a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003c5e:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
  if(Audio.CurrentSong >= Audio.MaxSong)
 8003c62:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <Database_LoadDataMusic+0x64>)
 8003c64:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003c68:	f8b3 21d4 	ldrh.w	r2, [r3, #468]	; 0x1d4
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <Database_LoadDataMusic+0x64>)
 8003c6e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003c72:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d307      	bcc.n	8003c8a <Database_LoadDataMusic+0x5a>
  {
    Audio.CurrentSong = 0;
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <Database_LoadDataMusic+0x64>)
 8003c7c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
    Database_SaveDataMusic();
 8003c86:	f000 f84d 	bl	8003d24 <Database_SaveDataMusic>
  }
//  Audio.PreviousSong = Audio.CurrentSong;
//  Audio_CreatePreviousSongList();
//  Display.CursorListMusic = Audio.CurrentSong;
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	2000cc84 	.word	0x2000cc84

08003c98 <Database_LoadData>:
void Database_LoadData(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  Database_LoadDataSetting();
 8003c9c:	f7ff ff8c 	bl	8003bb8 <Database_LoadDataSetting>
  Database_LoadDataMusic();
 8003ca0:	f7ff ffc6 	bl	8003c30 <Database_LoadDataMusic>
}
 8003ca4:	bf00      	nop
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <Database_SaveDataSetting>:
void Database_SaveDataSetting(uint8_t id)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
  uint8_t database[DATABASE_SETTING_SIZE] = {0};
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <Database_SaveDataSetting+0x74>)
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	81bb      	strh	r3, [r7, #12]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73bb      	strb	r3, [r7, #14]
  // Save data before erase flash
  W25Qxx_Read(DATABASE_SETTING_BASE_ADDR, database, DATABASE_SETTING_SIZE);
 8003cbc:	f107 030c 	add.w	r3, r7, #12
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f000 f8e9 	bl	8003e9c <W25Qxx_Read>
  // Erase data sector
  W25Qxx_Erase_Sector(DATABASE_SETTING_BASE_ADDR);
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f000 f9ac 	bl	8004028 <W25Qxx_Erase_Sector>
  // Preparing data
  if(*((bool*)(Setting.Object[id].Event)) == false)
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <Database_SaveDataSetting+0x78>)
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3310      	adds	r3, #16
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	f083 0301 	eor.w	r3, r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d006      	beq.n	8003cf6 <Database_SaveDataSetting+0x4e>
  {
    database[id] = 0;
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	3310      	adds	r3, #16
 8003cec:	443b      	add	r3, r7
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f803 2c04 	strb.w	r2, [r3, #-4]
 8003cf4:	e005      	b.n	8003d02 <Database_SaveDataSetting+0x5a>
  }
  else
  {
    database[id] = 1;
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	3310      	adds	r3, #16
 8003cfa:	443b      	add	r3, r7
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f803 2c04 	strb.w	r2, [r3, #-4]
  }
  // Save to flash
  W25Qxx_Write(DATABASE_SETTING_BASE_ADDR, database, DATABASE_SETTING_SIZE);
 8003d02:	f107 030c 	add.w	r3, r7, #12
 8003d06:	2203      	movs	r2, #3
 8003d08:	4619      	mov	r1, r3
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	f000 f902 	bl	8003f14 <W25Qxx_Write>
  // Reload data from flash
  Database_LoadDataSetting();
 8003d10:	f7ff ff52 	bl	8003bb8 <Database_LoadDataSetting>
}
 8003d14:	bf00      	nop
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	0801a950 	.word	0x0801a950
 8003d20:	200197f4 	.word	0x200197f4

08003d24 <Database_SaveDataMusic>:
void Database_SaveDataMusic(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
  uint8_t database[DATABASE_MUSIC_SIZE] = {0};
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	80bb      	strh	r3, [r7, #4]
  // Save data before erase flash
  W25Qxx_Read(DATABASE_MUSIC_BASE_ADDR, database, DATABASE_MUSIC_SIZE);
 8003d2e:	1d3b      	adds	r3, r7, #4
 8003d30:	2202      	movs	r2, #2
 8003d32:	4619      	mov	r1, r3
 8003d34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d38:	f000 f8b0 	bl	8003e9c <W25Qxx_Read>
  // Erase data sector
  W25Qxx_Erase_Sector(DATABASE_MUSIC_BASE_ADDR);
 8003d3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d40:	f000 f972 	bl	8004028 <W25Qxx_Erase_Sector>
  // Preparing data
  database[0] = (uint8_t)(Audio.CurrentSong & 0x00FF);
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <Database_SaveDataMusic+0x5c>)
 8003d46:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003d4a:	f8b3 31d4 	ldrh.w	r3, [r3, #468]	; 0x1d4
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	713b      	strb	r3, [r7, #4]
  database[1] = (uint8_t)((Audio.CurrentSong & 0xFF00) >> 8);
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <Database_SaveDataMusic+0x5c>)
 8003d54:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003d58:	f8b3 31d4 	ldrh.w	r3, [r3, #468]	; 0x1d4
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	717b      	strb	r3, [r7, #5]
  // Save to flash
  W25Qxx_Write(DATABASE_MUSIC_BASE_ADDR, database, DATABASE_MUSIC_SIZE);
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	2202      	movs	r2, #2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d6e:	f000 f8d1 	bl	8003f14 <W25Qxx_Write>
  // Reload data from flash
  Database_LoadDataMusic();
 8003d72:	f7ff ff5d 	bl	8003c30 <Database_LoadDataMusic>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	2000cc84 	.word	0x2000cc84

08003d84 <W25Qxx_Reset>:
/**
  * @brief  This function reset the W25Qx.
  * @retval None
  */
static void W25Qxx_Reset(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
  uint8_t cmd[2] = {RESET_ENABLE_CMD,RESET_MEMORY_CMD};
 8003d8a:	f649 1366 	movw	r3, #39270	; 0x9966
 8003d8e:	80bb      	strh	r3, [r7, #4]

  W25Qxx_Select();
 8003d90:	2200      	movs	r2, #0
 8003d92:	2110      	movs	r1, #16
 8003d94:	4809      	ldr	r0, [pc, #36]	; (8003dbc <W25Qxx_Reset+0x38>)
 8003d96:	f004 ffdd 	bl	8008d54 <HAL_GPIO_WritePin>
  /* Send the reset command */
  HAL_SPI_Transmit(&W25QXX_SPI_PORT, cmd, 2, W25QXX_TIMEOUT_VALUE);
 8003d9a:	1d39      	adds	r1, r7, #4
 8003d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003da0:	2202      	movs	r2, #2
 8003da2:	4807      	ldr	r0, [pc, #28]	; (8003dc0 <W25Qxx_Reset+0x3c>)
 8003da4:	f008 fec6 	bl	800cb34 <HAL_SPI_Transmit>
  W25Qxx_DeSelect();
 8003da8:	2201      	movs	r2, #1
 8003daa:	2110      	movs	r1, #16
 8003dac:	4803      	ldr	r0, [pc, #12]	; (8003dbc <W25Qxx_Reset+0x38>)
 8003dae:	f004 ffd1 	bl	8008d54 <HAL_GPIO_WritePin>

}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40020000 	.word	0x40020000
 8003dc0:	20001dfc 	.word	0x20001dfc

08003dc4 <W25Qxx_GetStatus>:
/**
  * @brief  Reads current status of the W25QXX.
  * @retval W25QXX memory status
  */
static uint8_t W25Qxx_GetStatus(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
  uint8_t cmd[] = {READ_STATUS_REG1_CMD};
 8003dca:	2305      	movs	r3, #5
 8003dcc:	713b      	strb	r3, [r7, #4]
  uint8_t status;

  W25Qxx_Select();
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2110      	movs	r1, #16
 8003dd2:	4811      	ldr	r0, [pc, #68]	; (8003e18 <W25Qxx_GetStatus+0x54>)
 8003dd4:	f004 ffbe 	bl	8008d54 <HAL_GPIO_WritePin>
  /* Send the read status command */
  HAL_SPI_Transmit(&W25QXX_SPI_PORT, cmd, 1, W25QXX_TIMEOUT_VALUE);
 8003dd8:	1d39      	adds	r1, r7, #4
 8003dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dde:	2201      	movs	r2, #1
 8003de0:	480e      	ldr	r0, [pc, #56]	; (8003e1c <W25Qxx_GetStatus+0x58>)
 8003de2:	f008 fea7 	bl	800cb34 <HAL_SPI_Transmit>
  /* Reception of the data */
  HAL_SPI_Receive(&W25QXX_SPI_PORT,&status, 1, W25QXX_TIMEOUT_VALUE);
 8003de6:	1cf9      	adds	r1, r7, #3
 8003de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dec:	2201      	movs	r2, #1
 8003dee:	480b      	ldr	r0, [pc, #44]	; (8003e1c <W25Qxx_GetStatus+0x58>)
 8003df0:	f008 ffdc 	bl	800cdac <HAL_SPI_Receive>
  W25Qxx_DeSelect();
 8003df4:	2201      	movs	r2, #1
 8003df6:	2110      	movs	r1, #16
 8003df8:	4807      	ldr	r0, [pc, #28]	; (8003e18 <W25Qxx_GetStatus+0x54>)
 8003dfa:	f004 ffab 	bl	8008d54 <HAL_GPIO_WritePin>

  /* Check the value of the register */
  if((status & W25QXX_FSR_BUSY) != 0)
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <W25Qxx_GetStatus+0x48>
  {
    return W25QXX_BUSY;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e000      	b.n	8003e0e <W25Qxx_GetStatus+0x4a>
  }
  else
  {
    return W25QXX_OK;
 8003e0c:	2300      	movs	r3, #0
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40020000 	.word	0x40020000
 8003e1c:	20001dfc 	.word	0x20001dfc

08003e20 <W25Qxx_Init>:
/**
  * @brief  Initializes the W25QXX interface.
  * @retval None
  */
uint8_t W25Qxx_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Reset W25Qxxx */
  W25Qxx_Reset();
 8003e24:	f7ff ffae 	bl	8003d84 <W25Qxx_Reset>

  return W25Qxx_GetStatus();
 8003e28:	f7ff ffcc 	bl	8003dc4 <W25Qxx_GetStatus>
 8003e2c:	4603      	mov	r3, r0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <W25Qxx_WriteEnable>:
/**
  * @brief  This function send a Write Enable and wait it is effective.
  * @retval None
  */
uint8_t W25Qxx_WriteEnable(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
  uint8_t cmd[] = {WRITE_ENABLE_CMD};
 8003e3a:	2306      	movs	r3, #6
 8003e3c:	703b      	strb	r3, [r7, #0]
  uint32_t tickstart = HAL_GetTick();
 8003e3e:	f003 fcd3 	bl	80077e8 <HAL_GetTick>
 8003e42:	6078      	str	r0, [r7, #4]

  /*Select the FLASH: Chip Select low */
  W25Qxx_Select();
 8003e44:	2200      	movs	r2, #0
 8003e46:	2110      	movs	r1, #16
 8003e48:	4812      	ldr	r0, [pc, #72]	; (8003e94 <W25Qxx_WriteEnable+0x60>)
 8003e4a:	f004 ff83 	bl	8008d54 <HAL_GPIO_WritePin>
  /* Send the read ID command */
  HAL_SPI_Transmit(&W25QXX_SPI_PORT, cmd, 1, W25QXX_TIMEOUT_VALUE);
 8003e4e:	4639      	mov	r1, r7
 8003e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e54:	2201      	movs	r2, #1
 8003e56:	4810      	ldr	r0, [pc, #64]	; (8003e98 <W25Qxx_WriteEnable+0x64>)
 8003e58:	f008 fe6c 	bl	800cb34 <HAL_SPI_Transmit>
  /*Deselect the FLASH: Chip Select high */
  W25Qxx_DeSelect();
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	2110      	movs	r1, #16
 8003e60:	480c      	ldr	r0, [pc, #48]	; (8003e94 <W25Qxx_WriteEnable+0x60>)
 8003e62:	f004 ff77 	bl	8008d54 <HAL_GPIO_WritePin>

  /* Wait the end of Flash writing */
  while(W25Qxx_GetStatus() == W25QXX_BUSY)
 8003e66:	e000      	b.n	8003e6a <W25Qxx_WriteEnable+0x36>
  {
    asm("nop");
 8003e68:	bf00      	nop
  while(W25Qxx_GetStatus() == W25QXX_BUSY)
 8003e6a:	f7ff ffab 	bl	8003dc4 <W25Qxx_GetStatus>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d0f9      	beq.n	8003e68 <W25Qxx_WriteEnable+0x34>
  }
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart) > W25QXX_TIMEOUT_VALUE)
 8003e74:	f003 fcb8 	bl	80077e8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e82:	d901      	bls.n	8003e88 <W25Qxx_WriteEnable+0x54>
    {
      return W25QXX_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e000      	b.n	8003e8a <W25Qxx_WriteEnable+0x56>
    }
  }

  return W25QXX_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40020000 	.word	0x40020000
 8003e98:	20001dfc 	.word	0x20001dfc

08003e9c <W25Qxx_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t W25Qxx_Read(uint32_t ReadAddr, uint8_t* pData, uint32_t Size)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint8_t cmd[4];

  /* Configure the command */
  cmd[0] = READ_CMD;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	753b      	strb	r3, [r7, #20]
  cmd[1] = (uint8_t)(ReadAddr >> 16);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	0c1b      	lsrs	r3, r3, #16
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	757b      	strb	r3, [r7, #21]
  cmd[2] = (uint8_t)(ReadAddr >> 8);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	75bb      	strb	r3, [r7, #22]
  cmd[3] = (uint8_t)(ReadAddr);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	75fb      	strb	r3, [r7, #23]

  W25Qxx_Select();
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2110      	movs	r1, #16
 8003ec6:	4811      	ldr	r0, [pc, #68]	; (8003f0c <W25Qxx_Read+0x70>)
 8003ec8:	f004 ff44 	bl	8008d54 <HAL_GPIO_WritePin>
  /* Send the read ID command */
  HAL_SPI_Transmit(&W25QXX_SPI_PORT, cmd, 4, W25QXX_TIMEOUT_VALUE);
 8003ecc:	f107 0114 	add.w	r1, r7, #20
 8003ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	480e      	ldr	r0, [pc, #56]	; (8003f10 <W25Qxx_Read+0x74>)
 8003ed8:	f008 fe2c 	bl	800cb34 <HAL_SPI_Transmit>
  /* Reception of the data */
  if (HAL_SPI_Receive(&W25QXX_SPI_PORT, pData,Size,W25QXX_TIMEOUT_VALUE) != HAL_OK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	480a      	ldr	r0, [pc, #40]	; (8003f10 <W25Qxx_Read+0x74>)
 8003ee8:	f008 ff60 	bl	800cdac <HAL_SPI_Receive>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <W25Qxx_Read+0x5a>
  {
    return W25QXX_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e005      	b.n	8003f02 <W25Qxx_Read+0x66>
  }
  W25Qxx_DeSelect();
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	2110      	movs	r1, #16
 8003efa:	4804      	ldr	r0, [pc, #16]	; (8003f0c <W25Qxx_Read+0x70>)
 8003efc:	f004 ff2a 	bl	8008d54 <HAL_GPIO_WritePin>
  return W25QXX_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40020000 	.word	0x40020000
 8003f10:	20001dfc 	.word	0x20001dfc

08003f14 <W25Qxx_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write,No more than 256byte.
  * @retval QSPI memory status
  */
uint8_t W25Qxx_Write(uint32_t WriteAddr, uint8_t* pData, uint32_t Size)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint8_t cmd[4];
  uint32_t end_addr, current_size, current_addr;
  uint32_t tickstart = HAL_GetTick();
 8003f20:	f003 fc62 	bl	80077e8 <HAL_GetTick>
 8003f24:	61f8      	str	r0, [r7, #28]

  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	623b      	str	r3, [r7, #32]

  while (current_addr <= WriteAddr)
 8003f2a:	e003      	b.n	8003f34 <W25Qxx_Write+0x20>
  {
    current_addr += W25QXX_PAGE_SIZE;
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f32:	623b      	str	r3, [r7, #32]
  while (current_addr <= WriteAddr)
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d9f7      	bls.n	8003f2c <W25Qxx_Write+0x18>
  }
  current_size = current_addr - WriteAddr;
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8003f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d901      	bls.n	8003f50 <W25Qxx_Write+0x3c>
  {
    current_size = Size;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	623b      	str	r3, [r7, #32]
  end_addr = WriteAddr + Size;
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]

  /* Perform the write page by page */
  do
  {
    /* Configure the command */
    cmd[0] = PAGE_PROG_CMD;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	753b      	strb	r3, [r7, #20]
    cmd[1] = (uint8_t)(current_addr >> 16);
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	0c1b      	lsrs	r3, r3, #16
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	757b      	strb	r3, [r7, #21]
    cmd[2] = (uint8_t)(current_addr >> 8);
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	75bb      	strb	r3, [r7, #22]
    cmd[3] = (uint8_t)(current_addr);
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	75fb      	strb	r3, [r7, #23]

    /* Enable write operations */
    W25Qxx_WriteEnable();
 8003f76:	f7ff ff5d 	bl	8003e34 <W25Qxx_WriteEnable>

    W25Qxx_Select();
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2110      	movs	r1, #16
 8003f7e:	4828      	ldr	r0, [pc, #160]	; (8004020 <W25Qxx_Write+0x10c>)
 8003f80:	f004 fee8 	bl	8008d54 <HAL_GPIO_WritePin>
    /* Send the command */
    if (HAL_SPI_Transmit(&W25QXX_SPI_PORT,cmd, 4, W25QXX_TIMEOUT_VALUE) != HAL_OK)
 8003f84:	f107 0114 	add.w	r1, r7, #20
 8003f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	4825      	ldr	r0, [pc, #148]	; (8004024 <W25Qxx_Write+0x110>)
 8003f90:	f008 fdd0 	bl	800cb34 <HAL_SPI_Transmit>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <W25Qxx_Write+0x8a>
    {
      return W25QXX_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e03c      	b.n	8004018 <W25Qxx_Write+0x104>
    }

    /* Transmission of the data */
    if (HAL_SPI_Transmit(&W25QXX_SPI_PORT, pData,current_size, W25QXX_TIMEOUT_VALUE) != HAL_OK)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	481e      	ldr	r0, [pc, #120]	; (8004024 <W25Qxx_Write+0x110>)
 8003faa:	f008 fdc3 	bl	800cb34 <HAL_SPI_Transmit>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <W25Qxx_Write+0xa4>
    {
      return W25QXX_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e02f      	b.n	8004018 <W25Qxx_Write+0x104>
    }
      W25Qxx_DeSelect();
 8003fb8:	2201      	movs	r2, #1
 8003fba:	2110      	movs	r1, #16
 8003fbc:	4818      	ldr	r0, [pc, #96]	; (8004020 <W25Qxx_Write+0x10c>)
 8003fbe:	f004 fec9 	bl	8008d54 <HAL_GPIO_WritePin>
      /* Wait the end of Flash writing */
    while(W25Qxx_GetStatus() == W25QXX_BUSY)
 8003fc2:	e000      	b.n	8003fc6 <W25Qxx_Write+0xb2>
    {
      asm("nop");
 8003fc4:	bf00      	nop
    while(W25Qxx_GetStatus() == W25QXX_BUSY)
 8003fc6:	f7ff fefd 	bl	8003dc4 <W25Qxx_GetStatus>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d0f9      	beq.n	8003fc4 <W25Qxx_Write+0xb0>
    }
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart) > W25QXX_TIMEOUT_VALUE)
 8003fd0:	f003 fc0a 	bl	80077e8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fde:	d901      	bls.n	8003fe4 <W25Qxx_Write+0xd0>
      {
        return W25QXX_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e019      	b.n	8004018 <W25Qxx_Write+0x104>
      }
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	4413      	add	r3, r2
 8003fea:	623b      	str	r3, [r7, #32]
    pData += current_size;
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	4413      	add	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]
    current_size = ((current_addr + W25QXX_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25QXX_PAGE_SIZE;
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d203      	bcs.n	8004008 <W25Qxx_Write+0xf4>
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	e001      	b.n	800400c <W25Qxx_Write+0xf8>
 8004008:	f44f 7380 	mov.w	r3, #256	; 0x100
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (current_addr < end_addr);
 800400e:	6a3a      	ldr	r2, [r7, #32]
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	429a      	cmp	r2, r3
 8004014:	d3a2      	bcc.n	8003f5c <W25Qxx_Write+0x48>


  return W25QXX_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40020000 	.word	0x40020000
 8004024:	20001dfc 	.word	0x20001dfc

08004028 <W25Qxx_Erase_Sector>:
  * @brief  Erases the specified block of the QSPI memory.
  * @param  BlockAddress: Block address to erase
  * @retval QSPI memory status
  */
uint8_t W25Qxx_Erase_Sector(uint32_t Address)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint8_t cmd[4];
  uint32_t tickstart = HAL_GetTick();
 8004030:	f003 fbda 	bl	80077e8 <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]
  cmd[0] = SECTOR_ERASE_CMD;
 8004036:	2320      	movs	r3, #32
 8004038:	723b      	strb	r3, [r7, #8]
  cmd[1] = (uint8_t)(Address >> 16);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	b2db      	uxtb	r3, r3
 8004040:	727b      	strb	r3, [r7, #9]
  cmd[2] = (uint8_t)(Address >> 8);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	b2db      	uxtb	r3, r3
 8004048:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(Address);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	72fb      	strb	r3, [r7, #11]

  /* Enable write operations */
  W25Qxx_WriteEnable();
 8004050:	f7ff fef0 	bl	8003e34 <W25Qxx_WriteEnable>

  /*Select the FLASH: Chip Select low */
  W25Qxx_Select();
 8004054:	2200      	movs	r2, #0
 8004056:	2110      	movs	r1, #16
 8004058:	4813      	ldr	r0, [pc, #76]	; (80040a8 <W25Qxx_Erase_Sector+0x80>)
 800405a:	f004 fe7b 	bl	8008d54 <HAL_GPIO_WritePin>
  /* Send the read ID command */
  HAL_SPI_Transmit(&W25QXX_SPI_PORT, cmd, 4, W25QXX_TIMEOUT_VALUE);
 800405e:	f107 0108 	add.w	r1, r7, #8
 8004062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004066:	2204      	movs	r2, #4
 8004068:	4810      	ldr	r0, [pc, #64]	; (80040ac <W25Qxx_Erase_Sector+0x84>)
 800406a:	f008 fd63 	bl	800cb34 <HAL_SPI_Transmit>
  /*Deselect the FLASH: Chip Select high */
  W25Qxx_DeSelect();
 800406e:	2201      	movs	r2, #1
 8004070:	2110      	movs	r1, #16
 8004072:	480d      	ldr	r0, [pc, #52]	; (80040a8 <W25Qxx_Erase_Sector+0x80>)
 8004074:	f004 fe6e 	bl	8008d54 <HAL_GPIO_WritePin>

  /* Wait the end of Flash writing */
  while(W25Qxx_GetStatus() == W25QXX_BUSY)
 8004078:	e000      	b.n	800407c <W25Qxx_Erase_Sector+0x54>
  {
    asm("nop");
 800407a:	bf00      	nop
  while(W25Qxx_GetStatus() == W25QXX_BUSY)
 800407c:	f7ff fea2 	bl	8003dc4 <W25Qxx_GetStatus>
 8004080:	4603      	mov	r3, r0
 8004082:	2b02      	cmp	r3, #2
 8004084:	d0f9      	beq.n	800407a <W25Qxx_Erase_Sector+0x52>
  }
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart) > W25QXX_SECTOR_ERASE_MAX_TIME)
 8004086:	f003 fbaf 	bl	80077e8 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004094:	4293      	cmp	r3, r2
 8004096:	d901      	bls.n	800409c <W25Qxx_Erase_Sector+0x74>
    {
      return W25QXX_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e000      	b.n	800409e <W25Qxx_Erase_Sector+0x76>
    }
  }
  return W25QXX_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40020000 	.word	0x40020000
 80040ac:	20001dfc 	.word	0x20001dfc

080040b0 <HAL_GPIO_EXTI_Callback>:
extern STC3100_INFO Batt;
extern __SETTING Setting;
extern uint8_t SCREEN_MUSIC_MAX_LIST;
extern uint8_t BatteryStatus;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	80fb      	strh	r3, [r7, #6]
  uint8_t detectPin = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	73bb      	strb	r3, [r7, #14]
  bool buttonPressed;
  if(GPIO_Pin == BAT_CHARGE_Pin)
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c4:	d125      	bne.n	8004112 <HAL_GPIO_EXTI_Callback+0x62>
  {

    if(HAL_GPIO_ReadPin(GPIOB, BAT_CHARGE_Pin) == 0)
 80040c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040ca:	4896      	ldr	r0, [pc, #600]	; (8004324 <HAL_GPIO_EXTI_Callback+0x274>)
 80040cc:	f004 fe2a 	bl	8008d24 <HAL_GPIO_ReadPin>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <HAL_GPIO_EXTI_Callback+0x2e>
    {
      printf("Battery is changing...\n");
 80040d6:	4894      	ldr	r0, [pc, #592]	; (8004328 <HAL_GPIO_EXTI_Callback+0x278>)
 80040d8:	f013 ff1c 	bl	8017f14 <puts>
 80040dc:	e002      	b.n	80040e4 <HAL_GPIO_EXTI_Callback+0x34>
    }
    else
    {
      printf("Battery is discharged...\n");
 80040de:	4893      	ldr	r0, [pc, #588]	; (800432c <HAL_GPIO_EXTI_Callback+0x27c>)
 80040e0:	f013 ff18 	bl	8017f14 <puts>
    }
    //STC3100_Get(&Batt, BATTERY_PROP_VOLTAGE_NOW);
    if(BatteryStatus == 1)
 80040e4:	4b92      	ldr	r3, [pc, #584]	; (8004330 <HAL_GPIO_EXTI_Callback+0x280>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d104      	bne.n	80040f6 <HAL_GPIO_EXTI_Callback+0x46>
    {
      STC3100_Init();
 80040ec:	f7ff fbca 	bl	8003884 <STC3100_Init>
      BatteryStatus = 2;
 80040f0:	4b8f      	ldr	r3, [pc, #572]	; (8004330 <HAL_GPIO_EXTI_Callback+0x280>)
 80040f2:	2202      	movs	r2, #2
 80040f4:	701a      	strb	r2, [r3, #0]
    }
    Draw_BatteryLevel(200, 5, BatteryPercentCalculation(Batt.voltage));
 80040f6:	4b8f      	ldr	r3, [pc, #572]	; (8004334 <HAL_GPIO_EXTI_Callback+0x284>)
 80040f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80040fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004100:	f00b faf6 	bl	800f6f0 <BatteryPercentCalculation>
 8004104:	4603      	mov	r3, r0
 8004106:	461a      	mov	r2, r3
 8004108:	2105      	movs	r1, #5
 800410a:	20c8      	movs	r0, #200	; 0xc8
 800410c:	f001 feea 	bl	8005ee4 <Draw_BatteryLevel>
 8004110:	e195      	b.n	800443e <HAL_GPIO_EXTI_Callback+0x38e>
  }
  else if(GPIO_Pin == GPIO_PIN_2)
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	2b04      	cmp	r3, #4
 8004116:	f040 8192 	bne.w	800443e <HAL_GPIO_EXTI_Callback+0x38e>
  {
    printf("Searching button...\n");
 800411a:	4887      	ldr	r0, [pc, #540]	; (8004338 <HAL_GPIO_EXTI_Callback+0x288>)
 800411c:	f013 fefa 	bl	8017f14 <puts>
    buttonPressed = SX1509B_SearchInterruptPin(&detectPin);
 8004120:	f107 030e 	add.w	r3, r7, #14
 8004124:	4618      	mov	r0, r3
 8004126:	f000 ff79 	bl	800501c <SX1509B_SearchInterruptPin>
 800412a:	4603      	mov	r3, r0
 800412c:	73fb      	strb	r3, [r7, #15]
    if(buttonPressed == true)
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 817f 	beq.w	8004434 <HAL_GPIO_EXTI_Callback+0x384>
    {
      // update LCD back light
      if(Setting.Always_Display == false) // will turn off LCD after 20s
 8004136:	4b81      	ldr	r3, [pc, #516]	; (800433c <HAL_GPIO_EXTI_Callback+0x28c>)
 8004138:	789b      	ldrb	r3, [r3, #2]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f083 0301 	eor.w	r3, r3, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d017      	beq.n	8004176 <HAL_GPIO_EXTI_Callback+0xc6>
      {
        Display.LCDBackLightTime = 20;
 8004146:	4b7e      	ldr	r3, [pc, #504]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004148:	2214      	movs	r2, #20
 800414a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        if(Display.LCDBacklightStatus == false)
 800414e:	4b7c      	ldr	r3, [pc, #496]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004150:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004154:	f083 0301 	eor.w	r3, r3, #1
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <HAL_GPIO_EXTI_Callback+0xc6>
        {
          Display.LCDBacklightStatus = true;
 800415e:	4b78      	ldr	r3, [pc, #480]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
          LCD_BackLight_On();
 8004166:	f000 ff83 	bl	8005070 <LCD_BackLight_On>
          // clear after read
          (void)SX1509B_WriteRegSequence(RegInterruptSourceB, 0xFFFF);
 800416a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800416e:	2018      	movs	r0, #24
 8004170:	f000 fd2a 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004174:	e163      	b.n	800443e <HAL_GPIO_EXTI_Callback+0x38e>
          return; // the first time press button will do nothing except turn on back light
        }
      }
      if(detectPin == BTN_LEFT)
 8004176:	7bbb      	ldrb	r3, [r7, #14]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d124      	bne.n	80041c6 <HAL_GPIO_EXTI_Callback+0x116>
      {
        printf("Button BTN_LEFT is pressed\n");
 800417c:	4871      	ldr	r0, [pc, #452]	; (8004344 <HAL_GPIO_EXTI_Callback+0x294>)
 800417e:	f013 fec9 	bl	8017f14 <puts>
        if(Display.Mode != CREATE_PLAY_MUSIC && Display.Mode != PLAY_MUSIC)
 8004182:	4b6f      	ldr	r3, [pc, #444]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d00a      	beq.n	80041a0 <HAL_GPIO_EXTI_Callback+0xf0>
 800418a:	4b6d      	ldr	r3, [pc, #436]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d006      	beq.n	80041a0 <HAL_GPIO_EXTI_Callback+0xf0>
        {
          Display.Mode = CREATE_PLAY_MUSIC;
 8004192:	4b6b      	ldr	r3, [pc, #428]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004194:	2202      	movs	r2, #2
 8004196:	701a      	strb	r2, [r3, #0]
          Display.NeedToResetFullCircleProgress = true;
 8004198:	4b69      	ldr	r3, [pc, #420]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 800419a:	2201      	movs	r2, #1
 800419c:	775a      	strb	r2, [r3, #29]
 800419e:	e149      	b.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        }
        else if(Display.Mode == CREATE_PLAY_MUSIC || Display.Mode == PLAY_MUSIC)
 80041a0:	4b67      	ldr	r3, [pc, #412]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d004      	beq.n	80041b2 <HAL_GPIO_EXTI_Callback+0x102>
 80041a8:	4b65      	ldr	r3, [pc, #404]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	f040 8141 	bne.w	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        {
          Audio.PlaySong = false;
 80041b2:	4b65      	ldr	r3, [pc, #404]	; (8004348 <HAL_GPIO_EXTI_Callback+0x298>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
          Audio.EndSong = true;
 80041b8:	4b63      	ldr	r3, [pc, #396]	; (8004348 <HAL_GPIO_EXTI_Callback+0x298>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	705a      	strb	r2, [r3, #1]
          Audio.NewSongEvent = BACK_TO_PREVIOUS_SONG;
 80041be:	4b62      	ldr	r3, [pc, #392]	; (8004348 <HAL_GPIO_EXTI_Callback+0x298>)
 80041c0:	2202      	movs	r2, #2
 80041c2:	70da      	strb	r2, [r3, #3]
 80041c4:	e136      	b.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
//          Display.NeedToUpdateListMusic = true;
        }
      }
      else if(detectPin == BTN_RIGHT)
 80041c6:	7bbb      	ldrb	r3, [r7, #14]
 80041c8:	2b05      	cmp	r3, #5
 80041ca:	d115      	bne.n	80041f8 <HAL_GPIO_EXTI_Callback+0x148>
      {
        printf("Button BTN_RIGHT is pressed\n");
 80041cc:	485f      	ldr	r0, [pc, #380]	; (800434c <HAL_GPIO_EXTI_Callback+0x29c>)
 80041ce:	f013 fea1 	bl	8017f14 <puts>
        if(Display.Mode == CREATE_PLAY_MUSIC || Display.Mode == PLAY_MUSIC)
 80041d2:	4b5b      	ldr	r3, [pc, #364]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d004      	beq.n	80041e4 <HAL_GPIO_EXTI_Callback+0x134>
 80041da:	4b59      	ldr	r3, [pc, #356]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	f040 8128 	bne.w	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        {
          //Display.Mode = CREATE_PLAY_MUSIC;
          Audio.PlaySong = false;
 80041e4:	4b58      	ldr	r3, [pc, #352]	; (8004348 <HAL_GPIO_EXTI_Callback+0x298>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
          Audio.EndSong = true;
 80041ea:	4b57      	ldr	r3, [pc, #348]	; (8004348 <HAL_GPIO_EXTI_Callback+0x298>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	705a      	strb	r2, [r3, #1]
          Audio.NewSongEvent = NEXT_SONG;
 80041f0:	4b55      	ldr	r3, [pc, #340]	; (8004348 <HAL_GPIO_EXTI_Callback+0x298>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	70da      	strb	r2, [r3, #3]
 80041f6:	e11d      	b.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        }
      }
      else if(detectPin == BTN_CENTRE)
 80041f8:	7bbb      	ldrb	r3, [r7, #14]
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d129      	bne.n	8004252 <HAL_GPIO_EXTI_Callback+0x1a2>
      {
        printf("Button BTN_CENTRE is pressed\n");
 80041fe:	4854      	ldr	r0, [pc, #336]	; (8004350 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8004200:	f013 fe88 	bl	8017f14 <puts>
        if(Display.Mode == LIST_MUSIC)
 8004204:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b05      	cmp	r3, #5
 800420a:	d10c      	bne.n	8004226 <HAL_GPIO_EXTI_Callback+0x176>
        {
//          Audio.CurrentSong = Display.CursorListMusic;
//          Database_SaveDataMusic();
          Audio.PlaySong = false;
 800420c:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <HAL_GPIO_EXTI_Callback+0x298>)
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
          Audio.EndSong = true;
 8004212:	4b4d      	ldr	r3, [pc, #308]	; (8004348 <HAL_GPIO_EXTI_Callback+0x298>)
 8004214:	2201      	movs	r2, #1
 8004216:	705a      	strb	r2, [r3, #1]
          Audio.NewSongEvent = SELECT_SONG;
 8004218:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <HAL_GPIO_EXTI_Callback+0x298>)
 800421a:	2203      	movs	r2, #3
 800421c:	70da      	strb	r2, [r3, #3]
          Display.NeedToUpdateListMusic = true;
 800421e:	4b48      	ldr	r3, [pc, #288]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004220:	2201      	movs	r2, #1
 8004222:	705a      	strb	r2, [r3, #1]
 8004224:	e106      	b.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        }
        else if(Display.Mode == SETTING)
 8004226:	4b46      	ldr	r3, [pc, #280]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b07      	cmp	r3, #7
 800422c:	f040 8102 	bne.w	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        {
          Setting_ToggleEvent(Display.CursorLCDScreenSetting);
 8004230:	4b43      	ldr	r3, [pc, #268]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004232:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004236:	4618      	mov	r0, r3
 8004238:	f00b f926 	bl	800f488 <Setting_ToggleEvent>
          Database_SaveDataSetting(Display.CursorLCDScreenSetting);
 800423c:	4b40      	ldr	r3, [pc, #256]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 800423e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fd30 	bl	8003ca8 <Database_SaveDataSetting>
          Display.NeedToUpdateSetting = true;
 8004248:	4b3d      	ldr	r3, [pc, #244]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004250:	e0f0      	b.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        }
      }
      else if(detectPin == BTN_UP)
 8004252:	7bbb      	ldrb	r3, [r7, #14]
 8004254:	2b09      	cmp	r3, #9
 8004256:	d17f      	bne.n	8004358 <HAL_GPIO_EXTI_Callback+0x2a8>
      {
        printf("Button BTN_UP is pressed\n");
 8004258:	483e      	ldr	r0, [pc, #248]	; (8004354 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800425a:	f013 fe5b 	bl	8017f14 <puts>
//        if(Display.Mode != LIST_MUSIC && Display.Mode != CREATE_LIST_MUSIC)
        // Mode Playing Music
        if(Display.Mode == PLAY_MUSIC)
 800425e:	4b38      	ldr	r3, [pc, #224]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d106      	bne.n	8004274 <HAL_GPIO_EXTI_Callback+0x1c4>
        {
          //Display.CursorListMusic = Audio.CurrentSong;
          Display.Mode = CREATE_LIST_MUSIC;
 8004266:	4b36      	ldr	r3, [pc, #216]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004268:	2204      	movs	r2, #4
 800426a:	701a      	strb	r2, [r3, #0]
          Display.NeedToUpdateListMusic = true;
 800426c:	4b34      	ldr	r3, [pc, #208]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 800426e:	2201      	movs	r2, #1
 8004270:	705a      	strb	r2, [r3, #1]
 8004272:	e0df      	b.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        }
        // Mode List Music
        else if(Display.Mode == LIST_MUSIC)
 8004274:	4b32      	ldr	r3, [pc, #200]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b05      	cmp	r3, #5
 800427a:	d126      	bne.n	80042ca <HAL_GPIO_EXTI_Callback+0x21a>
        {
          if(Display.CursorListMusic > 0)
 800427c:	4b30      	ldr	r3, [pc, #192]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 800427e:	891b      	ldrh	r3, [r3, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d006      	beq.n	8004292 <HAL_GPIO_EXTI_Callback+0x1e2>
          {
            Display.CursorListMusic--;
 8004284:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004286:	891b      	ldrh	r3, [r3, #8]
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 800428e:	811a      	strh	r2, [r3, #8]
 8004290:	e008      	b.n	80042a4 <HAL_GPIO_EXTI_Callback+0x1f4>
          }
          else
          {
            Display.CursorListMusic = Audio.MaxSong - 1; // roll back cursor to last of list
 8004292:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <HAL_GPIO_EXTI_Callback+0x298>)
 8004294:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004298:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042a2:	811a      	strh	r2, [r3, #8]
          }
          Display.CursorLCDScreenMusic--;
 80042a4:	4b26      	ldr	r3, [pc, #152]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042a6:	7a9b      	ldrb	r3, [r3, #10]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4b24      	ldr	r3, [pc, #144]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042ae:	729a      	strb	r2, [r3, #10]
          if(Display.CursorLCDScreenMusic == 255)
 80042b0:	4b23      	ldr	r3, [pc, #140]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042b2:	7a9b      	ldrb	r3, [r3, #10]
 80042b4:	2bff      	cmp	r3, #255	; 0xff
 80042b6:	d104      	bne.n	80042c2 <HAL_GPIO_EXTI_Callback+0x212>
          {
            Display.CursorLCDScreenMusic = 0; // cannot decrease cursor LCD
 80042b8:	4b21      	ldr	r3, [pc, #132]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	729a      	strb	r2, [r3, #10]
            ListLCDScreen_RollUp(); // roll Up list
 80042be:	f000 fff9 	bl	80052b4 <ListLCDScreen_RollUp>
          }
          Display.NeedToUpdateListMusic = true;
 80042c2:	4b1f      	ldr	r3, [pc, #124]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	705a      	strb	r2, [r3, #1]
 80042c8:	e0b4      	b.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        }
        // Mode Setting
        else if(Display.Mode == SETTING)
 80042ca:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b07      	cmp	r3, #7
 80042d0:	f040 80b0 	bne.w	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        {

          Display.CursorLCDScreenSetting--;
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80042da:	3b01      	subs	r3, #1
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042e0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          if(Display.CursorLCDScreenSetting == 255)
 80042e4:	4b16      	ldr	r3, [pc, #88]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80042ea:	2bff      	cmp	r3, #255	; 0xff
 80042ec:	d103      	bne.n	80042f6 <HAL_GPIO_EXTI_Callback+0x246>
          {
            Display.CursorLCDScreenSetting = 0; // cannot decrease cursor LCD
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
              {
                ListLCDScreen_RollUp(); // roll up list
              }
            }
          }
          if(Display.CursorListSetting > 0)
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 80042f8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_GPIO_EXTI_Callback+0x262>
          {
            Display.CursorListSetting--;
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004302:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004306:	3b01      	subs	r3, #1
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 800430c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004310:	e003      	b.n	800431a <HAL_GPIO_EXTI_Callback+0x26a>
          }
          else
          {
            Display.CursorListSetting = 0; // stay in head of list
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          }
          Display.NeedToUpdateSetting = true;
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_GPIO_EXTI_Callback+0x290>)
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004322:	e087      	b.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
 8004324:	40020400 	.word	0x40020400
 8004328:	0801a954 	.word	0x0801a954
 800432c:	0801a96c 	.word	0x0801a96c
 8004330:	20014cb0 	.word	0x20014cb0
 8004334:	2000007c 	.word	0x2000007c
 8004338:	0801a988 	.word	0x0801a988
 800433c:	200197f4 	.word	0x200197f4
 8004340:	20014cb8 	.word	0x20014cb8
 8004344:	0801a99c 	.word	0x0801a99c
 8004348:	2000cc84 	.word	0x2000cc84
 800434c:	0801a9b8 	.word	0x0801a9b8
 8004350:	0801a9d4 	.word	0x0801a9d4
 8004354:	0801a9f4 	.word	0x0801a9f4
        }
      }
      else if(detectPin == BTN_DOWN)
 8004358:	7bbb      	ldrb	r3, [r7, #14]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d167      	bne.n	800442e <HAL_GPIO_EXTI_Callback+0x37e>
      {
        printf("Button BTN_DOWN is pressed\n");
 800435e:	4839      	ldr	r0, [pc, #228]	; (8004444 <HAL_GPIO_EXTI_Callback+0x394>)
 8004360:	f013 fdd8 	bl	8017f14 <puts>
        // Mode List Music
        if(Display.Mode == LIST_MUSIC)
 8004364:	4b38      	ldr	r3, [pc, #224]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b05      	cmp	r3, #5
 800436a:	d129      	bne.n	80043c0 <HAL_GPIO_EXTI_Callback+0x310>
        {
          Display.CursorListMusic++;
 800436c:	4b36      	ldr	r3, [pc, #216]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 800436e:	891b      	ldrh	r3, [r3, #8]
 8004370:	3301      	adds	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	4b34      	ldr	r3, [pc, #208]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 8004376:	811a      	strh	r2, [r3, #8]
          if(Display.CursorListMusic >= Audio.MaxSong)
 8004378:	4b33      	ldr	r3, [pc, #204]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 800437a:	891a      	ldrh	r2, [r3, #8]
 800437c:	4b33      	ldr	r3, [pc, #204]	; (800444c <HAL_GPIO_EXTI_Callback+0x39c>)
 800437e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004382:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8004386:	429a      	cmp	r2, r3
 8004388:	d302      	bcc.n	8004390 <HAL_GPIO_EXTI_Callback+0x2e0>
          {
            Display.CursorListMusic = 0;// roll back cursor to head of list
 800438a:	4b2f      	ldr	r3, [pc, #188]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 800438c:	2200      	movs	r2, #0
 800438e:	811a      	strh	r2, [r3, #8]
          }
          Display.CursorLCDScreenMusic++;
 8004390:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 8004392:	7a9b      	ldrb	r3, [r3, #10]
 8004394:	3301      	adds	r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 800439a:	729a      	strb	r2, [r3, #10]
          if(Display.CursorLCDScreenMusic >= SCREEN_MUSIC_MAX_LIST)
 800439c:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 800439e:	7a9a      	ldrb	r2, [r3, #10]
 80043a0:	4b2b      	ldr	r3, [pc, #172]	; (8004450 <HAL_GPIO_EXTI_Callback+0x3a0>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d307      	bcc.n	80043b8 <HAL_GPIO_EXTI_Callback+0x308>
          {
            Display.CursorLCDScreenMusic = SCREEN_MUSIC_MAX_LIST - 1; // // cannot increase cursor LCD
 80043a8:	4b29      	ldr	r3, [pc, #164]	; (8004450 <HAL_GPIO_EXTI_Callback+0x3a0>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 80043b2:	729a      	strb	r2, [r3, #10]
            ListLCDScreen_RollDown();
 80043b4:	f000 feea 	bl	800518c <ListLCDScreen_RollDown>
          }
          Display.NeedToUpdateListMusic = true;
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	705a      	strb	r2, [r3, #1]
 80043be:	e039      	b.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        }
        else if(Display.Mode == PLAY_MUSIC)
 80043c0:	4b21      	ldr	r3, [pc, #132]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d107      	bne.n	80043d8 <HAL_GPIO_EXTI_Callback+0x328>
        {
          Display.Mode = CREATE_SETTING;
 80043c8:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 80043ca:	2206      	movs	r2, #6
 80043cc:	701a      	strb	r2, [r3, #0]
          Display.NeedToUpdateSetting = true;
 80043ce:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80043d6:	e02d      	b.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        }
        // Mode Setting
        else if(Display.Mode == SETTING)
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b07      	cmp	r3, #7
 80043de:	d129      	bne.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        {
          Display.CursorListSetting++;
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 80043e2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80043e6:	3301      	adds	r3, #1
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4b17      	ldr	r3, [pc, #92]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 80043ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          Display.CursorLCDScreenSetting++;
 80043f0:	4b15      	ldr	r3, [pc, #84]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 80043f2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80043f6:	3301      	adds	r3, #1
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4b13      	ldr	r3, [pc, #76]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 80043fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          if(Display.CursorLCDScreenSetting >= SCREEN_SETTING_MAX_LIST)
 8004400:	4b11      	ldr	r3, [pc, #68]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 8004402:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004406:	2b02      	cmp	r3, #2
 8004408:	d903      	bls.n	8004412 <HAL_GPIO_EXTI_Callback+0x362>
          {
            Display.CursorLCDScreenSetting = SCREEN_SETTING_MAX_LIST - 1; // cannot increase cursor LCD
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 800440c:	2202      	movs	r2, #2
 800440e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
              {
                ListLCDScreen_RollDown();
              }
            }
          }
          if(Display.CursorListSetting >= SETTING_MAX_ELEMENT)
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 8004414:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004418:	2b02      	cmp	r3, #2
 800441a:	d903      	bls.n	8004424 <HAL_GPIO_EXTI_Callback+0x374>
          {
            Display.CursorListSetting = SETTING_MAX_ELEMENT - 1; // stay cursor at last of list
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          }
          Display.NeedToUpdateSetting = true;
 8004424:	4b08      	ldr	r3, [pc, #32]	; (8004448 <HAL_GPIO_EXTI_Callback+0x398>)
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800442c:	e002      	b.n	8004434 <HAL_GPIO_EXTI_Callback+0x384>
        }
      }
      else
      {
        printf("Hardware is error\n");
 800442e:	4809      	ldr	r0, [pc, #36]	; (8004454 <HAL_GPIO_EXTI_Callback+0x3a4>)
 8004430:	f013 fd70 	bl	8017f14 <puts>
      }
    }
    // clear after read
    (void)SX1509B_WriteRegSequence(RegInterruptSourceB, 0xFFFF);
 8004434:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004438:	2018      	movs	r0, #24
 800443a:	f000 fbc5 	bl	8004bc8 <SX1509B_WriteRegSequence>
  }
  else
  {
    // reverse
  }
}
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	0801aa10 	.word	0x0801aa10
 8004448:	20014cb8 	.word	0x20014cb8
 800444c:	2000cc84 	.word	0x2000cc84
 8004450:	20014ce4 	.word	0x20014ce4
 8004454:	0801aa2c 	.word	0x0801aa2c

08004458 <IO_Expand_WritePin>:
#define IO_LED_UP            IO_EXPAND_PIN_13

#ifdef USE_SX1509B
extern uint32_t SX1509B_CLK;
uint8_t IO_Expand_WritePin(uint16_t pin, IO_Expand_PinState state)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	460a      	mov	r2, r1
 8004462:	80fb      	strh	r3, [r7, #6]
 8004464:	4613      	mov	r3, r2
 8004466:	717b      	strb	r3, [r7, #5]
  uint8_t res = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]
  uint16_t tempRegDir;
  uint16_t tempRegData;
  uint16_t tempPullUp;
  uint16_t tempPullDown;
  res = SX1509B_ReadRegSequence(RegDirB, &tempRegDir);
 800446c:	f107 0314 	add.w	r3, r7, #20
 8004470:	4619      	mov	r1, r3
 8004472:	200e      	movs	r0, #14
 8004474:	f000 fbf2 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]

  if ((0xFFFF ^ tempRegDir) & pin) // If the pin is an output, write high/low
 800447c:	8abb      	ldrh	r3, [r7, #20]
 800447e:	43db      	mvns	r3, r3
 8004480:	b29a      	uxth	r2, r3
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	4013      	ands	r3, r2
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d028      	beq.n	80044de <IO_Expand_WritePin+0x86>
  {
    res |= SX1509B_ReadRegSequence(RegDataB, &tempRegData);
 800448c:	f107 0312 	add.w	r3, r7, #18
 8004490:	4619      	mov	r1, r3
 8004492:	2010      	movs	r0, #16
 8004494:	f000 fbe2 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004498:	4603      	mov	r3, r0
 800449a:	461a      	mov	r2, r3
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	4313      	orrs	r3, r2
 80044a0:	75fb      	strb	r3, [r7, #23]
    if (state == PIN_SET)
 80044a2:	797b      	ldrb	r3, [r7, #5]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <IO_Expand_WritePin+0x5c>
    {
      tempRegData |= pin;
 80044a8:	8a7a      	ldrh	r2, [r7, #18]
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	827b      	strh	r3, [r7, #18]
 80044b2:	e009      	b.n	80044c8 <IO_Expand_WritePin+0x70>
    }
    else
    {
      tempRegData &= ~pin;
 80044b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	b21a      	sxth	r2, r3
 80044bc:	8a7b      	ldrh	r3, [r7, #18]
 80044be:	b21b      	sxth	r3, r3
 80044c0:	4013      	ands	r3, r2
 80044c2:	b21b      	sxth	r3, r3
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	827b      	strh	r3, [r7, #18]
    }
    res |= SX1509B_WriteRegSequence(RegDataB, tempRegData);
 80044c8:	8a7b      	ldrh	r3, [r7, #18]
 80044ca:	4619      	mov	r1, r3
 80044cc:	2010      	movs	r0, #16
 80044ce:	f000 fb7b 	bl	8004bc8 <SX1509B_WriteRegSequence>
 80044d2:	4603      	mov	r3, r0
 80044d4:	461a      	mov	r2, r3
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	4313      	orrs	r3, r2
 80044da:	75fb      	strb	r3, [r7, #23]
 80044dc:	e05f      	b.n	800459e <IO_Expand_WritePin+0x146>
  }
  else // Otherwise the pin is an input, pull-up/down
  {
    res |= SX1509B_ReadRegSequence(RegPullUpB, &tempPullUp);
 80044de:	f107 0310 	add.w	r3, r7, #16
 80044e2:	4619      	mov	r1, r3
 80044e4:	2006      	movs	r0, #6
 80044e6:	f000 fbb9 	bl	8004c5c <SX1509B_ReadRegSequence>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461a      	mov	r2, r3
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	75fb      	strb	r3, [r7, #23]
    res |= SX1509B_ReadRegSequence(RegPullDownB, &tempPullDown);
 80044f4:	f107 030e 	add.w	r3, r7, #14
 80044f8:	4619      	mov	r1, r3
 80044fa:	2008      	movs	r0, #8
 80044fc:	f000 fbae 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004500:	4603      	mov	r3, r0
 8004502:	461a      	mov	r2, r3
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	4313      	orrs	r3, r2
 8004508:	75fb      	strb	r3, [r7, #23]

    if (state == PIN_SET) // if HIGH, do pull-up, disable pull-down
 800450a:	797b      	ldrb	r3, [r7, #5]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d123      	bne.n	8004558 <IO_Expand_WritePin+0x100>
    {
      tempPullUp |= pin;
 8004510:	8a3a      	ldrh	r2, [r7, #16]
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	4313      	orrs	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	823b      	strh	r3, [r7, #16]
      tempPullDown &= ~pin;
 800451a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800451e:	43db      	mvns	r3, r3
 8004520:	b21a      	sxth	r2, r3
 8004522:	89fb      	ldrh	r3, [r7, #14]
 8004524:	b21b      	sxth	r3, r3
 8004526:	4013      	ands	r3, r2
 8004528:	b21b      	sxth	r3, r3
 800452a:	b29b      	uxth	r3, r3
 800452c:	81fb      	strh	r3, [r7, #14]
      res |= SX1509B_WriteRegSequence(RegPullUpB, tempPullUp);
 800452e:	8a3b      	ldrh	r3, [r7, #16]
 8004530:	4619      	mov	r1, r3
 8004532:	2006      	movs	r0, #6
 8004534:	f000 fb48 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004538:	4603      	mov	r3, r0
 800453a:	461a      	mov	r2, r3
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	4313      	orrs	r3, r2
 8004540:	75fb      	strb	r3, [r7, #23]
      res |= SX1509B_WriteRegSequence(RegPullDownB, tempPullDown);
 8004542:	89fb      	ldrh	r3, [r7, #14]
 8004544:	4619      	mov	r1, r3
 8004546:	2008      	movs	r0, #8
 8004548:	f000 fb3e 	bl	8004bc8 <SX1509B_WriteRegSequence>
 800454c:	4603      	mov	r3, r0
 800454e:	461a      	mov	r2, r3
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	4313      	orrs	r3, r2
 8004554:	75fb      	strb	r3, [r7, #23]
 8004556:	e022      	b.n	800459e <IO_Expand_WritePin+0x146>
    }
    else // If LOW do pull-down, disable pull-up
    {
      tempPullDown |= pin;
 8004558:	89fa      	ldrh	r2, [r7, #14]
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	4313      	orrs	r3, r2
 800455e:	b29b      	uxth	r3, r3
 8004560:	81fb      	strh	r3, [r7, #14]
      tempPullUp &= ~pin;
 8004562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004566:	43db      	mvns	r3, r3
 8004568:	b21a      	sxth	r2, r3
 800456a:	8a3b      	ldrh	r3, [r7, #16]
 800456c:	b21b      	sxth	r3, r3
 800456e:	4013      	ands	r3, r2
 8004570:	b21b      	sxth	r3, r3
 8004572:	b29b      	uxth	r3, r3
 8004574:	823b      	strh	r3, [r7, #16]
      res |= SX1509B_WriteRegSequence(RegPullUpB, tempPullUp);
 8004576:	8a3b      	ldrh	r3, [r7, #16]
 8004578:	4619      	mov	r1, r3
 800457a:	2006      	movs	r0, #6
 800457c:	f000 fb24 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004580:	4603      	mov	r3, r0
 8004582:	461a      	mov	r2, r3
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	4313      	orrs	r3, r2
 8004588:	75fb      	strb	r3, [r7, #23]
      res |= SX1509B_WriteRegSequence(RegPullDownB, tempPullDown);
 800458a:	89fb      	ldrh	r3, [r7, #14]
 800458c:	4619      	mov	r1, r3
 800458e:	2008      	movs	r0, #8
 8004590:	f000 fb1a 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	4313      	orrs	r3, r2
 800459c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return res;
 800459e:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <IO_Expand_ConfigPinMode>:
uint8_t IO_Expand_ConfigPinMode(IO_Expand_Typedef IO_Expand_InitStruct)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08c      	sub	sp, #48	; 0x30
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	463b      	mov	r3, r7
 80045b0:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t res = HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t tempRegPullDown;
  uint8_t tempRegMisc;
  uint16_t tempRegLEDDriverEnable;
  uint8_t tempRegDebounceConfig;
  uint16_t tempRegDebounceEnable;
  uint16_t pin = IO_Expand_InitStruct.Pin;
 80045ba:	883b      	ldrh	r3, [r7, #0]
 80045bc:	847b      	strh	r3, [r7, #34]	; 0x22
  IO_EXPAND_MODE mode = IO_Expand_InitStruct.Mode;
 80045be:	78bb      	ldrb	r3, [r7, #2]
 80045c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint32_t pull = IO_Expand_InitStruct.Pull;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	61fb      	str	r3, [r7, #28]
  LinOrLog linLog = IO_Expand_InitStruct.LinOrLog;
 80045c8:	793b      	ldrb	r3, [r7, #4]
 80045ca:	76fb      	strb	r3, [r7, #27]
  IO_EXPAND_CLOCK ioClock = IO_Expand_InitStruct.IO_Clock;
 80045cc:	797b      	ldrb	r3, [r7, #5]
 80045ce:	76bb      	strb	r3, [r7, #26]
  // If mode Input
  if (mode & IO_EXPAND_MODE_INPUT)
 80045d0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 8171 	beq.w	80048c0 <IO_Expand_ConfigPinMode+0x318>
  {
    // config IO as input
    res |= SX1509B_ReadRegSequence(RegDirB, &tempRegDir);
 80045de:	f107 0316 	add.w	r3, r7, #22
 80045e2:	4619      	mov	r1, r3
 80045e4:	200e      	movs	r0, #14
 80045e6:	f000 fb39 	bl	8004c5c <SX1509B_ReadRegSequence>
 80045ea:	4603      	mov	r3, r0
 80045ec:	461a      	mov	r2, r3
 80045ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tempRegDir |= pin;
 80045f8:	8afa      	ldrh	r2, [r7, #22]
 80045fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b29b      	uxth	r3, r3
 8004600:	82fb      	strh	r3, [r7, #22]
    res |= SX1509B_WriteRegSequence(RegDirB, tempRegDir);
 8004602:	8afb      	ldrh	r3, [r7, #22]
 8004604:	4619      	mov	r1, r3
 8004606:	200e      	movs	r0, #14
 8004608:	f000 fade 	bl	8004bc8 <SX1509B_WriteRegSequence>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004614:	4313      	orrs	r3, r2
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    // config IO pull up
    if(pull & IO_EXPAND_PULL_UP)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d041      	beq.n	80046a8 <IO_Expand_ConfigPinMode+0x100>
    {
      // Enable pull-up
      res |= SX1509B_ReadRegSequence(RegPullUpB, &tempRegPullUp);
 8004624:	f107 0312 	add.w	r3, r7, #18
 8004628:	4619      	mov	r1, r3
 800462a:	2006      	movs	r0, #6
 800462c:	f000 fb16 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004630:	4603      	mov	r3, r0
 8004632:	461a      	mov	r2, r3
 8004634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004638:	4313      	orrs	r3, r2
 800463a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      tempRegPullUp |= pin;
 800463e:	8a7a      	ldrh	r2, [r7, #18]
 8004640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004642:	4313      	orrs	r3, r2
 8004644:	b29b      	uxth	r3, r3
 8004646:	827b      	strh	r3, [r7, #18]
      res |= SX1509B_WriteRegSequence(RegPullUpB, tempRegPullUp);
 8004648:	8a7b      	ldrh	r3, [r7, #18]
 800464a:	4619      	mov	r1, r3
 800464c:	2006      	movs	r0, #6
 800464e:	f000 fabb 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004652:	4603      	mov	r3, r0
 8004654:	461a      	mov	r2, r3
 8004656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800465a:	4313      	orrs	r3, r2
 800465c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Disable pull-down
      res |= SX1509B_ReadRegSequence(RegPullDownB, &tempRegPullDown);
 8004660:	f107 0310 	add.w	r3, r7, #16
 8004664:	4619      	mov	r1, r3
 8004666:	2008      	movs	r0, #8
 8004668:	f000 faf8 	bl	8004c5c <SX1509B_ReadRegSequence>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004674:	4313      	orrs	r3, r2
 8004676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      tempRegPullDown &= ~pin;
 800467a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800467e:	43db      	mvns	r3, r3
 8004680:	b21a      	sxth	r2, r3
 8004682:	8a3b      	ldrh	r3, [r7, #16]
 8004684:	b21b      	sxth	r3, r3
 8004686:	4013      	ands	r3, r2
 8004688:	b21b      	sxth	r3, r3
 800468a:	b29b      	uxth	r3, r3
 800468c:	823b      	strh	r3, [r7, #16]
      res |= SX1509B_WriteRegSequence(RegPullDownB, tempRegPullDown);
 800468e:	8a3b      	ldrh	r3, [r7, #16]
 8004690:	4619      	mov	r1, r3
 8004692:	2008      	movs	r0, #8
 8004694:	f000 fa98 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004698:	4603      	mov	r3, r0
 800469a:	461a      	mov	r2, r3
 800469c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80046a6:	e08c      	b.n	80047c2 <IO_Expand_ConfigPinMode+0x21a>
    }
    // config IO pull down
    else if(pull & IO_EXPAND_PULL_DOWN)
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d041      	beq.n	8004736 <IO_Expand_ConfigPinMode+0x18e>
    {
      // Disable pull-up
      res |= SX1509B_ReadRegSequence(RegPullUpB, &tempRegPullUp);
 80046b2:	f107 0312 	add.w	r3, r7, #18
 80046b6:	4619      	mov	r1, r3
 80046b8:	2006      	movs	r0, #6
 80046ba:	f000 facf 	bl	8004c5c <SX1509B_ReadRegSequence>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      tempRegPullUp &= ~pin;
 80046cc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80046d0:	43db      	mvns	r3, r3
 80046d2:	b21a      	sxth	r2, r3
 80046d4:	8a7b      	ldrh	r3, [r7, #18]
 80046d6:	b21b      	sxth	r3, r3
 80046d8:	4013      	ands	r3, r2
 80046da:	b21b      	sxth	r3, r3
 80046dc:	b29b      	uxth	r3, r3
 80046de:	827b      	strh	r3, [r7, #18]
      res |= SX1509B_WriteRegSequence(RegPullUpB, tempRegPullUp);
 80046e0:	8a7b      	ldrh	r3, [r7, #18]
 80046e2:	4619      	mov	r1, r3
 80046e4:	2006      	movs	r0, #6
 80046e6:	f000 fa6f 	bl	8004bc8 <SX1509B_WriteRegSequence>
 80046ea:	4603      	mov	r3, r0
 80046ec:	461a      	mov	r2, r3
 80046ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Enable pull-down
      res |= SX1509B_ReadRegSequence(RegPullDownB, &tempRegPullDown);
 80046f8:	f107 0310 	add.w	r3, r7, #16
 80046fc:	4619      	mov	r1, r3
 80046fe:	2008      	movs	r0, #8
 8004700:	f000 faac 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004704:	4603      	mov	r3, r0
 8004706:	461a      	mov	r2, r3
 8004708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800470c:	4313      	orrs	r3, r2
 800470e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      tempRegPullDown |= pin;
 8004712:	8a3a      	ldrh	r2, [r7, #16]
 8004714:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004716:	4313      	orrs	r3, r2
 8004718:	b29b      	uxth	r3, r3
 800471a:	823b      	strh	r3, [r7, #16]
      res |= SX1509B_WriteRegSequence(RegPullDownB, tempRegPullDown);
 800471c:	8a3b      	ldrh	r3, [r7, #16]
 800471e:	4619      	mov	r1, r3
 8004720:	2008      	movs	r0, #8
 8004722:	f000 fa51 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004726:	4603      	mov	r3, r0
 8004728:	461a      	mov	r2, r3
 800472a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800472e:	4313      	orrs	r3, r2
 8004730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004734:	e045      	b.n	80047c2 <IO_Expand_ConfigPinMode+0x21a>
    }
    // otherwise, no pull
    else
    {
      // Disable pull-up
      res |= SX1509B_ReadRegSequence(RegPullUpB, &tempRegPullUp);
 8004736:	f107 0312 	add.w	r3, r7, #18
 800473a:	4619      	mov	r1, r3
 800473c:	2006      	movs	r0, #6
 800473e:	f000 fa8d 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800474a:	4313      	orrs	r3, r2
 800474c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      tempRegPullUp &= ~pin;
 8004750:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004754:	43db      	mvns	r3, r3
 8004756:	b21a      	sxth	r2, r3
 8004758:	8a7b      	ldrh	r3, [r7, #18]
 800475a:	b21b      	sxth	r3, r3
 800475c:	4013      	ands	r3, r2
 800475e:	b21b      	sxth	r3, r3
 8004760:	b29b      	uxth	r3, r3
 8004762:	827b      	strh	r3, [r7, #18]
      res |= SX1509B_WriteRegSequence(RegPullUpB, tempRegPullUp);
 8004764:	8a7b      	ldrh	r3, [r7, #18]
 8004766:	4619      	mov	r1, r3
 8004768:	2006      	movs	r0, #6
 800476a:	f000 fa2d 	bl	8004bc8 <SX1509B_WriteRegSequence>
 800476e:	4603      	mov	r3, r0
 8004770:	461a      	mov	r2, r3
 8004772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004776:	4313      	orrs	r3, r2
 8004778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Disable pull-down
      res |= SX1509B_ReadRegSequence(RegPullDownB, &tempRegPullDown);
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	4619      	mov	r1, r3
 8004782:	2008      	movs	r0, #8
 8004784:	f000 fa6a 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004790:	4313      	orrs	r3, r2
 8004792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      tempRegPullDown &= ~pin;
 8004796:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800479a:	43db      	mvns	r3, r3
 800479c:	b21a      	sxth	r2, r3
 800479e:	8a3b      	ldrh	r3, [r7, #16]
 80047a0:	b21b      	sxth	r3, r3
 80047a2:	4013      	ands	r3, r2
 80047a4:	b21b      	sxth	r3, r3
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	823b      	strh	r3, [r7, #16]
      res |= SX1509B_WriteRegSequence(RegPullDownB, tempRegPullDown);
 80047aa:	8a3b      	ldrh	r3, [r7, #16]
 80047ac:	4619      	mov	r1, r3
 80047ae:	2008      	movs	r0, #8
 80047b0:	f000 fa0a 	bl	8004bc8 <SX1509B_WriteRegSequence>
 80047b4:	4603      	mov	r3, r0
 80047b6:	461a      	mov	r2, r3
 80047b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047bc:	4313      	orrs	r3, r2
 80047be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    // if mode interrupt
    if (mode & IO_EXPAND_MODE_IT)
 80047c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8166 	beq.w	8004a9c <IO_Expand_ConfigPinMode+0x4f4>
    {
      // set Debounce time = 16ms
      tempRegDebounceConfig = 0b101;
 80047d0:	2305      	movs	r3, #5
 80047d2:	767b      	strb	r3, [r7, #25]
      res |= SX1509B_WriteReg(RegDebounceConfig, tempRegDebounceConfig);
 80047d4:	7e7b      	ldrb	r3, [r7, #25]
 80047d6:	4619      	mov	r1, r3
 80047d8:	2022      	movs	r0, #34	; 0x22
 80047da:	f000 f9d5 	bl	8004b88 <SX1509B_WriteReg>
 80047de:	4603      	mov	r3, r0
 80047e0:	461a      	mov	r2, r3
 80047e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // enable interrupt

      uint8_t riseFall;
      // if both rising and falling
      if (mode & IO_EXPAND_MODE_RISING_FALLING)
 80047ec:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	da03      	bge.n	80047fc <IO_Expand_ConfigPinMode+0x254>
      {
        riseFall = CHANGE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80047fa:	e012      	b.n	8004822 <IO_Expand_ConfigPinMode+0x27a>
      }
      // if rising event
      else if(mode & IO_EXPAND_MODE_RISING)
 80047fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <IO_Expand_ConfigPinMode+0x268>
      {
        riseFall = RISING;
 8004808:	2304      	movs	r3, #4
 800480a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800480e:	e008      	b.n	8004822 <IO_Expand_ConfigPinMode+0x27a>
      }
      // if falling event
      else if(mode & IO_EXPAND_MODE_FALLING)
 8004810:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <IO_Expand_ConfigPinMode+0x27a>
      {
        riseFall = FALLING;
 800481c:	2302      	movs	r3, #2
 800481e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      }
      for(uint8_t i = 0 ; i < 16; i++)// scan pin
 8004822:	2300      	movs	r3, #0
 8004824:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004828:	e01b      	b.n	8004862 <IO_Expand_ConfigPinMode+0x2ba>
      {
        if((pin & ((uint16_t)1U << i))) // check pin to enable interrupt
 800482a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800482c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004830:	fa42 f303 	asr.w	r3, r2, r3
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00d      	beq.n	8004858 <IO_Expand_ConfigPinMode+0x2b0>
        {
          SX1509B_EnableInterrupt(i, riseFall);
 800483c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004840:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fb50 	bl	8004eec <SX1509B_EnableInterrupt>
          printf("Config pin %d as interrupt\n", i);
 800484c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004850:	4619      	mov	r1, r3
 8004852:	4895      	ldr	r0, [pc, #596]	; (8004aa8 <IO_Expand_ConfigPinMode+0x500>)
 8004854:	f013 fad8 	bl	8017e08 <iprintf>
      for(uint8_t i = 0 ; i < 16; i++)// scan pin
 8004858:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800485c:	3301      	adds	r3, #1
 800485e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004862:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004866:	2b0f      	cmp	r3, #15
 8004868:	d9df      	bls.n	800482a <IO_Expand_ConfigPinMode+0x282>
        }
      }
      // enable Debounce
      res |= SX1509B_ReadRegSequence(RegDebounceEnableB, &tempRegDebounceEnable);
 800486a:	f107 030a 	add.w	r3, r7, #10
 800486e:	4619      	mov	r1, r3
 8004870:	2023      	movs	r0, #35	; 0x23
 8004872:	f000 f9f3 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800487e:	4313      	orrs	r3, r2
 8004880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      tempRegDebounceEnable |= pin;
 8004884:	897a      	ldrh	r2, [r7, #10]
 8004886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004888:	4313      	orrs	r3, r2
 800488a:	b29b      	uxth	r3, r3
 800488c:	817b      	strh	r3, [r7, #10]
      res |= SX1509B_WriteRegSequence(RegDebounceEnableB, tempRegDebounceEnable);
 800488e:	897b      	ldrh	r3, [r7, #10]
 8004890:	4619      	mov	r1, r3
 8004892:	2023      	movs	r0, #35	; 0x23
 8004894:	f000 f998 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // clear interrupt
      res |= SX1509B_WriteRegSequence(RegInterruptSourceB, 0xFFFF);
 80048a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80048aa:	2018      	movs	r0, #24
 80048ac:	f000 f98c 	bl	8004bc8 <SX1509B_WriteRegSequence>
 80048b0:	4603      	mov	r3, r0
 80048b2:	461a      	mov	r2, r3
 80048b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048be:	e0ed      	b.n	8004a9c <IO_Expand_ConfigPinMode+0x4f4>
  }
  // else mode Output
  else
  {
    // config IO as output
    res |= SX1509B_ReadRegSequence(RegDirB, &tempRegDir);
 80048c0:	f107 0316 	add.w	r3, r7, #22
 80048c4:	4619      	mov	r1, r3
 80048c6:	200e      	movs	r0, #14
 80048c8:	f000 f9c8 	bl	8004c5c <SX1509B_ReadRegSequence>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tempRegDir &= ~pin;
 80048da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80048de:	43db      	mvns	r3, r3
 80048e0:	b21a      	sxth	r2, r3
 80048e2:	8afb      	ldrh	r3, [r7, #22]
 80048e4:	b21b      	sxth	r3, r3
 80048e6:	4013      	ands	r3, r2
 80048e8:	b21b      	sxth	r3, r3
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	82fb      	strh	r3, [r7, #22]
    res |= SX1509B_WriteRegSequence(RegDirB, tempRegDir);
 80048ee:	8afb      	ldrh	r3, [r7, #22]
 80048f0:	4619      	mov	r1, r3
 80048f2:	200e      	movs	r0, #14
 80048f4:	f000 f968 	bl	8004bc8 <SX1509B_WriteRegSequence>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461a      	mov	r2, r3
 80048fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004900:	4313      	orrs	r3, r2
 8004902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    // Disable input buffer
    res |= SX1509B_ReadRegSequence(RegInputDisableB, &tempRegInputDisable);
 8004906:	f107 0314 	add.w	r3, r7, #20
 800490a:	4619      	mov	r1, r3
 800490c:	2000      	movs	r0, #0
 800490e:	f000 f9a5 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004912:	4603      	mov	r3, r0
 8004914:	461a      	mov	r2, r3
 8004916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800491a:	4313      	orrs	r3, r2
 800491c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tempRegInputDisable |= pin;
 8004920:	8aba      	ldrh	r2, [r7, #20]
 8004922:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004924:	4313      	orrs	r3, r2
 8004926:	b29b      	uxth	r3, r3
 8004928:	82bb      	strh	r3, [r7, #20]
    res |= SX1509B_WriteRegSequence(RegInputDisableB, tempRegInputDisable);
 800492a:	8abb      	ldrh	r3, [r7, #20]
 800492c:	4619      	mov	r1, r3
 800492e:	2000      	movs	r0, #0
 8004930:	f000 f94a 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800493c:	4313      	orrs	r3, r2
 800493e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    // Disable pull-up
    res |= SX1509B_ReadRegSequence(RegPullUpB, &tempRegPullUp);
 8004942:	f107 0312 	add.w	r3, r7, #18
 8004946:	4619      	mov	r1, r3
 8004948:	2006      	movs	r0, #6
 800494a:	f000 f987 	bl	8004c5c <SX1509B_ReadRegSequence>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004956:	4313      	orrs	r3, r2
 8004958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tempRegPullUp &= ~pin;
 800495c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004960:	43db      	mvns	r3, r3
 8004962:	b21a      	sxth	r2, r3
 8004964:	8a7b      	ldrh	r3, [r7, #18]
 8004966:	b21b      	sxth	r3, r3
 8004968:	4013      	ands	r3, r2
 800496a:	b21b      	sxth	r3, r3
 800496c:	b29b      	uxth	r3, r3
 800496e:	827b      	strh	r3, [r7, #18]
    res |= SX1509B_WriteRegSequence(RegPullUpB, tempRegPullUp);
 8004970:	8a7b      	ldrh	r3, [r7, #18]
 8004972:	4619      	mov	r1, r3
 8004974:	2006      	movs	r0, #6
 8004976:	f000 f927 	bl	8004bc8 <SX1509B_WriteRegSequence>
 800497a:	4603      	mov	r3, r0
 800497c:	461a      	mov	r2, r3
 800497e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004982:	4313      	orrs	r3, r2
 8004984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Configure LED driver clock and mode (REG_MISC)
    res |= SX1509B_ReadReg(RegMisc, &tempRegMisc);
 8004988:	f107 030f 	add.w	r3, r7, #15
 800498c:	4619      	mov	r1, r3
 800498e:	201f      	movs	r0, #31
 8004990:	f000 f940 	bl	8004c14 <SX1509B_ReadReg>
 8004994:	4603      	mov	r3, r0
 8004996:	461a      	mov	r2, r3
 8004998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800499c:	4313      	orrs	r3, r2
 800499e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(linLog == LOG)
 80049a2:	7efb      	ldrb	r3, [r7, #27]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10a      	bne.n	80049be <IO_Expand_ConfigPinMode+0x416>
    {
      tempRegMisc |= (1 << 7); // set logarithmic mode bank B
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	73fb      	strb	r3, [r7, #15]
      tempRegMisc |= (1 << 3); // set logarithmic mode bank A
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	f043 0308 	orr.w	r3, r3, #8
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	73fb      	strb	r3, [r7, #15]
 80049bc:	e009      	b.n	80049d2 <IO_Expand_ConfigPinMode+0x42a>
    }
    else
    {
      tempRegMisc &= ~(1 << 7); // set linear mode bank B
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	73fb      	strb	r3, [r7, #15]
      tempRegMisc &= ~(1 << 3); // set linear mode bank A
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	f023 0308 	bic.w	r3, r3, #8
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	73fb      	strb	r3, [r7, #15]
    }
    // mask only 3 bits and shift to bit position 6:4
    ioClock = (ioClock & 0x07) << 4;
 80049d2:	7ebb      	ldrb	r3, [r7, #26]
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049dc:	76bb      	strb	r3, [r7, #26]
    tempRegMisc |= ioClock;
 80049de:	7bfa      	ldrb	r2, [r7, #15]
 80049e0:	7ebb      	ldrb	r3, [r7, #26]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	73fb      	strb	r3, [r7, #15]
    res |= SX1509B_WriteReg(RegMisc, tempRegMisc);
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	4619      	mov	r1, r3
 80049ec:	201f      	movs	r0, #31
 80049ee:	f000 f8cb 	bl	8004b88 <SX1509B_WriteReg>
 80049f2:	4603      	mov	r3, r0
 80049f4:	461a      	mov	r2, r3
 80049f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    // Enable LED driver operation (REG_LED_DRIVER_ENABLE)
    res |= SX1509B_ReadRegSequence(RegLEDDriverEnableB, &tempRegLEDDriverEnable);
 8004a00:	f107 030c 	add.w	r3, r7, #12
 8004a04:	4619      	mov	r1, r3
 8004a06:	2020      	movs	r0, #32
 8004a08:	f000 f928 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tempRegLEDDriverEnable |= pin;
 8004a1a:	89ba      	ldrh	r2, [r7, #12]
 8004a1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	81bb      	strh	r3, [r7, #12]
    res |= SX1509B_WriteRegSequence(RegLEDDriverEnableB, tempRegLEDDriverEnable);
 8004a24:	89bb      	ldrh	r3, [r7, #12]
 8004a26:	4619      	mov	r1, r3
 8004a28:	2020      	movs	r0, #32
 8004a2a:	f000 f8cd 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	461a      	mov	r2, r3
 8004a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    // Config if led mode is breathe
    if(mode & IO_EXPAND_MODE_OUTPUT_BREATHE)
 8004a3c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d029      	beq.n	8004a9c <IO_Expand_ConfigPinMode+0x4f4>
    {
      printf("Config ouput mode breather\n");
 8004a48:	4818      	ldr	r0, [pc, #96]	; (8004aac <IO_Expand_ConfigPinMode+0x504>)
 8004a4a:	f013 fa63 	bl	8017f14 <puts>
      for(uint8_t i = 0 ; i < 16; i++)
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8004a54:	e01e      	b.n	8004a94 <IO_Expand_ConfigPinMode+0x4ec>
      {
        if((pin & ((uint16_t)1U << i)))
 8004a56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004a58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a5c:	fa42 f303 	asr.w	r3, r2, r3
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d010      	beq.n	8004a8a <IO_Expand_ConfigPinMode+0x4e2>
        {
          SX1509B_LedBreathe(i, 0xFF, 2, 2, 1, 2 << 3);
 8004a68:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	2301      	movs	r3, #1
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	2302      	movs	r3, #2
 8004a76:	2202      	movs	r2, #2
 8004a78:	21ff      	movs	r1, #255	; 0xff
 8004a7a:	f000 f9bf 	bl	8004dfc <SX1509B_LedBreathe>
          printf("Config pin %d as led breathe\n", i);
 8004a7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a82:	4619      	mov	r1, r3
 8004a84:	480a      	ldr	r0, [pc, #40]	; (8004ab0 <IO_Expand_ConfigPinMode+0x508>)
 8004a86:	f013 f9bf 	bl	8017e08 <iprintf>
      for(uint8_t i = 0 ; i < 16; i++)
 8004a8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8004a94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a98:	2b0f      	cmp	r3, #15
 8004a9a:	d9dc      	bls.n	8004a56 <IO_Expand_ConfigPinMode+0x4ae>
        }
      }
    }
  }
  return res;
 8004a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3728      	adds	r7, #40	; 0x28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	0801aa40 	.word	0x0801aa40
 8004aac:	0801aa5c 	.word	0x0801aa5c
 8004ab0:	0801aa78 	.word	0x0801aa78

08004ab4 <IO_Expand_Init>:
uint8_t IO_Expand_Init(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
  IO_Expand_Typedef IO_Expand_InitStruct;
  uint8_t res = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(SX1509B_GPIO_Port, SX1509B_RST_Pin, GPIO_PIN_SET);
 8004abe:	2201      	movs	r2, #1
 8004ac0:	2102      	movs	r1, #2
 8004ac2:	482c      	ldr	r0, [pc, #176]	; (8004b74 <IO_Expand_Init+0xc0>)
 8004ac4:	f004 f946 	bl	8008d54 <HAL_GPIO_WritePin>
  res |= SX1509B_RegReset();;
 8004ac8:	f000 f8fe 	bl	8004cc8 <SX1509B_RegReset>
 8004acc:	4603      	mov	r3, r0
 8004ace:	461a      	mov	r2, r3
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	71fb      	strb	r3, [r7, #7]
  if(res == HAL_OK)
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <IO_Expand_Init+0x30>
  {
    printf("SX1509B_RegReset complete !!!\r\n");
 8004adc:	4826      	ldr	r0, [pc, #152]	; (8004b78 <IO_Expand_Init+0xc4>)
 8004ade:	f013 fa19 	bl	8017f14 <puts>
 8004ae2:	e004      	b.n	8004aee <IO_Expand_Init+0x3a>
  }
  else
  {
    printf("SX1509B_RegReset fail ! Error code: %d\r\n", res);
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4824      	ldr	r0, [pc, #144]	; (8004b7c <IO_Expand_Init+0xc8>)
 8004aea:	f013 f98d 	bl	8017e08 <iprintf>
  }
  // Set clock for SX1509B IO = 2MHz, divide 7 => IO Clk =  2MHz/(2^6)
  res |= SX1509B_SetClock(INTERNAL_CLOCK_2MHZ, CLK_INPUT, 0, 7);
 8004aee:	2307      	movs	r3, #7
 8004af0:	2200      	movs	r2, #0
 8004af2:	2100      	movs	r1, #0
 8004af4:	2002      	movs	r0, #2
 8004af6:	f000 f903 	bl	8004d00 <SX1509B_SetClock>
 8004afa:	4603      	mov	r3, r0
 8004afc:	461a      	mov	r2, r3
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	71fb      	strb	r3, [r7, #7]
  SX1509B_CLK = 2000000;
 8004b04:	4b1e      	ldr	r3, [pc, #120]	; (8004b80 <IO_Expand_Init+0xcc>)
 8004b06:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <IO_Expand_Init+0xd0>)
 8004b08:	601a      	str	r2, [r3, #0]

  IO_Expand_InitStruct.Pin = IO_LED_DOWN | IO_LED_CENTRE | IO_LED_RIGHT | IO_LED_LEFT | IO_LED_UP;
 8004b0a:	f243 03d0 	movw	r3, #12496	; 0x30d0
 8004b0e:	803b      	strh	r3, [r7, #0]
  IO_Expand_InitStruct.Mode = IO_EXPAND_MODE_OUTPUT_BREATHE;
 8004b10:	2304      	movs	r3, #4
 8004b12:	70bb      	strb	r3, [r7, #2]
  IO_Expand_InitStruct.Pull = IO_EXPAND_NO_PULL;
 8004b14:	2302      	movs	r3, #2
 8004b16:	70fb      	strb	r3, [r7, #3]
  IO_Expand_InitStruct.IO_Clock = CLOCK_VERY_SLOW;
 8004b18:	2307      	movs	r3, #7
 8004b1a:	717b      	strb	r3, [r7, #5]
  IO_Expand_InitStruct.LinOrLog = LOG;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	713b      	strb	r3, [r7, #4]
  res |= IO_Expand_ConfigPinMode(IO_Expand_InitStruct);
 8004b20:	463b      	mov	r3, r7
 8004b22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b26:	f7ff fd3f 	bl	80045a8 <IO_Expand_ConfigPinMode>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	71fb      	strb	r3, [r7, #7]
  res |= IO_Expand_WritePin(IO_Expand_InitStruct.Pin, PIN_RESET);
 8004b34:	883b      	ldrh	r3, [r7, #0]
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff fc8d 	bl	8004458 <IO_Expand_WritePin>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	461a      	mov	r2, r3
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	71fb      	strb	r3, [r7, #7]

  IO_Expand_InitStruct.Pin = IO_BTN_LEFT | IO_BTN_DOWN | IO_BTN_RIGHT | IO_BTN_CENTRE | IO_BTN_UP;
 8004b48:	f44f 734b 	mov.w	r3, #812	; 0x32c
 8004b4c:	803b      	strh	r3, [r7, #0]
  IO_Expand_InitStruct.Mode = IO_EXPAND_MODE_INPUT_IT_FALLING;
 8004b4e:	2358      	movs	r3, #88	; 0x58
 8004b50:	70bb      	strb	r3, [r7, #2]
  IO_Expand_InitStruct.Pull = IO_EXPAND_PULL_UP;
 8004b52:	2304      	movs	r3, #4
 8004b54:	70fb      	strb	r3, [r7, #3]
  res |= IO_Expand_ConfigPinMode(IO_Expand_InitStruct);
 8004b56:	463b      	mov	r3, r7
 8004b58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b5c:	f7ff fd24 	bl	80045a8 <IO_Expand_ConfigPinMode>
 8004b60:	4603      	mov	r3, r0
 8004b62:	461a      	mov	r2, r3
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	71fb      	strb	r3, [r7, #7]
  return res;
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40020000 	.word	0x40020000
 8004b78:	0801aa98 	.word	0x0801aa98
 8004b7c:	0801aab8 	.word	0x0801aab8
 8004b80:	20014cb4 	.word	0x20014cb4
 8004b84:	001e8480 	.word	0x001e8480

08004b88 <SX1509B_WriteReg>:
    216, 216, 216, 216, 225, 225, 225, 225,
    235, 235, 235, 235, 245, 245, 245, 245,
    255, 255, 255, 255, 255, 255, 255, 255,
};
uint8_t SX1509B_WriteReg(uint8_t reg, uint8_t data)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	4603      	mov	r3, r0
 8004b90:	460a      	mov	r2, r1
 8004b92:	71fb      	strb	r3, [r7, #7]
 8004b94:	4613      	mov	r3, r2
 8004b96:	71bb      	strb	r3, [r7, #6]
  uint8_t res;
  uint8_t I2C_Data[2];
  I2C_Data[0] = reg;
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	733b      	strb	r3, [r7, #12]
  I2C_Data[1] = data;
 8004b9c:	79bb      	ldrb	r3, [r7, #6]
 8004b9e:	737b      	strb	r3, [r7, #13]
  res =  HAL_I2C_Master_Transmit(&hi2c1,(SX1509B_I2C_ADDRESS << 1), I2C_Data, sizeof(I2C_Data), 1000);
 8004ba0:	f107 020c 	add.w	r2, r7, #12
 8004ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	2302      	movs	r3, #2
 8004bac:	217c      	movs	r1, #124	; 0x7c
 8004bae:	4805      	ldr	r0, [pc, #20]	; (8004bc4 <SX1509B_WriteReg+0x3c>)
 8004bb0:	f004 fa46 	bl	8009040 <HAL_I2C_Master_Transmit>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	73fb      	strb	r3, [r7, #15]
  return res;
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20001c1c 	.word	0x20001c1c

08004bc8 <SX1509B_WriteRegSequence>:
//  This function will write a two-byte word beginning at registerAddress
uint8_t SX1509B_WriteRegSequence(uint8_t reg, uint16_t data)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	4603      	mov	r3, r0
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	71fb      	strb	r3, [r7, #7]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	80bb      	strh	r3, [r7, #4]
  uint8_t res;
  uint8_t I2C_Data[3];
  I2C_Data[0] = reg;
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	733b      	strb	r3, [r7, #12]
  I2C_Data[1] = (uint8_t)((data & 0xFF00) >> 8);
 8004bdc:	88bb      	ldrh	r3, [r7, #4]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	737b      	strb	r3, [r7, #13]
  I2C_Data[2] = (uint8_t)(data & 0x00FF);
 8004be6:	88bb      	ldrh	r3, [r7, #4]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	73bb      	strb	r3, [r7, #14]
  res =  HAL_I2C_Master_Transmit(&hi2c1,(SX1509B_I2C_ADDRESS << 1), I2C_Data, sizeof(I2C_Data), 1000);
 8004bec:	f107 020c 	add.w	r2, r7, #12
 8004bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	217c      	movs	r1, #124	; 0x7c
 8004bfa:	4805      	ldr	r0, [pc, #20]	; (8004c10 <SX1509B_WriteRegSequence+0x48>)
 8004bfc:	f004 fa20 	bl	8009040 <HAL_I2C_Master_Transmit>
 8004c00:	4603      	mov	r3, r0
 8004c02:	73fb      	strb	r3, [r7, #15]
  return res;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20001c1c 	.word	0x20001c1c

08004c14 <SX1509B_ReadReg>:
uint8_t SX1509B_ReadReg(uint8_t reg, uint8_t *data)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	6039      	str	r1, [r7, #0]
 8004c1e:	71fb      	strb	r3, [r7, #7]
  uint8_t res;
  res =  HAL_I2C_Master_Transmit(&hi2c1,(SX1509B_I2C_ADDRESS << 1), &reg, 1, 10);
 8004c20:	1dfa      	adds	r2, r7, #7
 8004c22:	230a      	movs	r3, #10
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	2301      	movs	r3, #1
 8004c28:	217c      	movs	r1, #124	; 0x7c
 8004c2a:	480b      	ldr	r0, [pc, #44]	; (8004c58 <SX1509B_ReadReg+0x44>)
 8004c2c:	f004 fa08 	bl	8009040 <HAL_I2C_Master_Transmit>
 8004c30:	4603      	mov	r3, r0
 8004c32:	73fb      	strb	r3, [r7, #15]
  if(res == HAL_OK)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <SX1509B_ReadReg+0x3a>
  {
    res =  HAL_I2C_Master_Receive(&hi2c1,(SX1509B_I2C_ADDRESS << 1), data, 1, 10);
 8004c3a:	230a      	movs	r3, #10
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2301      	movs	r3, #1
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	217c      	movs	r1, #124	; 0x7c
 8004c44:	4804      	ldr	r0, [pc, #16]	; (8004c58 <SX1509B_ReadReg+0x44>)
 8004c46:	f004 faf9 	bl	800923c <HAL_I2C_Master_Receive>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	73fb      	strb	r3, [r7, #15]
  }
  return res;
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20001c1c 	.word	0x20001c1c

08004c5c <SX1509B_ReadRegSequence>:
//  This function will read a two-byte word beginning at registerAddress
uint8_t SX1509B_ReadRegSequence(uint8_t reg, uint16_t *data)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	4603      	mov	r3, r0
 8004c64:	6039      	str	r1, [r7, #0]
 8004c66:	71fb      	strb	r3, [r7, #7]
  uint8_t res;
  uint16_t tempData;
  uint16_t low, high;
  res =  HAL_I2C_Master_Transmit(&hi2c1,(SX1509B_I2C_ADDRESS << 1), &reg, 1, 10);
 8004c68:	1dfa      	adds	r2, r7, #7
 8004c6a:	230a      	movs	r3, #10
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	2301      	movs	r3, #1
 8004c70:	217c      	movs	r1, #124	; 0x7c
 8004c72:	4814      	ldr	r0, [pc, #80]	; (8004cc4 <SX1509B_ReadRegSequence+0x68>)
 8004c74:	f004 f9e4 	bl	8009040 <HAL_I2C_Master_Transmit>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
  if(res == HAL_OK)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <SX1509B_ReadRegSequence+0x3c>
  {
    res =  HAL_I2C_Master_Receive(&hi2c1,(SX1509B_I2C_ADDRESS << 1), (uint8_t*)&tempData, 2, 10);
 8004c82:	f107 0208 	add.w	r2, r7, #8
 8004c86:	230a      	movs	r3, #10
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	217c      	movs	r1, #124	; 0x7c
 8004c8e:	480d      	ldr	r0, [pc, #52]	; (8004cc4 <SX1509B_ReadRegSequence+0x68>)
 8004c90:	f004 fad4 	bl	800923c <HAL_I2C_Master_Receive>
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
  }
  // Now tempData lsb is contain high byte portB, tempData msp is contain low byte portA
  // need to swap data
  high = (tempData & 0x00FF);
 8004c98:	893b      	ldrh	r3, [r7, #8]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	81bb      	strh	r3, [r7, #12]
  low = ((tempData & 0xFF00) >> 8);
 8004c9e:	893b      	ldrh	r3, [r7, #8]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	817b      	strh	r3, [r7, #10]
  *data = high << 8 | low;
 8004ca4:	89bb      	ldrh	r3, [r7, #12]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	b21a      	sxth	r2, r3
 8004caa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	b21b      	sxth	r3, r3
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	801a      	strh	r2, [r3, #0]
  return res;
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20001c1c 	.word	0x20001c1c

08004cc8 <SX1509B_RegReset>:
  HAL_Delay(1000);
  HAL_GPIO_WritePin(SX1509B_GPIO_Port, SX1509B_RST_Pin, GPIO_PIN_SET);
  return res;
}
uint8_t SX1509B_RegReset(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
  uint8_t res = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	71fb      	strb	r3, [r7, #7]
  res |= SX1509B_WriteReg(RegReset, 0x12);
 8004cd2:	2112      	movs	r1, #18
 8004cd4:	207d      	movs	r0, #125	; 0x7d
 8004cd6:	f7ff ff57 	bl	8004b88 <SX1509B_WriteReg>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	461a      	mov	r2, r3
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	71fb      	strb	r3, [r7, #7]
  res |= SX1509B_WriteReg(RegReset, 0x34);
 8004ce4:	2134      	movs	r1, #52	; 0x34
 8004ce6:	207d      	movs	r0, #125	; 0x7d
 8004ce8:	f7ff ff4e 	bl	8004b88 <SX1509B_WriteReg>
 8004cec:	4603      	mov	r3, r0
 8004cee:	461a      	mov	r2, r3
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	71fb      	strb	r3, [r7, #7]
  return res;
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <SX1509B_SetClock>:
uint8_t SX1509B_SetClock(uint8_t oscSource /*= 2*/, uint8_t oscPinFunction /*= 0*/, uint8_t oscFreqOut /*= 0*/, uint8_t oscDivider /*= 1*/)
{
 8004d00:	b590      	push	{r4, r7, lr}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4604      	mov	r4, r0
 8004d08:	4608      	mov	r0, r1
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4623      	mov	r3, r4
 8004d10:	71fb      	strb	r3, [r7, #7]
 8004d12:	4603      	mov	r3, r0
 8004d14:	71bb      	strb	r3, [r7, #6]
 8004d16:	460b      	mov	r3, r1
 8004d18:	717b      	strb	r3, [r7, #5]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	713b      	strb	r3, [r7, #4]
  //    00: off, 01: external input, 10: internal 2MHz, 1: reserved
  //  4 - OSCIO pin function
  //    0: input, 1 ouptut
  //  3:0 - Frequency of oscout pin
  //    0: LOW, 0xF: high, else fOSCOUT = FoSC/(2^(RegClock[3:0]-1))
  uint8_t res = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
  uint8_t regMisc;
  oscSource = (oscSource & 0b11) << 5;    // 2-bit value, bits 6:5
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	015b      	lsls	r3, r3, #5
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d2c:	71fb      	strb	r3, [r7, #7]
  oscPinFunction = (oscPinFunction & 1) << 4; // 1-bit value bit 4
 8004d2e:	79bb      	ldrb	r3, [r7, #6]
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	71bb      	strb	r3, [r7, #6]
  oscFreqOut = (oscFreqOut & 0b1111);     // 4-bit value, bits 3:0
 8004d3a:	797b      	ldrb	r3, [r7, #5]
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	717b      	strb	r3, [r7, #5]
  uint8_t regClock = oscSource | oscPinFunction | oscFreqOut;
 8004d42:	79fa      	ldrb	r2, [r7, #7]
 8004d44:	79bb      	ldrb	r3, [r7, #6]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	797b      	ldrb	r3, [r7, #5]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	73bb      	strb	r3, [r7, #14]
  res = SX1509B_WriteReg(RegClock, regClock);
 8004d50:	7bbb      	ldrb	r3, [r7, #14]
 8004d52:	4619      	mov	r1, r3
 8004d54:	201e      	movs	r0, #30
 8004d56:	f7ff ff17 	bl	8004b88 <SX1509B_WriteReg>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	73fb      	strb	r3, [r7, #15]

  // Config RegMisc[6:4] with oscDivider
  // 0: off, else ClkX = fOSC / (2^(RegMisc[6:4] -1))
  //oscDivider = constrain(oscDivider, 1, 7);
  if(oscDivider < 1) oscDivider = 1;
 8004d5e:	793b      	ldrb	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <SX1509B_SetClock+0x6a>
 8004d64:	2301      	movs	r3, #1
 8004d66:	713b      	strb	r3, [r7, #4]
 8004d68:	e004      	b.n	8004d74 <SX1509B_SetClock+0x74>
  else if(oscDivider > 7) oscDivider = 7;
 8004d6a:	793b      	ldrb	r3, [r7, #4]
 8004d6c:	2b07      	cmp	r3, #7
 8004d6e:	d901      	bls.n	8004d74 <SX1509B_SetClock+0x74>
 8004d70:	2307      	movs	r3, #7
 8004d72:	713b      	strb	r3, [r7, #4]
  SX1509B_CLK = 2000000.0 / (1 << (oscDivider - 1)); // Update private clock variable
 8004d74:	793b      	ldrb	r3, [r7, #4]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	2201      	movs	r2, #1
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fb fbd8 	bl	8000534 <__aeabi_i2d>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	a11a      	add	r1, pc, #104	; (adr r1, 8004df4 <SX1509B_SetClock+0xf4>)
 8004d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d8e:	f7fb fd65 	bl	800085c <__aeabi_ddiv>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f7fb ff0d 	bl	8000bb8 <__aeabi_d2uiz>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <SX1509B_SetClock+0xf0>)
 8004da2:	6013      	str	r3, [r2, #0]
  oscDivider = (oscDivider & 0b111) << 4;    // 3-bit value, bits 6:4
 8004da4:	793b      	ldrb	r3, [r7, #4]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dae:	713b      	strb	r3, [r7, #4]

  res |= SX1509B_ReadReg(RegMisc, &regMisc);
 8004db0:	f107 030d 	add.w	r3, r7, #13
 8004db4:	4619      	mov	r1, r3
 8004db6:	201f      	movs	r0, #31
 8004db8:	f7ff ff2c 	bl	8004c14 <SX1509B_ReadReg>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	73fb      	strb	r3, [r7, #15]
  regMisc &= ~(0b111 << 4);
 8004dc6:	7b7b      	ldrb	r3, [r7, #13]
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	737b      	strb	r3, [r7, #13]
  regMisc |= oscDivider;
 8004dd0:	7b7a      	ldrb	r2, [r7, #13]
 8004dd2:	793b      	ldrb	r3, [r7, #4]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	737b      	strb	r3, [r7, #13]
  SX1509B_WriteReg(RegMisc, regMisc);
 8004dda:	7b7b      	ldrb	r3, [r7, #13]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	201f      	movs	r0, #31
 8004de0:	f7ff fed2 	bl	8004b88 <SX1509B_WriteReg>
  return res;
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd90      	pop	{r4, r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20014cb4 	.word	0x20014cb4
 8004df4:	00000000 	.word	0x00000000
 8004df8:	413e8480 	.word	0x413e8480

08004dfc <SX1509B_LedBreathe>:
  tempWord &= ~(1 << pin);
  res |= SX1509B_WriteRegSequence(RegDataB, tempWord);
  return res;
}
uint8_t  SX1509B_LedBreathe(uint8_t pin, uint8_t IOnX, uint8_t TRiseX, uint8_t TOnX, uint8_t TFallX, uint8_t OffX)
{
 8004dfc:	b590      	push	{r4, r7, lr}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	4604      	mov	r4, r0
 8004e04:	4608      	mov	r0, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	71fb      	strb	r3, [r7, #7]
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71bb      	strb	r3, [r7, #6]
 8004e12:	460b      	mov	r3, r1
 8004e14:	717b      	strb	r3, [r7, #5]
 8004e16:	4613      	mov	r3, r2
 8004e18:	713b      	strb	r3, [r7, #4]
//  uint16_t tempWord;
  uint8_t res = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
  uint8_t I2C_Data[6] = {0};
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	2300      	movs	r3, #0
 8004e24:	81bb      	strh	r3, [r7, #12]
  uint8_t regStart = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	73bb      	strb	r3, [r7, #14]
  if(pin == 4 || pin == 5 || pin == 6 || pin == 7 || pin == 12 || pin == 13 || pin == 14 || pin == 15)
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d014      	beq.n	8004e5a <SX1509B_LedBreathe+0x5e>
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d011      	beq.n	8004e5a <SX1509B_LedBreathe+0x5e>
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	2b06      	cmp	r3, #6
 8004e3a:	d00e      	beq.n	8004e5a <SX1509B_LedBreathe+0x5e>
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	2b07      	cmp	r3, #7
 8004e40:	d00b      	beq.n	8004e5a <SX1509B_LedBreathe+0x5e>
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	2b0c      	cmp	r3, #12
 8004e46:	d008      	beq.n	8004e5a <SX1509B_LedBreathe+0x5e>
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	2b0d      	cmp	r3, #13
 8004e4c:	d005      	beq.n	8004e5a <SX1509B_LedBreathe+0x5e>
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	2b0e      	cmp	r3, #14
 8004e52:	d002      	beq.n	8004e5a <SX1509B_LedBreathe+0x5e>
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	2b0f      	cmp	r3, #15
 8004e58:	d13a      	bne.n	8004ed0 <SX1509B_LedBreathe+0xd4>
  {
    if(pin <= 7)
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	2b07      	cmp	r3, #7
 8004e5e:	d807      	bhi.n	8004e70 <SX1509B_LedBreathe+0x74>
    {
      regStart = RegTOn4 + (pin - 4) * 5;
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	461a      	mov	r2, r3
 8004e64:	0092      	lsls	r2, r2, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	3321      	adds	r3, #33	; 0x21
 8004e6c:	73bb      	strb	r3, [r7, #14]
 8004e6e:	e006      	b.n	8004e7e <SX1509B_LedBreathe+0x82>
    }
    else
    {
      regStart = RegTOn12 + (pin - 12) * 5;
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	461a      	mov	r2, r3
 8004e74:	0092      	lsls	r2, r2, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	3319      	adds	r3, #25
 8004e7c:	73bb      	strb	r3, [r7, #14]
    }
    printf("regStart = 0x%02X\n", regStart);
 8004e7e:	7bbb      	ldrb	r3, [r7, #14]
 8004e80:	4619      	mov	r1, r3
 8004e82:	4817      	ldr	r0, [pc, #92]	; (8004ee0 <SX1509B_LedBreathe+0xe4>)
 8004e84:	f012 ffc0 	bl	8017e08 <iprintf>
    I2C_Data[0] = regStart;
 8004e88:	7bbb      	ldrb	r3, [r7, #14]
 8004e8a:	723b      	strb	r3, [r7, #8]
    I2C_Data[1] = TOnX;
 8004e8c:	793b      	ldrb	r3, [r7, #4]
 8004e8e:	727b      	strb	r3, [r7, #9]
    I2C_Data[2] = IOnX;
 8004e90:	79bb      	ldrb	r3, [r7, #6]
 8004e92:	72bb      	strb	r3, [r7, #10]
    I2C_Data[3] = OffX;
 8004e94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e98:	72fb      	strb	r3, [r7, #11]
    I2C_Data[4] = TRiseX;
 8004e9a:	797b      	ldrb	r3, [r7, #5]
 8004e9c:	733b      	strb	r3, [r7, #12]
    I2C_Data[5] = TFallX;
 8004e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ea2:	737b      	strb	r3, [r7, #13]
    res |=  HAL_I2C_Master_Transmit(&hi2c1,(SX1509B_I2C_ADDRESS << 1), I2C_Data, sizeof(I2C_Data), 1000);
 8004ea4:	f107 0208 	add.w	r2, r7, #8
 8004ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2306      	movs	r3, #6
 8004eb0:	217c      	movs	r1, #124	; 0x7c
 8004eb2:	480c      	ldr	r0, [pc, #48]	; (8004ee4 <SX1509B_LedBreathe+0xe8>)
 8004eb4:	f004 f8c4 	bl	8009040 <HAL_I2C_Master_Transmit>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	461a      	mov	r2, r3
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	73fb      	strb	r3, [r7, #15]
    // Set REG_DATA bit low ~ LED driver started
//    res |= SX1509B_ReadRegSequence(RegDataB, &tempWord);
//    tempWord &= ~(1 << pin);
//    res |= SX1509B_WriteRegSequence(RegDataB, tempWord);
    if(res == HAL_OK)
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d105      	bne.n	8004ed4 <SX1509B_LedBreathe+0xd8>
    {
      printf("Config Led breathe OK\n");
 8004ec8:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <SX1509B_LedBreathe+0xec>)
 8004eca:	f013 f823 	bl	8017f14 <puts>
    if(res == HAL_OK)
 8004ece:	e001      	b.n	8004ed4 <SX1509B_LedBreathe+0xd8>
    }
  }
  else
  {
    res = 1;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	0801ab20 	.word	0x0801ab20
 8004ee4:	20001c1c 	.word	0x20001c1c
 8004ee8:	0801ab34 	.word	0x0801ab34

08004eec <SX1509B_EnableInterrupt>:
//{
//  //if(GPIO_Init.Mode == )
//
//}
uint8_t SX1509B_EnableInterrupt(uint8_t pin, uint8_t riseFall)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	460a      	mov	r2, r1
 8004ef6:	71fb      	strb	r3, [r7, #7]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	71bb      	strb	r3, [r7, #6]
  uint8_t res = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	737b      	strb	r3, [r7, #13]
  uint8_t sensitivity = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	73fb      	strb	r3, [r7, #15]
  uint8_t pinMask;

  uint8_t senseRegister;
  // Set REG_INTERRUPT_MASK
  uint16_t tempWord;
  res = SX1509B_ReadRegSequence(RegInterruptMaskB, &tempWord);
 8004f04:	f107 030a 	add.w	r3, r7, #10
 8004f08:	4619      	mov	r1, r3
 8004f0a:	2012      	movs	r0, #18
 8004f0c:	f7ff fea6 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004f10:	4603      	mov	r3, r0
 8004f12:	737b      	strb	r3, [r7, #13]
  tempWord &= ~(1 << pin); // 0 = event on IO will trigger interrupt
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	2201      	movs	r2, #1
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	b21b      	sxth	r3, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	b21a      	sxth	r2, r3
 8004f22:	897b      	ldrh	r3, [r7, #10]
 8004f24:	b21b      	sxth	r3, r3
 8004f26:	4013      	ands	r3, r2
 8004f28:	b21b      	sxth	r3, r3
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	817b      	strh	r3, [r7, #10]
  res |= SX1509B_WriteRegSequence(RegInterruptMaskB, tempWord);
 8004f2e:	897b      	ldrh	r3, [r7, #10]
 8004f30:	4619      	mov	r1, r3
 8004f32:	2012      	movs	r0, #18
 8004f34:	f7ff fe48 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	7b7b      	ldrb	r3, [r7, #13]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	737b      	strb	r3, [r7, #13]
  // Sensitivity is set as follows:
  // 00: None
  // 01: Rising
  // 10: Falling
  // 11: Both
  switch (riseFall)
 8004f42:	79bb      	ldrb	r3, [r7, #6]
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d00c      	beq.n	8004f62 <SX1509B_EnableInterrupt+0x76>
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	dc0d      	bgt.n	8004f68 <SX1509B_EnableInterrupt+0x7c>
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d002      	beq.n	8004f56 <SX1509B_EnableInterrupt+0x6a>
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d003      	beq.n	8004f5c <SX1509B_EnableInterrupt+0x70>
 8004f54:	e008      	b.n	8004f68 <SX1509B_EnableInterrupt+0x7c>
  {
  case CHANGE:
    sensitivity = 0b11;
 8004f56:	2303      	movs	r3, #3
 8004f58:	73fb      	strb	r3, [r7, #15]
    break;
 8004f5a:	e005      	b.n	8004f68 <SX1509B_EnableInterrupt+0x7c>
  case FALLING:
    sensitivity = 0b10;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8004f60:	e002      	b.n	8004f68 <SX1509B_EnableInterrupt+0x7c>
  case RISING:
    sensitivity = 0b01;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
    break;
 8004f66:	bf00      	nop
  }
  pinMask = (pin & 0x07) * 2;
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	733b      	strb	r3, [r7, #12]


  // Need to select between two words. One for bank A, one for B.
  if (pin >= 8)
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	2b07      	cmp	r3, #7
 8004f78:	d902      	bls.n	8004f80 <SX1509B_EnableInterrupt+0x94>
  {
    senseRegister = RegSenseHighB;
 8004f7a:	2314      	movs	r3, #20
 8004f7c:	73bb      	strb	r3, [r7, #14]
 8004f7e:	e001      	b.n	8004f84 <SX1509B_EnableInterrupt+0x98>
  }
  else
  {
    senseRegister = RegSenseHighA;
 8004f80:	2316      	movs	r3, #22
 8004f82:	73bb      	strb	r3, [r7, #14]
  }
  res |= SX1509B_ReadRegSequence(senseRegister, &tempWord);
 8004f84:	f107 020a 	add.w	r2, r7, #10
 8004f88:	7bbb      	ldrb	r3, [r7, #14]
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fe65 	bl	8004c5c <SX1509B_ReadRegSequence>
 8004f92:	4603      	mov	r3, r0
 8004f94:	461a      	mov	r2, r3
 8004f96:	7b7b      	ldrb	r3, [r7, #13]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	737b      	strb	r3, [r7, #13]
  tempWord &= ~(0b11 << pinMask);     // Mask out the bits we want to write
 8004f9c:	7b3b      	ldrb	r3, [r7, #12]
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	b21b      	sxth	r3, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	b21a      	sxth	r2, r3
 8004faa:	897b      	ldrh	r3, [r7, #10]
 8004fac:	b21b      	sxth	r3, r3
 8004fae:	4013      	ands	r3, r2
 8004fb0:	b21b      	sxth	r3, r3
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	817b      	strh	r3, [r7, #10]
  tempWord |= (sensitivity << pinMask); // Add our new bits
 8004fb6:	7bfa      	ldrb	r2, [r7, #15]
 8004fb8:	7b3b      	ldrb	r3, [r7, #12]
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	b21a      	sxth	r2, r3
 8004fc0:	897b      	ldrh	r3, [r7, #10]
 8004fc2:	b21b      	sxth	r3, r3
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	b21b      	sxth	r3, r3
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	817b      	strh	r3, [r7, #10]
  res |= SX1509B_WriteRegSequence(senseRegister, tempWord);
 8004fcc:	897a      	ldrh	r2, [r7, #10]
 8004fce:	7bbb      	ldrb	r3, [r7, #14]
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fdf8 	bl	8004bc8 <SX1509B_WriteRegSequence>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	7b7b      	ldrb	r3, [r7, #13]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	737b      	strb	r3, [r7, #13]
  return res;
 8004fe2:	7b7b      	ldrb	r3, [r7, #13]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <SX1509B_InterruptSource>:

  res |= SX1509B_DebounceConfig(configValue);
  return res;
}
uint16_t SX1509B_InterruptSource(bool clear /* =true*/)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	71fb      	strb	r3, [r7, #7]
  uint16_t intSource;
  (void)SX1509B_ReadRegSequence(RegInterruptSourceB, &intSource);
 8004ff6:	f107 030e 	add.w	r3, r7, #14
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	2018      	movs	r0, #24
 8004ffe:	f7ff fe2d 	bl	8004c5c <SX1509B_ReadRegSequence>
  if (clear)
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d004      	beq.n	8005012 <SX1509B_InterruptSource+0x26>
  {
    (void)SX1509B_WriteRegSequence(RegInterruptSourceB, 0xFFFF); // Clear interrupts
 8005008:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800500c:	2018      	movs	r0, #24
 800500e:	f7ff fddb 	bl	8004bc8 <SX1509B_WriteRegSequence>
  }
  return intSource;
 8005012:	89fb      	ldrh	r3, [r7, #14]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <SX1509B_SearchInterruptPin>:
    return true;
  }
  return false;
}
bool SX1509B_SearchInterruptPin(uint8_t *detectPin)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  ;
  uint16_t intSource;
  uint8_t i;
  intSource = SX1509B_InterruptSource(false);
 8005024:	2000      	movs	r0, #0
 8005026:	f7ff ffe1 	bl	8004fec <SX1509B_InterruptSource>
 800502a:	4603      	mov	r3, r0
 800502c:	81bb      	strh	r3, [r7, #12]
  for(i = 0; i < 16; i++)
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
 8005032:	e00a      	b.n	800504a <SX1509B_SearchInterruptPin+0x2e>
  {
    if(intSource & (1 << i)) break;
 8005034:	89ba      	ldrh	r2, [r7, #12]
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	fa42 f303 	asr.w	r3, r2, r3
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <SX1509B_SearchInterruptPin+0x36>
  for(i = 0; i < 16; i++)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	3301      	adds	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	2b0f      	cmp	r3, #15
 800504e:	d9f1      	bls.n	8005034 <SX1509B_SearchInterruptPin+0x18>
 8005050:	e000      	b.n	8005054 <SX1509B_SearchInterruptPin+0x38>
    if(intSource & (1 << i)) break;
 8005052:	bf00      	nop
  }
  if(i < 16)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b0f      	cmp	r3, #15
 8005058:	d804      	bhi.n	8005064 <SX1509B_SearchInterruptPin+0x48>
  {
    *detectPin = i;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	7bfa      	ldrb	r2, [r7, #15]
 800505e:	701a      	strb	r2, [r3, #0]
    return true;
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <SX1509B_SearchInterruptPin+0x4a>
  }
  else
  {
    return false;
 8005064:	2300      	movs	r3, #0
  }
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <LCD_BackLight_On>:
extern STC3100_INFO Batt;
//extern uint16_t Audio.MaxSong;
extern AUDIO Audio;
uint8_t SCREEN_MUSIC_MAX_LIST = 0;
void LCD_BackLight_On(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  ST7789_BACKLIGHT_On();
 8005074:	2201      	movs	r2, #1
 8005076:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800507a:	4802      	ldr	r0, [pc, #8]	; (8005084 <LCD_BackLight_On+0x14>)
 800507c:	f003 fe6a 	bl	8008d54 <HAL_GPIO_WritePin>
}
 8005080:	bf00      	nop
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40020800 	.word	0x40020800

08005088 <LCD_BackLight_Off>:
void LCD_BackLight_Off(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  ST7789_BACKLIGHT_Off();
 800508c:	2200      	movs	r2, #0
 800508e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005092:	4802      	ldr	r0, [pc, #8]	; (800509c <LCD_BackLight_Off+0x14>)
 8005094:	f003 fe5e 	bl	8008d54 <HAL_GPIO_WritePin>
}
 8005098:	bf00      	nop
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40020800 	.word	0x40020800

080050a0 <ListMusic_Init>:
void ListMusic_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
  bool need_roll_back = false;
 80050a6:	2300      	movs	r3, #0
 80050a8:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j;
  Display.CursorListMusic = Audio.CurrentSong;
 80050aa:	4b35      	ldr	r3, [pc, #212]	; (8005180 <ListMusic_Init+0xe0>)
 80050ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80050b0:	f8b3 21d4 	ldrh.w	r2, [r3, #468]	; 0x1d4
 80050b4:	4b33      	ldr	r3, [pc, #204]	; (8005184 <ListMusic_Init+0xe4>)
 80050b6:	811a      	strh	r2, [r3, #8]
  Display.CursorLCDScreenMusic = 0;
 80050b8:	4b32      	ldr	r3, [pc, #200]	; (8005184 <ListMusic_Init+0xe4>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	729a      	strb	r2, [r3, #10]
  Display.LCDBacklightStatus = true;
 80050be:	4b31      	ldr	r3, [pc, #196]	; (8005184 <ListMusic_Init+0xe4>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  Display.LCDBackLightTime = 20;
 80050c6:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <ListMusic_Init+0xe4>)
 80050c8:	2214      	movs	r2, #20
 80050ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  Display.Mode = CREATE_PLAY_MUSIC;
 80050ce:	4b2d      	ldr	r3, [pc, #180]	; (8005184 <ListMusic_Init+0xe4>)
 80050d0:	2202      	movs	r2, #2
 80050d2:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SCREEN_MUSIC_MAX_LIST; i++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	71bb      	strb	r3, [r7, #6]
 80050d8:	e021      	b.n	800511e <ListMusic_Init+0x7e>
  {
    Display.ListLCDScreenMusic[i] = Display.CursorListMusic + i;
 80050da:	4b2a      	ldr	r3, [pc, #168]	; (8005184 <ListMusic_Init+0xe4>)
 80050dc:	891b      	ldrh	r3, [r3, #8]
 80050de:	b299      	uxth	r1, r3
 80050e0:	79bb      	ldrb	r3, [r7, #6]
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	79bb      	ldrb	r3, [r7, #6]
 80050e6:	440a      	add	r2, r1
 80050e8:	b291      	uxth	r1, r2
 80050ea:	4a26      	ldr	r2, [pc, #152]	; (8005184 <ListMusic_Init+0xe4>)
 80050ec:	3304      	adds	r3, #4
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	460a      	mov	r2, r1
 80050f4:	809a      	strh	r2, [r3, #4]
    if(Display.CursorListMusic + i > Audio.MaxSong - 1)
 80050f6:	4b22      	ldr	r3, [pc, #136]	; (8005180 <ListMusic_Init+0xe0>)
 80050f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80050fc:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8005100:	461a      	mov	r2, r3
 8005102:	4b20      	ldr	r3, [pc, #128]	; (8005184 <ListMusic_Init+0xe4>)
 8005104:	891b      	ldrh	r3, [r3, #8]
 8005106:	b29b      	uxth	r3, r3
 8005108:	4619      	mov	r1, r3
 800510a:	79bb      	ldrb	r3, [r7, #6]
 800510c:	440b      	add	r3, r1
 800510e:	429a      	cmp	r2, r3
 8005110:	dc02      	bgt.n	8005118 <ListMusic_Init+0x78>
    {
      need_roll_back = true;
 8005112:	2301      	movs	r3, #1
 8005114:	71fb      	strb	r3, [r7, #7]
      break;
 8005116:	e007      	b.n	8005128 <ListMusic_Init+0x88>
  for(i = 0; i < SCREEN_MUSIC_MAX_LIST; i++)
 8005118:	79bb      	ldrb	r3, [r7, #6]
 800511a:	3301      	adds	r3, #1
 800511c:	71bb      	strb	r3, [r7, #6]
 800511e:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <ListMusic_Init+0xe8>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	79ba      	ldrb	r2, [r7, #6]
 8005124:	429a      	cmp	r2, r3
 8005126:	d3d8      	bcc.n	80050da <ListMusic_Init+0x3a>
    }
  }
  if(need_roll_back == true)
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d017      	beq.n	800515e <ListMusic_Init+0xbe>
  {
    for(j = i; j < SCREEN_MUSIC_MAX_LIST; j++)
 800512e:	79bb      	ldrb	r3, [r7, #6]
 8005130:	717b      	strb	r3, [r7, #5]
 8005132:	e00f      	b.n	8005154 <ListMusic_Init+0xb4>
    {
      Display.ListLCDScreenMusic[j] = j - i;
 8005134:	797b      	ldrb	r3, [r7, #5]
 8005136:	b299      	uxth	r1, r3
 8005138:	79bb      	ldrb	r3, [r7, #6]
 800513a:	b29a      	uxth	r2, r3
 800513c:	797b      	ldrb	r3, [r7, #5]
 800513e:	1a8a      	subs	r2, r1, r2
 8005140:	b291      	uxth	r1, r2
 8005142:	4a10      	ldr	r2, [pc, #64]	; (8005184 <ListMusic_Init+0xe4>)
 8005144:	3304      	adds	r3, #4
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	4413      	add	r3, r2
 800514a:	460a      	mov	r2, r1
 800514c:	809a      	strh	r2, [r3, #4]
    for(j = i; j < SCREEN_MUSIC_MAX_LIST; j++)
 800514e:	797b      	ldrb	r3, [r7, #5]
 8005150:	3301      	adds	r3, #1
 8005152:	717b      	strb	r3, [r7, #5]
 8005154:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <ListMusic_Init+0xe8>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	797a      	ldrb	r2, [r7, #5]
 800515a:	429a      	cmp	r2, r3
 800515c:	d3ea      	bcc.n	8005134 <ListMusic_Init+0x94>
    }
  }
  Audio.PreviousSong = Audio.CurrentSong;
 800515e:	4b08      	ldr	r3, [pc, #32]	; (8005180 <ListMusic_Init+0xe0>)
 8005160:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005164:	f8b3 21d4 	ldrh.w	r2, [r3, #468]	; 0x1d4
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <ListMusic_Init+0xe0>)
 800516a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800516e:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
  Audio_CreatePreviousSongList();
 8005172:	f7fd fb43 	bl	80027fc <Audio_CreatePreviousSongList>
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	2000cc84 	.word	0x2000cc84
 8005184:	20014cb8 	.word	0x20014cb8
 8005188:	20014ce4 	.word	0x20014ce4

0800518c <ListLCDScreen_RollDown>:
void ListLCDScreen_RollDown(void)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
  if(Display.Mode == LIST_MUSIC)
 8005192:	4b45      	ldr	r3, [pc, #276]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b05      	cmp	r3, #5
 800519a:	d145      	bne.n	8005228 <ListLCDScreen_RollDown+0x9c>
  {
    for(uint8_t i = 0; i < SCREEN_MUSIC_MAX_LIST; i++)
 800519c:	2300      	movs	r3, #0
 800519e:	71fb      	strb	r3, [r7, #7]
 80051a0:	e03c      	b.n	800521c <ListLCDScreen_RollDown+0x90>
    {
      if(i < SCREEN_MUSIC_MAX_LIST - 1)
 80051a2:	79fa      	ldrb	r2, [r7, #7]
 80051a4:	4b41      	ldr	r3, [pc, #260]	; (80052ac <ListLCDScreen_RollDown+0x120>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	429a      	cmp	r2, r3
 80051ac:	da0f      	bge.n	80051ce <ListLCDScreen_RollDown+0x42>
      {
        Display.ListLCDScreenMusic[i] = Display.ListLCDScreenMusic[i + 1];
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	3301      	adds	r3, #1
 80051b2:	79fa      	ldrb	r2, [r7, #7]
 80051b4:	493c      	ldr	r1, [pc, #240]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 80051b6:	3304      	adds	r3, #4
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	440b      	add	r3, r1
 80051bc:	889b      	ldrh	r3, [r3, #4]
 80051be:	b298      	uxth	r0, r3
 80051c0:	4939      	ldr	r1, [pc, #228]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 80051c2:	1d13      	adds	r3, r2, #4
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	440b      	add	r3, r1
 80051c8:	4602      	mov	r2, r0
 80051ca:	809a      	strh	r2, [r3, #4]
 80051cc:	e023      	b.n	8005216 <ListLCDScreen_RollDown+0x8a>
      }
      else
      {
        Display.ListLCDScreenMusic[i]++;
 80051ce:	79fa      	ldrb	r2, [r7, #7]
 80051d0:	4935      	ldr	r1, [pc, #212]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 80051d2:	1d13      	adds	r3, r2, #4
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	440b      	add	r3, r1
 80051d8:	889b      	ldrh	r3, [r3, #4]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3301      	adds	r3, #1
 80051de:	b298      	uxth	r0, r3
 80051e0:	4931      	ldr	r1, [pc, #196]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 80051e2:	1d13      	adds	r3, r2, #4
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	440b      	add	r3, r1
 80051e8:	4602      	mov	r2, r0
 80051ea:	809a      	strh	r2, [r3, #4]
        if(Display.ListLCDScreenMusic[i] >= Audio.MaxSong)
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	4a2e      	ldr	r2, [pc, #184]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 80051f0:	3304      	adds	r3, #4
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4413      	add	r3, r2
 80051f6:	889b      	ldrh	r3, [r3, #4]
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <ListLCDScreen_RollDown+0x124>)
 80051fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005200:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8005204:	429a      	cmp	r2, r3
 8005206:	d306      	bcc.n	8005216 <ListLCDScreen_RollDown+0x8a>
        {
          Display.ListLCDScreenMusic[i] = 0;
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	4a27      	ldr	r2, [pc, #156]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 800520c:	3304      	adds	r3, #4
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	4413      	add	r3, r2
 8005212:	2200      	movs	r2, #0
 8005214:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < SCREEN_MUSIC_MAX_LIST; i++)
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	3301      	adds	r3, #1
 800521a:	71fb      	strb	r3, [r7, #7]
 800521c:	4b23      	ldr	r3, [pc, #140]	; (80052ac <ListLCDScreen_RollDown+0x120>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	79fa      	ldrb	r2, [r7, #7]
 8005222:	429a      	cmp	r2, r3
 8005224:	d3bd      	bcc.n	80051a2 <ListLCDScreen_RollDown+0x16>
          Display.ListLCDScreenSetting[i] = SETTING_MAX_ELEMENT - 1; // keep cursor setting to last element
        }
      }
    }
  }
}
 8005226:	e039      	b.n	800529c <ListLCDScreen_RollDown+0x110>
  else if(Display.Mode == SETTING)
 8005228:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b07      	cmp	r3, #7
 8005230:	d134      	bne.n	800529c <ListLCDScreen_RollDown+0x110>
    for(uint8_t i = 0; i < SCREEN_SETTING_MAX_LIST; i++)
 8005232:	2300      	movs	r3, #0
 8005234:	71bb      	strb	r3, [r7, #6]
 8005236:	e02e      	b.n	8005296 <ListLCDScreen_RollDown+0x10a>
      if(i < SCREEN_SETTING_MAX_LIST - 1)
 8005238:	79bb      	ldrb	r3, [r7, #6]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d80d      	bhi.n	800525a <ListLCDScreen_RollDown+0xce>
        Display.ListLCDScreenSetting[i] = Display.ListLCDScreenSetting[i + 1];
 800523e:	79bb      	ldrb	r3, [r7, #6]
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	79bb      	ldrb	r3, [r7, #6]
 8005244:	4918      	ldr	r1, [pc, #96]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 8005246:	440a      	add	r2, r1
 8005248:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800524c:	b2d1      	uxtb	r1, r2
 800524e:	4a16      	ldr	r2, [pc, #88]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 8005250:	4413      	add	r3, r2
 8005252:	460a      	mov	r2, r1
 8005254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005258:	e01a      	b.n	8005290 <ListLCDScreen_RollDown+0x104>
        Display.ListLCDScreenSetting[i]++;
 800525a:	79bb      	ldrb	r3, [r7, #6]
 800525c:	4a12      	ldr	r2, [pc, #72]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 800525e:	441a      	add	r2, r3
 8005260:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	3201      	adds	r2, #1
 8005268:	b2d1      	uxtb	r1, r2
 800526a:	4a0f      	ldr	r2, [pc, #60]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 800526c:	4413      	add	r3, r2
 800526e:	460a      	mov	r2, r1
 8005270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        if(Display.ListLCDScreenSetting[i] >= SETTING_MAX_ELEMENT)
 8005274:	79bb      	ldrb	r3, [r7, #6]
 8005276:	4a0c      	ldr	r2, [pc, #48]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 8005278:	4413      	add	r3, r2
 800527a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d905      	bls.n	8005290 <ListLCDScreen_RollDown+0x104>
          Display.ListLCDScreenSetting[i] = SETTING_MAX_ELEMENT - 1; // keep cursor setting to last element
 8005284:	79bb      	ldrb	r3, [r7, #6]
 8005286:	4a08      	ldr	r2, [pc, #32]	; (80052a8 <ListLCDScreen_RollDown+0x11c>)
 8005288:	4413      	add	r3, r2
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    for(uint8_t i = 0; i < SCREEN_SETTING_MAX_LIST; i++)
 8005290:	79bb      	ldrb	r3, [r7, #6]
 8005292:	3301      	adds	r3, #1
 8005294:	71bb      	strb	r3, [r7, #6]
 8005296:	79bb      	ldrb	r3, [r7, #6]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d9cd      	bls.n	8005238 <ListLCDScreen_RollDown+0xac>
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	20014cb8 	.word	0x20014cb8
 80052ac:	20014ce4 	.word	0x20014ce4
 80052b0:	2000cc84 	.word	0x2000cc84

080052b4 <ListLCDScreen_RollUp>:
void ListLCDScreen_RollUp(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
  if(Display.Mode == LIST_MUSIC)
 80052ba:	4b50      	ldr	r3, [pc, #320]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b05      	cmp	r3, #5
 80052c2:	d150      	bne.n	8005366 <ListLCDScreen_RollUp+0xb2>
  {
    for(int8_t i = SCREEN_MUSIC_MAX_LIST - 1 ; i > -1; i--)
 80052c4:	4b4e      	ldr	r3, [pc, #312]	; (8005400 <ListLCDScreen_RollUp+0x14c>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	71fb      	strb	r3, [r7, #7]
 80052ce:	e045      	b.n	800535c <ListLCDScreen_RollUp+0xa8>
    {
      if(i > 0)
 80052d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	dd11      	ble.n	80052fc <ListLCDScreen_RollUp+0x48>
      {
        Display.ListLCDScreenMusic[i] = Display.ListLCDScreenMusic[i - 1];
 80052d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052dc:	3b01      	subs	r3, #1
 80052de:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80052e2:	4946      	ldr	r1, [pc, #280]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 80052e4:	3304      	adds	r3, #4
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	440b      	add	r3, r1
 80052ea:	889b      	ldrh	r3, [r3, #4]
 80052ec:	b298      	uxth	r0, r3
 80052ee:	4943      	ldr	r1, [pc, #268]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 80052f0:	1d13      	adds	r3, r2, #4
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	440b      	add	r3, r1
 80052f6:	4602      	mov	r2, r0
 80052f8:	809a      	strh	r2, [r3, #4]
 80052fa:	e029      	b.n	8005350 <ListLCDScreen_RollUp+0x9c>
      }
      else
      {
        if(Display.ListLCDScreenMusic[i] == 0)
 80052fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005300:	4a3e      	ldr	r2, [pc, #248]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 8005302:	3304      	adds	r3, #4
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	4413      	add	r3, r2
 8005308:	889b      	ldrh	r3, [r3, #4]
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10f      	bne.n	8005330 <ListLCDScreen_RollUp+0x7c>
        {
          Display.ListLCDScreenMusic[i] = Audio.MaxSong - 1;
 8005310:	4b3c      	ldr	r3, [pc, #240]	; (8005404 <ListLCDScreen_RollUp+0x150>)
 8005312:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005316:	f8b3 21d2 	ldrh.w	r2, [r3, #466]	; 0x1d2
 800531a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531e:	3a01      	subs	r2, #1
 8005320:	b291      	uxth	r1, r2
 8005322:	4a36      	ldr	r2, [pc, #216]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 8005324:	3304      	adds	r3, #4
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	4413      	add	r3, r2
 800532a:	460a      	mov	r2, r1
 800532c:	809a      	strh	r2, [r3, #4]
 800532e:	e00f      	b.n	8005350 <ListLCDScreen_RollUp+0x9c>
        }
        else
        {
          Display.ListLCDScreenMusic[i]--;
 8005330:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005334:	4931      	ldr	r1, [pc, #196]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 8005336:	1d13      	adds	r3, r2, #4
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	440b      	add	r3, r1
 800533c:	889b      	ldrh	r3, [r3, #4]
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b298      	uxth	r0, r3
 8005344:	492d      	ldr	r1, [pc, #180]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 8005346:	1d13      	adds	r3, r2, #4
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	440b      	add	r3, r1
 800534c:	4602      	mov	r2, r0
 800534e:	809a      	strh	r2, [r3, #4]
    for(int8_t i = SCREEN_MUSIC_MAX_LIST - 1 ; i > -1; i--)
 8005350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b2db      	uxtb	r3, r3
 800535a:	71fb      	strb	r3, [r7, #7]
 800535c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005360:	2b00      	cmp	r3, #0
 8005362:	dab5      	bge.n	80052d0 <ListLCDScreen_RollUp+0x1c>
          Display.ListLCDScreenSetting[i]--;
        }
      }
    }
  }
}
 8005364:	e044      	b.n	80053f0 <ListLCDScreen_RollUp+0x13c>
  else if(Display.Mode == SETTING)
 8005366:	4b25      	ldr	r3, [pc, #148]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b07      	cmp	r3, #7
 800536e:	d13f      	bne.n	80053f0 <ListLCDScreen_RollUp+0x13c>
    for(int8_t i = SCREEN_SETTING_MAX_LIST - 1 ; i > -1; i--)
 8005370:	2302      	movs	r3, #2
 8005372:	71bb      	strb	r3, [r7, #6]
 8005374:	e038      	b.n	80053e8 <ListLCDScreen_RollUp+0x134>
      if(i > 0)
 8005376:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800537a:	2b00      	cmp	r3, #0
 800537c:	dd0f      	ble.n	800539e <ListLCDScreen_RollUp+0xea>
        Display.ListLCDScreenSetting[i] = Display.ListLCDScreenSetting[i - 1];
 800537e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005388:	491c      	ldr	r1, [pc, #112]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 800538a:	440a      	add	r2, r1
 800538c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005390:	b2d1      	uxtb	r1, r2
 8005392:	4a1a      	ldr	r2, [pc, #104]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 8005394:	4413      	add	r3, r2
 8005396:	460a      	mov	r2, r1
 8005398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800539c:	e01e      	b.n	80053dc <ListLCDScreen_RollUp+0x128>
        if(Display.ListLCDScreenSetting[i] == 0)
 800539e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80053a2:	4a16      	ldr	r2, [pc, #88]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 80053a4:	4413      	add	r3, r2
 80053a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d107      	bne.n	80053c0 <ListLCDScreen_RollUp+0x10c>
          Display.ListLCDScreenSetting[i] = 0;
 80053b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80053b4:	4a11      	ldr	r2, [pc, #68]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 80053b6:	4413      	add	r3, r2
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053be:	e00d      	b.n	80053dc <ListLCDScreen_RollUp+0x128>
          Display.ListLCDScreenSetting[i]--;
 80053c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80053c4:	4a0d      	ldr	r2, [pc, #52]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 80053c6:	441a      	add	r2, r3
 80053c8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	3a01      	subs	r2, #1
 80053d0:	b2d1      	uxtb	r1, r2
 80053d2:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <ListLCDScreen_RollUp+0x148>)
 80053d4:	4413      	add	r3, r2
 80053d6:	460a      	mov	r2, r1
 80053d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    for(int8_t i = SCREEN_SETTING_MAX_LIST - 1 ; i > -1; i--)
 80053dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	71bb      	strb	r3, [r7, #6]
 80053e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	dac2      	bge.n	8005376 <ListLCDScreen_RollUp+0xc2>
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	20014cb8 	.word	0x20014cb8
 8005400:	20014ce4 	.word	0x20014ce4
 8005404:	2000cc84 	.word	0x2000cc84

08005408 <Display_Update>:
void Display_Update(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af04      	add	r7, sp, #16
  switch(Display.Mode)
 800540e:	4b5e      	ldr	r3, [pc, #376]	; (8005588 <Display_Update+0x180>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b07      	cmp	r3, #7
 8005416:	f200 80ad 	bhi.w	8005574 <Display_Update+0x16c>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <Display_Update+0x18>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005575 	.word	0x08005575
 8005424:	08005575 	.word	0x08005575
 8005428:	08005495 	.word	0x08005495
 800542c:	080054d1 	.word	0x080054d1
 8005430:	08005441 	.word	0x08005441
 8005434:	08005465 	.word	0x08005465
 8005438:	0800551f 	.word	0x0800551f
 800543c:	08005543 	.word	0x08005543
    case MAIN:
      break;
    case INITIALIZE:
      break;
    case CREATE_LIST_MUSIC:
      Draw_CreateListMusic();
 8005440:	f000 feec 	bl	800621c <Draw_CreateListMusic>
      Draw_BatteryLevel(200, 5, BatteryPercentCalculation(Batt.voltage));
 8005444:	4b51      	ldr	r3, [pc, #324]	; (800558c <Display_Update+0x184>)
 8005446:	edd3 7a01 	vldr	s15, [r3, #4]
 800544a:	eeb0 0a67 	vmov.f32	s0, s15
 800544e:	f00a f94f 	bl	800f6f0 <BatteryPercentCalculation>
 8005452:	4603      	mov	r3, r0
 8005454:	461a      	mov	r2, r3
 8005456:	2105      	movs	r1, #5
 8005458:	20c8      	movs	r0, #200	; 0xc8
 800545a:	f000 fd43 	bl	8005ee4 <Draw_BatteryLevel>
      Display.Mode = LIST_MUSIC;
 800545e:	4b4a      	ldr	r3, [pc, #296]	; (8005588 <Display_Update+0x180>)
 8005460:	2205      	movs	r2, #5
 8005462:	701a      	strb	r2, [r3, #0]
    case LIST_MUSIC:
      if(Display.NeedToUpdateListMusic == true)
 8005464:	4b48      	ldr	r3, [pc, #288]	; (8005588 <Display_Update+0x180>)
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8084 	beq.w	8005578 <Display_Update+0x170>
      {
        osSemaphoreWait(binSemaphoreDisplayHandle, osWaitForever);
 8005470:	4b47      	ldr	r3, [pc, #284]	; (8005590 <Display_Update+0x188>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f04f 31ff 	mov.w	r1, #4294967295
 8005478:	4618      	mov	r0, r3
 800547a:	f00e fb79 	bl	8013b70 <osSemaphoreWait>
        Draw_ListMusic();
 800547e:	f000 feff 	bl	8006280 <Draw_ListMusic>
        osSemaphoreRelease(binSemaphoreDisplayHandle);
 8005482:	4b43      	ldr	r3, [pc, #268]	; (8005590 <Display_Update+0x188>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f00e fbc0 	bl	8013c0c <osSemaphoreRelease>
        Display.NeedToUpdateListMusic = false;
 800548c:	4b3e      	ldr	r3, [pc, #248]	; (8005588 <Display_Update+0x180>)
 800548e:	2200      	movs	r2, #0
 8005490:	705a      	strb	r2, [r3, #1]
      }
      break;
 8005492:	e071      	b.n	8005578 <Display_Update+0x170>
    case CREATE_PLAY_MUSIC:
      //osThreadSuspend(playAudioTaskHandle);
      osSemaphoreWait(binSemaphoreDisplayHandle, osWaitForever);
 8005494:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <Display_Update+0x188>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f04f 31ff 	mov.w	r1, #4294967295
 800549c:	4618      	mov	r0, r3
 800549e:	f00e fb67 	bl	8013b70 <osSemaphoreWait>
      Draw_CreatePlayMusic();
 80054a2:	f000 fc59 	bl	8005d58 <Draw_CreatePlayMusic>
      Draw_BatteryLevel(200, 5, BatteryPercentCalculation(Batt.voltage));
 80054a6:	4b39      	ldr	r3, [pc, #228]	; (800558c <Display_Update+0x184>)
 80054a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80054ac:	eeb0 0a67 	vmov.f32	s0, s15
 80054b0:	f00a f91e 	bl	800f6f0 <BatteryPercentCalculation>
 80054b4:	4603      	mov	r3, r0
 80054b6:	461a      	mov	r2, r3
 80054b8:	2105      	movs	r1, #5
 80054ba:	20c8      	movs	r0, #200	; 0xc8
 80054bc:	f000 fd12 	bl	8005ee4 <Draw_BatteryLevel>

      /*Start IT Timer */
//      HAL_TIM_Base_Start_IT(&htim2);
      //ST7789_DrawImage(0, 0, 23, 43, image_data_Font_0x38);
      Display.Mode = PLAY_MUSIC;
 80054c0:	4b31      	ldr	r3, [pc, #196]	; (8005588 <Display_Update+0x180>)
 80054c2:	2203      	movs	r2, #3
 80054c4:	701a      	strb	r2, [r3, #0]
      osSemaphoreRelease(binSemaphoreDisplayHandle);
 80054c6:	4b32      	ldr	r3, [pc, #200]	; (8005590 <Display_Update+0x188>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f00e fb9e 	bl	8013c0c <osSemaphoreRelease>
      //osThreadResume(playAudioTaskHandle);
    case PLAY_MUSIC:
      if(Display.NeedToUpdateCurrentTime == true)
 80054d0:	4b2d      	ldr	r3, [pc, #180]	; (8005588 <Display_Update+0x180>)
 80054d2:	7f1b      	ldrb	r3, [r3, #28]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d050      	beq.n	800557c <Display_Update+0x174>
      {
        //osSemaphoreWait(binSemaphoreDisplayHandle, osWaitForever);
        Draw_LineCircleProgressSmall(120, 100, 90, 20, 4, Display.CurrentTime * 100 / Display.DurationTime, GREEN);
 80054da:	4b2b      	ldr	r3, [pc, #172]	; (8005588 <Display_Update+0x180>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2264      	movs	r2, #100	; 0x64
 80054e0:	fb03 f202 	mul.w	r2, r3, r2
 80054e4:	4b28      	ldr	r3, [pc, #160]	; (8005588 <Display_Update+0x180>)
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80054f2:	9202      	str	r2, [sp, #8]
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	2304      	movs	r3, #4
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	2314      	movs	r3, #20
 80054fc:	225a      	movs	r2, #90	; 0x5a
 80054fe:	2164      	movs	r1, #100	; 0x64
 8005500:	2078      	movs	r0, #120	; 0x78
 8005502:	f000 f9a5 	bl	8005850 <Draw_LineCircleProgressSmall>
        Draw_DigitalClock(120, 100 - 2, Display.CurrentTime);
 8005506:	4b20      	ldr	r3, [pc, #128]	; (8005588 <Display_Update+0x180>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	b29b      	uxth	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	2162      	movs	r1, #98	; 0x62
 8005510:	2078      	movs	r0, #120	; 0x78
 8005512:	f000 fc7d 	bl	8005e10 <Draw_DigitalClock>
        //osSemaphoreRelease(binSemaphoreDisplayHandle);
        Display.NeedToUpdateCurrentTime = false;
 8005516:	4b1c      	ldr	r3, [pc, #112]	; (8005588 <Display_Update+0x180>)
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
      }
      break;
 800551c:	e02e      	b.n	800557c <Display_Update+0x174>
    case CREATE_SETTING:
      Draw_CreateSetting();
 800551e:	f001 f91b 	bl	8006758 <Draw_CreateSetting>
      Draw_BatteryLevel(200, 5, BatteryPercentCalculation(Batt.voltage));
 8005522:	4b1a      	ldr	r3, [pc, #104]	; (800558c <Display_Update+0x184>)
 8005524:	edd3 7a01 	vldr	s15, [r3, #4]
 8005528:	eeb0 0a67 	vmov.f32	s0, s15
 800552c:	f00a f8e0 	bl	800f6f0 <BatteryPercentCalculation>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	2105      	movs	r1, #5
 8005536:	20c8      	movs	r0, #200	; 0xc8
 8005538:	f000 fcd4 	bl	8005ee4 <Draw_BatteryLevel>
      Display.Mode = SETTING;
 800553c:	4b12      	ldr	r3, [pc, #72]	; (8005588 <Display_Update+0x180>)
 800553e:	2207      	movs	r2, #7
 8005540:	701a      	strb	r2, [r3, #0]
    case SETTING:
      if(Display.NeedToUpdateSetting == true)
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <Display_Update+0x180>)
 8005544:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d018      	beq.n	8005580 <Display_Update+0x178>
      {
        osSemaphoreWait(binSemaphoreDisplayHandle, osWaitForever);
 800554e:	4b10      	ldr	r3, [pc, #64]	; (8005590 <Display_Update+0x188>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f04f 31ff 	mov.w	r1, #4294967295
 8005556:	4618      	mov	r0, r3
 8005558:	f00e fb0a 	bl	8013b70 <osSemaphoreWait>
        Draw_ListSetting();
 800555c:	f001 f92e 	bl	80067bc <Draw_ListSetting>
        osSemaphoreRelease(binSemaphoreDisplayHandle);
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <Display_Update+0x188>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4618      	mov	r0, r3
 8005566:	f00e fb51 	bl	8013c0c <osSemaphoreRelease>
        Display.NeedToUpdateSetting = false;
 800556a:	4b07      	ldr	r3, [pc, #28]	; (8005588 <Display_Update+0x180>)
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
      break;
 8005572:	e005      	b.n	8005580 <Display_Update+0x178>
    default:
      break;
 8005574:	bf00      	nop
 8005576:	e004      	b.n	8005582 <Display_Update+0x17a>
      break;
 8005578:	bf00      	nop
 800557a:	e002      	b.n	8005582 <Display_Update+0x17a>
      break;
 800557c:	bf00      	nop
 800557e:	e000      	b.n	8005582 <Display_Update+0x17a>
      break;
 8005580:	bf00      	nop
  }
}
 8005582:	bf00      	nop
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20014cb8 	.word	0x20014cb8
 800558c:	2000007c 	.word	0x2000007c
 8005590:	20000b64 	.word	0x20000b64
 8005594:	00000000 	.word	0x00000000

08005598 <Draw_CreateLineCircleProgressFast>:
  }
  previous_quarter = curent_quarter - 1;
}
#define RADIUS_MAX 90
void Draw_CreateLineCircleProgressFast(uint16_t x0, uint16_t y0, uint16_t r, uint16_t width, uint8_t percent, uint16_t color)
{
 8005598:	b590      	push	{r4, r7, lr}
 800559a:	b089      	sub	sp, #36	; 0x24
 800559c:	af00      	add	r7, sp, #0
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	4611      	mov	r1, r2
 80055a4:	461a      	mov	r2, r3
 80055a6:	4623      	mov	r3, r4
 80055a8:	80fb      	strh	r3, [r7, #6]
 80055aa:	4603      	mov	r3, r0
 80055ac:	80bb      	strh	r3, [r7, #4]
 80055ae:	460b      	mov	r3, r1
 80055b0:	807b      	strh	r3, [r7, #2]
 80055b2:	4613      	mov	r3, r2
 80055b4:	803b      	strh	r3, [r7, #0]
  double alpha;
  uint8_t quarter;
  uint8_t curent_quarter;
  uint16_t convert_color, convert_bg_color;
//  uint16_t count = 0;
  if(r > RADIUS_MAX) return;
 80055b6:	887b      	ldrh	r3, [r7, #2]
 80055b8:	2b5a      	cmp	r3, #90	; 0x5a
 80055ba:	f200 8134 	bhi.w	8005826 <Draw_CreateLineCircleProgressFast+0x28e>

  convert_bg_color = ((WHITE & 0xFF) << 8) | ((WHITE & 0xFF00) >> 8);
 80055be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055c2:	833b      	strh	r3, [r7, #24]

  convert_color = ((color & 0xFF) << 8) | ((color & 0xFF00) >> 8);
 80055c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	b21a      	sxth	r2, r3
 80055ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	b21b      	sxth	r3, r3
 80055d2:	4313      	orrs	r3, r2
 80055d4:	b21b      	sxth	r3, r3
 80055d6:	82fb      	strh	r3, [r7, #22]

  //convert percent to deg
  alpha = (double)percent * 360 / 100;
 80055d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fa ff99 	bl	8000514 <__aeabi_ui2d>
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	4b94      	ldr	r3, [pc, #592]	; (8005838 <Draw_CreateLineCircleProgressFast+0x2a0>)
 80055e8:	f7fb f80e 	bl	8000608 <__aeabi_dmul>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4610      	mov	r0, r2
 80055f2:	4619      	mov	r1, r3
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	4b90      	ldr	r3, [pc, #576]	; (800583c <Draw_CreateLineCircleProgressFast+0x2a4>)
 80055fa:	f7fb f92f 	bl	800085c <__aeabi_ddiv>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	e9c7 2302 	strd	r2, r3, [r7, #8]

  if(alpha > 360)
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	4b8b      	ldr	r3, [pc, #556]	; (8005838 <Draw_CreateLineCircleProgressFast+0x2a0>)
 800560c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005610:	f7fb fa8a 	bl	8000b28 <__aeabi_dcmpgt>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <Draw_CreateLineCircleProgressFast+0x88>
  {
    quarter = 4;
 800561a:	2304      	movs	r3, #4
 800561c:	76fb      	strb	r3, [r7, #27]
 800561e:	e028      	b.n	8005672 <Draw_CreateLineCircleProgressFast+0xda>
  }
  else if(alpha > 270)
 8005620:	a383      	add	r3, pc, #524	; (adr r3, 8005830 <Draw_CreateLineCircleProgressFast+0x298>)
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800562a:	f7fb fa7d 	bl	8000b28 <__aeabi_dcmpgt>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <Draw_CreateLineCircleProgressFast+0xa2>
  {
    quarter = 4;
 8005634:	2304      	movs	r3, #4
 8005636:	76fb      	strb	r3, [r7, #27]
 8005638:	e01b      	b.n	8005672 <Draw_CreateLineCircleProgressFast+0xda>
  }
  else if(alpha > 180)
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	4b80      	ldr	r3, [pc, #512]	; (8005840 <Draw_CreateLineCircleProgressFast+0x2a8>)
 8005640:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005644:	f7fb fa70 	bl	8000b28 <__aeabi_dcmpgt>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <Draw_CreateLineCircleProgressFast+0xbc>
  {
    quarter = 3;
 800564e:	2303      	movs	r3, #3
 8005650:	76fb      	strb	r3, [r7, #27]
 8005652:	e00e      	b.n	8005672 <Draw_CreateLineCircleProgressFast+0xda>
  }
  else if(alpha > 90)
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	4b7a      	ldr	r3, [pc, #488]	; (8005844 <Draw_CreateLineCircleProgressFast+0x2ac>)
 800565a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800565e:	f7fb fa63 	bl	8000b28 <__aeabi_dcmpgt>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <Draw_CreateLineCircleProgressFast+0xd6>
  {
    quarter = 2;
 8005668:	2302      	movs	r3, #2
 800566a:	76fb      	strb	r3, [r7, #27]
 800566c:	e001      	b.n	8005672 <Draw_CreateLineCircleProgressFast+0xda>
  }
  else
  {
    quarter = 1;
 800566e:	2301      	movs	r3, #1
 8005670:	76fb      	strb	r3, [r7, #27]
  }
  for(curent_quarter = 0; curent_quarter < quarter; curent_quarter++)
 8005672:	2300      	movs	r3, #0
 8005674:	76bb      	strb	r3, [r7, #26]
 8005676:	e0d0      	b.n	800581a <Draw_CreateLineCircleProgressFast+0x282>
  {
    if(curent_quarter == 0)
 8005678:	7ebb      	ldrb	r3, [r7, #26]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d111      	bne.n	80056a2 <Draw_CreateLineCircleProgressFast+0x10a>
    {
      ST7789_SetAddressWindow(x0 , y0 - RADIUS_MAX, x0 + RADIUS_MAX, y0);
 800567e:	88bb      	ldrh	r3, [r7, #4]
 8005680:	3b5a      	subs	r3, #90	; 0x5a
 8005682:	b299      	uxth	r1, r3
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	335a      	adds	r3, #90	; 0x5a
 8005688:	b29a      	uxth	r2, r3
 800568a:	88bb      	ldrh	r3, [r7, #4]
 800568c:	88f8      	ldrh	r0, [r7, #6]
 800568e:	f001 f979 	bl	8006984 <ST7789_SetAddressWindow>
      MemsetBuffer(DisplayBuff, convert_bg_color, (RADIUS_MAX + 1) * (RADIUS_MAX + 1));
 8005692:	8b3b      	ldrh	r3, [r7, #24]
 8005694:	f242 0259 	movw	r2, #8281	; 0x2059
 8005698:	4619      	mov	r1, r3
 800569a:	486b      	ldr	r0, [pc, #428]	; (8005848 <Draw_CreateLineCircleProgressFast+0x2b0>)
 800569c:	f001 fa88 	bl	8006bb0 <MemsetBuffer>
 80056a0:	e03d      	b.n	800571e <Draw_CreateLineCircleProgressFast+0x186>
    }
    else if(curent_quarter == 1)
 80056a2:	7ebb      	ldrb	r3, [r7, #26]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d111      	bne.n	80056cc <Draw_CreateLineCircleProgressFast+0x134>
    {
      ST7789_SetAddressWindow(x0 , y0, x0 + RADIUS_MAX , y0 + RADIUS_MAX);
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	335a      	adds	r3, #90	; 0x5a
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	88bb      	ldrh	r3, [r7, #4]
 80056b0:	335a      	adds	r3, #90	; 0x5a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	88b9      	ldrh	r1, [r7, #4]
 80056b6:	88f8      	ldrh	r0, [r7, #6]
 80056b8:	f001 f964 	bl	8006984 <ST7789_SetAddressWindow>
      MemsetBuffer(DisplayBuff, convert_bg_color, (RADIUS_MAX + 1) * (RADIUS_MAX + 1));
 80056bc:	8b3b      	ldrh	r3, [r7, #24]
 80056be:	f242 0259 	movw	r2, #8281	; 0x2059
 80056c2:	4619      	mov	r1, r3
 80056c4:	4860      	ldr	r0, [pc, #384]	; (8005848 <Draw_CreateLineCircleProgressFast+0x2b0>)
 80056c6:	f001 fa73 	bl	8006bb0 <MemsetBuffer>
 80056ca:	e028      	b.n	800571e <Draw_CreateLineCircleProgressFast+0x186>
    }
    else if(curent_quarter == 2)
 80056cc:	7ebb      	ldrb	r3, [r7, #26]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d111      	bne.n	80056f6 <Draw_CreateLineCircleProgressFast+0x15e>
    {
      ST7789_SetAddressWindow(x0 - RADIUS_MAX , y0, x0, y0 + RADIUS_MAX);
 80056d2:	88fb      	ldrh	r3, [r7, #6]
 80056d4:	3b5a      	subs	r3, #90	; 0x5a
 80056d6:	b298      	uxth	r0, r3
 80056d8:	88bb      	ldrh	r3, [r7, #4]
 80056da:	335a      	adds	r3, #90	; 0x5a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	88b9      	ldrh	r1, [r7, #4]
 80056e2:	f001 f94f 	bl	8006984 <ST7789_SetAddressWindow>
      MemsetBuffer(DisplayBuff, convert_bg_color, (RADIUS_MAX + 1) * (RADIUS_MAX + 1));
 80056e6:	8b3b      	ldrh	r3, [r7, #24]
 80056e8:	f242 0259 	movw	r2, #8281	; 0x2059
 80056ec:	4619      	mov	r1, r3
 80056ee:	4856      	ldr	r0, [pc, #344]	; (8005848 <Draw_CreateLineCircleProgressFast+0x2b0>)
 80056f0:	f001 fa5e 	bl	8006bb0 <MemsetBuffer>
 80056f4:	e013      	b.n	800571e <Draw_CreateLineCircleProgressFast+0x186>
    }
    else if(curent_quarter == 3)
 80056f6:	7ebb      	ldrb	r3, [r7, #26]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d110      	bne.n	800571e <Draw_CreateLineCircleProgressFast+0x186>
    {
      ST7789_SetAddressWindow(x0 - RADIUS_MAX , y0 - RADIUS_MAX, x0, y0);
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	3b5a      	subs	r3, #90	; 0x5a
 8005700:	b298      	uxth	r0, r3
 8005702:	88bb      	ldrh	r3, [r7, #4]
 8005704:	3b5a      	subs	r3, #90	; 0x5a
 8005706:	b299      	uxth	r1, r3
 8005708:	88bb      	ldrh	r3, [r7, #4]
 800570a:	88fa      	ldrh	r2, [r7, #6]
 800570c:	f001 f93a 	bl	8006984 <ST7789_SetAddressWindow>
      MemsetBuffer(DisplayBuff, convert_bg_color, (RADIUS_MAX + 1) * (RADIUS_MAX + 1));
 8005710:	8b3b      	ldrh	r3, [r7, #24]
 8005712:	f242 0259 	movw	r2, #8281	; 0x2059
 8005716:	4619      	mov	r1, r3
 8005718:	484b      	ldr	r0, [pc, #300]	; (8005848 <Draw_CreateLineCircleProgressFast+0x2b0>)
 800571a:	f001 fa49 	bl	8006bb0 <MemsetBuffer>
    }
    for(x = 0; x <= r; x++)
 800571e:	2300      	movs	r3, #0
 8005720:	83fb      	strh	r3, [r7, #30]
 8005722:	e06e      	b.n	8005802 <Draw_CreateLineCircleProgressFast+0x26a>
    {
      for(y = 0; y <= r ; y++)
 8005724:	2300      	movs	r3, #0
 8005726:	83bb      	strh	r3, [r7, #28]
 8005728:	e062      	b.n	80057f0 <Draw_CreateLineCircleProgressFast+0x258>
      {
        if((x * x + y * y) < r * (r + 1))
 800572a:	8bfb      	ldrh	r3, [r7, #30]
 800572c:	8bfa      	ldrh	r2, [r7, #30]
 800572e:	fb03 f202 	mul.w	r2, r3, r2
 8005732:	8bbb      	ldrh	r3, [r7, #28]
 8005734:	8bb9      	ldrh	r1, [r7, #28]
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	441a      	add	r2, r3
 800573c:	887b      	ldrh	r3, [r7, #2]
 800573e:	8879      	ldrh	r1, [r7, #2]
 8005740:	3101      	adds	r1, #1
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	429a      	cmp	r2, r3
 8005748:	da57      	bge.n	80057fa <Draw_CreateLineCircleProgressFast+0x262>
        {
          if((x * x + y * y) >= (r - width + 1) * (r - width))
 800574a:	8bfb      	ldrh	r3, [r7, #30]
 800574c:	8bfa      	ldrh	r2, [r7, #30]
 800574e:	fb03 f202 	mul.w	r2, r3, r2
 8005752:	8bbb      	ldrh	r3, [r7, #28]
 8005754:	8bb9      	ldrh	r1, [r7, #28]
 8005756:	fb01 f303 	mul.w	r3, r1, r3
 800575a:	441a      	add	r2, r3
 800575c:	8879      	ldrh	r1, [r7, #2]
 800575e:	883b      	ldrh	r3, [r7, #0]
 8005760:	1acb      	subs	r3, r1, r3
 8005762:	3301      	adds	r3, #1
 8005764:	8878      	ldrh	r0, [r7, #2]
 8005766:	8839      	ldrh	r1, [r7, #0]
 8005768:	1a41      	subs	r1, r0, r1
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	429a      	cmp	r2, r3
 8005770:	db3b      	blt.n	80057ea <Draw_CreateLineCircleProgressFast+0x252>
          {
            if(curent_quarter == 0)
 8005772:	7ebb      	ldrb	r3, [r7, #26]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10b      	bne.n	8005790 <Draw_CreateLineCircleProgressFast+0x1f8>
            {
              DisplayBuff[(RADIUS_MAX + 1) * (RADIUS_MAX - y) + x] = convert_color;
 8005778:	8bbb      	ldrh	r3, [r7, #28]
 800577a:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800577e:	225b      	movs	r2, #91	; 0x5b
 8005780:	fb03 f202 	mul.w	r2, r3, r2
 8005784:	8bfb      	ldrh	r3, [r7, #30]
 8005786:	4413      	add	r3, r2
 8005788:	492f      	ldr	r1, [pc, #188]	; (8005848 <Draw_CreateLineCircleProgressFast+0x2b0>)
 800578a:	8afa      	ldrh	r2, [r7, #22]
 800578c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            if(curent_quarter == 1)
 8005790:	7ebb      	ldrb	r3, [r7, #26]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d109      	bne.n	80057aa <Draw_CreateLineCircleProgressFast+0x212>
            {
              DisplayBuff[(RADIUS_MAX + 1) * y + x] = convert_color;
 8005796:	8bbb      	ldrh	r3, [r7, #28]
 8005798:	225b      	movs	r2, #91	; 0x5b
 800579a:	fb03 f202 	mul.w	r2, r3, r2
 800579e:	8bfb      	ldrh	r3, [r7, #30]
 80057a0:	4413      	add	r3, r2
 80057a2:	4929      	ldr	r1, [pc, #164]	; (8005848 <Draw_CreateLineCircleProgressFast+0x2b0>)
 80057a4:	8afa      	ldrh	r2, [r7, #22]
 80057a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            if(curent_quarter == 2)
 80057aa:	7ebb      	ldrb	r3, [r7, #26]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d10b      	bne.n	80057c8 <Draw_CreateLineCircleProgressFast+0x230>
            {
              DisplayBuff[(RADIUS_MAX + 1) * y + ( RADIUS_MAX - x)] = convert_color;
 80057b0:	8bbb      	ldrh	r3, [r7, #28]
 80057b2:	225b      	movs	r2, #91	; 0x5b
 80057b4:	fb03 f202 	mul.w	r2, r3, r2
 80057b8:	8bfb      	ldrh	r3, [r7, #30]
 80057ba:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80057be:	4413      	add	r3, r2
 80057c0:	4921      	ldr	r1, [pc, #132]	; (8005848 <Draw_CreateLineCircleProgressFast+0x2b0>)
 80057c2:	8afa      	ldrh	r2, [r7, #22]
 80057c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            if(curent_quarter == 3)
 80057c8:	7ebb      	ldrb	r3, [r7, #26]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d10d      	bne.n	80057ea <Draw_CreateLineCircleProgressFast+0x252>
            {
              DisplayBuff[(RADIUS_MAX + 1) * ( RADIUS_MAX - y) + ( RADIUS_MAX - x)] = convert_color;
 80057ce:	8bbb      	ldrh	r3, [r7, #28]
 80057d0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80057d4:	225b      	movs	r2, #91	; 0x5b
 80057d6:	fb03 f202 	mul.w	r2, r3, r2
 80057da:	8bfb      	ldrh	r3, [r7, #30]
 80057dc:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80057e0:	4413      	add	r3, r2
 80057e2:	4919      	ldr	r1, [pc, #100]	; (8005848 <Draw_CreateLineCircleProgressFast+0x2b0>)
 80057e4:	8afa      	ldrh	r2, [r7, #22]
 80057e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      for(y = 0; y <= r ; y++)
 80057ea:	8bbb      	ldrh	r3, [r7, #28]
 80057ec:	3301      	adds	r3, #1
 80057ee:	83bb      	strh	r3, [r7, #28]
 80057f0:	8bba      	ldrh	r2, [r7, #28]
 80057f2:	887b      	ldrh	r3, [r7, #2]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d998      	bls.n	800572a <Draw_CreateLineCircleProgressFast+0x192>
 80057f8:	e000      	b.n	80057fc <Draw_CreateLineCircleProgressFast+0x264>
            }
          }
        }
        else
        {
          break;
 80057fa:	bf00      	nop
    for(x = 0; x <= r; x++)
 80057fc:	8bfb      	ldrh	r3, [r7, #30]
 80057fe:	3301      	adds	r3, #1
 8005800:	83fb      	strh	r3, [r7, #30]
 8005802:	8bfa      	ldrh	r2, [r7, #30]
 8005804:	887b      	ldrh	r3, [r7, #2]
 8005806:	429a      	cmp	r2, r3
 8005808:	d98c      	bls.n	8005724 <Draw_CreateLineCircleProgressFast+0x18c>
        }
      }
    }
    ST7789_WriteData((uint8_t*)DisplayBuff, (RADIUS_MAX + 1) * (RADIUS_MAX + 1) * 2);
 800580a:	f244 01b2 	movw	r1, #16562	; 0x40b2
 800580e:	480e      	ldr	r0, [pc, #56]	; (8005848 <Draw_CreateLineCircleProgressFast+0x2b0>)
 8005810:	f001 f816 	bl	8006840 <ST7789_WriteData>
  for(curent_quarter = 0; curent_quarter < quarter; curent_quarter++)
 8005814:	7ebb      	ldrb	r3, [r7, #26]
 8005816:	3301      	adds	r3, #1
 8005818:	76bb      	strb	r3, [r7, #26]
 800581a:	7eba      	ldrb	r2, [r7, #26]
 800581c:	7efb      	ldrb	r3, [r7, #27]
 800581e:	429a      	cmp	r2, r3
 8005820:	f4ff af2a 	bcc.w	8005678 <Draw_CreateLineCircleProgressFast+0xe0>
 8005824:	e000      	b.n	8005828 <Draw_CreateLineCircleProgressFast+0x290>
  if(r > RADIUS_MAX) return;
 8005826:	bf00      	nop
  }
}
 8005828:	3724      	adds	r7, #36	; 0x24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd90      	pop	{r4, r7, pc}
 800582e:	bf00      	nop
 8005830:	00000000 	.word	0x00000000
 8005834:	4070e000 	.word	0x4070e000
 8005838:	40768000 	.word	0x40768000
 800583c:	40590000 	.word	0x40590000
 8005840:	40668000 	.word	0x40668000
 8005844:	40568000 	.word	0x40568000
 8005848:	20014cec 	.word	0x20014cec
 800584c:	00000000 	.word	0x00000000

08005850 <Draw_LineCircleProgressSmall>:
void Draw_LineCircleProgressSmall(uint16_t x0, uint16_t y0, uint16_t r, uint16_t width, uint16_t small, uint8_t percent, uint16_t color)
{
 8005850:	b5b0      	push	{r4, r5, r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	4604      	mov	r4, r0
 8005858:	4608      	mov	r0, r1
 800585a:	4611      	mov	r1, r2
 800585c:	461a      	mov	r2, r3
 800585e:	4623      	mov	r3, r4
 8005860:	80fb      	strh	r3, [r7, #6]
 8005862:	4603      	mov	r3, r0
 8005864:	80bb      	strh	r3, [r7, #4]
 8005866:	460b      	mov	r3, r1
 8005868:	807b      	strh	r3, [r7, #2]
 800586a:	4613      	mov	r3, r2
 800586c:	803b      	strh	r3, [r7, #0]
  uint16_t x, y;
  double alpha;
  uint16_t alpha_split[4] = {0};
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	605a      	str	r2, [r3, #4]
  uint8_t quarter;
  uint8_t curent_quarter;
  static uint8_t previous_quarter = 0;
  //convert percent to deg
  alpha = (double)percent * 360 / 100;
 8005878:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800587c:	4618      	mov	r0, r3
 800587e:	f7fa fe49 	bl	8000514 <__aeabi_ui2d>
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	4b98      	ldr	r3, [pc, #608]	; (8005ae8 <Draw_LineCircleProgressSmall+0x298>)
 8005888:	f7fa febe 	bl	8000608 <__aeabi_dmul>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4610      	mov	r0, r2
 8005892:	4619      	mov	r1, r3
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	4b94      	ldr	r3, [pc, #592]	; (8005aec <Draw_LineCircleProgressSmall+0x29c>)
 800589a:	f7fa ffdf 	bl	800085c <__aeabi_ddiv>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if(alpha > 360)
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	4b8f      	ldr	r3, [pc, #572]	; (8005ae8 <Draw_LineCircleProgressSmall+0x298>)
 80058ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058b0:	f7fb f93a 	bl	8000b28 <__aeabi_dcmpgt>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <Draw_LineCircleProgressSmall+0x80>
  {
    alpha_split[0] = 90;
 80058ba:	235a      	movs	r3, #90	; 0x5a
 80058bc:	813b      	strh	r3, [r7, #8]
    alpha_split[1] = 90;
 80058be:	235a      	movs	r3, #90	; 0x5a
 80058c0:	817b      	strh	r3, [r7, #10]
    alpha_split[2] = 90;
 80058c2:	235a      	movs	r3, #90	; 0x5a
 80058c4:	81bb      	strh	r3, [r7, #12]
    alpha_split[3] = 90;
 80058c6:	235a      	movs	r3, #90	; 0x5a
 80058c8:	81fb      	strh	r3, [r7, #14]
    quarter = 4;
 80058ca:	2304      	movs	r3, #4
 80058cc:	76fb      	strb	r3, [r7, #27]
 80058ce:	e06b      	b.n	80059a8 <Draw_LineCircleProgressSmall+0x158>
  }
  else if(alpha > 270)
 80058d0:	a381      	add	r3, pc, #516	; (adr r3, 8005ad8 <Draw_LineCircleProgressSmall+0x288>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058da:	f7fb f925 	bl	8000b28 <__aeabi_dcmpgt>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <Draw_LineCircleProgressSmall+0xc6>
  {
    alpha_split[0] = 90;
 80058e4:	235a      	movs	r3, #90	; 0x5a
 80058e6:	813b      	strh	r3, [r7, #8]
    alpha_split[1] = 90;
 80058e8:	235a      	movs	r3, #90	; 0x5a
 80058ea:	817b      	strh	r3, [r7, #10]
    alpha_split[2] = 90;
 80058ec:	235a      	movs	r3, #90	; 0x5a
 80058ee:	81bb      	strh	r3, [r7, #12]
    alpha_split[3] = alpha - 270;
 80058f0:	a379      	add	r3, pc, #484	; (adr r3, 8005ad8 <Draw_LineCircleProgressSmall+0x288>)
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058fa:	f7fa fccd 	bl	8000298 <__aeabi_dsub>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4610      	mov	r0, r2
 8005904:	4619      	mov	r1, r3
 8005906:	f7fb f957 	bl	8000bb8 <__aeabi_d2uiz>
 800590a:	4603      	mov	r3, r0
 800590c:	b29b      	uxth	r3, r3
 800590e:	81fb      	strh	r3, [r7, #14]
    quarter = 4;
 8005910:	2304      	movs	r3, #4
 8005912:	76fb      	strb	r3, [r7, #27]
 8005914:	e048      	b.n	80059a8 <Draw_LineCircleProgressSmall+0x158>
  }
  else if(alpha > 180)
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	4b75      	ldr	r3, [pc, #468]	; (8005af0 <Draw_LineCircleProgressSmall+0x2a0>)
 800591c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005920:	f7fb f902 	bl	8000b28 <__aeabi_dcmpgt>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d016      	beq.n	8005958 <Draw_LineCircleProgressSmall+0x108>
  {
    alpha_split[0] = 90;
 800592a:	235a      	movs	r3, #90	; 0x5a
 800592c:	813b      	strh	r3, [r7, #8]
    alpha_split[1] = 90;
 800592e:	235a      	movs	r3, #90	; 0x5a
 8005930:	817b      	strh	r3, [r7, #10]
    alpha_split[2] = alpha - 180;
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	4b6e      	ldr	r3, [pc, #440]	; (8005af0 <Draw_LineCircleProgressSmall+0x2a0>)
 8005938:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800593c:	f7fa fcac 	bl	8000298 <__aeabi_dsub>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	f7fb f936 	bl	8000bb8 <__aeabi_d2uiz>
 800594c:	4603      	mov	r3, r0
 800594e:	b29b      	uxth	r3, r3
 8005950:	81bb      	strh	r3, [r7, #12]
    quarter = 3;
 8005952:	2303      	movs	r3, #3
 8005954:	76fb      	strb	r3, [r7, #27]
 8005956:	e027      	b.n	80059a8 <Draw_LineCircleProgressSmall+0x158>
  }
  else if(alpha > 90)
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	4b65      	ldr	r3, [pc, #404]	; (8005af4 <Draw_LineCircleProgressSmall+0x2a4>)
 800595e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005962:	f7fb f8e1 	bl	8000b28 <__aeabi_dcmpgt>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d014      	beq.n	8005996 <Draw_LineCircleProgressSmall+0x146>
  {
    alpha_split[0] = 90;
 800596c:	235a      	movs	r3, #90	; 0x5a
 800596e:	813b      	strh	r3, [r7, #8]
    alpha_split[1] = alpha - 90;
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	4b5f      	ldr	r3, [pc, #380]	; (8005af4 <Draw_LineCircleProgressSmall+0x2a4>)
 8005976:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800597a:	f7fa fc8d 	bl	8000298 <__aeabi_dsub>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4610      	mov	r0, r2
 8005984:	4619      	mov	r1, r3
 8005986:	f7fb f917 	bl	8000bb8 <__aeabi_d2uiz>
 800598a:	4603      	mov	r3, r0
 800598c:	b29b      	uxth	r3, r3
 800598e:	817b      	strh	r3, [r7, #10]
    quarter = 2;
 8005990:	2302      	movs	r3, #2
 8005992:	76fb      	strb	r3, [r7, #27]
 8005994:	e008      	b.n	80059a8 <Draw_LineCircleProgressSmall+0x158>
  }
  else
  {
    alpha_split[0] = alpha;
 8005996:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800599a:	f7fb f90d 	bl	8000bb8 <__aeabi_d2uiz>
 800599e:	4603      	mov	r3, r0
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	813b      	strh	r3, [r7, #8]
    quarter = 1;
 80059a4:	2301      	movs	r3, #1
 80059a6:	76fb      	strb	r3, [r7, #27]
  }
  if(Display.NeedToResetFullCircleProgress == true)
 80059a8:	4b53      	ldr	r3, [pc, #332]	; (8005af8 <Draw_LineCircleProgressSmall+0x2a8>)
 80059aa:	7f5b      	ldrb	r3, [r3, #29]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <Draw_LineCircleProgressSmall+0x16c>
  {
    Display.NeedToResetFullCircleProgress = false;
 80059b0:	4b51      	ldr	r3, [pc, #324]	; (8005af8 <Draw_LineCircleProgressSmall+0x2a8>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	775a      	strb	r2, [r3, #29]
    previous_quarter = 0;
 80059b6:	4b51      	ldr	r3, [pc, #324]	; (8005afc <Draw_LineCircleProgressSmall+0x2ac>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
  }
  for(curent_quarter = previous_quarter; curent_quarter < quarter; curent_quarter++)
 80059bc:	4b4f      	ldr	r3, [pc, #316]	; (8005afc <Draw_LineCircleProgressSmall+0x2ac>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	76bb      	strb	r3, [r7, #26]
 80059c2:	e1b1      	b.n	8005d28 <Draw_LineCircleProgressSmall+0x4d8>
  {
    for(x = 0; x <= r - small; x++)
 80059c4:	2300      	movs	r3, #0
 80059c6:	83fb      	strh	r3, [r7, #30]
 80059c8:	e1a4      	b.n	8005d14 <Draw_LineCircleProgressSmall+0x4c4>
    {
      for(y = 0; y <= r - small; y++)
 80059ca:	2300      	movs	r3, #0
 80059cc:	83bb      	strh	r3, [r7, #28]
 80059ce:	e195      	b.n	8005cfc <Draw_LineCircleProgressSmall+0x4ac>
      {
        if((x * x + y * y) < (r + 1 - small) * (r - small))
 80059d0:	8bfb      	ldrh	r3, [r7, #30]
 80059d2:	8bfa      	ldrh	r2, [r7, #30]
 80059d4:	fb03 f202 	mul.w	r2, r3, r2
 80059d8:	8bbb      	ldrh	r3, [r7, #28]
 80059da:	8bb9      	ldrh	r1, [r7, #28]
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	441a      	add	r2, r3
 80059e2:	887b      	ldrh	r3, [r7, #2]
 80059e4:	1c59      	adds	r1, r3, #1
 80059e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80059e8:	1acb      	subs	r3, r1, r3
 80059ea:	8878      	ldrh	r0, [r7, #2]
 80059ec:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80059ee:	1a41      	subs	r1, r0, r1
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	429a      	cmp	r2, r3
 80059f6:	f280 8189 	bge.w	8005d0c <Draw_LineCircleProgressSmall+0x4bc>
        {
          if((x * x + y * y) >= (r - width + small + 1) * (r - width + small))
 80059fa:	8bfb      	ldrh	r3, [r7, #30]
 80059fc:	8bfa      	ldrh	r2, [r7, #30]
 80059fe:	fb03 f202 	mul.w	r2, r3, r2
 8005a02:	8bbb      	ldrh	r3, [r7, #28]
 8005a04:	8bb9      	ldrh	r1, [r7, #28]
 8005a06:	fb01 f303 	mul.w	r3, r1, r3
 8005a0a:	441a      	add	r2, r3
 8005a0c:	8879      	ldrh	r1, [r7, #2]
 8005a0e:	883b      	ldrh	r3, [r7, #0]
 8005a10:	1ac9      	subs	r1, r1, r3
 8005a12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005a14:	440b      	add	r3, r1
 8005a16:	3301      	adds	r3, #1
 8005a18:	8878      	ldrh	r0, [r7, #2]
 8005a1a:	8839      	ldrh	r1, [r7, #0]
 8005a1c:	1a40      	subs	r0, r0, r1
 8005a1e:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8005a20:	4401      	add	r1, r0
 8005a22:	fb01 f303 	mul.w	r3, r1, r3
 8005a26:	429a      	cmp	r2, r3
 8005a28:	f2c0 8165 	blt.w	8005cf6 <Draw_LineCircleProgressSmall+0x4a6>
          {
            if((curent_quarter == 0) && (y != 0) && (((double)x / (double)y) <= tan((double)alpha_split[0] * 2 * PI / 360)))
 8005a2c:	7ebb      	ldrb	r3, [r7, #26]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d166      	bne.n	8005b00 <Draw_LineCircleProgressSmall+0x2b0>
 8005a32:	8bbb      	ldrh	r3, [r7, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d063      	beq.n	8005b00 <Draw_LineCircleProgressSmall+0x2b0>
 8005a38:	8bfb      	ldrh	r3, [r7, #30]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fa fd6a 	bl	8000514 <__aeabi_ui2d>
 8005a40:	4604      	mov	r4, r0
 8005a42:	460d      	mov	r5, r1
 8005a44:	8bbb      	ldrh	r3, [r7, #28]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fa fd64 	bl	8000514 <__aeabi_ui2d>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4620      	mov	r0, r4
 8005a52:	4629      	mov	r1, r5
 8005a54:	f7fa ff02 	bl	800085c <__aeabi_ddiv>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	461d      	mov	r5, r3
 8005a60:	893b      	ldrh	r3, [r7, #8]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fa fd56 	bl	8000514 <__aeabi_ui2d>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	f7fa fc16 	bl	800029c <__adddf3>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4610      	mov	r0, r2
 8005a76:	4619      	mov	r1, r3
 8005a78:	a319      	add	r3, pc, #100	; (adr r3, 8005ae0 <Draw_LineCircleProgressSmall+0x290>)
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	f7fa fdc3 	bl	8000608 <__aeabi_dmul>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4610      	mov	r0, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <Draw_LineCircleProgressSmall+0x298>)
 8005a90:	f7fa fee4 	bl	800085c <__aeabi_ddiv>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	ec43 2b17 	vmov	d7, r2, r3
 8005a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8005aa0:	eef0 0a67 	vmov.f32	s1, s15
 8005aa4:	f010 fc5c 	bl	8016360 <tan>
 8005aa8:	ec53 2b10 	vmov	r2, r3, d0
 8005aac:	4620      	mov	r0, r4
 8005aae:	4629      	mov	r1, r5
 8005ab0:	f7fb f826 	bl	8000b00 <__aeabi_dcmple>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d022      	beq.n	8005b00 <Draw_LineCircleProgressSmall+0x2b0>
            {
              ST7789_DrawPixel(x0 + x, y0 - y, color);
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	8bfb      	ldrh	r3, [r7, #30]
 8005abe:	4413      	add	r3, r2
 8005ac0:	b298      	uxth	r0, r3
 8005ac2:	88ba      	ldrh	r2, [r7, #4]
 8005ac4:	8bbb      	ldrh	r3, [r7, #28]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005acc:	4619      	mov	r1, r3
 8005ace:	f001 f91f 	bl	8006d10 <ST7789_DrawPixel>
 8005ad2:	e110      	b.n	8005cf6 <Draw_LineCircleProgressSmall+0x4a6>
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	00000000 	.word	0x00000000
 8005adc:	4070e000 	.word	0x4070e000
 8005ae0:	51eb851f 	.word	0x51eb851f
 8005ae4:	40091eb8 	.word	0x40091eb8
 8005ae8:	40768000 	.word	0x40768000
 8005aec:	40590000 	.word	0x40590000
 8005af0:	40668000 	.word	0x40668000
 8005af4:	40568000 	.word	0x40568000
 8005af8:	20014cb8 	.word	0x20014cb8
 8005afc:	20014ce5 	.word	0x20014ce5
            }
            else if((curent_quarter == 1) && (x != 0) && (((double)y / (double)x) <= tan((double)alpha_split[1] * 2 * PI / 360)))
 8005b00:	7ebb      	ldrb	r3, [r7, #26]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d150      	bne.n	8005ba8 <Draw_LineCircleProgressSmall+0x358>
 8005b06:	8bfb      	ldrh	r3, [r7, #30]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d04d      	beq.n	8005ba8 <Draw_LineCircleProgressSmall+0x358>
 8005b0c:	8bbb      	ldrh	r3, [r7, #28]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fa fd00 	bl	8000514 <__aeabi_ui2d>
 8005b14:	4604      	mov	r4, r0
 8005b16:	460d      	mov	r5, r1
 8005b18:	8bfb      	ldrh	r3, [r7, #30]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fa fcfa 	bl	8000514 <__aeabi_ui2d>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4620      	mov	r0, r4
 8005b26:	4629      	mov	r1, r5
 8005b28:	f7fa fe98 	bl	800085c <__aeabi_ddiv>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4614      	mov	r4, r2
 8005b32:	461d      	mov	r5, r3
 8005b34:	897b      	ldrh	r3, [r7, #10]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fa fcec 	bl	8000514 <__aeabi_ui2d>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	f7fa fbac 	bl	800029c <__adddf3>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	a37e      	add	r3, pc, #504	; (adr r3, 8005d48 <Draw_LineCircleProgressSmall+0x4f8>)
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f7fa fd59 	bl	8000608 <__aeabi_dmul>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	4b7b      	ldr	r3, [pc, #492]	; (8005d50 <Draw_LineCircleProgressSmall+0x500>)
 8005b64:	f7fa fe7a 	bl	800085c <__aeabi_ddiv>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	ec43 2b17 	vmov	d7, r2, r3
 8005b70:	eeb0 0a47 	vmov.f32	s0, s14
 8005b74:	eef0 0a67 	vmov.f32	s1, s15
 8005b78:	f010 fbf2 	bl	8016360 <tan>
 8005b7c:	ec53 2b10 	vmov	r2, r3, d0
 8005b80:	4620      	mov	r0, r4
 8005b82:	4629      	mov	r1, r5
 8005b84:	f7fa ffbc 	bl	8000b00 <__aeabi_dcmple>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00c      	beq.n	8005ba8 <Draw_LineCircleProgressSmall+0x358>
            {
              ST7789_DrawPixel(x0 + x, y0 + y, color);
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
 8005b90:	8bfb      	ldrh	r3, [r7, #30]
 8005b92:	4413      	add	r3, r2
 8005b94:	b298      	uxth	r0, r3
 8005b96:	88ba      	ldrh	r2, [r7, #4]
 8005b98:	8bbb      	ldrh	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	f001 f8b5 	bl	8006d10 <ST7789_DrawPixel>
 8005ba6:	e0a6      	b.n	8005cf6 <Draw_LineCircleProgressSmall+0x4a6>
            }
            else if((curent_quarter == 2) && (y != 0) && (((double)x / (double)y) <= tan((double)alpha_split[2] * 2 * PI / 360)))
 8005ba8:	7ebb      	ldrb	r3, [r7, #26]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d150      	bne.n	8005c50 <Draw_LineCircleProgressSmall+0x400>
 8005bae:	8bbb      	ldrh	r3, [r7, #28]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d04d      	beq.n	8005c50 <Draw_LineCircleProgressSmall+0x400>
 8005bb4:	8bfb      	ldrh	r3, [r7, #30]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fa fcac 	bl	8000514 <__aeabi_ui2d>
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	460d      	mov	r5, r1
 8005bc0:	8bbb      	ldrh	r3, [r7, #28]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fa fca6 	bl	8000514 <__aeabi_ui2d>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4620      	mov	r0, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	f7fa fe44 	bl	800085c <__aeabi_ddiv>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4614      	mov	r4, r2
 8005bda:	461d      	mov	r5, r3
 8005bdc:	89bb      	ldrh	r3, [r7, #12]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fa fc98 	bl	8000514 <__aeabi_ui2d>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	f7fa fb58 	bl	800029c <__adddf3>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	a354      	add	r3, pc, #336	; (adr r3, 8005d48 <Draw_LineCircleProgressSmall+0x4f8>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f7fa fd05 	bl	8000608 <__aeabi_dmul>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4610      	mov	r0, r2
 8005c04:	4619      	mov	r1, r3
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	4b51      	ldr	r3, [pc, #324]	; (8005d50 <Draw_LineCircleProgressSmall+0x500>)
 8005c0c:	f7fa fe26 	bl	800085c <__aeabi_ddiv>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	ec43 2b17 	vmov	d7, r2, r3
 8005c18:	eeb0 0a47 	vmov.f32	s0, s14
 8005c1c:	eef0 0a67 	vmov.f32	s1, s15
 8005c20:	f010 fb9e 	bl	8016360 <tan>
 8005c24:	ec53 2b10 	vmov	r2, r3, d0
 8005c28:	4620      	mov	r0, r4
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	f7fa ff68 	bl	8000b00 <__aeabi_dcmple>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00c      	beq.n	8005c50 <Draw_LineCircleProgressSmall+0x400>
            {
              ST7789_DrawPixel(x0 - x, y0 + y, color);
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	8bfb      	ldrh	r3, [r7, #30]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	b298      	uxth	r0, r3
 8005c3e:	88ba      	ldrh	r2, [r7, #4]
 8005c40:	8bbb      	ldrh	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005c48:	4619      	mov	r1, r3
 8005c4a:	f001 f861 	bl	8006d10 <ST7789_DrawPixel>
 8005c4e:	e052      	b.n	8005cf6 <Draw_LineCircleProgressSmall+0x4a6>
            }
            else if((curent_quarter == 3) && (x != 0) && (((double)y / (double)x) <= tan((double)alpha_split[3] * 2 * PI / 360)))
 8005c50:	7ebb      	ldrb	r3, [r7, #26]
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d14f      	bne.n	8005cf6 <Draw_LineCircleProgressSmall+0x4a6>
 8005c56:	8bfb      	ldrh	r3, [r7, #30]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d04c      	beq.n	8005cf6 <Draw_LineCircleProgressSmall+0x4a6>
 8005c5c:	8bbb      	ldrh	r3, [r7, #28]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fa fc58 	bl	8000514 <__aeabi_ui2d>
 8005c64:	4604      	mov	r4, r0
 8005c66:	460d      	mov	r5, r1
 8005c68:	8bfb      	ldrh	r3, [r7, #30]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fa fc52 	bl	8000514 <__aeabi_ui2d>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4620      	mov	r0, r4
 8005c76:	4629      	mov	r1, r5
 8005c78:	f7fa fdf0 	bl	800085c <__aeabi_ddiv>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4614      	mov	r4, r2
 8005c82:	461d      	mov	r5, r3
 8005c84:	89fb      	ldrh	r3, [r7, #14]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fa fc44 	bl	8000514 <__aeabi_ui2d>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	f7fa fb04 	bl	800029c <__adddf3>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	a32a      	add	r3, pc, #168	; (adr r3, 8005d48 <Draw_LineCircleProgressSmall+0x4f8>)
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f7fa fcb1 	bl	8000608 <__aeabi_dmul>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4610      	mov	r0, r2
 8005cac:	4619      	mov	r1, r3
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <Draw_LineCircleProgressSmall+0x500>)
 8005cb4:	f7fa fdd2 	bl	800085c <__aeabi_ddiv>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	ec43 2b17 	vmov	d7, r2, r3
 8005cc0:	eeb0 0a47 	vmov.f32	s0, s14
 8005cc4:	eef0 0a67 	vmov.f32	s1, s15
 8005cc8:	f010 fb4a 	bl	8016360 <tan>
 8005ccc:	ec53 2b10 	vmov	r2, r3, d0
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	f7fa ff14 	bl	8000b00 <__aeabi_dcmple>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00b      	beq.n	8005cf6 <Draw_LineCircleProgressSmall+0x4a6>
            {
              ST7789_DrawPixel(x0 - x, y0 - y, color);
 8005cde:	88fa      	ldrh	r2, [r7, #6]
 8005ce0:	8bfb      	ldrh	r3, [r7, #30]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	b298      	uxth	r0, r3
 8005ce6:	88ba      	ldrh	r2, [r7, #4]
 8005ce8:	8bbb      	ldrh	r3, [r7, #28]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	f001 f80d 	bl	8006d10 <ST7789_DrawPixel>
      for(y = 0; y <= r - small; y++)
 8005cf6:	8bbb      	ldrh	r3, [r7, #28]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	83bb      	strh	r3, [r7, #28]
 8005cfc:	8bba      	ldrh	r2, [r7, #28]
 8005cfe:	8879      	ldrh	r1, [r7, #2]
 8005d00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d02:	1acb      	subs	r3, r1, r3
 8005d04:	429a      	cmp	r2, r3
 8005d06:	f77f ae63 	ble.w	80059d0 <Draw_LineCircleProgressSmall+0x180>
 8005d0a:	e000      	b.n	8005d0e <Draw_LineCircleProgressSmall+0x4be>
            }
          }
        }
        else
        {
          break;
 8005d0c:	bf00      	nop
    for(x = 0; x <= r - small; x++)
 8005d0e:	8bfb      	ldrh	r3, [r7, #30]
 8005d10:	3301      	adds	r3, #1
 8005d12:	83fb      	strh	r3, [r7, #30]
 8005d14:	8bfa      	ldrh	r2, [r7, #30]
 8005d16:	8879      	ldrh	r1, [r7, #2]
 8005d18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d1a:	1acb      	subs	r3, r1, r3
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	f77f ae54 	ble.w	80059ca <Draw_LineCircleProgressSmall+0x17a>
  for(curent_quarter = previous_quarter; curent_quarter < quarter; curent_quarter++)
 8005d22:	7ebb      	ldrb	r3, [r7, #26]
 8005d24:	3301      	adds	r3, #1
 8005d26:	76bb      	strb	r3, [r7, #26]
 8005d28:	7eba      	ldrb	r2, [r7, #26]
 8005d2a:	7efb      	ldrb	r3, [r7, #27]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	f4ff ae49 	bcc.w	80059c4 <Draw_LineCircleProgressSmall+0x174>
        }
      }
    }
  }
  previous_quarter = curent_quarter - 1;
 8005d32:	7ebb      	ldrb	r3, [r7, #26]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <Draw_LineCircleProgressSmall+0x504>)
 8005d3a:	701a      	strb	r2, [r3, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	3720      	adds	r7, #32
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bdb0      	pop	{r4, r5, r7, pc}
 8005d44:	f3af 8000 	nop.w
 8005d48:	51eb851f 	.word	0x51eb851f
 8005d4c:	40091eb8 	.word	0x40091eb8
 8005d50:	40768000 	.word	0x40768000
 8005d54:	20014ce5 	.word	0x20014ce5

08005d58 <Draw_CreatePlayMusic>:
  printf("counter = %d\n", counter);
  previous_quarter = curent_quarter - 1;
  //printf("previous_quarter = %d, x = %d, y = %d\n", previous_quarter, previous_x, previous_y);
}
void Draw_CreatePlayMusic(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b09e      	sub	sp, #120	; 0x78
 8005d5c:	af04      	add	r7, sp, #16
  char name[100] = {0};
 8005d5e:	2300      	movs	r3, #0
 8005d60:	607b      	str	r3, [r7, #4]
 8005d62:	f107 0308 	add.w	r3, r7, #8
 8005d66:	2260      	movs	r2, #96	; 0x60
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f011 fbda 	bl	8017524 <memset>
  ST7789_Fill_Color(WHITE);
 8005d70:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005d74:	f000 ff36 	bl	8006be4 <ST7789_Fill_Color>
  Draw_CreateLineCircleProgressFast(120, 100, 90, 20, 100, BROWN);
 8005d78:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	2364      	movs	r3, #100	; 0x64
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	2314      	movs	r3, #20
 8005d84:	225a      	movs	r2, #90	; 0x5a
 8005d86:	2164      	movs	r1, #100	; 0x64
 8005d88:	2078      	movs	r0, #120	; 0x78
 8005d8a:	f7ff fc05 	bl	8005598 <Draw_CreateLineCircleProgressFast>
//  Draw_CreateLineCircleProgress(120, 100, 90, 20, 100, BROWN);
  ST7789_FillFullX(0, 200 - 4, ST7789_WIDTH - 1, 200 - 1, PINK);
 8005d8e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	23c7      	movs	r3, #199	; 0xc7
 8005d96:	22ef      	movs	r2, #239	; 0xef
 8005d98:	21c4      	movs	r1, #196	; 0xc4
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	f000 ff5e 	bl	8006c5c <ST7789_FillFullX>
  ST7789_ChangeStringToMiddle(name, &Audio.PlayList[Audio.CurrentSong][9], Font_11x18);
 8005da0:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <Draw_CreatePlayMusic+0xb0>)
 8005da2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005da6:	f8b3 31d4 	ldrh.w	r3, [r3, #468]	; 0x1d4
 8005daa:	461a      	mov	r2, r3
 8005dac:	2332      	movs	r3, #50	; 0x32
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	3309      	adds	r3, #9
 8005db4:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <Draw_CreatePlayMusic+0xb0>)
 8005db6:	4413      	add	r3, r2
 8005db8:	1d19      	adds	r1, r3, #4
 8005dba:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <Draw_CreatePlayMusic+0xb4>)
 8005dbc:	1d38      	adds	r0, r7, #4
 8005dbe:	cb0c      	ldmia	r3, {r2, r3}
 8005dc0:	f001 f9da 	bl	8007178 <ST7789_ChangeStringToMiddle>
  ST7789_WriteStringOnBackground(0, 200, name, Font_11x18, BLUE, CYAN);
 8005dc4:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <Draw_CreatePlayMusic+0xb4>)
 8005dc6:	1d39      	adds	r1, r7, #4
 8005dc8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005dcc:	9202      	str	r2, [sp, #8]
 8005dce:	221f      	movs	r2, #31
 8005dd0:	9201      	str	r2, [sp, #4]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	9200      	str	r2, [sp, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	460a      	mov	r2, r1
 8005dda:	21c8      	movs	r1, #200	; 0xc8
 8005ddc:	2000      	movs	r0, #0
 8005dde:	f001 f903 	bl	8006fe8 <ST7789_WriteStringOnBackground>
  ST7789_FillFullX(0, 200 + 36, ST7789_WIDTH - 1, 200 + 39, PINK);
 8005de2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	23ef      	movs	r3, #239	; 0xef
 8005dea:	22ef      	movs	r2, #239	; 0xef
 8005dec:	21ec      	movs	r1, #236	; 0xec
 8005dee:	2000      	movs	r0, #0
 8005df0:	f000 ff34 	bl	8006c5c <ST7789_FillFullX>
  Draw_DigitalClock(120, 100 - 2, 0);
 8005df4:	2200      	movs	r2, #0
 8005df6:	2162      	movs	r1, #98	; 0x62
 8005df8:	2078      	movs	r0, #120	; 0x78
 8005dfa:	f000 f809 	bl	8005e10 <Draw_DigitalClock>
}
 8005dfe:	bf00      	nop
 8005e00:	3768      	adds	r7, #104	; 0x68
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	2000cc84 	.word	0x2000cc84
 8005e0c:	2000089c 	.word	0x2000089c

08005e10 <Draw_DigitalClock>:
  //ST7789_DrawPixel(10, 100, BLACK);
  //ST7789_DrawFilledCircle(120, 120, 90, GREEN);
}

void Draw_DigitalClock(uint16_t x, uint16_t y, uint16_t time_sec)
{
 8005e10:	b5b0      	push	{r4, r5, r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	4603      	mov	r3, r0
 8005e18:	80fb      	strh	r3, [r7, #6]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	80bb      	strh	r3, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	807b      	strh	r3, [r7, #2]
  uint16_t m,s;
  char time_string[5] = {0};
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	2300      	movs	r3, #0
 8005e28:	743b      	strb	r3, [r7, #16]
  m = time_sec / 60;
 8005e2a:	887b      	ldrh	r3, [r7, #2]
 8005e2c:	4a2a      	ldr	r2, [pc, #168]	; (8005ed8 <Draw_DigitalClock+0xc8>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	82fb      	strh	r3, [r7, #22]
  s = time_sec % 60;
 8005e36:	887a      	ldrh	r2, [r7, #2]
 8005e38:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <Draw_DigitalClock+0xc8>)
 8005e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e3e:	0959      	lsrs	r1, r3, #5
 8005e40:	460b      	mov	r3, r1
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	1a5b      	subs	r3, r3, r1
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	82bb      	strh	r3, [r7, #20]
  time_string[0] = m / 10 + 0x30;
 8005e4c:	8afb      	ldrh	r3, [r7, #22]
 8005e4e:	4a23      	ldr	r2, [pc, #140]	; (8005edc <Draw_DigitalClock+0xcc>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	08db      	lsrs	r3, r3, #3
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	3330      	adds	r3, #48	; 0x30
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	733b      	strb	r3, [r7, #12]
  time_string[1] = m % 10 + 0x30;
 8005e60:	8afa      	ldrh	r2, [r7, #22]
 8005e62:	4b1e      	ldr	r3, [pc, #120]	; (8005edc <Draw_DigitalClock+0xcc>)
 8005e64:	fba3 1302 	umull	r1, r3, r3, r2
 8005e68:	08d9      	lsrs	r1, r3, #3
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	3330      	adds	r3, #48	; 0x30
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	737b      	strb	r3, [r7, #13]
  time_string[2] = ':';
 8005e7e:	233a      	movs	r3, #58	; 0x3a
 8005e80:	73bb      	strb	r3, [r7, #14]
  time_string[3] = s / 10 + 0x30;
 8005e82:	8abb      	ldrh	r3, [r7, #20]
 8005e84:	4a15      	ldr	r2, [pc, #84]	; (8005edc <Draw_DigitalClock+0xcc>)
 8005e86:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8a:	08db      	lsrs	r3, r3, #3
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	3330      	adds	r3, #48	; 0x30
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	73fb      	strb	r3, [r7, #15]
  time_string[4] = s % 10 + 0x30;
 8005e96:	8aba      	ldrh	r2, [r7, #20]
 8005e98:	4b10      	ldr	r3, [pc, #64]	; (8005edc <Draw_DigitalClock+0xcc>)
 8005e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9e:	08d9      	lsrs	r1, r3, #3
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	3330      	adds	r3, #48	; 0x30
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	743b      	strb	r3, [r7, #16]
  //ST7789_WriteStringToMiddle(x, y, time_string, sizeof(time_string), Font_16x26, RED, WHITE);
  ST7789_WriteStringImageToMiddle(x, y, time_string, sizeof(time_string), Font);
 8005eb4:	f107 020c 	add.w	r2, r7, #12
 8005eb8:	88bd      	ldrh	r5, [r7, #4]
 8005eba:	88fc      	ldrh	r4, [r7, #6]
 8005ebc:	4908      	ldr	r1, [pc, #32]	; (8005ee0 <Draw_DigitalClock+0xd0>)
 8005ebe:	466b      	mov	r3, sp
 8005ec0:	c903      	ldmia	r1, {r0, r1}
 8005ec2:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ec6:	2305      	movs	r3, #5
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f001 fc04 	bl	80076d8 <ST7789_WriteStringImageToMiddle>
}
 8005ed0:	bf00      	nop
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ed8:	88888889 	.word	0x88888889
 8005edc:	cccccccd 	.word	0xcccccccd
 8005ee0:	080481e0 	.word	0x080481e0

08005ee4 <Draw_BatteryLevel>:
//    100% --> 25 col
// => 80%  --> 20 col
void Draw_BatteryLevel(uint16_t x, uint16_t y, uint8_t percent)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	4603      	mov	r3, r0
 8005eec:	80fb      	strh	r3, [r7, #6]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	80bb      	strh	r3, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	70fb      	strb	r3, [r7, #3]
  uint16_t i, loop, j;
  loop = 25 - percent / 4;
 8005ef6:	78fb      	ldrb	r3, [r7, #3]
 8005ef8:	089b      	lsrs	r3, r3, #2
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f1c3 0319 	rsb	r3, r3, #25
 8005f02:	817b      	strh	r3, [r7, #10]
  for(i = 0; i < 16*32; i++)
 8005f04:	2300      	movs	r3, #0
 8005f06:	81fb      	strh	r3, [r7, #14]
 8005f08:	e00a      	b.n	8005f20 <Draw_BatteryLevel+0x3c>
  {
    batteryLevel[i] = Battery_Full[i];
 8005f0a:	89fa      	ldrh	r2, [r7, #14]
 8005f0c:	89fb      	ldrh	r3, [r7, #14]
 8005f0e:	494c      	ldr	r1, [pc, #304]	; (8006040 <Draw_BatteryLevel+0x15c>)
 8005f10:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8005f14:	4a4b      	ldr	r2, [pc, #300]	; (8006044 <Draw_BatteryLevel+0x160>)
 8005f16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i = 0; i < 16*32; i++)
 8005f1a:	89fb      	ldrh	r3, [r7, #14]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	81fb      	strh	r3, [r7, #14]
 8005f20:	89fb      	ldrh	r3, [r7, #14]
 8005f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f26:	d3f0      	bcc.n	8005f0a <Draw_BatteryLevel+0x26>
  }
  for(j = 0; j < loop; j++)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	81bb      	strh	r3, [r7, #12]
 8005f2c:	e017      	b.n	8005f5e <Draw_BatteryLevel+0x7a>
  {
    for(i = 0; i < 14; i++)
 8005f2e:	2300      	movs	r3, #0
 8005f30:	81fb      	strh	r3, [r7, #14]
 8005f32:	e00e      	b.n	8005f52 <Draw_BatteryLevel+0x6e>
    {
      batteryLevel[(1 + i)*32 + (27 - j)] = 0xffff;
 8005f34:	89fb      	ldrh	r3, [r7, #14]
 8005f36:	3301      	adds	r3, #1
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	89bb      	ldrh	r3, [r7, #12]
 8005f3c:	f1c3 031b 	rsb	r3, r3, #27
 8005f40:	4413      	add	r3, r2
 8005f42:	4a40      	ldr	r2, [pc, #256]	; (8006044 <Draw_BatteryLevel+0x160>)
 8005f44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(i = 0; i < 14; i++)
 8005f4c:	89fb      	ldrh	r3, [r7, #14]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	81fb      	strh	r3, [r7, #14]
 8005f52:	89fb      	ldrh	r3, [r7, #14]
 8005f54:	2b0d      	cmp	r3, #13
 8005f56:	d9ed      	bls.n	8005f34 <Draw_BatteryLevel+0x50>
  for(j = 0; j < loop; j++)
 8005f58:	89bb      	ldrh	r3, [r7, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	81bb      	strh	r3, [r7, #12]
 8005f5e:	89ba      	ldrh	r2, [r7, #12]
 8005f60:	897b      	ldrh	r3, [r7, #10]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d3e3      	bcc.n	8005f2e <Draw_BatteryLevel+0x4a>
    }
  }
  if(percent <= 20)
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	2b14      	cmp	r3, #20
 8005f6a:	d820      	bhi.n	8005fae <Draw_BatteryLevel+0xca>
  {
    for(j = 0; j < percent / 4 + 2; j++)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	81bb      	strh	r3, [r7, #12]
 8005f70:	e016      	b.n	8005fa0 <Draw_BatteryLevel+0xbc>
    {
      for(i = 0; i < 14; i++)
 8005f72:	2300      	movs	r3, #0
 8005f74:	81fb      	strh	r3, [r7, #14]
 8005f76:	e00d      	b.n	8005f94 <Draw_BatteryLevel+0xb0>
      {
        batteryLevel[(1 + i)*32 + (1 + j)] = 0xe7f1;
 8005f78:	89fb      	ldrh	r3, [r7, #14]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	89bb      	ldrh	r3, [r7, #12]
 8005f80:	3301      	adds	r3, #1
 8005f82:	4413      	add	r3, r2
 8005f84:	4a2f      	ldr	r2, [pc, #188]	; (8006044 <Draw_BatteryLevel+0x160>)
 8005f86:	f24e 71f1 	movw	r1, #59377	; 0xe7f1
 8005f8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for(i = 0; i < 14; i++)
 8005f8e:	89fb      	ldrh	r3, [r7, #14]
 8005f90:	3301      	adds	r3, #1
 8005f92:	81fb      	strh	r3, [r7, #14]
 8005f94:	89fb      	ldrh	r3, [r7, #14]
 8005f96:	2b0d      	cmp	r3, #13
 8005f98:	d9ee      	bls.n	8005f78 <Draw_BatteryLevel+0x94>
    for(j = 0; j < percent / 4 + 2; j++)
 8005f9a:	89bb      	ldrh	r3, [r7, #12]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	81bb      	strh	r3, [r7, #12]
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	089b      	lsrs	r3, r3, #2
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	89bb      	ldrh	r3, [r7, #12]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	dae1      	bge.n	8005f72 <Draw_BatteryLevel+0x8e>
      }
    }
  }
  if(HAL_GPIO_ReadPin(GPIOB, BAT_CHARGE_Pin) == 0)
 8005fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fb2:	4825      	ldr	r0, [pc, #148]	; (8006048 <Draw_BatteryLevel+0x164>)
 8005fb4:	f002 feb6 	bl	8008d24 <HAL_GPIO_ReadPin>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d12b      	bne.n	8006016 <Draw_BatteryLevel+0x132>
  {
    for(i = 0; i < 16; i++)
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	81fb      	strh	r3, [r7, #14]
 8005fc2:	e025      	b.n	8006010 <Draw_BatteryLevel+0x12c>
    {
      for(j = 0; j < 16; j++)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	81bb      	strh	r3, [r7, #12]
 8005fc8:	e01c      	b.n	8006004 <Draw_BatteryLevel+0x120>
      {
        if(Battery_Charge[16*i + j] != 0xffff)
 8005fca:	89fb      	ldrh	r3, [r7, #14]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	89bb      	ldrh	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	4a1e      	ldr	r2, [pc, #120]	; (800604c <Draw_BatteryLevel+0x168>)
 8005fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00e      	beq.n	8005ffe <Draw_BatteryLevel+0x11a>
        {
          batteryLevel[(0 + i)*32 + (8 + j)] = Battery_Charge[16*i + j];
 8005fe0:	89fb      	ldrh	r3, [r7, #14]
 8005fe2:	011a      	lsls	r2, r3, #4
 8005fe4:	89bb      	ldrh	r3, [r7, #12]
 8005fe6:	441a      	add	r2, r3
 8005fe8:	89fb      	ldrh	r3, [r7, #14]
 8005fea:	0159      	lsls	r1, r3, #5
 8005fec:	89bb      	ldrh	r3, [r7, #12]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	440b      	add	r3, r1
 8005ff2:	4916      	ldr	r1, [pc, #88]	; (800604c <Draw_BatteryLevel+0x168>)
 8005ff4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8005ff8:	4a12      	ldr	r2, [pc, #72]	; (8006044 <Draw_BatteryLevel+0x160>)
 8005ffa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for(j = 0; j < 16; j++)
 8005ffe:	89bb      	ldrh	r3, [r7, #12]
 8006000:	3301      	adds	r3, #1
 8006002:	81bb      	strh	r3, [r7, #12]
 8006004:	89bb      	ldrh	r3, [r7, #12]
 8006006:	2b0f      	cmp	r3, #15
 8006008:	d9df      	bls.n	8005fca <Draw_BatteryLevel+0xe6>
    for(i = 0; i < 16; i++)
 800600a:	89fb      	ldrh	r3, [r7, #14]
 800600c:	3301      	adds	r3, #1
 800600e:	81fb      	strh	r3, [r7, #14]
 8006010:	89fb      	ldrh	r3, [r7, #14]
 8006012:	2b0f      	cmp	r3, #15
 8006014:	d9d6      	bls.n	8005fc4 <Draw_BatteryLevel+0xe0>
        }
      }
    }
  }
  ST7789_DrawImage(x, y, 32, 16, (uint16_t *)batteryLevel);
 8006016:	88b9      	ldrh	r1, [r7, #4]
 8006018:	88f8      	ldrh	r0, [r7, #6]
 800601a:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <Draw_BatteryLevel+0x160>)
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	2310      	movs	r3, #16
 8006020:	2220      	movs	r2, #32
 8006022:	f000 fea9 	bl	8006d78 <ST7789_DrawImage>
  Draw_BatteryCheckProhibiton(x - 18, y);
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	3b12      	subs	r3, #18
 800602a:	b29b      	uxth	r3, r3
 800602c:	88ba      	ldrh	r2, [r7, #4]
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f000 f80d 	bl	8006050 <Draw_BatteryCheckProhibiton>
}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	080481e8 	.word	0x080481e8
 8006044:	20000098 	.word	0x20000098
 8006048:	40020400 	.word	0x40020400
 800604c:	080485e8 	.word	0x080485e8

08006050 <Draw_BatteryCheckProhibiton>:
void Draw_BatteryCheckProhibiton(uint16_t x, uint16_t y)
{
 8006050:	b590      	push	{r4, r7, lr}
 8006052:	b085      	sub	sp, #20
 8006054:	af02      	add	r7, sp, #8
 8006056:	4603      	mov	r3, r0
 8006058:	460a      	mov	r2, r1
 800605a:	80fb      	strh	r3, [r7, #6]
 800605c:	4613      	mov	r3, r2
 800605e:	80bb      	strh	r3, [r7, #4]
  if(BatteryStatus == 0)
 8006060:	4b12      	ldr	r3, [pc, #72]	; (80060ac <Draw_BatteryCheckProhibiton+0x5c>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01d      	beq.n	80060a4 <Draw_BatteryCheckProhibiton+0x54>
  {
    return;
  }
  else if(BatteryStatus == 1)
 8006068:	4b10      	ldr	r3, [pc, #64]	; (80060ac <Draw_BatteryCheckProhibiton+0x5c>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d108      	bne.n	8006082 <Draw_BatteryCheckProhibiton+0x32>
  {
    ST7789_DrawImage(x, y, 16, 16, (uint16_t *)Battery_Prohibiton);
 8006070:	88b9      	ldrh	r1, [r7, #4]
 8006072:	88f8      	ldrh	r0, [r7, #6]
 8006074:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <Draw_BatteryCheckProhibiton+0x60>)
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	2310      	movs	r3, #16
 800607a:	2210      	movs	r2, #16
 800607c:	f000 fe7c 	bl	8006d78 <ST7789_DrawImage>
 8006080:	e011      	b.n	80060a6 <Draw_BatteryCheckProhibiton+0x56>
  }
  else
  {
    ST7789_FillFullX(x, y, x + 16, y + 16, WHITE);
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	3310      	adds	r3, #16
 8006086:	b29a      	uxth	r2, r3
 8006088:	88bb      	ldrh	r3, [r7, #4]
 800608a:	3310      	adds	r3, #16
 800608c:	b29b      	uxth	r3, r3
 800608e:	88b9      	ldrh	r1, [r7, #4]
 8006090:	88f8      	ldrh	r0, [r7, #6]
 8006092:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8006096:	9400      	str	r4, [sp, #0]
 8006098:	f000 fde0 	bl	8006c5c <ST7789_FillFullX>
    BatteryStatus = 0;
 800609c:	4b03      	ldr	r3, [pc, #12]	; (80060ac <Draw_BatteryCheckProhibiton+0x5c>)
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e000      	b.n	80060a6 <Draw_BatteryCheckProhibiton+0x56>
    return;
 80060a4:	bf00      	nop
  }
}
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd90      	pop	{r4, r7, pc}
 80060ac:	20014cb0 	.word	0x20014cb0
 80060b0:	080487e8 	.word	0x080487e8

080060b4 <Draw_MusicNameFast>:
    x += font.width;
    i++;
  }
}
void Draw_MusicNameFast(uint16_t num, const char* str)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b0a4      	sub	sp, #144	; 0x90
 80060b8:	af04      	add	r7, sp, #16
 80060ba:	4603      	mov	r3, r0
 80060bc:	6039      	str	r1, [r7, #0]
 80060be:	80fb      	strh	r3, [r7, #6]
  uint8_t len = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint16_t x_start = X_START;
 80060c6:	2300      	movs	r3, #0
 80060c8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
  uint16_t y_start = Y_START;
 80060cc:	2328      	movs	r3, #40	; 0x28
 80060ce:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

  FontDef font = Font_11x18;
 80060d2:	4a4c      	ldr	r2, [pc, #304]	; (8006204 <Draw_MusicNameFast+0x150>)
 80060d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80060d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060dc:	e883 0003 	stmia.w	r3, {r0, r1}
  static uint16_t number_offset = 0;
  char song_name[100] = {0};
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	f107 0310 	add.w	r3, r7, #16
 80060e8:	2260      	movs	r2, #96	; 0x60
 80060ea:	2100      	movs	r1, #0
 80060ec:	4618      	mov	r0, r3
 80060ee:	f011 fa19 	bl	8017524 <memset>
  if(num >= Audio.MaxSong) return;
 80060f2:	4b45      	ldr	r3, [pc, #276]	; (8006208 <Draw_MusicNameFast+0x154>)
 80060f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80060f8:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 80060fc:	88fa      	ldrh	r2, [r7, #6]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d27b      	bcs.n	80061fa <Draw_MusicNameFast+0x146>
  len = sprintf(song_name, "%d. ", num + 1);
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	f107 030c 	add.w	r3, r7, #12
 800610a:	4940      	ldr	r1, [pc, #256]	; (800620c <Draw_MusicNameFast+0x158>)
 800610c:	4618      	mov	r0, r3
 800610e:	f011 ff09 	bl	8017f24 <siprintf>
 8006112:	4603      	mov	r3, r0
 8006114:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  strcat(song_name + len, str + 9);
 8006118:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800611c:	f107 020c 	add.w	r2, r7, #12
 8006120:	441a      	add	r2, r3
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	3309      	adds	r3, #9
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f011 ff1b 	bl	8017f64 <strcat>
  len = strlen(song_name);
 800612e:	f107 030c 	add.w	r3, r7, #12
 8006132:	4618      	mov	r0, r3
 8006134:	f7fa f854 	bl	80001e0 <strlen>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  y_start = y_start + number_offset * OFFSET_PER_NAME_SONG;
 800613e:	4b34      	ldr	r3, [pc, #208]	; (8006210 <Draw_MusicNameFast+0x15c>)
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	0092      	lsls	r2, r2, #2
 8006146:	4413      	add	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	b29a      	uxth	r2, r3
 800614c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006150:	4413      	add	r3, r2
 8006152:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

  number_offset++;
 8006156:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <Draw_MusicNameFast+0x15c>)
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	3301      	adds	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	4b2c      	ldr	r3, [pc, #176]	; (8006210 <Draw_MusicNameFast+0x15c>)
 8006160:	801a      	strh	r2, [r3, #0]
  if(number_offset >= SCREEN_MUSIC_MAX_LIST)
 8006162:	4b2c      	ldr	r3, [pc, #176]	; (8006214 <Draw_MusicNameFast+0x160>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	b29a      	uxth	r2, r3
 8006168:	4b29      	ldr	r3, [pc, #164]	; (8006210 <Draw_MusicNameFast+0x15c>)
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d802      	bhi.n	8006176 <Draw_MusicNameFast+0xc2>
  {
    number_offset = 0;
 8006170:	4b27      	ldr	r3, [pc, #156]	; (8006210 <Draw_MusicNameFast+0x15c>)
 8006172:	2200      	movs	r2, #0
 8006174:	801a      	strh	r2, [r3, #0]
  }

  if(Display.CursorListMusic == num)
 8006176:	4b28      	ldr	r3, [pc, #160]	; (8006218 <Draw_MusicNameFast+0x164>)
 8006178:	891b      	ldrh	r3, [r3, #8]
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	429a      	cmp	r2, r3
 800617e:	d110      	bne.n	80061a2 <Draw_MusicNameFast+0xee>
  {
    ST7789_WriteStringOnBackground(x_start, y_start, song_name, font, PINK, BLUE);
 8006180:	f107 020c 	add.w	r2, r7, #12
 8006184:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8006188:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 800618c:	231f      	movs	r3, #31
 800618e:	9302      	str	r3, [sp, #8]
 8006190:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800619c:	f000 ff24 	bl	8006fe8 <ST7789_WriteStringOnBackground>
 80061a0:	e02c      	b.n	80061fc <Draw_MusicNameFast+0x148>
  }
  else if(Audio.CurrentSong == num)
 80061a2:	4b19      	ldr	r3, [pc, #100]	; (8006208 <Draw_MusicNameFast+0x154>)
 80061a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80061a8:	f8b3 31d4 	ldrh.w	r3, [r3, #468]	; 0x1d4
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d111      	bne.n	80061d6 <Draw_MusicNameFast+0x122>
  {
    ST7789_WriteStringOnBackground(x_start, y_start, song_name, font, MUSIC_NAME_COLOR, GREEN);
 80061b2:	f107 020c 	add.w	r2, r7, #12
 80061b6:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 80061ba:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 80061be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80061c2:	9302      	str	r3, [sp, #8]
 80061c4:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061d0:	f000 ff0a 	bl	8006fe8 <ST7789_WriteStringOnBackground>
 80061d4:	e012      	b.n	80061fc <Draw_MusicNameFast+0x148>
  }
  else
  {
    ST7789_WriteStringOnBackground(x_start, y_start, song_name, font, MUSIC_NAME_COLOR, CYAN);
 80061d6:	f107 020c 	add.w	r2, r7, #12
 80061da:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 80061de:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 80061e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80061e6:	9302      	str	r3, [sp, #8]
 80061e8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f4:	f000 fef8 	bl	8006fe8 <ST7789_WriteStringOnBackground>
 80061f8:	e000      	b.n	80061fc <Draw_MusicNameFast+0x148>
  if(num >= Audio.MaxSong) return;
 80061fa:	bf00      	nop
  }
}
 80061fc:	3780      	adds	r7, #128	; 0x80
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	2000089c 	.word	0x2000089c
 8006208:	2000cc84 	.word	0x2000cc84
 800620c:	0801aba8 	.word	0x0801aba8
 8006210:	20014ce6 	.word	0x20014ce6
 8006214:	20014ce4 	.word	0x20014ce4
 8006218:	20014cb8 	.word	0x20014cb8

0800621c <Draw_CreateListMusic>:
void Draw_CreateListMusic(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af02      	add	r7, sp, #8
  ST7789_FillFullX(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8006222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	23ef      	movs	r3, #239	; 0xef
 800622a:	22ef      	movs	r2, #239	; 0xef
 800622c:	2100      	movs	r1, #0
 800622e:	2000      	movs	r0, #0
 8006230:	f000 fd14 	bl	8006c5c <ST7789_FillFullX>
  ST7789_FillFullX(0, 34, ST7789_WIDTH - 1, 38, PINK);
 8006234:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	2326      	movs	r3, #38	; 0x26
 800623c:	22ef      	movs	r2, #239	; 0xef
 800623e:	2122      	movs	r1, #34	; 0x22
 8006240:	2000      	movs	r0, #0
 8006242:	f000 fd0b 	bl	8006c5c <ST7789_FillFullX>
  ST7789_WriteStringToMiddle(8, "Play List", Font_11x18, RED, WHITE);
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <Draw_CreateListMusic+0x58>)
 8006248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800624c:	9201      	str	r2, [sp, #4]
 800624e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006252:	9200      	str	r2, [sp, #0]
 8006254:	cb0c      	ldmia	r3, {r2, r3}
 8006256:	4908      	ldr	r1, [pc, #32]	; (8006278 <Draw_CreateListMusic+0x5c>)
 8006258:	2008      	movs	r0, #8
 800625a:	f001 f9b1 	bl	80075c0 <ST7789_WriteStringToMiddle>
  ST7789_DrawImage(30, 1, 32, 32, (uint16_t *)Play_List_Icon);
 800625e:	4b07      	ldr	r3, [pc, #28]	; (800627c <Draw_CreateListMusic+0x60>)
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	2320      	movs	r3, #32
 8006264:	2220      	movs	r2, #32
 8006266:	2101      	movs	r1, #1
 8006268:	201e      	movs	r0, #30
 800626a:	f000 fd85 	bl	8006d78 <ST7789_DrawImage>
}
 800626e:	bf00      	nop
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	2000089c 	.word	0x2000089c
 8006278:	0801abb0 	.word	0x0801abb0
 800627c:	080489e8 	.word	0x080489e8

08006280 <Draw_ListMusic>:
void Draw_ListMusic(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
  for(uint8_t i = 0; i < SCREEN_MUSIC_MAX_LIST; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	71fb      	strb	r3, [r7, #7]
 800628a:	e019      	b.n	80062c0 <Draw_ListMusic+0x40>
  {
//    Draw_MusicName(Display.ListLCDScreen[i], Audio.PlayList[Display.ListLCDScreen[i]]);
    Draw_MusicNameFast(Display.ListLCDScreenMusic[i], Audio.PlayList[Display.ListLCDScreenMusic[i]]);
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	4a11      	ldr	r2, [pc, #68]	; (80062d4 <Draw_ListMusic+0x54>)
 8006290:	3304      	adds	r3, #4
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	4413      	add	r3, r2
 8006296:	889a      	ldrh	r2, [r3, #4]
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	490e      	ldr	r1, [pc, #56]	; (80062d4 <Draw_ListMusic+0x54>)
 800629c:	3304      	adds	r3, #4
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	440b      	add	r3, r1
 80062a2:	889b      	ldrh	r3, [r3, #4]
 80062a4:	4619      	mov	r1, r3
 80062a6:	2332      	movs	r3, #50	; 0x32
 80062a8:	fb01 f303 	mul.w	r3, r1, r3
 80062ac:	490a      	ldr	r1, [pc, #40]	; (80062d8 <Draw_ListMusic+0x58>)
 80062ae:	440b      	add	r3, r1
 80062b0:	3304      	adds	r3, #4
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f7ff fefd 	bl	80060b4 <Draw_MusicNameFast>
  for(uint8_t i = 0; i < SCREEN_MUSIC_MAX_LIST; i++)
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	3301      	adds	r3, #1
 80062be:	71fb      	strb	r3, [r7, #7]
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <Draw_ListMusic+0x5c>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	79fa      	ldrb	r2, [r7, #7]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d3e0      	bcc.n	800628c <Draw_ListMusic+0xc>
  }
}
 80062ca:	bf00      	nop
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20014cb8 	.word	0x20014cb8
 80062d8:	2000cc84 	.word	0x2000cc84
 80062dc:	20014ce4 	.word	0x20014ce4

080062e0 <Draw_VolumeInvisible>:

void Draw_VolumeInvisible(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af02      	add	r7, sp, #8
  ST7789_FillFullX(203, 160, 235, 192, WHITE);
 80062e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	23c0      	movs	r3, #192	; 0xc0
 80062ee:	22eb      	movs	r2, #235	; 0xeb
 80062f0:	21a0      	movs	r1, #160	; 0xa0
 80062f2:	20cb      	movs	r0, #203	; 0xcb
 80062f4:	f000 fcb2 	bl	8006c5c <ST7789_FillFullX>
  ST7789_FillFullX(217, 53, 235, 153, WHITE);
 80062f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	2399      	movs	r3, #153	; 0x99
 8006300:	22eb      	movs	r2, #235	; 0xeb
 8006302:	2135      	movs	r1, #53	; 0x35
 8006304:	20d9      	movs	r0, #217	; 0xd9
 8006306:	f000 fca9 	bl	8006c5c <ST7789_FillFullX>
  ST7789_FillFullX(204, 35, 239, 50, WHITE);
 800630a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	2332      	movs	r3, #50	; 0x32
 8006312:	22ef      	movs	r2, #239	; 0xef
 8006314:	2123      	movs	r1, #35	; 0x23
 8006316:	20cc      	movs	r0, #204	; 0xcc
 8006318:	f000 fca0 	bl	8006c5c <ST7789_FillFullX>
}
 800631c:	bf00      	nop
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <Draw_Volume>:
void Draw_Volume(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af04      	add	r7, sp, #16
  uint16_t i, j;
  char batt_percent[10] = {0};
 800632a:	2300      	movs	r3, #0
 800632c:	603b      	str	r3, [r7, #0]
 800632e:	1d3b      	adds	r3, r7, #4
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	809a      	strh	r2, [r3, #4]
  // Just display once
  if(Display.NeedToInvisibleVolume == false)
 8006336:	4b4a      	ldr	r3, [pc, #296]	; (8006460 <Draw_Volume+0x13c>)
 8006338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800633c:	f083 0301 	eor.w	r3, r3, #1
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <Draw_Volume+0x32>
  {
//    ST7789_FillFullX(203, 160, 235, 192, WHITE);
    ST7789_DrawImage(203, 160, 32, 32, (uint16_t *)Volume_Icon);
 8006346:	4b47      	ldr	r3, [pc, #284]	; (8006464 <Draw_Volume+0x140>)
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	2320      	movs	r3, #32
 800634c:	2220      	movs	r2, #32
 800634e:	21a0      	movs	r1, #160	; 0xa0
 8006350:	20cb      	movs	r0, #203	; 0xcb
 8006352:	f000 fd11 	bl	8006d78 <ST7789_DrawImage>
//    ST7789_FillFullX(217, 53, 235, 153, WHITE);
  }

//  osSemaphoreWait(binSemaphoreDisplayHandle, osWaitForever);
  for(i = 0; i < 100*18; i++)
 8006356:	2300      	movs	r3, #0
 8006358:	81fb      	strh	r3, [r7, #14]
 800635a:	e00a      	b.n	8006372 <Draw_Volume+0x4e>
  {
    DisplayBuff[i] = Volume_Progress_Icon[i];
 800635c:	89fa      	ldrh	r2, [r7, #14]
 800635e:	89fb      	ldrh	r3, [r7, #14]
 8006360:	4941      	ldr	r1, [pc, #260]	; (8006468 <Draw_Volume+0x144>)
 8006362:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8006366:	4a41      	ldr	r2, [pc, #260]	; (800646c <Draw_Volume+0x148>)
 8006368:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i = 0; i < 100*18; i++)
 800636c:	89fb      	ldrh	r3, [r7, #14]
 800636e:	3301      	adds	r3, #1
 8006370:	81fb      	strh	r3, [r7, #14]
 8006372:	89fb      	ldrh	r3, [r7, #14]
 8006374:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8006378:	d3f0      	bcc.n	800635c <Draw_Volume+0x38>
  }
  for(i = 0; i < volumeSet; i++)
 800637a:	2300      	movs	r3, #0
 800637c:	81fb      	strh	r3, [r7, #14]
 800637e:	e02b      	b.n	80063d8 <Draw_Volume+0xb4>
  {
    for(j = 0; j < 18; j++)
 8006380:	2300      	movs	r3, #0
 8006382:	81bb      	strh	r3, [r7, #12]
 8006384:	e022      	b.n	80063cc <Draw_Volume+0xa8>
    {
      if(DisplayBuff[(99 - i)*18 + j] == 0x50bc)
 8006386:	89fb      	ldrh	r3, [r7, #14]
 8006388:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 800638c:	4613      	mov	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	461a      	mov	r2, r3
 8006396:	89bb      	ldrh	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	4a34      	ldr	r2, [pc, #208]	; (800646c <Draw_Volume+0x148>)
 800639c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063a0:	f245 02bc 	movw	r2, #20668	; 0x50bc
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d10e      	bne.n	80063c6 <Draw_Volume+0xa2>
      {
        DisplayBuff[(99 - i)*18 + j] = 0xe007;
 80063a8:	89fb      	ldrh	r3, [r7, #14]
 80063aa:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 80063ae:	4613      	mov	r3, r2
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4413      	add	r3, r2
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	461a      	mov	r2, r3
 80063b8:	89bb      	ldrh	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	4a2b      	ldr	r2, [pc, #172]	; (800646c <Draw_Volume+0x148>)
 80063be:	f24e 0107 	movw	r1, #57351	; 0xe007
 80063c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 18; j++)
 80063c6:	89bb      	ldrh	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	81bb      	strh	r3, [r7, #12]
 80063cc:	89bb      	ldrh	r3, [r7, #12]
 80063ce:	2b11      	cmp	r3, #17
 80063d0:	d9d9      	bls.n	8006386 <Draw_Volume+0x62>
  for(i = 0; i < volumeSet; i++)
 80063d2:	89fb      	ldrh	r3, [r7, #14]
 80063d4:	3301      	adds	r3, #1
 80063d6:	81fb      	strh	r3, [r7, #14]
 80063d8:	89fa      	ldrh	r2, [r7, #14]
 80063da:	4b25      	ldr	r3, [pc, #148]	; (8006470 <Draw_Volume+0x14c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d3ce      	bcc.n	8006380 <Draw_Volume+0x5c>
      }
    }
  }
  ST7789_DrawImage(217, 53, 18, 100, (uint16_t *)DisplayBuff);
 80063e2:	4b22      	ldr	r3, [pc, #136]	; (800646c <Draw_Volume+0x148>)
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	2364      	movs	r3, #100	; 0x64
 80063e8:	2212      	movs	r2, #18
 80063ea:	2135      	movs	r1, #53	; 0x35
 80063ec:	20d9      	movs	r0, #217	; 0xd9
 80063ee:	f000 fcc3 	bl	8006d78 <ST7789_DrawImage>
  if(volumeSet < 10)
 80063f2:	4b1f      	ldr	r3, [pc, #124]	; (8006470 <Draw_Volume+0x14c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b09      	cmp	r3, #9
 80063f8:	d807      	bhi.n	800640a <Draw_Volume+0xe6>
  {
    sprintf(batt_percent, "  %ld", volumeSet);
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <Draw_Volume+0x14c>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	463b      	mov	r3, r7
 8006400:	491c      	ldr	r1, [pc, #112]	; (8006474 <Draw_Volume+0x150>)
 8006402:	4618      	mov	r0, r3
 8006404:	f011 fd8e 	bl	8017f24 <siprintf>
 8006408:	e016      	b.n	8006438 <Draw_Volume+0x114>
  }
  else if(volumeSet >= 10 && volumeSet < 100)
 800640a:	4b19      	ldr	r3, [pc, #100]	; (8006470 <Draw_Volume+0x14c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b09      	cmp	r3, #9
 8006410:	d90b      	bls.n	800642a <Draw_Volume+0x106>
 8006412:	4b17      	ldr	r3, [pc, #92]	; (8006470 <Draw_Volume+0x14c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b63      	cmp	r3, #99	; 0x63
 8006418:	d807      	bhi.n	800642a <Draw_Volume+0x106>
  {
    sprintf(batt_percent, " %ld", volumeSet);
 800641a:	4b15      	ldr	r3, [pc, #84]	; (8006470 <Draw_Volume+0x14c>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	463b      	mov	r3, r7
 8006420:	4915      	ldr	r1, [pc, #84]	; (8006478 <Draw_Volume+0x154>)
 8006422:	4618      	mov	r0, r3
 8006424:	f011 fd7e 	bl	8017f24 <siprintf>
 8006428:	e006      	b.n	8006438 <Draw_Volume+0x114>
  }
  else
  {
    sprintf(batt_percent, "%ld", volumeSet);
 800642a:	4b11      	ldr	r3, [pc, #68]	; (8006470 <Draw_Volume+0x14c>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	463b      	mov	r3, r7
 8006430:	4912      	ldr	r1, [pc, #72]	; (800647c <Draw_Volume+0x158>)
 8006432:	4618      	mov	r0, r3
 8006434:	f011 fd76 	bl	8017f24 <siprintf>
  }
  ST7789_WriteStringLenght(204, 35, batt_percent, 3, Font_11x18, BLUE, WHITE);
 8006438:	463a      	mov	r2, r7
 800643a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800643e:	9303      	str	r3, [sp, #12]
 8006440:	231f      	movs	r3, #31
 8006442:	9302      	str	r3, [sp, #8]
 8006444:	490e      	ldr	r1, [pc, #56]	; (8006480 <Draw_Volume+0x15c>)
 8006446:	466b      	mov	r3, sp
 8006448:	c903      	ldmia	r1, {r0, r1}
 800644a:	e883 0003 	stmia.w	r3, {r0, r1}
 800644e:	2303      	movs	r3, #3
 8006450:	2123      	movs	r1, #35	; 0x23
 8006452:	20cc      	movs	r0, #204	; 0xcc
 8006454:	f001 f85c 	bl	8007510 <ST7789_WriteStringLenght>
//  osSemaphoreRelease(binSemaphoreDisplayHandle);

}
 8006458:	bf00      	nop
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20014cb8 	.word	0x20014cb8
 8006464:	080491e8 	.word	0x080491e8
 8006468:	080499e8 	.word	0x080499e8
 800646c:	20014cec 	.word	0x20014cec
 8006470:	20001fd8 	.word	0x20001fd8
 8006474:	0801abbc 	.word	0x0801abbc
 8006478:	0801abc4 	.word	0x0801abc4
 800647c:	0801abcc 	.word	0x0801abcc
 8006480:	2000089c 	.word	0x2000089c

08006484 <Draw_SettingIcons>:
#define BACKGROUND_X_SIZE ST7789_WIDTH
#define BACKGROUND_Y_SIZE 36
void Draw_SettingIcons(uint16_t x, uint16_t y, __ELEMENT obj, uint16_t color, uint16_t bgcolor)
{
 8006484:	b082      	sub	sp, #8
 8006486:	b580      	push	{r7, lr}
 8006488:	b08c      	sub	sp, #48	; 0x30
 800648a:	af00      	add	r7, sp, #0
 800648c:	f107 0c38 	add.w	ip, r7, #56	; 0x38
 8006490:	e88c 000c 	stmia.w	ip, {r2, r3}
 8006494:	4603      	mov	r3, r0
 8006496:	80fb      	strh	r3, [r7, #6]
 8006498:	460b      	mov	r3, r1
 800649a:	80bb      	strh	r3, [r7, #4]
  char *str = obj.Name;
 800649c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649e:	623b      	str	r3, [r7, #32]
  FontDef font = Font_11x18;
 80064a0:	4a77      	ldr	r2, [pc, #476]	; (8006680 <Draw_SettingIcons+0x1fc>)
 80064a2:	f107 030c 	add.w	r3, r7, #12
 80064a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064aa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t i = 0, ii = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80064b2:	2300      	movs	r3, #0
 80064b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t k, b, j;
  uint16_t len = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	83fb      	strh	r3, [r7, #30]
  len = strlen(str);
 80064ba:	6a38      	ldr	r0, [r7, #32]
 80064bc:	f7f9 fe90 	bl	80001e0 <strlen>
 80064c0:	4603      	mov	r3, r0
 80064c2:	83fb      	strh	r3, [r7, #30]
  uint16_t convert_color;
  uint16_t y_offset_to_mid = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	83bb      	strh	r3, [r7, #28]
  ST7789_SetAddressWindow(x, y, BACKGROUND_X_SIZE - 1, y + BACKGROUND_Y_SIZE);
 80064c8:	88bb      	ldrh	r3, [r7, #4]
 80064ca:	3324      	adds	r3, #36	; 0x24
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	88b9      	ldrh	r1, [r7, #4]
 80064d0:	88f8      	ldrh	r0, [r7, #6]
 80064d2:	22ef      	movs	r2, #239	; 0xef
 80064d4:	f000 fa56 	bl	8006984 <ST7789_SetAddressWindow>
  convert_color = ((bgcolor & 0xFF) << 8) | ((bgcolor & 0xFF00) >> 8);
 80064d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	b21a      	sxth	r2, r3
 80064e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80064e4:	0a1b      	lsrs	r3, r3, #8
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	b21b      	sxth	r3, r3
 80064ea:	4313      	orrs	r3, r2
 80064ec:	b21b      	sxth	r3, r3
 80064ee:	837b      	strh	r3, [r7, #26]
  MemsetBuffer(DisplayBuff, convert_color, BACKGROUND_X_SIZE * BACKGROUND_Y_SIZE);
 80064f0:	8b7b      	ldrh	r3, [r7, #26]
 80064f2:	f44f 5207 	mov.w	r2, #8640	; 0x21c0
 80064f6:	4619      	mov	r1, r3
 80064f8:	4862      	ldr	r0, [pc, #392]	; (8006684 <Draw_SettingIcons+0x200>)
 80064fa:	f000 fb59 	bl	8006bb0 <MemsetBuffer>
  convert_color = ((color & 0xFF) << 8) | ((color & 0xFF00) >> 8);
 80064fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	b21a      	sxth	r2, r3
 8006506:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	b29b      	uxth	r3, r3
 800650e:	b21b      	sxth	r3, r3
 8006510:	4313      	orrs	r3, r2
 8006512:	b21b      	sxth	r3, r3
 8006514:	837b      	strh	r3, [r7, #26]
  // insert Name setting to Buffer
  y_offset_to_mid = (BACKGROUND_Y_SIZE - font.height) / 2;
 8006516:	7b7b      	ldrb	r3, [r7, #13]
 8006518:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800651c:	0fda      	lsrs	r2, r3, #31
 800651e:	4413      	add	r3, r2
 8006520:	105b      	asrs	r3, r3, #1
 8006522:	83bb      	strh	r3, [r7, #28]
  while (i < len)
 8006524:	e058      	b.n	80065d8 <Draw_SettingIcons+0x154>
  {
    if (x + font.width >= ST7789_WIDTH - obj.Icons->Width)
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	7b3a      	ldrb	r2, [r7, #12]
 800652a:	441a      	add	r2, r3
 800652c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8006534:	429a      	cmp	r2, r3
 8006536:	da54      	bge.n	80065e2 <Draw_SettingIcons+0x15e>
    {
      break;// Just one line
    }
    for (k = 0; k < font.height; k++)
 8006538:	2300      	movs	r3, #0
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
 800653c:	e03c      	b.n	80065b8 <Draw_SettingIcons+0x134>
    {
      b = font.data[(str[i] - 0x20) * font.height + k];
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006542:	6a39      	ldr	r1, [r7, #32]
 8006544:	440b      	add	r3, r1
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	3b20      	subs	r3, #32
 800654a:	7b79      	ldrb	r1, [r7, #13]
 800654c:	fb01 f303 	mul.w	r3, r1, r3
 8006550:	4619      	mov	r1, r3
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	440b      	add	r3, r1
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	617b      	str	r3, [r7, #20]
      for (j = 0; j < font.width; j++)
 800655e:	2300      	movs	r3, #0
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
 8006562:	e021      	b.n	80065a8 <Draw_SettingIcons+0x124>
      {
        if ((b << j) & 0x8000)
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d016      	beq.n	80065a2 <Draw_SettingIcons+0x11e>
        {
          DisplayBuff[y_offset_to_mid * ST7789_WIDTH + k * ST7789_WIDTH + ii * font.width + j] = convert_color;
 8006574:	8bba      	ldrh	r2, [r7, #28]
 8006576:	4613      	mov	r3, r2
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006582:	4613      	mov	r3, r2
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	440b      	add	r3, r1
 800658c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800658e:	7b39      	ldrb	r1, [r7, #12]
 8006590:	fb01 f202 	mul.w	r2, r1, r2
 8006594:	441a      	add	r2, r3
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	4413      	add	r3, r2
 800659a:	493a      	ldr	r1, [pc, #232]	; (8006684 <Draw_SettingIcons+0x200>)
 800659c:	8b7a      	ldrh	r2, [r7, #26]
 800659e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      for (j = 0; j < font.width; j++)
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	3301      	adds	r3, #1
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
 80065a8:	7b3b      	ldrb	r3, [r7, #12]
 80065aa:	461a      	mov	r2, r3
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d3d8      	bcc.n	8006564 <Draw_SettingIcons+0xe0>
    for (k = 0; k < font.height; k++)
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	3301      	adds	r3, #1
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b8:	7b7b      	ldrb	r3, [r7, #13]
 80065ba:	461a      	mov	r2, r3
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	4293      	cmp	r3, r2
 80065c0:	d3bd      	bcc.n	800653e <Draw_SettingIcons+0xba>
        }
      }
    }
    x += font.width;
 80065c2:	7b3b      	ldrb	r3, [r7, #12]
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	4413      	add	r3, r2
 80065ca:	80fb      	strh	r3, [r7, #6]
    i++;
 80065cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80065ce:	3301      	adds	r3, #1
 80065d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    ii++;
 80065d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80065d4:	3301      	adds	r3, #1
 80065d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  while (i < len)
 80065d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80065da:	8bfb      	ldrh	r3, [r7, #30]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d3a2      	bcc.n	8006526 <Draw_SettingIcons+0xa2>
 80065e0:	e000      	b.n	80065e4 <Draw_SettingIcons+0x160>
      break;// Just one line
 80065e2:	bf00      	nop
  }
  // insert Icon setting to Buffer
  convert_color = ((bgcolor & 0xFF) << 8) | ((bgcolor & 0xFF00) >> 8);
 80065e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	b21a      	sxth	r2, r3
 80065ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80065f0:	0a1b      	lsrs	r3, r3, #8
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	b21b      	sxth	r3, r3
 80065f6:	4313      	orrs	r3, r2
 80065f8:	b21b      	sxth	r3, r3
 80065fa:	837b      	strh	r3, [r7, #26]
  for(i = 0; i < obj.Icons->Height; i++)
 80065fc:	2300      	movs	r3, #0
 80065fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006600:	e02c      	b.n	800665c <Draw_SettingIcons+0x1d8>
  {
    for(j = 0; j < obj.Icons->Width; j++)
 8006602:	2300      	movs	r3, #0
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
 8006606:	e020      	b.n	800664a <Draw_SettingIcons+0x1c6>
//      {
//        DisplayBuff[ST7789_WIDTH * i + ST7789_WIDTH - obj.Icons.Width + j] = convert_color;
//      }
//      else
      {
        DisplayBuff[ST7789_WIDTH * i + ST7789_WIDTH - obj.Icons->Width + j] = obj.Icons->Pixel[obj.Icons->Width * i + j];
 8006608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	4619      	mov	r1, r3
 8006612:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	4619      	mov	r1, r3
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	440b      	add	r3, r1
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	18d1      	adds	r1, r2, r3
 8006622:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	4613      	mov	r3, r2
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	461a      	mov	r2, r3
 8006630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	461a      	mov	r2, r3
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	4413      	add	r3, r2
 800663c:	8809      	ldrh	r1, [r1, #0]
 800663e:	4a11      	ldr	r2, [pc, #68]	; (8006684 <Draw_SettingIcons+0x200>)
 8006640:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < obj.Icons->Width; j++)
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	3301      	adds	r3, #1
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
 800664a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	4293      	cmp	r3, r2
 8006654:	d3d8      	bcc.n	8006608 <Draw_SettingIcons+0x184>
  for(i = 0; i < obj.Icons->Height; i++)
 8006656:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006658:	3301      	adds	r3, #1
 800665a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800665c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800665e:	885b      	ldrh	r3, [r3, #2]
 8006660:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006662:	429a      	cmp	r2, r3
 8006664:	d3cd      	bcc.n	8006602 <Draw_SettingIcons+0x17e>
      }
    }
  }

  ST7789_WriteData((uint8_t*)DisplayBuff, BACKGROUND_X_SIZE * BACKGROUND_Y_SIZE * 2);
 8006666:	f44f 4187 	mov.w	r1, #17280	; 0x4380
 800666a:	4806      	ldr	r0, [pc, #24]	; (8006684 <Draw_SettingIcons+0x200>)
 800666c:	f000 f8e8 	bl	8006840 <ST7789_WriteData>

}
 8006670:	bf00      	nop
 8006672:	3730      	adds	r7, #48	; 0x30
 8006674:	46bd      	mov	sp, r7
 8006676:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800667a:	b002      	add	sp, #8
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	2000089c 	.word	0x2000089c
 8006684:	20014cec 	.word	0x20014cec

08006688 <Draw_SettingElement>:
void Draw_SettingElement(uint16_t id)
{
 8006688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800668a:	b089      	sub	sp, #36	; 0x24
 800668c:	af04      	add	r7, sp, #16
 800668e:	4603      	mov	r3, r0
 8006690:	80fb      	strh	r3, [r7, #6]
  uint16_t x_start = X_START;
 8006692:	2300      	movs	r3, #0
 8006694:	81fb      	strh	r3, [r7, #14]
  uint16_t y_start = Y_START;
 8006696:	2328      	movs	r3, #40	; 0x28
 8006698:	81bb      	strh	r3, [r7, #12]
  static uint16_t number_offset = 0;
  if(id >= SETTING_MAX_ELEMENT) return;
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d850      	bhi.n	8006742 <Draw_SettingElement+0xba>
  y_start = y_start + number_offset * OFFSET_PER_NAME_SONG;
 80066a0:	4b2a      	ldr	r3, [pc, #168]	; (800674c <Draw_SettingElement+0xc4>)
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	0092      	lsls	r2, r2, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	89bb      	ldrh	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	81bb      	strh	r3, [r7, #12]

  number_offset++;
 80066b4:	4b25      	ldr	r3, [pc, #148]	; (800674c <Draw_SettingElement+0xc4>)
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	4b23      	ldr	r3, [pc, #140]	; (800674c <Draw_SettingElement+0xc4>)
 80066be:	801a      	strh	r2, [r3, #0]
//    if(number_offset >= SCREEN_MAX_LIST)
//    {
//      number_offset = 0;
//    }
//  }
  if(number_offset >= SCREEN_SETTING_MAX_LIST)
 80066c0:	4b22      	ldr	r3, [pc, #136]	; (800674c <Draw_SettingElement+0xc4>)
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d902      	bls.n	80066ce <Draw_SettingElement+0x46>
  {
    number_offset = 0;
 80066c8:	4b20      	ldr	r3, [pc, #128]	; (800674c <Draw_SettingElement+0xc4>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	801a      	strh	r2, [r3, #0]
  }
  if(Display.CursorListSetting == id)
 80066ce:	4b20      	ldr	r3, [pc, #128]	; (8006750 <Draw_SettingElement+0xc8>)
 80066d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	88fa      	ldrh	r2, [r7, #6]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d118      	bne.n	800670e <Draw_SettingElement+0x86>
  {
    Draw_SettingIcons(x_start, y_start, Setting.Object[id], PINK, BLUE);
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <Draw_SettingElement+0xcc>)
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	4413      	add	r3, r2
 80066e4:	89bd      	ldrh	r5, [r7, #12]
 80066e6:	89fc      	ldrh	r4, [r7, #14]
 80066e8:	221f      	movs	r2, #31
 80066ea:	9203      	str	r2, [sp, #12]
 80066ec:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80066f0:	9202      	str	r2, [sp, #8]
 80066f2:	466e      	mov	r6, sp
 80066f4:	f103 020c 	add.w	r2, r3, #12
 80066f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066fc:	e886 0003 	stmia.w	r6, {r0, r1}
 8006700:	3304      	adds	r3, #4
 8006702:	cb0c      	ldmia	r3, {r2, r3}
 8006704:	4629      	mov	r1, r5
 8006706:	4620      	mov	r0, r4
 8006708:	f7ff febc 	bl	8006484 <Draw_SettingIcons>
 800670c:	e01a      	b.n	8006744 <Draw_SettingElement+0xbc>
  }
  else
  {
    Draw_SettingIcons(x_start, y_start, Setting.Object[id], MUSIC_NAME_COLOR, CYAN);
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	4a10      	ldr	r2, [pc, #64]	; (8006754 <Draw_SettingElement+0xcc>)
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	4413      	add	r3, r2
 8006716:	89bd      	ldrh	r5, [r7, #12]
 8006718:	89fc      	ldrh	r4, [r7, #14]
 800671a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800671e:	9203      	str	r2, [sp, #12]
 8006720:	f44f 4250 	mov.w	r2, #53248	; 0xd000
 8006724:	9202      	str	r2, [sp, #8]
 8006726:	466e      	mov	r6, sp
 8006728:	f103 020c 	add.w	r2, r3, #12
 800672c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006730:	e886 0003 	stmia.w	r6, {r0, r1}
 8006734:	3304      	adds	r3, #4
 8006736:	cb0c      	ldmia	r3, {r2, r3}
 8006738:	4629      	mov	r1, r5
 800673a:	4620      	mov	r0, r4
 800673c:	f7ff fea2 	bl	8006484 <Draw_SettingIcons>
 8006740:	e000      	b.n	8006744 <Draw_SettingElement+0xbc>
  if(id >= SETTING_MAX_ELEMENT) return;
 8006742:	bf00      	nop
  }

}
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674a:	bf00      	nop
 800674c:	20014ce8 	.word	0x20014ce8
 8006750:	20014cb8 	.word	0x20014cb8
 8006754:	200197f4 	.word	0x200197f4

08006758 <Draw_CreateSetting>:
void Draw_CreateSetting(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af02      	add	r7, sp, #8
  ST7789_FillFullX(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 800675e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	23ef      	movs	r3, #239	; 0xef
 8006766:	22ef      	movs	r2, #239	; 0xef
 8006768:	2100      	movs	r1, #0
 800676a:	2000      	movs	r0, #0
 800676c:	f000 fa76 	bl	8006c5c <ST7789_FillFullX>
  ST7789_FillFullX(0, 34, ST7789_WIDTH - 1, 38, PINK);
 8006770:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	2326      	movs	r3, #38	; 0x26
 8006778:	22ef      	movs	r2, #239	; 0xef
 800677a:	2122      	movs	r1, #34	; 0x22
 800677c:	2000      	movs	r0, #0
 800677e:	f000 fa6d 	bl	8006c5c <ST7789_FillFullX>
  ST7789_WriteStringToMiddle(8, "Setting", Font_11x18, RED, WHITE);
 8006782:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <Draw_CreateSetting+0x58>)
 8006784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006788:	9201      	str	r2, [sp, #4]
 800678a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800678e:	9200      	str	r2, [sp, #0]
 8006790:	cb0c      	ldmia	r3, {r2, r3}
 8006792:	4908      	ldr	r1, [pc, #32]	; (80067b4 <Draw_CreateSetting+0x5c>)
 8006794:	2008      	movs	r0, #8
 8006796:	f000 ff13 	bl	80075c0 <ST7789_WriteStringToMiddle>
  ST7789_DrawImage(30, 1, 32, 32, (uint16_t *)Setting_Icon);
 800679a:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <Draw_CreateSetting+0x60>)
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	2320      	movs	r3, #32
 80067a0:	2220      	movs	r2, #32
 80067a2:	2101      	movs	r1, #1
 80067a4:	201e      	movs	r0, #30
 80067a6:	f000 fae7 	bl	8006d78 <ST7789_DrawImage>
}
 80067aa:	bf00      	nop
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	2000089c 	.word	0x2000089c
 80067b4:	0801abd0 	.word	0x0801abd0
 80067b8:	0804c418 	.word	0x0804c418

080067bc <Draw_ListSetting>:
void Draw_ListSetting(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
  for(uint8_t i = 0; i < SCREEN_SETTING_MAX_LIST; i++)
 80067c2:	2300      	movs	r3, #0
 80067c4:	71fb      	strb	r3, [r7, #7]
 80067c6:	e00b      	b.n	80067e0 <Draw_ListSetting+0x24>
  {
    Draw_SettingElement(Display.ListLCDScreenSetting[i]);
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	4a09      	ldr	r2, [pc, #36]	; (80067f0 <Draw_ListSetting+0x34>)
 80067cc:	4413      	add	r3, r2
 80067ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff ff57 	bl	8006688 <Draw_SettingElement>
  for(uint8_t i = 0; i < SCREEN_SETTING_MAX_LIST; i++)
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	3301      	adds	r3, #1
 80067de:	71fb      	strb	r3, [r7, #7]
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d9f0      	bls.n	80067c8 <Draw_ListSetting+0xc>
  }
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20014cb8 	.word	0x20014cb8

080067f4 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	4603      	mov	r3, r0
 80067fc:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80067fe:	2200      	movs	r2, #0
 8006800:	2101      	movs	r1, #1
 8006802:	480c      	ldr	r0, [pc, #48]	; (8006834 <ST7789_WriteCommand+0x40>)
 8006804:	f002 faa6 	bl	8008d54 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8006808:	2200      	movs	r2, #0
 800680a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800680e:	480a      	ldr	r0, [pc, #40]	; (8006838 <ST7789_WriteCommand+0x44>)
 8006810:	f002 faa0 	bl	8008d54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006814:	1df9      	adds	r1, r7, #7
 8006816:	f04f 33ff 	mov.w	r3, #4294967295
 800681a:	2201      	movs	r2, #1
 800681c:	4807      	ldr	r0, [pc, #28]	; (800683c <ST7789_WriteCommand+0x48>)
 800681e:	f006 f989 	bl	800cb34 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8006822:	2201      	movs	r2, #1
 8006824:	2101      	movs	r1, #1
 8006826:	4803      	ldr	r0, [pc, #12]	; (8006834 <ST7789_WriteCommand+0x40>)
 8006828:	f002 fa94 	bl	8008d54 <HAL_GPIO_WritePin>
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40020000 	.word	0x40020000
 8006838:	40020800 	.word	0x40020800
 800683c:	20001dfc 	.word	0x20001dfc

08006840 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 800684a:	2200      	movs	r2, #0
 800684c:	2101      	movs	r1, #1
 800684e:	4820      	ldr	r0, [pc, #128]	; (80068d0 <ST7789_WriteData+0x90>)
 8006850:	f002 fa80 	bl	8008d54 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8006854:	2201      	movs	r2, #1
 8006856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800685a:	481e      	ldr	r0, [pc, #120]	; (80068d4 <ST7789_WriteData+0x94>)
 800685c:	f002 fa7a 	bl	8008d54 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8006860:	e02a      	b.n	80068b8 <ST7789_WriteData+0x78>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006868:	4293      	cmp	r3, r2
 800686a:	bf28      	it	cs
 800686c:	4613      	movcs	r3, r2
 800686e:	81fb      	strh	r3, [r7, #14]
		#ifdef LCD_USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8006870:	4b19      	ldr	r3, [pc, #100]	; (80068d8 <ST7789_WriteData+0x98>)
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	4293      	cmp	r3, r2
 800687a:	d30e      	bcc.n	800689a <ST7789_WriteData+0x5a>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 800687c:	89fb      	ldrh	r3, [r7, #14]
 800687e:	461a      	mov	r2, r3
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4816      	ldr	r0, [pc, #88]	; (80068dc <ST7789_WriteData+0x9c>)
 8006884:	f006 fd46 	bl	800d314 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8006888:	bf00      	nop
 800688a:	4b14      	ldr	r3, [pc, #80]	; (80068dc <ST7789_WriteData+0x9c>)
 800688c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b01      	cmp	r3, #1
 8006896:	d1f8      	bne.n	800688a <ST7789_WriteData+0x4a>
 8006898:	e006      	b.n	80068a8 <ST7789_WriteData+0x68>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800689a:	89fa      	ldrh	r2, [r7, #14]
 800689c:	f04f 33ff 	mov.w	r3, #4294967295
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	480e      	ldr	r0, [pc, #56]	; (80068dc <ST7789_WriteData+0x9c>)
 80068a4:	f006 f946 	bl	800cb34 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 80068a8:	89fb      	ldrh	r3, [r7, #14]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	4413      	add	r3, r2
 80068ae:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80068b0:	89fb      	ldrh	r3, [r7, #14]
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1d1      	bne.n	8006862 <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 80068be:	2201      	movs	r2, #1
 80068c0:	2101      	movs	r1, #1
 80068c2:	4803      	ldr	r0, [pc, #12]	; (80068d0 <ST7789_WriteData+0x90>)
 80068c4:	f002 fa46 	bl	8008d54 <HAL_GPIO_WritePin>
}
 80068c8:	bf00      	nop
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40020000 	.word	0x40020000
 80068d4:	40020800 	.word	0x40020800
 80068d8:	20000898 	.word	0x20000898
 80068dc:	20001dfc 	.word	0x20001dfc

080068e0 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80068ea:	2200      	movs	r2, #0
 80068ec:	2101      	movs	r1, #1
 80068ee:	480c      	ldr	r0, [pc, #48]	; (8006920 <ST7789_WriteSmallData+0x40>)
 80068f0:	f002 fa30 	bl	8008d54 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80068f4:	2201      	movs	r2, #1
 80068f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068fa:	480a      	ldr	r0, [pc, #40]	; (8006924 <ST7789_WriteSmallData+0x44>)
 80068fc:	f002 fa2a 	bl	8008d54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8006900:	1df9      	adds	r1, r7, #7
 8006902:	f04f 33ff 	mov.w	r3, #4294967295
 8006906:	2201      	movs	r2, #1
 8006908:	4807      	ldr	r0, [pc, #28]	; (8006928 <ST7789_WriteSmallData+0x48>)
 800690a:	f006 f913 	bl	800cb34 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800690e:	2201      	movs	r2, #1
 8006910:	2101      	movs	r1, #1
 8006912:	4803      	ldr	r0, [pc, #12]	; (8006920 <ST7789_WriteSmallData+0x40>)
 8006914:	f002 fa1e 	bl	8008d54 <HAL_GPIO_WritePin>
}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40020000 	.word	0x40020000
 8006924:	40020800 	.word	0x40020800
 8006928:	20001dfc 	.word	0x20001dfc

0800692c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8006936:	2036      	movs	r0, #54	; 0x36
 8006938:	f7ff ff5c 	bl	80067f4 <ST7789_WriteCommand>
	switch (m) {
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d81a      	bhi.n	8006978 <ST7789_SetRotation+0x4c>
 8006942:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <ST7789_SetRotation+0x1c>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	08006959 	.word	0x08006959
 800694c:	08006961 	.word	0x08006961
 8006950:	08006969 	.word	0x08006969
 8006954:	08006971 	.word	0x08006971
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8006958:	20c0      	movs	r0, #192	; 0xc0
 800695a:	f7ff ffc1 	bl	80068e0 <ST7789_WriteSmallData>
		break;
 800695e:	e00c      	b.n	800697a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8006960:	20a0      	movs	r0, #160	; 0xa0
 8006962:	f7ff ffbd 	bl	80068e0 <ST7789_WriteSmallData>
		break;
 8006966:	e008      	b.n	800697a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8006968:	2000      	movs	r0, #0
 800696a:	f7ff ffb9 	bl	80068e0 <ST7789_WriteSmallData>
		break;
 800696e:	e004      	b.n	800697a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8006970:	2060      	movs	r0, #96	; 0x60
 8006972:	f7ff ffb5 	bl	80068e0 <ST7789_WriteSmallData>
		break;
 8006976:	e000      	b.n	800697a <ST7789_SetRotation+0x4e>
	default:
		break;
 8006978:	bf00      	nop
	}
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop

08006984 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	4611      	mov	r1, r2
 8006990:	461a      	mov	r2, r3
 8006992:	4623      	mov	r3, r4
 8006994:	80fb      	strh	r3, [r7, #6]
 8006996:	4603      	mov	r3, r0
 8006998:	80bb      	strh	r3, [r7, #4]
 800699a:	460b      	mov	r3, r1
 800699c:	807b      	strh	r3, [r7, #2]
 800699e:	4613      	mov	r3, r2
 80069a0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80069a2:	2200      	movs	r2, #0
 80069a4:	2101      	movs	r1, #1
 80069a6:	4824      	ldr	r0, [pc, #144]	; (8006a38 <ST7789_SetAddressWindow+0xb4>)
 80069a8:	f002 f9d4 	bl	8008d54 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80069ac:	88fb      	ldrh	r3, [r7, #6]
 80069ae:	82fb      	strh	r3, [r7, #22]
 80069b0:	887b      	ldrh	r3, [r7, #2]
 80069b2:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80069b4:	88bb      	ldrh	r3, [r7, #4]
 80069b6:	827b      	strh	r3, [r7, #18]
 80069b8:	883b      	ldrh	r3, [r7, #0]
 80069ba:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 80069bc:	202a      	movs	r0, #42	; 0x2a
 80069be:	f7ff ff19 	bl	80067f4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80069c2:	8afb      	ldrh	r3, [r7, #22]
 80069c4:	0a1b      	lsrs	r3, r3, #8
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	733b      	strb	r3, [r7, #12]
 80069cc:	8afb      	ldrh	r3, [r7, #22]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	737b      	strb	r3, [r7, #13]
 80069d2:	8abb      	ldrh	r3, [r7, #20]
 80069d4:	0a1b      	lsrs	r3, r3, #8
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	73bb      	strb	r3, [r7, #14]
 80069dc:	8abb      	ldrh	r3, [r7, #20]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80069e2:	f107 030c 	add.w	r3, r7, #12
 80069e6:	2104      	movs	r1, #4
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff ff29 	bl	8006840 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80069ee:	202b      	movs	r0, #43	; 0x2b
 80069f0:	f7ff ff00 	bl	80067f4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80069f4:	8a7b      	ldrh	r3, [r7, #18]
 80069f6:	0a1b      	lsrs	r3, r3, #8
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	723b      	strb	r3, [r7, #8]
 80069fe:	8a7b      	ldrh	r3, [r7, #18]
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	727b      	strb	r3, [r7, #9]
 8006a04:	8a3b      	ldrh	r3, [r7, #16]
 8006a06:	0a1b      	lsrs	r3, r3, #8
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	72bb      	strb	r3, [r7, #10]
 8006a0e:	8a3b      	ldrh	r3, [r7, #16]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8006a14:	f107 0308 	add.w	r3, r7, #8
 8006a18:	2104      	movs	r1, #4
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff ff10 	bl	8006840 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8006a20:	202c      	movs	r0, #44	; 0x2c
 8006a22:	f7ff fee7 	bl	80067f4 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8006a26:	2201      	movs	r2, #1
 8006a28:	2101      	movs	r1, #1
 8006a2a:	4803      	ldr	r0, [pc, #12]	; (8006a38 <ST7789_SetAddressWindow+0xb4>)
 8006a2c:	f002 f992 	bl	8008d54 <HAL_GPIO_WritePin>
}
 8006a30:	bf00      	nop
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd90      	pop	{r4, r7, pc}
 8006a38:	40020000 	.word	0x40020000

08006a3c <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8006a3c:	b590      	push	{r4, r7, lr}
 8006a3e:	b08b      	sub	sp, #44	; 0x2c
 8006a40:	af00      	add	r7, sp, #0
  uint8_t retry = 2;
 8006a42:	2302      	movs	r3, #2
 8006a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ST7789_BACKLIGHT_On();
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a4e:	4853      	ldr	r0, [pc, #332]	; (8006b9c <ST7789_Init+0x160>)
 8006a50:	f002 f980 	bl	8008d54 <HAL_GPIO_WritePin>
  while(retry--)
 8006a54:	e095      	b.n	8006b82 <ST7789_Init+0x146>
  {
    #ifdef LCD_USE_DMA
      memset(DisplayBuff, 0, sizeof(DisplayBuff));
 8006a56:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	4850      	ldr	r0, [pc, #320]	; (8006ba0 <ST7789_Init+0x164>)
 8006a5e:	f010 fd61 	bl	8017524 <memset>
    #endif
    HAL_Delay(25);
 8006a62:	2019      	movs	r0, #25
 8006a64:	f000 fecc 	bl	8007800 <HAL_Delay>
      ST7789_RST_Clr();
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a6e:	484b      	ldr	r0, [pc, #300]	; (8006b9c <ST7789_Init+0x160>)
 8006a70:	f002 f970 	bl	8008d54 <HAL_GPIO_WritePin>
      HAL_Delay(25);
 8006a74:	2019      	movs	r0, #25
 8006a76:	f000 fec3 	bl	8007800 <HAL_Delay>
      ST7789_RST_Set();
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a80:	4846      	ldr	r0, [pc, #280]	; (8006b9c <ST7789_Init+0x160>)
 8006a82:	f002 f967 	bl	8008d54 <HAL_GPIO_WritePin>
      HAL_Delay(50);
 8006a86:	2032      	movs	r0, #50	; 0x32
 8006a88:	f000 feba 	bl	8007800 <HAL_Delay>

      ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8006a8c:	203a      	movs	r0, #58	; 0x3a
 8006a8e:	f7ff feb1 	bl	80067f4 <ST7789_WriteCommand>
      ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8006a92:	2055      	movs	r0, #85	; 0x55
 8006a94:	f7ff ff24 	bl	80068e0 <ST7789_WriteSmallData>
      ST7789_WriteCommand(0xB2);				//	Porch control
 8006a98:	20b2      	movs	r0, #178	; 0xb2
 8006a9a:	f7ff feab 	bl	80067f4 <ST7789_WriteCommand>
    {
      uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8006a9e:	4a41      	ldr	r2, [pc, #260]	; (8006ba4 <ST7789_Init+0x168>)
 8006aa0:	f107 0320 	add.w	r3, r7, #32
 8006aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006aa8:	6018      	str	r0, [r3, #0]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	7019      	strb	r1, [r3, #0]
      ST7789_WriteData(data, sizeof(data));
 8006aae:	f107 0320 	add.w	r3, r7, #32
 8006ab2:	2105      	movs	r1, #5
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fec3 	bl	8006840 <ST7789_WriteData>
    }
    ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8006aba:	2002      	movs	r0, #2
 8006abc:	f7ff ff36 	bl	800692c <ST7789_SetRotation>

    /* Internal LCD Voltage generator settings */
      ST7789_WriteCommand(0XB7);				//	Gate Control
 8006ac0:	20b7      	movs	r0, #183	; 0xb7
 8006ac2:	f7ff fe97 	bl	80067f4 <ST7789_WriteCommand>
      ST7789_WriteSmallData(0x35);			//	Default value
 8006ac6:	2035      	movs	r0, #53	; 0x35
 8006ac8:	f7ff ff0a 	bl	80068e0 <ST7789_WriteSmallData>
      ST7789_WriteCommand(0xBB);				//	VCOM setting
 8006acc:	20bb      	movs	r0, #187	; 0xbb
 8006ace:	f7ff fe91 	bl	80067f4 <ST7789_WriteCommand>
      ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8006ad2:	2019      	movs	r0, #25
 8006ad4:	f7ff ff04 	bl	80068e0 <ST7789_WriteSmallData>
      ST7789_WriteCommand(0xC0);				//	LCMCTRL
 8006ad8:	20c0      	movs	r0, #192	; 0xc0
 8006ada:	f7ff fe8b 	bl	80067f4 <ST7789_WriteCommand>
      ST7789_WriteSmallData (0x2C);			//	Default value
 8006ade:	202c      	movs	r0, #44	; 0x2c
 8006ae0:	f7ff fefe 	bl	80068e0 <ST7789_WriteSmallData>
      ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8006ae4:	20c2      	movs	r0, #194	; 0xc2
 8006ae6:	f7ff fe85 	bl	80067f4 <ST7789_WriteCommand>
      ST7789_WriteSmallData (0x01);			//	Default value
 8006aea:	2001      	movs	r0, #1
 8006aec:	f7ff fef8 	bl	80068e0 <ST7789_WriteSmallData>
      ST7789_WriteCommand (0xC3);				//	VRH set
 8006af0:	20c3      	movs	r0, #195	; 0xc3
 8006af2:	f7ff fe7f 	bl	80067f4 <ST7789_WriteCommand>
      ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8006af6:	2012      	movs	r0, #18
 8006af8:	f7ff fef2 	bl	80068e0 <ST7789_WriteSmallData>
      ST7789_WriteCommand (0xC4);				//	VDV set
 8006afc:	20c4      	movs	r0, #196	; 0xc4
 8006afe:	f7ff fe79 	bl	80067f4 <ST7789_WriteCommand>
      ST7789_WriteSmallData (0x20);			//	Default value
 8006b02:	2020      	movs	r0, #32
 8006b04:	f7ff feec 	bl	80068e0 <ST7789_WriteSmallData>
      ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8006b08:	20c6      	movs	r0, #198	; 0xc6
 8006b0a:	f7ff fe73 	bl	80067f4 <ST7789_WriteCommand>
      ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8006b0e:	200f      	movs	r0, #15
 8006b10:	f7ff fee6 	bl	80068e0 <ST7789_WriteSmallData>
      ST7789_WriteCommand (0xD0);				//	Power control
 8006b14:	20d0      	movs	r0, #208	; 0xd0
 8006b16:	f7ff fe6d 	bl	80067f4 <ST7789_WriteCommand>
      ST7789_WriteSmallData (0xA4);			//	Default value
 8006b1a:	20a4      	movs	r0, #164	; 0xa4
 8006b1c:	f7ff fee0 	bl	80068e0 <ST7789_WriteSmallData>
      ST7789_WriteSmallData (0xA1);			//	Default value
 8006b20:	20a1      	movs	r0, #161	; 0xa1
 8006b22:	f7ff fedd 	bl	80068e0 <ST7789_WriteSmallData>
    /**************** Division line ****************/

    ST7789_WriteCommand(0xE0);
 8006b26:	20e0      	movs	r0, #224	; 0xe0
 8006b28:	f7ff fe64 	bl	80067f4 <ST7789_WriteCommand>
    {
      uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8006b2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ba8 <ST7789_Init+0x16c>)
 8006b2e:	f107 0410 	add.w	r4, r7, #16
 8006b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b34:	c407      	stmia	r4!, {r0, r1, r2}
 8006b36:	8023      	strh	r3, [r4, #0]
      ST7789_WriteData(data, sizeof(data));
 8006b38:	f107 0310 	add.w	r3, r7, #16
 8006b3c:	210e      	movs	r1, #14
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff fe7e 	bl	8006840 <ST7789_WriteData>
    }

      ST7789_WriteCommand(0xE1);
 8006b44:	20e1      	movs	r0, #225	; 0xe1
 8006b46:	f7ff fe55 	bl	80067f4 <ST7789_WriteCommand>
    {
      uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8006b4a:	4b18      	ldr	r3, [pc, #96]	; (8006bac <ST7789_Init+0x170>)
 8006b4c:	463c      	mov	r4, r7
 8006b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b50:	c407      	stmia	r4!, {r0, r1, r2}
 8006b52:	8023      	strh	r3, [r4, #0]
      ST7789_WriteData(data, sizeof(data));
 8006b54:	463b      	mov	r3, r7
 8006b56:	210e      	movs	r1, #14
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff fe71 	bl	8006840 <ST7789_WriteData>
    }
      ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8006b5e:	2021      	movs	r0, #33	; 0x21
 8006b60:	f7ff fe48 	bl	80067f4 <ST7789_WriteCommand>
    ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8006b64:	2011      	movs	r0, #17
 8006b66:	f7ff fe45 	bl	80067f4 <ST7789_WriteCommand>
      ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8006b6a:	2013      	movs	r0, #19
 8006b6c:	f7ff fe42 	bl	80067f4 <ST7789_WriteCommand>
      ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8006b70:	2029      	movs	r0, #41	; 0x29
 8006b72:	f7ff fe3f 	bl	80067f4 <ST7789_WriteCommand>

    HAL_Delay(50);
 8006b76:	2032      	movs	r0, #50	; 0x32
 8006b78:	f000 fe42 	bl	8007800 <HAL_Delay>
    ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	f000 f831 	bl	8006be4 <ST7789_Fill_Color>
  while(retry--)
 8006b82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b86:	1e5a      	subs	r2, r3, #1
 8006b88:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f47f af62 	bne.w	8006a56 <ST7789_Init+0x1a>
  }
}
 8006b92:	bf00      	nop
 8006b94:	bf00      	nop
 8006b96:	372c      	adds	r7, #44	; 0x2c
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd90      	pop	{r4, r7, pc}
 8006b9c:	40020800 	.word	0x40020800
 8006ba0:	20014cec 	.word	0x20014cec
 8006ba4:	0801abd8 	.word	0x0801abd8
 8006ba8:	0801abe0 	.word	0x0801abe0
 8006bac:	0801abf0 	.word	0x0801abf0

08006bb0 <MemsetBuffer>:
//  while (count--)
//    *buf++ = val;
//  return m;
//}
void MemsetBuffer(uint16_t *buf, uint16_t data, uint32_t size)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	817b      	strh	r3, [r7, #10]
  while(size--)
 8006bbe:	e004      	b.n	8006bca <MemsetBuffer+0x1a>
  {
    *buf++ = data;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	1c9a      	adds	r2, r3, #2
 8006bc4:	60fa      	str	r2, [r7, #12]
 8006bc6:	897a      	ldrh	r2, [r7, #10]
 8006bc8:	801a      	strh	r2, [r3, #0]
  while(size--)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	1e5a      	subs	r2, r3, #1
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f5      	bne.n	8006bc0 <MemsetBuffer+0x10>
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint16_t convert_color;
//	uint8_t *ptr = (uint8_t *)disp_buf;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8006bee:	23ef      	movs	r3, #239	; 0xef
 8006bf0:	22ef      	movs	r2, #239	; 0xef
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	f7ff fec5 	bl	8006984 <ST7789_SetAddressWindow>
	ST7789_Select();
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	4815      	ldr	r0, [pc, #84]	; (8006c54 <ST7789_Fill_Color+0x70>)
 8006c00:	f002 f8a8 	bl	8008d54 <HAL_GPIO_WritePin>
	convert_color = ((color & 0xFF) << 8) | ((color & 0xFF00) >> 8);
 8006c04:	88fb      	ldrh	r3, [r7, #6]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	b21a      	sxth	r2, r3
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	0a1b      	lsrs	r3, r3, #8
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	b21b      	sxth	r3, r3
 8006c12:	4313      	orrs	r3, r2
 8006c14:	b21b      	sxth	r3, r3
 8006c16:	81bb      	strh	r3, [r7, #12]
	#ifdef LCD_USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8006c18:	2300      	movs	r3, #0
 8006c1a:	81fb      	strh	r3, [r7, #14]
 8006c1c:	e00e      	b.n	8006c3c <ST7789_Fill_Color+0x58>
		{
		  MemsetBuffer(DisplayBuff, convert_color, ST7789_WIDTH * HOR_LEN);
 8006c1e:	89bb      	ldrh	r3, [r7, #12]
 8006c20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006c24:	4619      	mov	r1, r3
 8006c26:	480c      	ldr	r0, [pc, #48]	; (8006c58 <ST7789_Fill_Color+0x74>)
 8006c28:	f7ff ffc2 	bl	8006bb0 <MemsetBuffer>
			ST7789_WriteData((uint8_t *)DisplayBuff, sizeof(DisplayBuff));
 8006c2c:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8006c30:	4809      	ldr	r0, [pc, #36]	; (8006c58 <ST7789_Fill_Color+0x74>)
 8006c32:	f7ff fe05 	bl	8006840 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8006c36:	89fb      	ldrh	r3, [r7, #14]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	81fb      	strh	r3, [r7, #14]
 8006c3c:	89fb      	ldrh	r3, [r7, #14]
 8006c3e:	2b05      	cmp	r3, #5
 8006c40:	d9ed      	bls.n	8006c1e <ST7789_Fill_Color+0x3a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8006c42:	2201      	movs	r2, #1
 8006c44:	2101      	movs	r1, #1
 8006c46:	4803      	ldr	r0, [pc, #12]	; (8006c54 <ST7789_Fill_Color+0x70>)
 8006c48:	f002 f884 	bl	8008d54 <HAL_GPIO_WritePin>
}
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	40020000 	.word	0x40020000
 8006c58:	20014cec 	.word	0x20014cec

08006c5c <ST7789_FillFullX>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_FillFullX(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8006c5c:	b590      	push	{r4, r7, lr}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4604      	mov	r4, r0
 8006c64:	4608      	mov	r0, r1
 8006c66:	4611      	mov	r1, r2
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4623      	mov	r3, r4
 8006c6c:	80fb      	strh	r3, [r7, #6]
 8006c6e:	4603      	mov	r3, r0
 8006c70:	80bb      	strh	r3, [r7, #4]
 8006c72:	460b      	mov	r3, r1
 8006c74:	807b      	strh	r3, [r7, #2]
 8006c76:	4613      	mov	r3, r2
 8006c78:	803b      	strh	r3, [r7, #0]

  uint16_t convert_color;
  if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8006c7a:	887b      	ldrh	r3, [r7, #2]
 8006c7c:	2bef      	cmp	r3, #239	; 0xef
 8006c7e:	d83d      	bhi.n	8006cfc <ST7789_FillFullX+0xa0>
     (yEnd < 0) || (yEnd >= ST7789_HEIGHT)) return;
 8006c80:	883b      	ldrh	r3, [r7, #0]
 8006c82:	2bef      	cmp	r3, #239	; 0xef
 8006c84:	d83a      	bhi.n	8006cfc <ST7789_FillFullX+0xa0>
  ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8006c86:	883b      	ldrh	r3, [r7, #0]
 8006c88:	887a      	ldrh	r2, [r7, #2]
 8006c8a:	88b9      	ldrh	r1, [r7, #4]
 8006c8c:	88f8      	ldrh	r0, [r7, #6]
 8006c8e:	f7ff fe79 	bl	8006984 <ST7789_SetAddressWindow>
  ST7789_Select();
 8006c92:	2200      	movs	r2, #0
 8006c94:	2101      	movs	r1, #1
 8006c96:	481b      	ldr	r0, [pc, #108]	; (8006d04 <ST7789_FillFullX+0xa8>)
 8006c98:	f002 f85c 	bl	8008d54 <HAL_GPIO_WritePin>
  convert_color = ((color & 0xFF) << 8) | ((color & 0xFF00) >> 8);
 8006c9c:	8c3b      	ldrh	r3, [r7, #32]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	b21a      	sxth	r2, r3
 8006ca2:	8c3b      	ldrh	r3, [r7, #32]
 8006ca4:	0a1b      	lsrs	r3, r3, #8
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	b21b      	sxth	r3, r3
 8006caa:	4313      	orrs	r3, r2
 8006cac:	b21b      	sxth	r3, r3
 8006cae:	81bb      	strh	r3, [r7, #12]
  //printf("color HEX = 0x%04X",convert_color);
  #ifdef LCD_USE_DMA
  uint16_t i;
  uint16_t height_loop = (yEnd - ySta) / HOR_LEN;
 8006cb0:	883a      	ldrh	r2, [r7, #0]
 8006cb2:	88bb      	ldrh	r3, [r7, #4]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	4a14      	ldr	r2, [pc, #80]	; (8006d08 <ST7789_FillFullX+0xac>)
 8006cb8:	fb82 1203 	smull	r1, r2, r2, r3
 8006cbc:	1112      	asrs	r2, r2, #4
 8006cbe:	17db      	asrs	r3, r3, #31
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	817b      	strh	r3, [r7, #10]
  for (i = 0; i <= height_loop; i++)
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	81fb      	strh	r3, [r7, #14]
 8006cc8:	e00e      	b.n	8006ce8 <ST7789_FillFullX+0x8c>
  {
    MemsetBuffer(DisplayBuff, convert_color, ST7789_WIDTH * HOR_LEN);
 8006cca:	89bb      	ldrh	r3, [r7, #12]
 8006ccc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	480e      	ldr	r0, [pc, #56]	; (8006d0c <ST7789_FillFullX+0xb0>)
 8006cd4:	f7ff ff6c 	bl	8006bb0 <MemsetBuffer>
    ST7789_WriteData((uint8_t*)DisplayBuff, sizeof(DisplayBuff));
 8006cd8:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8006cdc:	480b      	ldr	r0, [pc, #44]	; (8006d0c <ST7789_FillFullX+0xb0>)
 8006cde:	f7ff fdaf 	bl	8006840 <ST7789_WriteData>
  for (i = 0; i <= height_loop; i++)
 8006ce2:	89fb      	ldrh	r3, [r7, #14]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	81fb      	strh	r3, [r7, #14]
 8006ce8:	89fa      	ldrh	r2, [r7, #14]
 8006cea:	897b      	ldrh	r3, [r7, #10]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d9ec      	bls.n	8006cca <ST7789_FillFullX+0x6e>
    for (j = xSta; j <= xEnd; j++) {
      uint8_t data[] = {color >> 8, color & 0xFF};
      ST7789_WriteData(data, sizeof(data));
    }
  #endif
  ST7789_UnSelect();
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	4803      	ldr	r0, [pc, #12]	; (8006d04 <ST7789_FillFullX+0xa8>)
 8006cf6:	f002 f82d 	bl	8008d54 <HAL_GPIO_WritePin>
 8006cfa:	e000      	b.n	8006cfe <ST7789_FillFullX+0xa2>
     (yEnd < 0) || (yEnd >= ST7789_HEIGHT)) return;
 8006cfc:	bf00      	nop
}
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd90      	pop	{r4, r7, pc}
 8006d04:	40020000 	.word	0x40020000
 8006d08:	66666667 	.word	0x66666667
 8006d0c:	20014cec 	.word	0x20014cec

08006d10 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	4603      	mov	r3, r0
 8006d18:	80fb      	strh	r3, [r7, #6]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	80bb      	strh	r3, [r7, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	2bef      	cmp	r3, #239	; 0xef
 8006d26:	d821      	bhi.n	8006d6c <ST7789_DrawPixel+0x5c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8006d28:	88bb      	ldrh	r3, [r7, #4]
 8006d2a:	2bef      	cmp	r3, #239	; 0xef
 8006d2c:	d81e      	bhi.n	8006d6c <ST7789_DrawPixel+0x5c>

	ST7789_SetAddressWindow(x, y, x, y);
 8006d2e:	88bb      	ldrh	r3, [r7, #4]
 8006d30:	88fa      	ldrh	r2, [r7, #6]
 8006d32:	88b9      	ldrh	r1, [r7, #4]
 8006d34:	88f8      	ldrh	r0, [r7, #6]
 8006d36:	f7ff fe25 	bl	8006984 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8006d3a:	887b      	ldrh	r3, [r7, #2]
 8006d3c:	0a1b      	lsrs	r3, r3, #8
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	733b      	strb	r3, [r7, #12]
 8006d44:	887b      	ldrh	r3, [r7, #2]
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	4809      	ldr	r0, [pc, #36]	; (8006d74 <ST7789_DrawPixel+0x64>)
 8006d50:	f002 f800 	bl	8008d54 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8006d54:	f107 030c 	add.w	r3, r7, #12
 8006d58:	2102      	movs	r1, #2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fd70 	bl	8006840 <ST7789_WriteData>
	ST7789_UnSelect();
 8006d60:	2201      	movs	r2, #1
 8006d62:	2101      	movs	r1, #1
 8006d64:	4803      	ldr	r0, [pc, #12]	; (8006d74 <ST7789_DrawPixel+0x64>)
 8006d66:	f001 fff5 	bl	8008d54 <HAL_GPIO_WritePin>
 8006d6a:	e000      	b.n	8006d6e <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8006d6c:	bf00      	nop
}
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40020000 	.word	0x40020000

08006d78 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8006d78:	b590      	push	{r4, r7, lr}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	4611      	mov	r1, r2
 8006d84:	461a      	mov	r2, r3
 8006d86:	4623      	mov	r3, r4
 8006d88:	80fb      	strh	r3, [r7, #6]
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	80bb      	strh	r3, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	807b      	strh	r3, [r7, #2]
 8006d92:	4613      	mov	r3, r2
 8006d94:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	2bef      	cmp	r3, #239	; 0xef
 8006d9a:	d831      	bhi.n	8006e00 <ST7789_DrawImage+0x88>
 8006d9c:	88bb      	ldrh	r3, [r7, #4]
 8006d9e:	2bef      	cmp	r3, #239	; 0xef
 8006da0:	d82e      	bhi.n	8006e00 <ST7789_DrawImage+0x88>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8006da2:	88fa      	ldrh	r2, [r7, #6]
 8006da4:	887b      	ldrh	r3, [r7, #2]
 8006da6:	4413      	add	r3, r2
 8006da8:	2bf0      	cmp	r3, #240	; 0xf0
 8006daa:	dc2b      	bgt.n	8006e04 <ST7789_DrawImage+0x8c>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8006dac:	88ba      	ldrh	r2, [r7, #4]
 8006dae:	883b      	ldrh	r3, [r7, #0]
 8006db0:	4413      	add	r3, r2
 8006db2:	2bf0      	cmp	r3, #240	; 0xf0
 8006db4:	dc28      	bgt.n	8006e08 <ST7789_DrawImage+0x90>
		return;

	ST7789_Select();
 8006db6:	2200      	movs	r2, #0
 8006db8:	2101      	movs	r1, #1
 8006dba:	4815      	ldr	r0, [pc, #84]	; (8006e10 <ST7789_DrawImage+0x98>)
 8006dbc:	f001 ffca 	bl	8008d54 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8006dc0:	88fa      	ldrh	r2, [r7, #6]
 8006dc2:	887b      	ldrh	r3, [r7, #2]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29c      	uxth	r4, r3
 8006dcc:	88ba      	ldrh	r2, [r7, #4]
 8006dce:	883b      	ldrh	r3, [r7, #0]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	88b9      	ldrh	r1, [r7, #4]
 8006dda:	88f8      	ldrh	r0, [r7, #6]
 8006ddc:	4622      	mov	r2, r4
 8006dde:	f7ff fdd1 	bl	8006984 <ST7789_SetAddressWindow>
#ifdef LCD_USE_TOUCHGFX
	ST7789_SwapByteHighLow((uint8_t *)data, sizeof(uint16_t) * w * h);
#endif
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8006de2:	887b      	ldrh	r3, [r7, #2]
 8006de4:	883a      	ldrh	r2, [r7, #0]
 8006de6:	fb02 f303 	mul.w	r3, r2, r3
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	4619      	mov	r1, r3
 8006dee:	69b8      	ldr	r0, [r7, #24]
 8006df0:	f7ff fd26 	bl	8006840 <ST7789_WriteData>
	ST7789_UnSelect();
 8006df4:	2201      	movs	r2, #1
 8006df6:	2101      	movs	r1, #1
 8006df8:	4805      	ldr	r0, [pc, #20]	; (8006e10 <ST7789_DrawImage+0x98>)
 8006dfa:	f001 ffab 	bl	8008d54 <HAL_GPIO_WritePin>
 8006dfe:	e004      	b.n	8006e0a <ST7789_DrawImage+0x92>
		return;
 8006e00:	bf00      	nop
 8006e02:	e002      	b.n	8006e0a <ST7789_DrawImage+0x92>
		return;
 8006e04:	bf00      	nop
 8006e06:	e000      	b.n	8006e0a <ST7789_DrawImage+0x92>
		return;
 8006e08:	bf00      	nop
}
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd90      	pop	{r4, r7, pc}
 8006e10:	40020000 	.word	0x40020000

08006e14 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8006e14:	b082      	sub	sp, #8
 8006e16:	b590      	push	{r4, r7, lr}
 8006e18:	b089      	sub	sp, #36	; 0x24
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e1e:	4603      	mov	r3, r0
 8006e20:	80fb      	strh	r3, [r7, #6]
 8006e22:	460b      	mov	r3, r1
 8006e24:	80bb      	strh	r3, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	4838      	ldr	r0, [pc, #224]	; (8006f10 <ST7789_WriteChar+0xfc>)
 8006e30:	f001 ff90 	bl	8008d54 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8006e34:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29c      	uxth	r4, r3
 8006e44:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	88bb      	ldrh	r3, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	88b9      	ldrh	r1, [r7, #4]
 8006e56:	88f8      	ldrh	r0, [r7, #6]
 8006e58:	4622      	mov	r2, r4
 8006e5a:	f7ff fd93 	bl	8006984 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	e043      	b.n	8006eec <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8006e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e66:	78fb      	ldrb	r3, [r7, #3]
 8006e68:	3b20      	subs	r3, #32
 8006e6a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	4619      	mov	r1, r3
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	440b      	add	r3, r1
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	4413      	add	r3, r2
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8006e80:	2300      	movs	r3, #0
 8006e82:	61bb      	str	r3, [r7, #24]
 8006e84:	e029      	b.n	8006eda <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00e      	beq.n	8006eb4 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8006e96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006e98:	0a1b      	lsrs	r3, r3, #8
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	743b      	strb	r3, [r7, #16]
 8006ea0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8006ea6:	f107 0310 	add.w	r3, r7, #16
 8006eaa:	2102      	movs	r1, #2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff fcc7 	bl	8006840 <ST7789_WriteData>
 8006eb2:	e00f      	b.n	8006ed4 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8006eb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006eb8:	0a1b      	lsrs	r3, r3, #8
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	733b      	strb	r3, [r7, #12]
 8006ec0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8006ec8:	f107 030c 	add.w	r3, r7, #12
 8006ecc:	2102      	movs	r1, #2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff fcb6 	bl	8006840 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006ede:	461a      	mov	r2, r3
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d3cf      	bcc.n	8006e86 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d3b5      	bcc.n	8006e64 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8006ef8:	2201      	movs	r2, #1
 8006efa:	2101      	movs	r1, #1
 8006efc:	4804      	ldr	r0, [pc, #16]	; (8006f10 <ST7789_WriteChar+0xfc>)
 8006efe:	f001 ff29 	bl	8008d54 <HAL_GPIO_WritePin>
}
 8006f02:	bf00      	nop
 8006f04:	3724      	adds	r7, #36	; 0x24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006f0c:	b002      	add	sp, #8
 8006f0e:	4770      	bx	lr
 8006f10:	40020000 	.word	0x40020000

08006f14 <ST7789_WriteStringAutoDownLine>:
		str++;
	}
	ST7789_UnSelect();
}
void ST7789_WriteStringAutoDownLine(uint8_t isNewScreen, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08a      	sub	sp, #40	; 0x28
 8006f18:	af04      	add	r7, sp, #16
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	4639      	mov	r1, r7
 8006f1e:	e881 000c 	stmia.w	r1, {r2, r3}
 8006f22:	4603      	mov	r3, r0
 8006f24:	73fb      	strb	r3, [r7, #15]
  uint16_t x = 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	82fb      	strh	r3, [r7, #22]
  static uint16_t y = 0;
  ST7789_Select();
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	482c      	ldr	r0, [pc, #176]	; (8006fe0 <ST7789_WriteStringAutoDownLine+0xcc>)
 8006f30:	f001 ff10 	bl	8008d54 <HAL_GPIO_WritePin>
  if(isNewScreen)
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d03b      	beq.n	8006fb2 <ST7789_WriteStringAutoDownLine+0x9e>
  {
    ST7789_Fill_Color(bgcolor);
 8006f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff fe51 	bl	8006be4 <ST7789_Fill_Color>
    y = 0;
 8006f42:	4b28      	ldr	r3, [pc, #160]	; (8006fe4 <ST7789_WriteStringAutoDownLine+0xd0>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	801a      	strh	r2, [r3, #0]
  }
  while (*str) {
 8006f48:	e033      	b.n	8006fb2 <ST7789_WriteStringAutoDownLine+0x9e>
    if (x + font.width >= ST7789_WIDTH) {
 8006f4a:	8afb      	ldrh	r3, [r7, #22]
 8006f4c:	783a      	ldrb	r2, [r7, #0]
 8006f4e:	4413      	add	r3, r2
 8006f50:	2bef      	cmp	r3, #239	; 0xef
 8006f52:	dd18      	ble.n	8006f86 <ST7789_WriteStringAutoDownLine+0x72>
      x = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	82fb      	strh	r3, [r7, #22]
      y += font.height;
 8006f58:	787b      	ldrb	r3, [r7, #1]
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	4b21      	ldr	r3, [pc, #132]	; (8006fe4 <ST7789_WriteStringAutoDownLine+0xd0>)
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	4413      	add	r3, r2
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	4b1f      	ldr	r3, [pc, #124]	; (8006fe4 <ST7789_WriteStringAutoDownLine+0xd0>)
 8006f66:	801a      	strh	r2, [r3, #0]
      if (y + font.height >= ST7789_HEIGHT) {
 8006f68:	4b1e      	ldr	r3, [pc, #120]	; (8006fe4 <ST7789_WriteStringAutoDownLine+0xd0>)
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	787b      	ldrb	r3, [r7, #1]
 8006f70:	4413      	add	r3, r2
 8006f72:	2bef      	cmp	r3, #239	; 0xef
 8006f74:	dc22      	bgt.n	8006fbc <ST7789_WriteStringAutoDownLine+0xa8>
        break;
      }

      if (*str == ' ') {
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	d103      	bne.n	8006f86 <ST7789_WriteStringAutoDownLine+0x72>
        // skip spaces in the beginning of the new line
        str++;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60bb      	str	r3, [r7, #8]
        continue;
 8006f84:	e015      	b.n	8006fb2 <ST7789_WriteStringAutoDownLine+0x9e>
      }
    }
    ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8006f86:	4b17      	ldr	r3, [pc, #92]	; (8006fe4 <ST7789_WriteStringAutoDownLine+0xd0>)
 8006f88:	8819      	ldrh	r1, [r3, #0]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	781a      	ldrb	r2, [r3, #0]
 8006f8e:	8af8      	ldrh	r0, [r7, #22]
 8006f90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	8c3b      	ldrh	r3, [r7, #32]
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	f7ff ff39 	bl	8006e14 <ST7789_WriteChar>
    x += font.width;
 8006fa2:	783b      	ldrb	r3, [r7, #0]
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	8afb      	ldrh	r3, [r7, #22]
 8006fa8:	4413      	add	r3, r2
 8006faa:	82fb      	strh	r3, [r7, #22]
    str++;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60bb      	str	r3, [r7, #8]
  while (*str) {
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1c7      	bne.n	8006f4a <ST7789_WriteStringAutoDownLine+0x36>
 8006fba:	e000      	b.n	8006fbe <ST7789_WriteStringAutoDownLine+0xaa>
        break;
 8006fbc:	bf00      	nop
  }
  ST7789_UnSelect();
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	4807      	ldr	r0, [pc, #28]	; (8006fe0 <ST7789_WriteStringAutoDownLine+0xcc>)
 8006fc4:	f001 fec6 	bl	8008d54 <HAL_GPIO_WritePin>
  y += font.height;
 8006fc8:	787b      	ldrb	r3, [r7, #1]
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <ST7789_WriteStringAutoDownLine+0xd0>)
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <ST7789_WriteStringAutoDownLine+0xd0>)
 8006fd6:	801a      	strh	r2, [r3, #0]
}
 8006fd8:	bf00      	nop
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	40020000 	.word	0x40020000
 8006fe4:	200197ec 	.word	0x200197ec

08006fe8 <ST7789_WriteStringOnBackground>:
#define BACKGROUND_X_SIZE ST7789_WIDTH
#define BACKGROUND_Y_SIZE 36
void ST7789_WriteStringOnBackground(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8006fe8:	b082      	sub	sp, #8
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b088      	sub	sp, #32
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	603a      	str	r2, [r7, #0]
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	80fb      	strh	r3, [r7, #6]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	80bb      	strh	r3, [r7, #4]
  uint8_t i = 0, ii = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	2300      	movs	r3, #0
 8007002:	77bb      	strb	r3, [r7, #30]
  uint8_t len = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	74fb      	strb	r3, [r7, #19]
  len = strlen(str);
 8007008:	6838      	ldr	r0, [r7, #0]
 800700a:	f7f9 f8e9 	bl	80001e0 <strlen>
 800700e:	4603      	mov	r3, r0
 8007010:	74fb      	strb	r3, [r7, #19]
  uint16_t convert_color;
  uint16_t row = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	83bb      	strh	r3, [r7, #28]
  uint16_t BACKGROUND_Y_COORDINATE_MAX =  y + BACKGROUND_Y_SIZE;
 8007016:	88bb      	ldrh	r3, [r7, #4]
 8007018:	3324      	adds	r3, #36	; 0x24
 800701a:	823b      	strh	r3, [r7, #16]
  ST7789_SetAddressWindow(x, y, BACKGROUND_X_SIZE - 1, y + BACKGROUND_Y_SIZE);
 800701c:	88bb      	ldrh	r3, [r7, #4]
 800701e:	3324      	adds	r3, #36	; 0x24
 8007020:	b29b      	uxth	r3, r3
 8007022:	88b9      	ldrh	r1, [r7, #4]
 8007024:	88f8      	ldrh	r0, [r7, #6]
 8007026:	22ef      	movs	r2, #239	; 0xef
 8007028:	f7ff fcac 	bl	8006984 <ST7789_SetAddressWindow>
  convert_color = ((bgcolor & 0xFF) << 8) | ((bgcolor & 0xFF00) >> 8);
 800702c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	b21a      	sxth	r2, r3
 8007032:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007034:	0a1b      	lsrs	r3, r3, #8
 8007036:	b29b      	uxth	r3, r3
 8007038:	b21b      	sxth	r3, r3
 800703a:	4313      	orrs	r3, r2
 800703c:	b21b      	sxth	r3, r3
 800703e:	81fb      	strh	r3, [r7, #14]
  MemsetBuffer(DisplayBuff, convert_color, BACKGROUND_X_SIZE * BACKGROUND_Y_SIZE);
 8007040:	89fb      	ldrh	r3, [r7, #14]
 8007042:	f44f 5207 	mov.w	r2, #8640	; 0x21c0
 8007046:	4619      	mov	r1, r3
 8007048:	484a      	ldr	r0, [pc, #296]	; (8007174 <ST7789_WriteStringOnBackground+0x18c>)
 800704a:	f7ff fdb1 	bl	8006bb0 <MemsetBuffer>
  convert_color = ((color & 0xFF) << 8) | ((color & 0xFF00) >> 8);
 800704e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007050:	021b      	lsls	r3, r3, #8
 8007052:	b21a      	sxth	r2, r3
 8007054:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007056:	0a1b      	lsrs	r3, r3, #8
 8007058:	b29b      	uxth	r3, r3
 800705a:	b21b      	sxth	r3, r3
 800705c:	4313      	orrs	r3, r2
 800705e:	b21b      	sxth	r3, r3
 8007060:	81fb      	strh	r3, [r7, #14]
  while (i < len)
 8007062:	e077      	b.n	8007154 <ST7789_WriteStringOnBackground+0x16c>
  {
    if (x + font.width >= ST7789_WIDTH)
 8007064:	88fb      	ldrh	r3, [r7, #6]
 8007066:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800706a:	4413      	add	r3, r2
 800706c:	2bef      	cmp	r3, #239	; 0xef
 800706e:	dd1c      	ble.n	80070aa <ST7789_WriteStringOnBackground+0xc2>
    {
//      printf("character = %c\n", str[i]);
      x = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	80fb      	strh	r3, [r7, #6]
      ii = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	77bb      	strb	r3, [r7, #30]
      row = row + font.height;
 8007078:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800707c:	b29a      	uxth	r2, r3
 800707e:	8bbb      	ldrh	r3, [r7, #28]
 8007080:	4413      	add	r3, r2
 8007082:	83bb      	strh	r3, [r7, #28]
      y += font.height;
 8007084:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007088:	b29a      	uxth	r2, r3
 800708a:	88bb      	ldrh	r3, [r7, #4]
 800708c:	4413      	add	r3, r2
 800708e:	80bb      	strh	r3, [r7, #4]
      if (y + font.height >= ST7789_HEIGHT || y + font.height > BACKGROUND_Y_COORDINATE_MAX)
 8007090:	88bb      	ldrh	r3, [r7, #4]
 8007092:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007096:	4413      	add	r3, r2
 8007098:	2bef      	cmp	r3, #239	; 0xef
 800709a:	dc5f      	bgt.n	800715c <ST7789_WriteStringOnBackground+0x174>
 800709c:	88bb      	ldrh	r3, [r7, #4]
 800709e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80070a2:	441a      	add	r2, r3
 80070a4:	8a3b      	ldrh	r3, [r7, #16]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	dc58      	bgt.n	800715c <ST7789_WriteStringOnBackground+0x174>
//        i++;
//        continue;
//      }
    }
    uint32_t k, b, j;
    for (k = 0; k < font.height; k++)
 80070aa:	2300      	movs	r3, #0
 80070ac:	61bb      	str	r3, [r7, #24]
 80070ae:	e03f      	b.n	8007130 <ST7789_WriteStringOnBackground+0x148>
    {
      b = font.data[(str[i] - 0x20) * font.height + k];
 80070b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b2:	7ffb      	ldrb	r3, [r7, #31]
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	440b      	add	r3, r1
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	3b20      	subs	r3, #32
 80070bc:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80070c0:	fb01 f303 	mul.w	r3, r1, r3
 80070c4:	4619      	mov	r1, r3
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	440b      	add	r3, r1
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	4413      	add	r3, r2
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	60bb      	str	r3, [r7, #8]
      for (j = 0; j < font.width; j++)
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	e022      	b.n	800711e <ST7789_WriteStringOnBackground+0x136>
      {
        if ((b << j) & 0x8000)
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	fa02 f303 	lsl.w	r3, r2, r3
 80070e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d017      	beq.n	8007118 <ST7789_WriteStringOnBackground+0x130>
        {
          DisplayBuff[row * ST7789_WIDTH + k * ST7789_WIDTH + ii * font.width + j] = convert_color;
 80070e8:	8bba      	ldrh	r2, [r7, #28]
 80070ea:	4613      	mov	r3, r2
 80070ec:	011b      	lsls	r3, r3, #4
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	4613      	mov	r3, r2
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	1a9b      	subs	r3, r3, r2
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	440b      	add	r3, r1
 8007100:	7fba      	ldrb	r2, [r7, #30]
 8007102:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8007106:	fb01 f202 	mul.w	r2, r1, r2
 800710a:	441a      	add	r2, r3
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	4413      	add	r3, r2
 8007110:	4918      	ldr	r1, [pc, #96]	; (8007174 <ST7789_WriteStringOnBackground+0x18c>)
 8007112:	89fa      	ldrh	r2, [r7, #14]
 8007114:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      for (j = 0; j < font.width; j++)
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	3301      	adds	r3, #1
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007122:	461a      	mov	r2, r3
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	4293      	cmp	r3, r2
 8007128:	d3d6      	bcc.n	80070d8 <ST7789_WriteStringOnBackground+0xf0>
    for (k = 0; k < font.height; k++)
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	3301      	adds	r3, #1
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007134:	461a      	mov	r2, r3
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	4293      	cmp	r3, r2
 800713a:	d3b9      	bcc.n	80070b0 <ST7789_WriteStringOnBackground+0xc8>
        }
      }
    }

    x += font.width;
 800713c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007140:	b29a      	uxth	r2, r3
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	4413      	add	r3, r2
 8007146:	80fb      	strh	r3, [r7, #6]
    i++;
 8007148:	7ffb      	ldrb	r3, [r7, #31]
 800714a:	3301      	adds	r3, #1
 800714c:	77fb      	strb	r3, [r7, #31]
    ii++;
 800714e:	7fbb      	ldrb	r3, [r7, #30]
 8007150:	3301      	adds	r3, #1
 8007152:	77bb      	strb	r3, [r7, #30]
  while (i < len)
 8007154:	7ffa      	ldrb	r2, [r7, #31]
 8007156:	7cfb      	ldrb	r3, [r7, #19]
 8007158:	429a      	cmp	r2, r3
 800715a:	d383      	bcc.n	8007064 <ST7789_WriteStringOnBackground+0x7c>
  }

  ST7789_WriteData((uint8_t*)DisplayBuff, BACKGROUND_X_SIZE * BACKGROUND_Y_SIZE * 2);
 800715c:	f44f 4187 	mov.w	r1, #17280	; 0x4380
 8007160:	4804      	ldr	r0, [pc, #16]	; (8007174 <ST7789_WriteStringOnBackground+0x18c>)
 8007162:	f7ff fb6d 	bl	8006840 <ST7789_WriteData>
}
 8007166:	bf00      	nop
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007170:	b002      	add	sp, #8
 8007172:	4770      	bx	lr
 8007174:	20014cec 	.word	0x20014cec

08007178 <ST7789_ChangeStringToMiddle>:
      printf("%s\n", dest);
    }
  }
}
void ST7789_ChangeStringToMiddle(char *dest ,const char *src, FontDef font)
{
 8007178:	b590      	push	{r4, r7, lr}
 800717a:	b0a1      	sub	sp, #132	; 0x84
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	4639      	mov	r1, r7
 8007184:	e881 000c 	stmia.w	r1, {r2, r3}
  int8_t i, cursor_split;
  uint8_t len = strlen(src);
 8007188:	68b8      	ldr	r0, [r7, #8]
 800718a:	f7f9 f829 	bl	80001e0 <strlen>
 800718e:	4603      	mov	r3, r0
 8007190:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  char row[2][50] = {0};
 8007194:	f107 0314 	add.w	r3, r7, #20
 8007198:	2264      	movs	r2, #100	; 0x64
 800719a:	2100      	movs	r1, #0
 800719c:	4618      	mov	r0, r3
 800719e:	f010 f9c1 	bl	8017524 <memset>
  int8_t number_char_per_row = ST7789_WIDTH / font.width;
 80071a2:	783b      	ldrb	r3, [r7, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	23f0      	movs	r3, #240	; 0xf0
 80071a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80071ac:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint8_t num_space = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
//  memset(dest, 100, 0);
  for(i = 0; i < len; i++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80071bc:	e01e      	b.n	80071fc <ST7789_ChangeStringToMiddle+0x84>
  {
    // copy and convert '-' to ' '
    if(src[i] == '-')
 80071be:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4413      	add	r3, r2
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b2d      	cmp	r3, #45	; 0x2d
 80071ca:	d106      	bne.n	80071da <ST7789_ChangeStringToMiddle+0x62>
    {
      dest[i] = ' ';
 80071cc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	2220      	movs	r2, #32
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	e009      	b.n	80071ee <ST7789_ChangeStringToMiddle+0x76>
    }
    else
    {
      dest[i] = src[i];
 80071da:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	441a      	add	r2, r3
 80071e2:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80071e6:	68f9      	ldr	r1, [r7, #12]
 80071e8:	440b      	add	r3, r1
 80071ea:	7812      	ldrb	r2, [r2, #0]
 80071ec:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < len; i++)
 80071ee:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	3301      	adds	r3, #1
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80071fc:	f997 207f 	ldrsb.w	r2, [r7, #127]	; 0x7f
 8007200:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8007204:	429a      	cmp	r2, r3
 8007206:	dbda      	blt.n	80071be <ST7789_ChangeStringToMiddle+0x46>
    }
  }
  if(len > (number_char_per_row * 2) )// > 2 rows
 8007208:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 800720c:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	429a      	cmp	r2, r3
 8007214:	f300 8173 	bgt.w	80074fe <ST7789_ChangeStringToMiddle+0x386>
  {
    return;
  }
  else if(len <= number_char_per_row)// < 1 row
 8007218:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 800721c:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8007220:	429a      	cmp	r2, r3
 8007222:	dc5b      	bgt.n	80072dc <ST7789_ChangeStringToMiddle+0x164>
  {
    for(i = 0; i < len; i++)
 8007224:	2300      	movs	r3, #0
 8007226:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800722a:	e011      	b.n	8007250 <ST7789_ChangeStringToMiddle+0xd8>
    {
      row[0][i] = dest[i];
 800722c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	441a      	add	r2, r3
 8007234:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007238:	7812      	ldrb	r2, [r2, #0]
 800723a:	3380      	adds	r3, #128	; 0x80
 800723c:	443b      	add	r3, r7
 800723e:	f803 2c6c 	strb.w	r2, [r3, #-108]
    for(i = 0; i < len; i++)
 8007242:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007246:	b2db      	uxtb	r3, r3
 8007248:	3301      	adds	r3, #1
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007250:	f997 207f 	ldrsb.w	r2, [r7, #127]	; 0x7f
 8007254:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8007258:	429a      	cmp	r2, r3
 800725a:	dbe7      	blt.n	800722c <ST7789_ChangeStringToMiddle+0xb4>
  }
  num_space = number_char_per_row - strlen(row[0]);
 800725c:	f897 407b 	ldrb.w	r4, [r7, #123]	; 0x7b
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	4618      	mov	r0, r3
 8007266:	f7f8 ffbb 	bl	80001e0 <strlen>
 800726a:	4603      	mov	r3, r0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	1ae3      	subs	r3, r4, r3
 8007270:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    for(i = number_char_per_row - 1; i >= 0; i--)
 8007274:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007278:	3b01      	subs	r3, #1
 800727a:	b2db      	uxtb	r3, r3
 800727c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007280:	e027      	b.n	80072d2 <ST7789_ChangeStringToMiddle+0x15a>
    {
      if(i < num_space / 2)
 8007282:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007286:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 800728a:	0852      	lsrs	r2, r2, #1
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	4293      	cmp	r3, r2
 8007290:	da07      	bge.n	80072a2 <ST7789_ChangeStringToMiddle+0x12a>
      {
          row[0][i] = ' ';
 8007292:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007296:	3380      	adds	r3, #128	; 0x80
 8007298:	443b      	add	r3, r7
 800729a:	2220      	movs	r2, #32
 800729c:	f803 2c6c 	strb.w	r2, [r3, #-108]
 80072a0:	e010      	b.n	80072c4 <ST7789_ChangeStringToMiddle+0x14c>
      }
      else
      {
          row[0][i] = row[0][i- (num_space / 2)];
 80072a2:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80072a6:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 80072aa:	0852      	lsrs	r2, r2, #1
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	1a9a      	subs	r2, r3, r2
 80072b0:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80072b4:	3280      	adds	r2, #128	; 0x80
 80072b6:	443a      	add	r2, r7
 80072b8:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80072bc:	3380      	adds	r3, #128	; 0x80
 80072be:	443b      	add	r3, r7
 80072c0:	f803 2c6c 	strb.w	r2, [r3, #-108]
    for(i = number_char_per_row - 1; i >= 0; i--)
 80072c4:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80072d2:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	dad3      	bge.n	8007282 <ST7789_ChangeStringToMiddle+0x10a>
 80072da:	e0f3      	b.n	80074c4 <ST7789_ChangeStringToMiddle+0x34c>
    }
  }
  else // 2 rows
  {
    // split string to row 1, row 2
    for(i = 0; i < number_char_per_row; i++)
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80072e2:	e011      	b.n	8007308 <ST7789_ChangeStringToMiddle+0x190>
    {
      row[0][i] = dest[i];
 80072e4:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	441a      	add	r2, r3
 80072ec:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80072f0:	7812      	ldrb	r2, [r2, #0]
 80072f2:	3380      	adds	r3, #128	; 0x80
 80072f4:	443b      	add	r3, r7
 80072f6:	f803 2c6c 	strb.w	r2, [r3, #-108]
    for(i = 0; i < number_char_per_row; i++)
 80072fa:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	3301      	adds	r3, #1
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007308:	f997 207f 	ldrsb.w	r2, [r7, #127]	; 0x7f
 800730c:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8007310:	429a      	cmp	r2, r3
 8007312:	dbe7      	blt.n	80072e4 <ST7789_ChangeStringToMiddle+0x16c>

    }
    printf("%s\n", row[0]);
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	4618      	mov	r0, r3
 800731a:	f010 fdfb 	bl	8017f14 <puts>
    // check last char row 1
    if(dest[number_char_per_row - 1] == '-')
 800731e:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8007322:	3b01      	subs	r3, #1
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	2b2d      	cmp	r3, #45	; 0x2d
 800732c:	f000 80ca 	beq.w	80074c4 <ST7789_ChangeStringToMiddle+0x34c>
    {

    }
    else
    {
      cursor_split = number_char_per_row - 1;
 8007330:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007334:	3b01      	subs	r3, #1
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
      do
      {
        num_space++;
 800733c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8007340:	3301      	adds	r3, #1
 8007342:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
        row[0][cursor_split] = ' ';
 8007346:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 800734a:	3380      	adds	r3, #128	; 0x80
 800734c:	443b      	add	r3, r7
 800734e:	2220      	movs	r2, #32
 8007350:	f803 2c6c 	strb.w	r2, [r3, #-108]
        cursor_split--;
 8007354:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 8007358:	b2db      	uxtb	r3, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	b2db      	uxtb	r3, r3
 800735e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
      }
      while(dest[cursor_split] != ' ');
 8007362:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4413      	add	r3, r2
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b20      	cmp	r3, #32
 800736e:	d1e5      	bne.n	800733c <ST7789_ChangeStringToMiddle+0x1c4>
      num_space++;
 8007370:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8007374:	3301      	adds	r3, #1
 8007376:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
      cursor_split++;
 800737a:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 800737e:	b2db      	uxtb	r3, r3
 8007380:	3301      	adds	r3, #1
 8007382:	b2db      	uxtb	r3, r3
 8007384:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
      for(i = cursor_split; i < len; i++)
 8007388:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800738c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007390:	e014      	b.n	80073bc <ST7789_ChangeStringToMiddle+0x244>
      {
        row[1][i - cursor_split] = dest[i];
 8007392:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	441a      	add	r2, r3
 800739a:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800739e:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 80073a2:	1acb      	subs	r3, r1, r3
 80073a4:	7812      	ldrb	r2, [r2, #0]
 80073a6:	3380      	adds	r3, #128	; 0x80
 80073a8:	443b      	add	r3, r7
 80073aa:	f803 2c3a 	strb.w	r2, [r3, #-58]
      for(i = cursor_split; i < len; i++)
 80073ae:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	3301      	adds	r3, #1
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80073bc:	f997 207f 	ldrsb.w	r2, [r7, #127]	; 0x7f
 80073c0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80073c4:	429a      	cmp	r2, r3
 80073c6:	dbe4      	blt.n	8007392 <ST7789_ChangeStringToMiddle+0x21a>
      }
      printf("%s\n", row[0]);
 80073c8:	f107 0314 	add.w	r3, r7, #20
 80073cc:	4618      	mov	r0, r3
 80073ce:	f010 fda1 	bl	8017f14 <puts>
      printf("num_space = %d\n", num_space);
 80073d2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80073d6:	4619      	mov	r1, r3
 80073d8:	484b      	ldr	r0, [pc, #300]	; (8007508 <ST7789_ChangeStringToMiddle+0x390>)
 80073da:	f010 fd15 	bl	8017e08 <iprintf>
      // shift row[0] to middle
      for(i = number_char_per_row - 1; i >= 0; i--)
 80073de:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80073ea:	e027      	b.n	800743c <ST7789_ChangeStringToMiddle+0x2c4>
      {
        if(i < num_space / 2)
 80073ec:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80073f0:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 80073f4:	0852      	lsrs	r2, r2, #1
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	4293      	cmp	r3, r2
 80073fa:	da07      	bge.n	800740c <ST7789_ChangeStringToMiddle+0x294>
        {
          row[0][i] = ' ';
 80073fc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007400:	3380      	adds	r3, #128	; 0x80
 8007402:	443b      	add	r3, r7
 8007404:	2220      	movs	r2, #32
 8007406:	f803 2c6c 	strb.w	r2, [r3, #-108]
 800740a:	e010      	b.n	800742e <ST7789_ChangeStringToMiddle+0x2b6>
        }
        else
        {
          row[0][i] = row[0][i- (num_space / 2)];
 800740c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007410:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8007414:	0852      	lsrs	r2, r2, #1
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	1a9a      	subs	r2, r3, r2
 800741a:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800741e:	3280      	adds	r2, #128	; 0x80
 8007420:	443a      	add	r2, r7
 8007422:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8007426:	3380      	adds	r3, #128	; 0x80
 8007428:	443b      	add	r3, r7
 800742a:	f803 2c6c 	strb.w	r2, [r3, #-108]
      for(i = number_char_per_row - 1; i >= 0; i--)
 800742e:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007432:	b2db      	uxtb	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b2db      	uxtb	r3, r3
 8007438:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800743c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007440:	2b00      	cmp	r3, #0
 8007442:	dad3      	bge.n	80073ec <ST7789_ChangeStringToMiddle+0x274>
        }
      }
      // shift row[1] to middle
      num_space = number_char_per_row - strlen(row[1]);
 8007444:	f897 407b 	ldrb.w	r4, [r7, #123]	; 0x7b
 8007448:	f107 0314 	add.w	r3, r7, #20
 800744c:	3332      	adds	r3, #50	; 0x32
 800744e:	4618      	mov	r0, r3
 8007450:	f7f8 fec6 	bl	80001e0 <strlen>
 8007454:	4603      	mov	r3, r0
 8007456:	b2db      	uxtb	r3, r3
 8007458:	1ae3      	subs	r3, r4, r3
 800745a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
      for(i = number_char_per_row - 1; i >= 0; i--)
 800745e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007462:	3b01      	subs	r3, #1
 8007464:	b2db      	uxtb	r3, r3
 8007466:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800746a:	e027      	b.n	80074bc <ST7789_ChangeStringToMiddle+0x344>
      {
        if(i < num_space / 2)
 800746c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007470:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8007474:	0852      	lsrs	r2, r2, #1
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	4293      	cmp	r3, r2
 800747a:	da07      	bge.n	800748c <ST7789_ChangeStringToMiddle+0x314>
        {
          row[1][i] = ' ';
 800747c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007480:	3380      	adds	r3, #128	; 0x80
 8007482:	443b      	add	r3, r7
 8007484:	2220      	movs	r2, #32
 8007486:	f803 2c3a 	strb.w	r2, [r3, #-58]
 800748a:	e010      	b.n	80074ae <ST7789_ChangeStringToMiddle+0x336>
        }
        else
        {
          row[1][i] = row[1][i- (num_space / 2)];
 800748c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8007490:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8007494:	0852      	lsrs	r2, r2, #1
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	1a9a      	subs	r2, r3, r2
 800749a:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800749e:	3280      	adds	r2, #128	; 0x80
 80074a0:	443a      	add	r2, r7
 80074a2:	f812 2c3a 	ldrb.w	r2, [r2, #-58]
 80074a6:	3380      	adds	r3, #128	; 0x80
 80074a8:	443b      	add	r3, r7
 80074aa:	f803 2c3a 	strb.w	r2, [r3, #-58]
      for(i = number_char_per_row - 1; i >= 0; i--)
 80074ae:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80074bc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	dad3      	bge.n	800746c <ST7789_ChangeStringToMiddle+0x2f4>
        }
      }

    }
  }
  printf("%s\n", row[0]);
 80074c4:	f107 0314 	add.w	r3, r7, #20
 80074c8:	4618      	mov	r0, r3
 80074ca:	f010 fd23 	bl	8017f14 <puts>
  printf("%s\n", row[1]);
 80074ce:	f107 0314 	add.w	r3, r7, #20
 80074d2:	3332      	adds	r3, #50	; 0x32
 80074d4:	4618      	mov	r0, r3
 80074d6:	f010 fd1d 	bl	8017f14 <puts>
  strcpy(dest, row[0]);
 80074da:	f107 0314 	add.w	r3, r7, #20
 80074de:	4619      	mov	r1, r3
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f010 fd4e 	bl	8017f82 <strcpy>
  strcat(dest, row[1]);
 80074e6:	f107 0314 	add.w	r3, r7, #20
 80074ea:	3332      	adds	r3, #50	; 0x32
 80074ec:	4619      	mov	r1, r3
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f010 fd38 	bl	8017f64 <strcat>
  printf("%s", dest);
 80074f4:	68f9      	ldr	r1, [r7, #12]
 80074f6:	4805      	ldr	r0, [pc, #20]	; (800750c <ST7789_ChangeStringToMiddle+0x394>)
 80074f8:	f010 fc86 	bl	8017e08 <iprintf>
 80074fc:	e000      	b.n	8007500 <ST7789_ChangeStringToMiddle+0x388>
    return;
 80074fe:	bf00      	nop
}
 8007500:	3784      	adds	r7, #132	; 0x84
 8007502:	46bd      	mov	sp, r7
 8007504:	bd90      	pop	{r4, r7, pc}
 8007506:	bf00      	nop
 8007508:	0801ac00 	.word	0x0801ac00
 800750c:	0801ac10 	.word	0x0801ac10

08007510 <ST7789_WriteStringLenght>:
void ST7789_WriteStringLenght(uint16_t x, uint16_t y, const char *str, uint16_t len, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af04      	add	r7, sp, #16
 8007516:	60ba      	str	r2, [r7, #8]
 8007518:	461a      	mov	r2, r3
 800751a:	4603      	mov	r3, r0
 800751c:	81fb      	strh	r3, [r7, #14]
 800751e:	460b      	mov	r3, r1
 8007520:	81bb      	strh	r3, [r7, #12]
 8007522:	4613      	mov	r3, r2
 8007524:	80fb      	strh	r3, [r7, #6]
  ST7789_Select();
 8007526:	2200      	movs	r2, #0
 8007528:	2101      	movs	r1, #1
 800752a:	4824      	ldr	r0, [pc, #144]	; (80075bc <ST7789_WriteStringLenght+0xac>)
 800752c:	f001 fc12 	bl	8008d54 <HAL_GPIO_WritePin>
  uint16_t i = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	82fb      	strh	r3, [r7, #22]
  while (*(str + i)) {
 8007534:	e02f      	b.n	8007596 <ST7789_WriteStringLenght+0x86>
    if (x + font.width >= ST7789_WIDTH) {
 8007536:	89fb      	ldrh	r3, [r7, #14]
 8007538:	f897 2020 	ldrb.w	r2, [r7, #32]
 800753c:	4413      	add	r3, r2
 800753e:	2bef      	cmp	r3, #239	; 0xef
 8007540:	dd0d      	ble.n	800755e <ST7789_WriteStringLenght+0x4e>
      x = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	81fb      	strh	r3, [r7, #14]
      y += font.height;
 8007546:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800754a:	b29a      	uxth	r2, r3
 800754c:	89bb      	ldrh	r3, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	81bb      	strh	r3, [r7, #12]
      if (y + font.height >= ST7789_HEIGHT) {
 8007552:	89bb      	ldrh	r3, [r7, #12]
 8007554:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007558:	4413      	add	r3, r2
 800755a:	2bef      	cmp	r3, #239	; 0xef
 800755c:	dc22      	bgt.n	80075a4 <ST7789_WriteStringLenght+0x94>
        break;
      }
    }
    ST7789_WriteChar(x, y, *(str + i), font, color, bgcolor);
 800755e:	8afb      	ldrh	r3, [r7, #22]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	4413      	add	r3, r2
 8007564:	781a      	ldrb	r2, [r3, #0]
 8007566:	89b9      	ldrh	r1, [r7, #12]
 8007568:	89f8      	ldrh	r0, [r7, #14]
 800756a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800756c:	9302      	str	r3, [sp, #8]
 800756e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	f7ff fc4c 	bl	8006e14 <ST7789_WriteChar>
    x += font.width;
 800757c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007580:	b29a      	uxth	r2, r3
 8007582:	89fb      	ldrh	r3, [r7, #14]
 8007584:	4413      	add	r3, r2
 8007586:	81fb      	strh	r3, [r7, #14]
    i++;
 8007588:	8afb      	ldrh	r3, [r7, #22]
 800758a:	3301      	adds	r3, #1
 800758c:	82fb      	strh	r3, [r7, #22]
    if(i == len) return;
 800758e:	8afa      	ldrh	r2, [r7, #22]
 8007590:	88fb      	ldrh	r3, [r7, #6]
 8007592:	429a      	cmp	r2, r3
 8007594:	d00d      	beq.n	80075b2 <ST7789_WriteStringLenght+0xa2>
  while (*(str + i)) {
 8007596:	8afb      	ldrh	r3, [r7, #22]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	4413      	add	r3, r2
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1c9      	bne.n	8007536 <ST7789_WriteStringLenght+0x26>
 80075a2:	e000      	b.n	80075a6 <ST7789_WriteStringLenght+0x96>
        break;
 80075a4:	bf00      	nop
  }
  ST7789_UnSelect();
 80075a6:	2201      	movs	r2, #1
 80075a8:	2101      	movs	r1, #1
 80075aa:	4804      	ldr	r0, [pc, #16]	; (80075bc <ST7789_WriteStringLenght+0xac>)
 80075ac:	f001 fbd2 	bl	8008d54 <HAL_GPIO_WritePin>
 80075b0:	e000      	b.n	80075b4 <ST7789_WriteStringLenght+0xa4>
    if(i == len) return;
 80075b2:	bf00      	nop
}
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	40020000 	.word	0x40020000

080075c0 <ST7789_WriteStringToMiddle>:
void ST7789_WriteStringToMiddle(uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80075c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075c2:	b08b      	sub	sp, #44	; 0x2c
 80075c4:	af04      	add	r7, sp, #16
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	4639      	mov	r1, r7
 80075ca:	e881 000c 	stmia.w	r1, {r2, r3}
 80075ce:	4603      	mov	r3, r0
 80075d0:	81fb      	strh	r3, [r7, #14]
  uint8_t len = strlen(str);
 80075d2:	68b8      	ldr	r0, [r7, #8]
 80075d4:	f7f8 fe04 	bl	80001e0 <strlen>
 80075d8:	4603      	mov	r3, r0
 80075da:	75fb      	strb	r3, [r7, #23]
  uint16_t x_start = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	82bb      	strh	r3, [r7, #20]
  uint16_t y_start = y;
 80075e0:	89fb      	ldrh	r3, [r7, #14]
 80075e2:	827b      	strh	r3, [r7, #18]
  uint16_t x_size_of_string = len * font.width;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	783b      	ldrb	r3, [r7, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	fb12 f303 	smulbb	r3, r2, r3
 80075f0:	823b      	strh	r3, [r7, #16]
  x_start = (ST7789_WIDTH - x_size_of_string) / 2;
 80075f2:	8a3b      	ldrh	r3, [r7, #16]
 80075f4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80075f8:	0fda      	lsrs	r2, r3, #31
 80075fa:	4413      	add	r3, r2
 80075fc:	105b      	asrs	r3, r3, #1
 80075fe:	82bb      	strh	r3, [r7, #20]
  ST7789_WriteStringLenght(x_start, y_start, str, len, font, color, bgcolor);
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	b29a      	uxth	r2, r3
 8007604:	8a7d      	ldrh	r5, [r7, #18]
 8007606:	8abc      	ldrh	r4, [r7, #20]
 8007608:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800760e:	9302      	str	r3, [sp, #8]
 8007610:	466e      	mov	r6, sp
 8007612:	463b      	mov	r3, r7
 8007614:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007618:	e886 0003 	stmia.w	r6, {r0, r1}
 800761c:	4613      	mov	r3, r2
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	4629      	mov	r1, r5
 8007622:	4620      	mov	r0, r4
 8007624:	f7ff ff74 	bl	8007510 <ST7789_WriteStringLenght>
}
 8007628:	bf00      	nop
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007630 <ST7789_WriteStringImagelenght>:
    str++;
  }
  ST7789_UnSelect();
}
void ST7789_WriteStringImagelenght(uint16_t x, uint16_t y, const char *str, uint16_t len, tFont font)
{
 8007630:	b5b0      	push	{r4, r5, r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af02      	add	r7, sp, #8
 8007636:	60ba      	str	r2, [r7, #8]
 8007638:	461a      	mov	r2, r3
 800763a:	4603      	mov	r3, r0
 800763c:	81fb      	strh	r3, [r7, #14]
 800763e:	460b      	mov	r3, r1
 8007640:	81bb      	strh	r3, [r7, #12]
 8007642:	4613      	mov	r3, r2
 8007644:	80fb      	strh	r3, [r7, #6]
  uint8_t c;
  uint16_t i = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	82fb      	strh	r3, [r7, #22]
  ST7789_Select();
 800764a:	2200      	movs	r2, #0
 800764c:	2101      	movs	r1, #1
 800764e:	4821      	ldr	r0, [pc, #132]	; (80076d4 <ST7789_WriteStringImagelenght+0xa4>)
 8007650:	f001 fb80 	bl	8008d54 <HAL_GPIO_WritePin>
  while (*(str + i)) {
 8007654:	e02e      	b.n	80076b4 <ST7789_WriteStringImagelenght+0x84>
//        str++;
//        continue;
//      }
//    }
//    ST7789_WriteChar(x, y, *str, font, color, bgcolor);
    c = *(str + i) - 0x20;
 8007656:	8afb      	ldrh	r3, [r7, #22]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	4413      	add	r3, r2
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	3b20      	subs	r3, #32
 8007660:	757b      	strb	r3, [r7, #21]
    //printf("string = %d\n", c);
    ST7789_DrawImage(x, y, font.chars[c].image->width, font.chars[c].image->height, font.chars[c].image->data);
 8007662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007664:	7d7b      	ldrb	r3, [r7, #21]
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	4413      	add	r3, r2
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	889c      	ldrh	r4, [r3, #4]
 800766e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007670:	7d7b      	ldrb	r3, [r7, #21]
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	4413      	add	r3, r2
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	88dd      	ldrh	r5, [r3, #6]
 800767a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800767c:	7d7b      	ldrb	r3, [r7, #21]
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	4413      	add	r3, r2
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	89b9      	ldrh	r1, [r7, #12]
 8007688:	89f8      	ldrh	r0, [r7, #14]
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	462b      	mov	r3, r5
 800768e:	4622      	mov	r2, r4
 8007690:	f7ff fb72 	bl	8006d78 <ST7789_DrawImage>
    x += font.chars[c].image->width;
 8007694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007696:	7d7b      	ldrb	r3, [r7, #21]
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	4413      	add	r3, r2
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	889a      	ldrh	r2, [r3, #4]
 80076a0:	89fb      	ldrh	r3, [r7, #14]
 80076a2:	4413      	add	r3, r2
 80076a4:	81fb      	strh	r3, [r7, #14]
    i++;
 80076a6:	8afb      	ldrh	r3, [r7, #22]
 80076a8:	3301      	adds	r3, #1
 80076aa:	82fb      	strh	r3, [r7, #22]
    if(i == len) return;
 80076ac:	8afa      	ldrh	r2, [r7, #22]
 80076ae:	88fb      	ldrh	r3, [r7, #6]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d00b      	beq.n	80076cc <ST7789_WriteStringImagelenght+0x9c>
  while (*(str + i)) {
 80076b4:	8afb      	ldrh	r3, [r7, #22]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	4413      	add	r3, r2
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1ca      	bne.n	8007656 <ST7789_WriteStringImagelenght+0x26>
  }
  ST7789_UnSelect();
 80076c0:	2201      	movs	r2, #1
 80076c2:	2101      	movs	r1, #1
 80076c4:	4803      	ldr	r0, [pc, #12]	; (80076d4 <ST7789_WriteStringImagelenght+0xa4>)
 80076c6:	f001 fb45 	bl	8008d54 <HAL_GPIO_WritePin>
 80076ca:	e000      	b.n	80076ce <ST7789_WriteStringImagelenght+0x9e>
    if(i == len) return;
 80076cc:	bf00      	nop
}
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bdb0      	pop	{r4, r5, r7, pc}
 80076d4:	40020000 	.word	0x40020000

080076d8 <ST7789_WriteStringImageToMiddle>:
void ST7789_WriteStringImageToMiddle(uint16_t x, uint16_t y, const char *str, uint16_t len, tFont font)
{
 80076d8:	b5b0      	push	{r4, r5, r7, lr}
 80076da:	b08a      	sub	sp, #40	; 0x28
 80076dc:	af02      	add	r7, sp, #8
 80076de:	60ba      	str	r2, [r7, #8]
 80076e0:	461a      	mov	r2, r3
 80076e2:	4603      	mov	r3, r0
 80076e4:	81fb      	strh	r3, [r7, #14]
 80076e6:	460b      	mov	r3, r1
 80076e8:	81bb      	strh	r3, [r7, #12]
 80076ea:	4613      	mov	r3, r2
 80076ec:	80fb      	strh	r3, [r7, #6]
  uint16_t x_start;
  uint16_t y_start;
  uint16_t i;
  uint16_t str_len = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	83bb      	strh	r3, [r7, #28]
  uint16_t x_size;
  uint16_t y_size;
//  printf("font.width = %d, x_size = %d\n",font.width, x_size);
//  printf("font.height = %d, y_size = %d\n",font.height, y_size);
//  printf("time = %s\n", str);
  for(i = 0; i < len; i++)
 80076f2:	2300      	movs	r3, #0
 80076f4:	83fb      	strh	r3, [r7, #30]
 80076f6:	e011      	b.n	800771c <ST7789_WriteStringImageToMiddle+0x44>
  {
    str_len += font.chars[str[i] - 0x20].image->width;
 80076f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076fa:	8bfb      	ldrh	r3, [r7, #30]
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	440b      	add	r3, r1
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007706:	3b20      	subs	r3, #32
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	4413      	add	r3, r2
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	889a      	ldrh	r2, [r3, #4]
 8007710:	8bbb      	ldrh	r3, [r7, #28]
 8007712:	4413      	add	r3, r2
 8007714:	83bb      	strh	r3, [r7, #28]
  for(i = 0; i < len; i++)
 8007716:	8bfb      	ldrh	r3, [r7, #30]
 8007718:	3301      	adds	r3, #1
 800771a:	83fb      	strh	r3, [r7, #30]
 800771c:	8bfa      	ldrh	r2, [r7, #30]
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	429a      	cmp	r2, r3
 8007722:	d3e9      	bcc.n	80076f8 <ST7789_WriteStringImageToMiddle+0x20>
  }
  x_size = str_len;
 8007724:	8bbb      	ldrh	r3, [r7, #28]
 8007726:	837b      	strh	r3, [r7, #26]
  y_size = font.chars[str[0] - 0x20].image->height;
 8007728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007732:	3b20      	subs	r3, #32
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	4413      	add	r3, r2
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	88db      	ldrh	r3, [r3, #6]
 800773c:	833b      	strh	r3, [r7, #24]
  x_start = x - (x_size / 2);
 800773e:	8b7b      	ldrh	r3, [r7, #26]
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	b29b      	uxth	r3, r3
 8007744:	89fa      	ldrh	r2, [r7, #14]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	82fb      	strh	r3, [r7, #22]
  y_start = y - (y_size / 2);
 800774a:	8b3b      	ldrh	r3, [r7, #24]
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	b29b      	uxth	r3, r3
 8007750:	89ba      	ldrh	r2, [r7, #12]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	82bb      	strh	r3, [r7, #20]
  ST7789_WriteStringImagelenght(x_start, y_start, str, len, font);
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	8abd      	ldrh	r5, [r7, #20]
 800775a:	8afc      	ldrh	r4, [r7, #22]
 800775c:	466a      	mov	r2, sp
 800775e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007762:	c903      	ldmia	r1, {r0, r1}
 8007764:	e882 0003 	stmia.w	r2, {r0, r1}
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	4629      	mov	r1, r5
 800776c:	4620      	mov	r0, r4
 800776e:	f7ff ff5f 	bl	8007630 <ST7789_WriteStringImagelenght>
}
 8007772:	bf00      	nop
 8007774:	3720      	adds	r7, #32
 8007776:	46bd      	mov	sp, r7
 8007778:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800777c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007780:	4b0e      	ldr	r3, [pc, #56]	; (80077bc <HAL_Init+0x40>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a0d      	ldr	r2, [pc, #52]	; (80077bc <HAL_Init+0x40>)
 8007786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800778a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800778c:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <HAL_Init+0x40>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <HAL_Init+0x40>)
 8007792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007798:	4b08      	ldr	r3, [pc, #32]	; (80077bc <HAL_Init+0x40>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a07      	ldr	r2, [pc, #28]	; (80077bc <HAL_Init+0x40>)
 800779e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077a4:	2003      	movs	r0, #3
 80077a6:	f000 fd4a 	bl	800823e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077aa:	200f      	movs	r0, #15
 80077ac:	f7fa fc60 	bl	8002070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077b0:	f7fa fc32 	bl	8002018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	40023c00 	.word	0x40023c00

080077c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80077c4:	4b06      	ldr	r3, [pc, #24]	; (80077e0 <HAL_IncTick+0x20>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <HAL_IncTick+0x24>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4413      	add	r3, r2
 80077d0:	4a04      	ldr	r2, [pc, #16]	; (80077e4 <HAL_IncTick+0x24>)
 80077d2:	6013      	str	r3, [r2, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	200008a8 	.word	0x200008a8
 80077e4:	200197f0 	.word	0x200197f0

080077e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
  return uwTick;
 80077ec:	4b03      	ldr	r3, [pc, #12]	; (80077fc <HAL_GetTick+0x14>)
 80077ee:	681b      	ldr	r3, [r3, #0]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	200197f0 	.word	0x200197f0

08007800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007808:	f7ff ffee 	bl	80077e8 <HAL_GetTick>
 800780c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d005      	beq.n	8007826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800781a:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <HAL_Delay+0x44>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007826:	bf00      	nop
 8007828:	f7ff ffde 	bl	80077e8 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	429a      	cmp	r2, r3
 8007836:	d8f7      	bhi.n	8007828 <HAL_Delay+0x28>
  {
  }
}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	200008a8 	.word	0x200008a8

08007848 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e033      	b.n	80078c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d109      	bne.n	800787a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7f9 fbbc 	bl	8000fe4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	f003 0310 	and.w	r3, r3, #16
 8007882:	2b00      	cmp	r3, #0
 8007884:	d118      	bne.n	80078b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800788e:	f023 0302 	bic.w	r3, r3, #2
 8007892:	f043 0202 	orr.w	r2, r3, #2
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 faa4 	bl	8007de8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	f043 0201 	orr.w	r2, r3, #1
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	641a      	str	r2, [r3, #64]	; 0x40
 80078b6:	e001      	b.n	80078bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d101      	bne.n	80078ee <HAL_ADC_Start_DMA+0x1e>
 80078ea:	2302      	movs	r3, #2
 80078ec:	e0ce      	b.n	8007a8c <HAL_ADC_Start_DMA+0x1bc>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b01      	cmp	r3, #1
 8007902:	d018      	beq.n	8007936 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0201 	orr.w	r2, r2, #1
 8007912:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007914:	4b5f      	ldr	r3, [pc, #380]	; (8007a94 <HAL_ADC_Start_DMA+0x1c4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a5f      	ldr	r2, [pc, #380]	; (8007a98 <HAL_ADC_Start_DMA+0x1c8>)
 800791a:	fba2 2303 	umull	r2, r3, r2, r3
 800791e:	0c9a      	lsrs	r2, r3, #18
 8007920:	4613      	mov	r3, r2
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	4413      	add	r3, r2
 8007926:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007928:	e002      	b.n	8007930 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	3b01      	subs	r3, #1
 800792e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1f9      	bne.n	800792a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007944:	d107      	bne.n	8007956 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007954:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b01      	cmp	r3, #1
 8007962:	f040 8086 	bne.w	8007a72 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800796e:	f023 0301 	bic.w	r3, r3, #1
 8007972:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007984:	2b00      	cmp	r3, #0
 8007986:	d007      	beq.n	8007998 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007990:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a4:	d106      	bne.n	80079b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079aa:	f023 0206 	bic.w	r2, r3, #6
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	645a      	str	r2, [r3, #68]	; 0x44
 80079b2:	e002      	b.n	80079ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80079c2:	4b36      	ldr	r3, [pc, #216]	; (8007a9c <HAL_ADC_Start_DMA+0x1cc>)
 80079c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	4a35      	ldr	r2, [pc, #212]	; (8007aa0 <HAL_ADC_Start_DMA+0x1d0>)
 80079cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d2:	4a34      	ldr	r2, [pc, #208]	; (8007aa4 <HAL_ADC_Start_DMA+0x1d4>)
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	4a33      	ldr	r2, [pc, #204]	; (8007aa8 <HAL_ADC_Start_DMA+0x1d8>)
 80079dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80079e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80079f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a06:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	334c      	adds	r3, #76	; 0x4c
 8007a12:	4619      	mov	r1, r3
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f000 fd10 	bl	800843c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f003 031f 	and.w	r3, r3, #31
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10f      	bne.n	8007a48 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d129      	bne.n	8007a8a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007a44:	609a      	str	r2, [r3, #8]
 8007a46:	e020      	b.n	8007a8a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a17      	ldr	r2, [pc, #92]	; (8007aac <HAL_ADC_Start_DMA+0x1dc>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d11b      	bne.n	8007a8a <HAL_ADC_Start_DMA+0x1ba>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d114      	bne.n	8007a8a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007a6e:	609a      	str	r2, [r3, #8]
 8007a70:	e00b      	b.n	8007a8a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	f043 0210 	orr.w	r2, r3, #16
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a82:	f043 0201 	orr.w	r2, r3, #1
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20000000 	.word	0x20000000
 8007a98:	431bde83 	.word	0x431bde83
 8007a9c:	40012300 	.word	0x40012300
 8007aa0:	08007fe1 	.word	0x08007fe1
 8007aa4:	0800809b 	.word	0x0800809b
 8007aa8:	080080b7 	.word	0x080080b7
 8007aac:	40012000 	.word	0x40012000

08007ab0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_ADC_ConfigChannel+0x1c>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e113      	b.n	8007d08 <HAL_ADC_ConfigChannel+0x244>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	d925      	bls.n	8007b3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68d9      	ldr	r1, [r3, #12]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	4613      	mov	r3, r2
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	4413      	add	r3, r2
 8007b04:	3b1e      	subs	r3, #30
 8007b06:	2207      	movs	r2, #7
 8007b08:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0c:	43da      	mvns	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	400a      	ands	r2, r1
 8007b14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68d9      	ldr	r1, [r3, #12]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	4618      	mov	r0, r3
 8007b28:	4603      	mov	r3, r0
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	4403      	add	r3, r0
 8007b2e:	3b1e      	subs	r3, #30
 8007b30:	409a      	lsls	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	60da      	str	r2, [r3, #12]
 8007b3a:	e022      	b.n	8007b82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6919      	ldr	r1, [r3, #16]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	461a      	mov	r2, r3
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	4413      	add	r3, r2
 8007b50:	2207      	movs	r2, #7
 8007b52:	fa02 f303 	lsl.w	r3, r2, r3
 8007b56:	43da      	mvns	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	400a      	ands	r2, r1
 8007b5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6919      	ldr	r1, [r3, #16]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	4618      	mov	r0, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	4403      	add	r3, r0
 8007b78:	409a      	lsls	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b06      	cmp	r3, #6
 8007b88:	d824      	bhi.n	8007bd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	3b05      	subs	r3, #5
 8007b9c:	221f      	movs	r2, #31
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	43da      	mvns	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	400a      	ands	r2, r1
 8007baa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	4618      	mov	r0, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	3b05      	subs	r3, #5
 8007bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8007bd2:	e04c      	b.n	8007c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	2b0c      	cmp	r3, #12
 8007bda:	d824      	bhi.n	8007c26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	3b23      	subs	r3, #35	; 0x23
 8007bee:	221f      	movs	r2, #31
 8007bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf4:	43da      	mvns	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	400a      	ands	r2, r1
 8007bfc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	3b23      	subs	r3, #35	; 0x23
 8007c18:	fa00 f203 	lsl.w	r2, r0, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	631a      	str	r2, [r3, #48]	; 0x30
 8007c24:	e023      	b.n	8007c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	3b41      	subs	r3, #65	; 0x41
 8007c38:	221f      	movs	r2, #31
 8007c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3e:	43da      	mvns	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	400a      	ands	r2, r1
 8007c46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	4618      	mov	r0, r3
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	3b41      	subs	r3, #65	; 0x41
 8007c62:	fa00 f203 	lsl.w	r2, r0, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c6e:	4b29      	ldr	r3, [pc, #164]	; (8007d14 <HAL_ADC_ConfigChannel+0x250>)
 8007c70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a28      	ldr	r2, [pc, #160]	; (8007d18 <HAL_ADC_ConfigChannel+0x254>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d10f      	bne.n	8007c9c <HAL_ADC_ConfigChannel+0x1d8>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b12      	cmp	r3, #18
 8007c82:	d10b      	bne.n	8007c9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a1d      	ldr	r2, [pc, #116]	; (8007d18 <HAL_ADC_ConfigChannel+0x254>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d12b      	bne.n	8007cfe <HAL_ADC_ConfigChannel+0x23a>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a1c      	ldr	r2, [pc, #112]	; (8007d1c <HAL_ADC_ConfigChannel+0x258>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <HAL_ADC_ConfigChannel+0x1f4>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b11      	cmp	r3, #17
 8007cb6:	d122      	bne.n	8007cfe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a11      	ldr	r2, [pc, #68]	; (8007d1c <HAL_ADC_ConfigChannel+0x258>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d111      	bne.n	8007cfe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007cda:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <HAL_ADC_ConfigChannel+0x25c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a11      	ldr	r2, [pc, #68]	; (8007d24 <HAL_ADC_ConfigChannel+0x260>)
 8007ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce4:	0c9a      	lsrs	r2, r3, #18
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007cf0:	e002      	b.n	8007cf8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1f9      	bne.n	8007cf2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	40012300 	.word	0x40012300
 8007d18:	40012000 	.word	0x40012000
 8007d1c:	10000012 	.word	0x10000012
 8007d20:	20000000 	.word	0x20000000
 8007d24:	431bde83 	.word	0x431bde83

08007d28 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_ADC_AnalogWDGConfig+0x18>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e04d      	b.n	8007ddc <HAL_ADC_AnalogWDGConfig+0xb4>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	7c1b      	ldrb	r3, [r3, #16]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d108      	bne.n	8007d62 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d5e:	605a      	str	r2, [r3, #4]
 8007d60:	e007      	b.n	8007d72 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d70:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	6812      	ldr	r2, [r2, #0]
 8007d7c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d84:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6859      	ldr	r1, [r3, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	6852      	ldr	r2, [r2, #4]
 8007da0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	6892      	ldr	r2, [r2, #8]
 8007daa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 021f 	bic.w	r2, r2, #31
 8007dba:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	4619      	mov	r1, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007df0:	4b79      	ldr	r3, [pc, #484]	; (8007fd8 <ADC_Init+0x1f0>)
 8007df2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6859      	ldr	r1, [r3, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	021a      	lsls	r2, r3, #8
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6859      	ldr	r1, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689a      	ldr	r2, [r3, #8]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6899      	ldr	r1, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7a:	4a58      	ldr	r2, [pc, #352]	; (8007fdc <ADC_Init+0x1f4>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d022      	beq.n	8007ec6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6899      	ldr	r1, [r3, #8]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6899      	ldr	r1, [r3, #8]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	609a      	str	r2, [r3, #8]
 8007ec4:	e00f      	b.n	8007ee6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ee4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0202 	bic.w	r2, r2, #2
 8007ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6899      	ldr	r1, [r3, #8]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	7e1b      	ldrb	r3, [r3, #24]
 8007f00:	005a      	lsls	r2, r3, #1
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01b      	beq.n	8007f4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007f32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6859      	ldr	r1, [r3, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	035a      	lsls	r2, r3, #13
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	605a      	str	r2, [r3, #4]
 8007f4a:	e007      	b.n	8007f5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	051a      	lsls	r2, r3, #20
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6899      	ldr	r1, [r3, #8]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f9e:	025a      	lsls	r2, r3, #9
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6899      	ldr	r1, [r3, #8]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	029a      	lsls	r2, r3, #10
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	609a      	str	r2, [r3, #8]
}
 8007fcc:	bf00      	nop
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	40012300 	.word	0x40012300
 8007fdc:	0f000001 	.word	0x0f000001

08007fe0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d13c      	bne.n	8008074 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d12b      	bne.n	800806c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008018:	2b00      	cmp	r3, #0
 800801a:	d127      	bne.n	800806c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008026:	2b00      	cmp	r3, #0
 8008028:	d006      	beq.n	8008038 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008034:	2b00      	cmp	r3, #0
 8008036:	d119      	bne.n	800806c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0220 	bic.w	r2, r2, #32
 8008046:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d105      	bne.n	800806c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008064:	f043 0201 	orr.w	r2, r3, #1
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7fa fb4f 	bl	8002710 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008072:	e00e      	b.n	8008092 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008078:	f003 0310 	and.w	r3, r3, #16
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff fd15 	bl	8007ab0 <HAL_ADC_ErrorCallback>
}
 8008086:	e004      	b.n	8008092 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7fa fb26 	bl	80026fa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2240      	movs	r2, #64	; 0x40
 80080c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ce:	f043 0204 	orr.w	r2, r3, #4
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f7ff fcea 	bl	8007ab0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80080dc:	bf00      	nop
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080f4:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <__NVIC_SetPriorityGrouping+0x44>)
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008100:	4013      	ands	r3, r2
 8008102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800810c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008116:	4a04      	ldr	r2, [pc, #16]	; (8008128 <__NVIC_SetPriorityGrouping+0x44>)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	60d3      	str	r3, [r2, #12]
}
 800811c:	bf00      	nop
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	e000ed00 	.word	0xe000ed00

0800812c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008130:	4b04      	ldr	r3, [pc, #16]	; (8008144 <__NVIC_GetPriorityGrouping+0x18>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	0a1b      	lsrs	r3, r3, #8
 8008136:	f003 0307 	and.w	r3, r3, #7
}
 800813a:	4618      	mov	r0, r3
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	e000ed00 	.word	0xe000ed00

08008148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008156:	2b00      	cmp	r3, #0
 8008158:	db0b      	blt.n	8008172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	f003 021f 	and.w	r2, r3, #31
 8008160:	4907      	ldr	r1, [pc, #28]	; (8008180 <__NVIC_EnableIRQ+0x38>)
 8008162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008166:	095b      	lsrs	r3, r3, #5
 8008168:	2001      	movs	r0, #1
 800816a:	fa00 f202 	lsl.w	r2, r0, r2
 800816e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	e000e100 	.word	0xe000e100

08008184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	6039      	str	r1, [r7, #0]
 800818e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008194:	2b00      	cmp	r3, #0
 8008196:	db0a      	blt.n	80081ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	b2da      	uxtb	r2, r3
 800819c:	490c      	ldr	r1, [pc, #48]	; (80081d0 <__NVIC_SetPriority+0x4c>)
 800819e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081a2:	0112      	lsls	r2, r2, #4
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	440b      	add	r3, r1
 80081a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80081ac:	e00a      	b.n	80081c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	4908      	ldr	r1, [pc, #32]	; (80081d4 <__NVIC_SetPriority+0x50>)
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	3b04      	subs	r3, #4
 80081bc:	0112      	lsls	r2, r2, #4
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	440b      	add	r3, r1
 80081c2:	761a      	strb	r2, [r3, #24]
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	e000e100 	.word	0xe000e100
 80081d4:	e000ed00 	.word	0xe000ed00

080081d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081d8:	b480      	push	{r7}
 80081da:	b089      	sub	sp, #36	; 0x24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	f1c3 0307 	rsb	r3, r3, #7
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	bf28      	it	cs
 80081f6:	2304      	movcs	r3, #4
 80081f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	3304      	adds	r3, #4
 80081fe:	2b06      	cmp	r3, #6
 8008200:	d902      	bls.n	8008208 <NVIC_EncodePriority+0x30>
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	3b03      	subs	r3, #3
 8008206:	e000      	b.n	800820a <NVIC_EncodePriority+0x32>
 8008208:	2300      	movs	r3, #0
 800820a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	fa02 f303 	lsl.w	r3, r2, r3
 8008216:	43da      	mvns	r2, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	401a      	ands	r2, r3
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008220:	f04f 31ff 	mov.w	r1, #4294967295
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	fa01 f303 	lsl.w	r3, r1, r3
 800822a:	43d9      	mvns	r1, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008230:	4313      	orrs	r3, r2
         );
}
 8008232:	4618      	mov	r0, r3
 8008234:	3724      	adds	r7, #36	; 0x24
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff ff4c 	bl	80080e4 <__NVIC_SetPriorityGrouping>
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008262:	2300      	movs	r3, #0
 8008264:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008266:	f7ff ff61 	bl	800812c <__NVIC_GetPriorityGrouping>
 800826a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	68b9      	ldr	r1, [r7, #8]
 8008270:	6978      	ldr	r0, [r7, #20]
 8008272:	f7ff ffb1 	bl	80081d8 <NVIC_EncodePriority>
 8008276:	4602      	mov	r2, r0
 8008278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff ff80 	bl	8008184 <__NVIC_SetPriority>
}
 8008284:	bf00      	nop
 8008286:	3718      	adds	r7, #24
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff ff54 	bl	8008148 <__NVIC_EnableIRQ>
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e00e      	b.n	80082d8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	795b      	ldrb	r3, [r3, #5]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d105      	bne.n	80082d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7f8 ff14 	bl	80010f8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80082ec:	f7ff fa7c 	bl	80077e8 <HAL_GetTick>
 80082f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e099      	b.n	8008430 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0201 	bic.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800831c:	e00f      	b.n	800833e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800831e:	f7ff fa63 	bl	80077e8 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b05      	cmp	r3, #5
 800832a:	d908      	bls.n	800833e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2220      	movs	r2, #32
 8008330:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2203      	movs	r2, #3
 8008336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e078      	b.n	8008430 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e8      	bne.n	800831e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	4b38      	ldr	r3, [pc, #224]	; (8008438 <HAL_DMA_Init+0x158>)
 8008358:	4013      	ands	r3, r2
 800835a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800836a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b04      	cmp	r3, #4
 8008396:	d107      	bne.n	80083a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a0:	4313      	orrs	r3, r2
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f023 0307 	bic.w	r3, r3, #7
 80083be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d117      	bne.n	8008402 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	4313      	orrs	r3, r2
 80083da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00e      	beq.n	8008402 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa9d 	bl	8008924 <DMA_CheckFifoParam>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d008      	beq.n	8008402 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2240      	movs	r2, #64	; 0x40
 80083f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80083fe:	2301      	movs	r3, #1
 8008400:	e016      	b.n	8008430 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa54 	bl	80088b8 <DMA_CalcBaseAndBitshift>
 8008410:	4603      	mov	r3, r0
 8008412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008418:	223f      	movs	r2, #63	; 0x3f
 800841a:	409a      	lsls	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	f010803f 	.word	0xf010803f

0800843c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008452:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800845a:	2b01      	cmp	r3, #1
 800845c:	d101      	bne.n	8008462 <HAL_DMA_Start_IT+0x26>
 800845e:	2302      	movs	r3, #2
 8008460:	e040      	b.n	80084e4 <HAL_DMA_Start_IT+0xa8>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b01      	cmp	r3, #1
 8008474:	d12f      	bne.n	80084d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2202      	movs	r2, #2
 800847a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	68b9      	ldr	r1, [r7, #8]
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 f9e6 	bl	800885c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008494:	223f      	movs	r2, #63	; 0x3f
 8008496:	409a      	lsls	r2, r3
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0216 	orr.w	r2, r2, #22
 80084aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d007      	beq.n	80084c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0208 	orr.w	r2, r2, #8
 80084c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f042 0201 	orr.w	r2, r2, #1
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	e005      	b.n	80084e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80084de:	2302      	movs	r3, #2
 80084e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d004      	beq.n	800850a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2280      	movs	r2, #128	; 0x80
 8008504:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e00c      	b.n	8008524 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2205      	movs	r2, #5
 800850e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0201 	bic.w	r2, r2, #1
 8008520:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800853c:	4b8e      	ldr	r3, [pc, #568]	; (8008778 <HAL_DMA_IRQHandler+0x248>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a8e      	ldr	r2, [pc, #568]	; (800877c <HAL_DMA_IRQHandler+0x24c>)
 8008542:	fba2 2303 	umull	r2, r3, r2, r3
 8008546:	0a9b      	lsrs	r3, r3, #10
 8008548:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800855a:	2208      	movs	r2, #8
 800855c:	409a      	lsls	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4013      	ands	r3, r2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d01a      	beq.n	800859c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b00      	cmp	r3, #0
 8008572:	d013      	beq.n	800859c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 0204 	bic.w	r2, r2, #4
 8008582:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008588:	2208      	movs	r2, #8
 800858a:	409a      	lsls	r2, r3
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008594:	f043 0201 	orr.w	r2, r3, #1
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085a0:	2201      	movs	r2, #1
 80085a2:	409a      	lsls	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4013      	ands	r3, r2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d012      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00b      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085be:	2201      	movs	r2, #1
 80085c0:	409a      	lsls	r2, r3
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ca:	f043 0202 	orr.w	r2, r3, #2
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d6:	2204      	movs	r2, #4
 80085d8:	409a      	lsls	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4013      	ands	r3, r2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d012      	beq.n	8008608 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f4:	2204      	movs	r2, #4
 80085f6:	409a      	lsls	r2, r3
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008600:	f043 0204 	orr.w	r2, r3, #4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800860c:	2210      	movs	r2, #16
 800860e:	409a      	lsls	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4013      	ands	r3, r2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d043      	beq.n	80086a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0308 	and.w	r3, r3, #8
 8008622:	2b00      	cmp	r3, #0
 8008624:	d03c      	beq.n	80086a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800862a:	2210      	movs	r2, #16
 800862c:	409a      	lsls	r2, r3
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d018      	beq.n	8008672 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d108      	bne.n	8008660 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	2b00      	cmp	r3, #0
 8008654:	d024      	beq.n	80086a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	4798      	blx	r3
 800865e:	e01f      	b.n	80086a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01b      	beq.n	80086a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	4798      	blx	r3
 8008670:	e016      	b.n	80086a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867c:	2b00      	cmp	r3, #0
 800867e:	d107      	bne.n	8008690 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0208 	bic.w	r2, r2, #8
 800868e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a4:	2220      	movs	r2, #32
 80086a6:	409a      	lsls	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 808f 	beq.w	80087d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 8087 	beq.w	80087d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c6:	2220      	movs	r2, #32
 80086c8:	409a      	lsls	r2, r3
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d136      	bne.n	8008748 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0216 	bic.w	r2, r2, #22
 80086e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	695a      	ldr	r2, [r3, #20]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d103      	bne.n	800870a <HAL_DMA_IRQHandler+0x1da>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008706:	2b00      	cmp	r3, #0
 8008708:	d007      	beq.n	800871a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 0208 	bic.w	r2, r2, #8
 8008718:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871e:	223f      	movs	r2, #63	; 0x3f
 8008720:	409a      	lsls	r2, r3
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873a:	2b00      	cmp	r3, #0
 800873c:	d07e      	beq.n	800883c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
        }
        return;
 8008746:	e079      	b.n	800883c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d01d      	beq.n	8008792 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10d      	bne.n	8008780 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008768:	2b00      	cmp	r3, #0
 800876a:	d031      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	4798      	blx	r3
 8008774:	e02c      	b.n	80087d0 <HAL_DMA_IRQHandler+0x2a0>
 8008776:	bf00      	nop
 8008778:	20000000 	.word	0x20000000
 800877c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d023      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	4798      	blx	r3
 8008790:	e01e      	b.n	80087d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10f      	bne.n	80087c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0210 	bic.w	r2, r2, #16
 80087ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d003      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d032      	beq.n	800883e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d022      	beq.n	800882a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2205      	movs	r2, #5
 80087e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f022 0201 	bic.w	r2, r2, #1
 80087fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	3301      	adds	r3, #1
 8008800:	60bb      	str	r3, [r7, #8]
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	429a      	cmp	r2, r3
 8008806:	d307      	bcc.n	8008818 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1f2      	bne.n	80087fc <HAL_DMA_IRQHandler+0x2cc>
 8008816:	e000      	b.n	800881a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008818:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	4798      	blx	r3
 800883a:	e000      	b.n	800883e <HAL_DMA_IRQHandler+0x30e>
        return;
 800883c:	bf00      	nop
    }
  }
}
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008850:	4618      	mov	r0, r3
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008878:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d108      	bne.n	800889c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800889a:	e007      	b.n	80088ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	60da      	str	r2, [r3, #12]
}
 80088ac:	bf00      	nop
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	3b10      	subs	r3, #16
 80088c8:	4a14      	ldr	r2, [pc, #80]	; (800891c <DMA_CalcBaseAndBitshift+0x64>)
 80088ca:	fba2 2303 	umull	r2, r3, r2, r3
 80088ce:	091b      	lsrs	r3, r3, #4
 80088d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80088d2:	4a13      	ldr	r2, [pc, #76]	; (8008920 <DMA_CalcBaseAndBitshift+0x68>)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d909      	bls.n	80088fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80088ee:	f023 0303 	bic.w	r3, r3, #3
 80088f2:	1d1a      	adds	r2, r3, #4
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	659a      	str	r2, [r3, #88]	; 0x58
 80088f8:	e007      	b.n	800890a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008902:	f023 0303 	bic.w	r3, r3, #3
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	aaaaaaab 	.word	0xaaaaaaab
 8008920:	0804d974 	.word	0x0804d974

08008924 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d11f      	bne.n	800897e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2b03      	cmp	r3, #3
 8008942:	d856      	bhi.n	80089f2 <DMA_CheckFifoParam+0xce>
 8008944:	a201      	add	r2, pc, #4	; (adr r2, 800894c <DMA_CheckFifoParam+0x28>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	0800895d 	.word	0x0800895d
 8008950:	0800896f 	.word	0x0800896f
 8008954:	0800895d 	.word	0x0800895d
 8008958:	080089f3 	.word	0x080089f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d046      	beq.n	80089f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800896c:	e043      	b.n	80089f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008976:	d140      	bne.n	80089fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800897c:	e03d      	b.n	80089fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008986:	d121      	bne.n	80089cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b03      	cmp	r3, #3
 800898c:	d837      	bhi.n	80089fe <DMA_CheckFifoParam+0xda>
 800898e:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <DMA_CheckFifoParam+0x70>)
 8008990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008994:	080089a5 	.word	0x080089a5
 8008998:	080089ab 	.word	0x080089ab
 800899c:	080089a5 	.word	0x080089a5
 80089a0:	080089bd 	.word	0x080089bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	73fb      	strb	r3, [r7, #15]
      break;
 80089a8:	e030      	b.n	8008a0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d025      	beq.n	8008a02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089ba:	e022      	b.n	8008a02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089c4:	d11f      	bne.n	8008a06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80089ca:	e01c      	b.n	8008a06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d903      	bls.n	80089da <DMA_CheckFifoParam+0xb6>
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d003      	beq.n	80089e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80089d8:	e018      	b.n	8008a0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	73fb      	strb	r3, [r7, #15]
      break;
 80089de:	e015      	b.n	8008a0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00e      	beq.n	8008a0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	73fb      	strb	r3, [r7, #15]
      break;
 80089f0:	e00b      	b.n	8008a0a <DMA_CheckFifoParam+0xe6>
      break;
 80089f2:	bf00      	nop
 80089f4:	e00a      	b.n	8008a0c <DMA_CheckFifoParam+0xe8>
      break;
 80089f6:	bf00      	nop
 80089f8:	e008      	b.n	8008a0c <DMA_CheckFifoParam+0xe8>
      break;
 80089fa:	bf00      	nop
 80089fc:	e006      	b.n	8008a0c <DMA_CheckFifoParam+0xe8>
      break;
 80089fe:	bf00      	nop
 8008a00:	e004      	b.n	8008a0c <DMA_CheckFifoParam+0xe8>
      break;
 8008a02:	bf00      	nop
 8008a04:	e002      	b.n	8008a0c <DMA_CheckFifoParam+0xe8>
      break;   
 8008a06:	bf00      	nop
 8008a08:	e000      	b.n	8008a0c <DMA_CheckFifoParam+0xe8>
      break;
 8008a0a:	bf00      	nop
    }
  } 
  
  return status; 
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop

08008a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b089      	sub	sp, #36	; 0x24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a32:	2300      	movs	r3, #0
 8008a34:	61fb      	str	r3, [r7, #28]
 8008a36:	e159      	b.n	8008cec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008a38:	2201      	movs	r2, #1
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	f040 8148 	bne.w	8008ce6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d005      	beq.n	8008a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d130      	bne.n	8008ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	2203      	movs	r2, #3
 8008a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7e:	43db      	mvns	r3, r3
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	4013      	ands	r3, r2
 8008a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	68da      	ldr	r2, [r3, #12]
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	43db      	mvns	r3, r3
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	091b      	lsrs	r3, r3, #4
 8008aba:	f003 0201 	and.w	r2, r3, #1
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f003 0303 	and.w	r3, r3, #3
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d017      	beq.n	8008b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	2203      	movs	r2, #3
 8008ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aec:	43db      	mvns	r3, r3
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	4013      	ands	r3, r2
 8008af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	fa02 f303 	lsl.w	r3, r2, r3
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f003 0303 	and.w	r3, r3, #3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d123      	bne.n	8008b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	08da      	lsrs	r2, r3, #3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3208      	adds	r2, #8
 8008b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	220f      	movs	r2, #15
 8008b30:	fa02 f303 	lsl.w	r3, r2, r3
 8008b34:	43db      	mvns	r3, r3
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	691a      	ldr	r2, [r3, #16]
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	08da      	lsrs	r2, r3, #3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3208      	adds	r2, #8
 8008b5a:	69b9      	ldr	r1, [r7, #24]
 8008b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b70:	43db      	mvns	r3, r3
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	4013      	ands	r3, r2
 8008b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f003 0203 	and.w	r2, r3, #3
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 80a2 	beq.w	8008ce6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	4b57      	ldr	r3, [pc, #348]	; (8008d04 <HAL_GPIO_Init+0x2e8>)
 8008ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008baa:	4a56      	ldr	r2, [pc, #344]	; (8008d04 <HAL_GPIO_Init+0x2e8>)
 8008bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8008bb2:	4b54      	ldr	r3, [pc, #336]	; (8008d04 <HAL_GPIO_Init+0x2e8>)
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bbe:	4a52      	ldr	r2, [pc, #328]	; (8008d08 <HAL_GPIO_Init+0x2ec>)
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	089b      	lsrs	r3, r3, #2
 8008bc4:	3302      	adds	r3, #2
 8008bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	220f      	movs	r2, #15
 8008bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bda:	43db      	mvns	r3, r3
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	4013      	ands	r3, r2
 8008be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a49      	ldr	r2, [pc, #292]	; (8008d0c <HAL_GPIO_Init+0x2f0>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d019      	beq.n	8008c1e <HAL_GPIO_Init+0x202>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a48      	ldr	r2, [pc, #288]	; (8008d10 <HAL_GPIO_Init+0x2f4>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d013      	beq.n	8008c1a <HAL_GPIO_Init+0x1fe>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a47      	ldr	r2, [pc, #284]	; (8008d14 <HAL_GPIO_Init+0x2f8>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d00d      	beq.n	8008c16 <HAL_GPIO_Init+0x1fa>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a46      	ldr	r2, [pc, #280]	; (8008d18 <HAL_GPIO_Init+0x2fc>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d007      	beq.n	8008c12 <HAL_GPIO_Init+0x1f6>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a45      	ldr	r2, [pc, #276]	; (8008d1c <HAL_GPIO_Init+0x300>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d101      	bne.n	8008c0e <HAL_GPIO_Init+0x1f2>
 8008c0a:	2304      	movs	r3, #4
 8008c0c:	e008      	b.n	8008c20 <HAL_GPIO_Init+0x204>
 8008c0e:	2307      	movs	r3, #7
 8008c10:	e006      	b.n	8008c20 <HAL_GPIO_Init+0x204>
 8008c12:	2303      	movs	r3, #3
 8008c14:	e004      	b.n	8008c20 <HAL_GPIO_Init+0x204>
 8008c16:	2302      	movs	r3, #2
 8008c18:	e002      	b.n	8008c20 <HAL_GPIO_Init+0x204>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e000      	b.n	8008c20 <HAL_GPIO_Init+0x204>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	69fa      	ldr	r2, [r7, #28]
 8008c22:	f002 0203 	and.w	r2, r2, #3
 8008c26:	0092      	lsls	r2, r2, #2
 8008c28:	4093      	lsls	r3, r2
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c30:	4935      	ldr	r1, [pc, #212]	; (8008d08 <HAL_GPIO_Init+0x2ec>)
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	089b      	lsrs	r3, r3, #2
 8008c36:	3302      	adds	r3, #2
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c3e:	4b38      	ldr	r3, [pc, #224]	; (8008d20 <HAL_GPIO_Init+0x304>)
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	43db      	mvns	r3, r3
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008c62:	4a2f      	ldr	r2, [pc, #188]	; (8008d20 <HAL_GPIO_Init+0x304>)
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008c68:	4b2d      	ldr	r3, [pc, #180]	; (8008d20 <HAL_GPIO_Init+0x304>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	43db      	mvns	r3, r3
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	4013      	ands	r3, r2
 8008c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008c8c:	4a24      	ldr	r2, [pc, #144]	; (8008d20 <HAL_GPIO_Init+0x304>)
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008c92:	4b23      	ldr	r3, [pc, #140]	; (8008d20 <HAL_GPIO_Init+0x304>)
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	43db      	mvns	r3, r3
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008cb6:	4a1a      	ldr	r2, [pc, #104]	; (8008d20 <HAL_GPIO_Init+0x304>)
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008cbc:	4b18      	ldr	r3, [pc, #96]	; (8008d20 <HAL_GPIO_Init+0x304>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	43db      	mvns	r3, r3
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	4013      	ands	r3, r2
 8008cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ce0:	4a0f      	ldr	r2, [pc, #60]	; (8008d20 <HAL_GPIO_Init+0x304>)
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	61fb      	str	r3, [r7, #28]
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	2b0f      	cmp	r3, #15
 8008cf0:	f67f aea2 	bls.w	8008a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	3724      	adds	r7, #36	; 0x24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	40023800 	.word	0x40023800
 8008d08:	40013800 	.word	0x40013800
 8008d0c:	40020000 	.word	0x40020000
 8008d10:	40020400 	.word	0x40020400
 8008d14:	40020800 	.word	0x40020800
 8008d18:	40020c00 	.word	0x40020c00
 8008d1c:	40021000 	.word	0x40021000
 8008d20:	40013c00 	.word	0x40013c00

08008d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691a      	ldr	r2, [r3, #16]
 8008d34:	887b      	ldrh	r3, [r7, #2]
 8008d36:	4013      	ands	r3, r2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	73fb      	strb	r3, [r7, #15]
 8008d40:	e001      	b.n	8008d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	807b      	strh	r3, [r7, #2]
 8008d60:	4613      	mov	r3, r2
 8008d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d64:	787b      	ldrb	r3, [r7, #1]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d6a:	887a      	ldrh	r2, [r7, #2]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008d70:	e003      	b.n	8008d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008d72:	887b      	ldrh	r3, [r7, #2]
 8008d74:	041a      	lsls	r2, r3, #16
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	619a      	str	r2, [r3, #24]
}
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
	...

08008d88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008d92:	4b08      	ldr	r3, [pc, #32]	; (8008db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d94:	695a      	ldr	r2, [r3, #20]
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	4013      	ands	r3, r2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d006      	beq.n	8008dac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008d9e:	4a05      	ldr	r2, [pc, #20]	; (8008db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008da0:	88fb      	ldrh	r3, [r7, #6]
 8008da2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008da4:	88fb      	ldrh	r3, [r7, #6]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fb f982 	bl	80040b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	40013c00 	.word	0x40013c00

08008db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e12b      	b.n	8009022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d106      	bne.n	8008de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7f8 fcae 	bl	8001740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2224      	movs	r2, #36	; 0x24
 8008de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 0201 	bic.w	r2, r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008e1c:	f002 f924 	bl	800b068 <HAL_RCC_GetPCLK1Freq>
 8008e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	4a81      	ldr	r2, [pc, #516]	; (800902c <HAL_I2C_Init+0x274>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d807      	bhi.n	8008e3c <HAL_I2C_Init+0x84>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4a80      	ldr	r2, [pc, #512]	; (8009030 <HAL_I2C_Init+0x278>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	bf94      	ite	ls
 8008e34:	2301      	movls	r3, #1
 8008e36:	2300      	movhi	r3, #0
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	e006      	b.n	8008e4a <HAL_I2C_Init+0x92>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4a7d      	ldr	r2, [pc, #500]	; (8009034 <HAL_I2C_Init+0x27c>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	bf94      	ite	ls
 8008e44:	2301      	movls	r3, #1
 8008e46:	2300      	movhi	r3, #0
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e0e7      	b.n	8009022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4a78      	ldr	r2, [pc, #480]	; (8009038 <HAL_I2C_Init+0x280>)
 8008e56:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5a:	0c9b      	lsrs	r3, r3, #18
 8008e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	4a6a      	ldr	r2, [pc, #424]	; (800902c <HAL_I2C_Init+0x274>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d802      	bhi.n	8008e8c <HAL_I2C_Init+0xd4>
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	e009      	b.n	8008ea0 <HAL_I2C_Init+0xe8>
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008e92:	fb02 f303 	mul.w	r3, r2, r3
 8008e96:	4a69      	ldr	r2, [pc, #420]	; (800903c <HAL_I2C_Init+0x284>)
 8008e98:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9c:	099b      	lsrs	r3, r3, #6
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	6812      	ldr	r2, [r2, #0]
 8008ea4:	430b      	orrs	r3, r1
 8008ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	495c      	ldr	r1, [pc, #368]	; (800902c <HAL_I2C_Init+0x274>)
 8008ebc:	428b      	cmp	r3, r1
 8008ebe:	d819      	bhi.n	8008ef4 <HAL_I2C_Init+0x13c>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	1e59      	subs	r1, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ece:	1c59      	adds	r1, r3, #1
 8008ed0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008ed4:	400b      	ands	r3, r1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <HAL_I2C_Init+0x138>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	1e59      	subs	r1, r3, #1
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	005b      	lsls	r3, r3, #1
 8008ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ee8:	3301      	adds	r3, #1
 8008eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008eee:	e051      	b.n	8008f94 <HAL_I2C_Init+0x1dc>
 8008ef0:	2304      	movs	r3, #4
 8008ef2:	e04f      	b.n	8008f94 <HAL_I2C_Init+0x1dc>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d111      	bne.n	8008f20 <HAL_I2C_Init+0x168>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	1e58      	subs	r0, r3, #1
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6859      	ldr	r1, [r3, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	005b      	lsls	r3, r3, #1
 8008f08:	440b      	add	r3, r1
 8008f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f0e:	3301      	adds	r3, #1
 8008f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	bf0c      	ite	eq
 8008f18:	2301      	moveq	r3, #1
 8008f1a:	2300      	movne	r3, #0
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	e012      	b.n	8008f46 <HAL_I2C_Init+0x18e>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	1e58      	subs	r0, r3, #1
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6859      	ldr	r1, [r3, #4]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	440b      	add	r3, r1
 8008f2e:	0099      	lsls	r1, r3, #2
 8008f30:	440b      	add	r3, r1
 8008f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f36:	3301      	adds	r3, #1
 8008f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	bf0c      	ite	eq
 8008f40:	2301      	moveq	r3, #1
 8008f42:	2300      	movne	r3, #0
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <HAL_I2C_Init+0x196>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e022      	b.n	8008f94 <HAL_I2C_Init+0x1dc>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10e      	bne.n	8008f74 <HAL_I2C_Init+0x1bc>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	1e58      	subs	r0, r3, #1
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6859      	ldr	r1, [r3, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	440b      	add	r3, r1
 8008f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f68:	3301      	adds	r3, #1
 8008f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f72:	e00f      	b.n	8008f94 <HAL_I2C_Init+0x1dc>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	1e58      	subs	r0, r3, #1
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6859      	ldr	r1, [r3, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	440b      	add	r3, r1
 8008f82:	0099      	lsls	r1, r3, #2
 8008f84:	440b      	add	r3, r1
 8008f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	6809      	ldr	r1, [r1, #0]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69da      	ldr	r2, [r3, #28]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	6911      	ldr	r1, [r2, #16]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	68d2      	ldr	r2, [r2, #12]
 8008fce:	4311      	orrs	r1, r2
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6812      	ldr	r2, [r2, #0]
 8008fd4:	430b      	orrs	r3, r1
 8008fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695a      	ldr	r2, [r3, #20]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	431a      	orrs	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f042 0201 	orr.w	r2, r2, #1
 8009002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2220      	movs	r2, #32
 800900e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	000186a0 	.word	0x000186a0
 8009030:	001e847f 	.word	0x001e847f
 8009034:	003d08ff 	.word	0x003d08ff
 8009038:	431bde83 	.word	0x431bde83
 800903c:	10624dd3 	.word	0x10624dd3

08009040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af02      	add	r7, sp, #8
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	607a      	str	r2, [r7, #4]
 800904a:	461a      	mov	r2, r3
 800904c:	460b      	mov	r3, r1
 800904e:	817b      	strh	r3, [r7, #10]
 8009050:	4613      	mov	r3, r2
 8009052:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009054:	f7fe fbc8 	bl	80077e8 <HAL_GetTick>
 8009058:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b20      	cmp	r3, #32
 8009064:	f040 80e0 	bne.w	8009228 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	2319      	movs	r3, #25
 800906e:	2201      	movs	r2, #1
 8009070:	4970      	ldr	r1, [pc, #448]	; (8009234 <HAL_I2C_Master_Transmit+0x1f4>)
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f000 fc58 	bl	8009928 <I2C_WaitOnFlagUntilTimeout>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800907e:	2302      	movs	r3, #2
 8009080:	e0d3      	b.n	800922a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <HAL_I2C_Master_Transmit+0x50>
 800908c:	2302      	movs	r3, #2
 800908e:	e0cc      	b.n	800922a <HAL_I2C_Master_Transmit+0x1ea>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d007      	beq.n	80090b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 0201 	orr.w	r2, r2, #1
 80090b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2221      	movs	r2, #33	; 0x21
 80090ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2210      	movs	r2, #16
 80090d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	893a      	ldrh	r2, [r7, #8]
 80090e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	4a50      	ldr	r2, [pc, #320]	; (8009238 <HAL_I2C_Master_Transmit+0x1f8>)
 80090f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80090f8:	8979      	ldrh	r1, [r7, #10]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	6a3a      	ldr	r2, [r7, #32]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 fac2 	bl	8009688 <I2C_MasterRequestWrite>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e08d      	b.n	800922a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800910e:	2300      	movs	r3, #0
 8009110:	613b      	str	r3, [r7, #16]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	613b      	str	r3, [r7, #16]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	613b      	str	r3, [r7, #16]
 8009122:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009124:	e066      	b.n	80091f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	6a39      	ldr	r1, [r7, #32]
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fcd2 	bl	8009ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00d      	beq.n	8009152 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913a:	2b04      	cmp	r3, #4
 800913c:	d107      	bne.n	800914e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800914c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e06b      	b.n	800922a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009156:	781a      	ldrb	r2, [r3, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800916c:	b29b      	uxth	r3, r3
 800916e:	3b01      	subs	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b04      	cmp	r3, #4
 800918e:	d11b      	bne.n	80091c8 <HAL_I2C_Master_Transmit+0x188>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009194:	2b00      	cmp	r3, #0
 8009196:	d017      	beq.n	80091c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	781a      	ldrb	r2, [r3, #0]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	3b01      	subs	r3, #1
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091c0:	3b01      	subs	r3, #1
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	6a39      	ldr	r1, [r7, #32]
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 fcc2 	bl	8009b56 <I2C_WaitOnBTFFlagUntilTimeout>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00d      	beq.n	80091f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d107      	bne.n	80091f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e01a      	b.n	800922a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d194      	bne.n	8009126 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800920a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2220      	movs	r2, #32
 8009210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	e000      	b.n	800922a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009228:	2302      	movs	r3, #2
  }
}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	00100002 	.word	0x00100002
 8009238:	ffff0000 	.word	0xffff0000

0800923c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08c      	sub	sp, #48	; 0x30
 8009240:	af02      	add	r7, sp, #8
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	607a      	str	r2, [r7, #4]
 8009246:	461a      	mov	r2, r3
 8009248:	460b      	mov	r3, r1
 800924a:	817b      	strh	r3, [r7, #10]
 800924c:	4613      	mov	r3, r2
 800924e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009250:	f7fe faca 	bl	80077e8 <HAL_GetTick>
 8009254:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b20      	cmp	r3, #32
 8009260:	f040 820b 	bne.w	800967a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	2319      	movs	r3, #25
 800926a:	2201      	movs	r2, #1
 800926c:	497c      	ldr	r1, [pc, #496]	; (8009460 <HAL_I2C_Master_Receive+0x224>)
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f000 fb5a 	bl	8009928 <I2C_WaitOnFlagUntilTimeout>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800927a:	2302      	movs	r3, #2
 800927c:	e1fe      	b.n	800967c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <HAL_I2C_Master_Receive+0x50>
 8009288:	2302      	movs	r3, #2
 800928a:	e1f7      	b.n	800967c <HAL_I2C_Master_Receive+0x440>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d007      	beq.n	80092b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f042 0201 	orr.w	r2, r2, #1
 80092b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2222      	movs	r2, #34	; 0x22
 80092c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2210      	movs	r2, #16
 80092ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	893a      	ldrh	r2, [r7, #8]
 80092e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4a5c      	ldr	r2, [pc, #368]	; (8009464 <HAL_I2C_Master_Receive+0x228>)
 80092f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80092f4:	8979      	ldrh	r1, [r7, #10]
 80092f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 fa46 	bl	800978c <I2C_MasterRequestRead>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e1b8      	b.n	800967c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800930e:	2b00      	cmp	r3, #0
 8009310:	d113      	bne.n	800933a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009312:	2300      	movs	r3, #0
 8009314:	623b      	str	r3, [r7, #32]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	623b      	str	r3, [r7, #32]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	623b      	str	r3, [r7, #32]
 8009326:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	e18c      	b.n	8009654 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800933e:	2b01      	cmp	r3, #1
 8009340:	d11b      	bne.n	800937a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009352:	2300      	movs	r3, #0
 8009354:	61fb      	str	r3, [r7, #28]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	61fb      	str	r3, [r7, #28]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	61fb      	str	r3, [r7, #28]
 8009366:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	e16c      	b.n	8009654 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800937e:	2b02      	cmp	r3, #2
 8009380:	d11b      	bne.n	80093ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009390:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093a2:	2300      	movs	r3, #0
 80093a4:	61bb      	str	r3, [r7, #24]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	61bb      	str	r3, [r7, #24]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	61bb      	str	r3, [r7, #24]
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	e14c      	b.n	8009654 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	617b      	str	r3, [r7, #20]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	617b      	str	r3, [r7, #20]
 80093de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80093e0:	e138      	b.n	8009654 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	f200 80f1 	bhi.w	80095ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d123      	bne.n	800943c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 fbed 	bl	8009bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e139      	b.n	800967c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	691a      	ldr	r2, [r3, #16]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	b2d2      	uxtb	r2, r2
 8009414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	1c5a      	adds	r2, r3, #1
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009424:	3b01      	subs	r3, #1
 8009426:	b29a      	uxth	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009430:	b29b      	uxth	r3, r3
 8009432:	3b01      	subs	r3, #1
 8009434:	b29a      	uxth	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	855a      	strh	r2, [r3, #42]	; 0x2a
 800943a:	e10b      	b.n	8009654 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009440:	2b02      	cmp	r3, #2
 8009442:	d14e      	bne.n	80094e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944a:	2200      	movs	r2, #0
 800944c:	4906      	ldr	r1, [pc, #24]	; (8009468 <HAL_I2C_Master_Receive+0x22c>)
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 fa6a 	bl	8009928 <I2C_WaitOnFlagUntilTimeout>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d008      	beq.n	800946c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e10e      	b.n	800967c <HAL_I2C_Master_Receive+0x440>
 800945e:	bf00      	nop
 8009460:	00100002 	.word	0x00100002
 8009464:	ffff0000 	.word	0xffff0000
 8009468:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800947a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691a      	ldr	r2, [r3, #16]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009498:	3b01      	subs	r3, #1
 800949a:	b29a      	uxth	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	3b01      	subs	r3, #1
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	b2d2      	uxtb	r2, r2
 80094ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ca:	3b01      	subs	r3, #1
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	3b01      	subs	r3, #1
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80094e0:	e0b8      	b.n	8009654 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80094e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	2200      	movs	r2, #0
 80094ea:	4966      	ldr	r1, [pc, #408]	; (8009684 <HAL_I2C_Master_Receive+0x448>)
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 fa1b 	bl	8009928 <I2C_WaitOnFlagUntilTimeout>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e0bf      	b.n	800967c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800950a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	691a      	ldr	r2, [r3, #16]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	b2d2      	uxtb	r2, r2
 8009518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009528:	3b01      	subs	r3, #1
 800952a:	b29a      	uxth	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009534:	b29b      	uxth	r3, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	b29a      	uxth	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009544:	2200      	movs	r2, #0
 8009546:	494f      	ldr	r1, [pc, #316]	; (8009684 <HAL_I2C_Master_Receive+0x448>)
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f9ed 	bl	8009928 <I2C_WaitOnFlagUntilTimeout>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e091      	b.n	800967c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	691a      	ldr	r2, [r3, #16]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	b2d2      	uxtb	r2, r2
 8009574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957a:	1c5a      	adds	r2, r3, #1
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009584:	3b01      	subs	r3, #1
 8009586:	b29a      	uxth	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009590:	b29b      	uxth	r3, r3
 8009592:	3b01      	subs	r3, #1
 8009594:	b29a      	uxth	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	691a      	ldr	r2, [r3, #16]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	b2d2      	uxtb	r2, r2
 80095a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b6:	3b01      	subs	r3, #1
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	3b01      	subs	r3, #1
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095cc:	e042      	b.n	8009654 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fb00 	bl	8009bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e04c      	b.n	800967c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	691a      	ldr	r2, [r3, #16]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ec:	b2d2      	uxtb	r2, r2
 80095ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095fe:	3b01      	subs	r3, #1
 8009600:	b29a      	uxth	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800960a:	b29b      	uxth	r3, r3
 800960c:	3b01      	subs	r3, #1
 800960e:	b29a      	uxth	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	f003 0304 	and.w	r3, r3, #4
 800961e:	2b04      	cmp	r3, #4
 8009620:	d118      	bne.n	8009654 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	691a      	ldr	r2, [r3, #16]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800963e:	3b01      	subs	r3, #1
 8009640:	b29a      	uxth	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800964a:	b29b      	uxth	r3, r3
 800964c:	3b01      	subs	r3, #1
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009658:	2b00      	cmp	r3, #0
 800965a:	f47f aec2 	bne.w	80093e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2220      	movs	r2, #32
 8009662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	e000      	b.n	800967c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800967a:	2302      	movs	r3, #2
  }
}
 800967c:	4618      	mov	r0, r3
 800967e:	3728      	adds	r7, #40	; 0x28
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	00010004 	.word	0x00010004

08009688 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af02      	add	r7, sp, #8
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	607a      	str	r2, [r7, #4]
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	460b      	mov	r3, r1
 8009696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d006      	beq.n	80096b2 <I2C_MasterRequestWrite+0x2a>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d003      	beq.n	80096b2 <I2C_MasterRequestWrite+0x2a>
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096b0:	d108      	bne.n	80096c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096c0:	601a      	str	r2, [r3, #0]
 80096c2:	e00b      	b.n	80096dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c8:	2b12      	cmp	r3, #18
 80096ca:	d107      	bne.n	80096dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 f91d 	bl	8009928 <I2C_WaitOnFlagUntilTimeout>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00d      	beq.n	8009710 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009702:	d103      	bne.n	800970c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800970a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800970c:	2303      	movs	r3, #3
 800970e:	e035      	b.n	800977c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009718:	d108      	bne.n	800972c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800971a:	897b      	ldrh	r3, [r7, #10]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	461a      	mov	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009728:	611a      	str	r2, [r3, #16]
 800972a:	e01b      	b.n	8009764 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800972c:	897b      	ldrh	r3, [r7, #10]
 800972e:	11db      	asrs	r3, r3, #7
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 0306 	and.w	r3, r3, #6
 8009736:	b2db      	uxtb	r3, r3
 8009738:	f063 030f 	orn	r3, r3, #15
 800973c:	b2da      	uxtb	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	490e      	ldr	r1, [pc, #56]	; (8009784 <I2C_MasterRequestWrite+0xfc>)
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 f943 	bl	80099d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e010      	b.n	800977c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800975a:	897b      	ldrh	r3, [r7, #10]
 800975c:	b2da      	uxtb	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	4907      	ldr	r1, [pc, #28]	; (8009788 <I2C_MasterRequestWrite+0x100>)
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 f933 	bl	80099d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e000      	b.n	800977c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	00010008 	.word	0x00010008
 8009788:	00010002 	.word	0x00010002

0800978c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af02      	add	r7, sp, #8
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	607a      	str	r2, [r7, #4]
 8009796:	603b      	str	r3, [r7, #0]
 8009798:	460b      	mov	r3, r1
 800979a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b08      	cmp	r3, #8
 80097b6:	d006      	beq.n	80097c6 <I2C_MasterRequestRead+0x3a>
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d003      	beq.n	80097c6 <I2C_MasterRequestRead+0x3a>
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097c4:	d108      	bne.n	80097d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	e00b      	b.n	80097f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097dc:	2b11      	cmp	r3, #17
 80097de:	d107      	bne.n	80097f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 f893 	bl	8009928 <I2C_WaitOnFlagUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00d      	beq.n	8009824 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009816:	d103      	bne.n	8009820 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800981e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e079      	b.n	8009918 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800982c:	d108      	bne.n	8009840 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800982e:	897b      	ldrh	r3, [r7, #10]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	f043 0301 	orr.w	r3, r3, #1
 8009836:	b2da      	uxtb	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	611a      	str	r2, [r3, #16]
 800983e:	e05f      	b.n	8009900 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009840:	897b      	ldrh	r3, [r7, #10]
 8009842:	11db      	asrs	r3, r3, #7
 8009844:	b2db      	uxtb	r3, r3
 8009846:	f003 0306 	and.w	r3, r3, #6
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f063 030f 	orn	r3, r3, #15
 8009850:	b2da      	uxtb	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	4930      	ldr	r1, [pc, #192]	; (8009920 <I2C_MasterRequestRead+0x194>)
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 f8b9 	bl	80099d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e054      	b.n	8009918 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800986e:	897b      	ldrh	r3, [r7, #10]
 8009870:	b2da      	uxtb	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	4929      	ldr	r1, [pc, #164]	; (8009924 <I2C_MasterRequestRead+0x198>)
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 f8a9 	bl	80099d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e044      	b.n	8009918 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800988e:	2300      	movs	r3, #0
 8009890:	613b      	str	r3, [r7, #16]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	613b      	str	r3, [r7, #16]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	613b      	str	r3, [r7, #16]
 80098a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 f831 	bl	8009928 <I2C_WaitOnFlagUntilTimeout>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00d      	beq.n	80098e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098da:	d103      	bne.n	80098e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80098e4:	2303      	movs	r3, #3
 80098e6:	e017      	b.n	8009918 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80098e8:	897b      	ldrh	r3, [r7, #10]
 80098ea:	11db      	asrs	r3, r3, #7
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f003 0306 	and.w	r3, r3, #6
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	f063 030e 	orn	r3, r3, #14
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	4907      	ldr	r1, [pc, #28]	; (8009924 <I2C_MasterRequestRead+0x198>)
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 f865 	bl	80099d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e000      	b.n	8009918 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	00010008 	.word	0x00010008
 8009924:	00010002 	.word	0x00010002

08009928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	4613      	mov	r3, r2
 8009936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009938:	e025      	b.n	8009986 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009940:	d021      	beq.n	8009986 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009942:	f7fd ff51 	bl	80077e8 <HAL_GetTick>
 8009946:	4602      	mov	r2, r0
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d302      	bcc.n	8009958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d116      	bne.n	8009986 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2220      	movs	r2, #32
 8009962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	f043 0220 	orr.w	r2, r3, #32
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e023      	b.n	80099ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	0c1b      	lsrs	r3, r3, #16
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b01      	cmp	r3, #1
 800998e:	d10d      	bne.n	80099ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	43da      	mvns	r2, r3
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	4013      	ands	r3, r2
 800999c:	b29b      	uxth	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	bf0c      	ite	eq
 80099a2:	2301      	moveq	r3, #1
 80099a4:	2300      	movne	r3, #0
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	461a      	mov	r2, r3
 80099aa:	e00c      	b.n	80099c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	43da      	mvns	r2, r3
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	4013      	ands	r3, r2
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bf0c      	ite	eq
 80099be:	2301      	moveq	r3, #1
 80099c0:	2300      	movne	r3, #0
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	461a      	mov	r2, r3
 80099c6:	79fb      	ldrb	r3, [r7, #7]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d0b6      	beq.n	800993a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	60f8      	str	r0, [r7, #12]
 80099de:	60b9      	str	r1, [r7, #8]
 80099e0:	607a      	str	r2, [r7, #4]
 80099e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80099e4:	e051      	b.n	8009a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099f4:	d123      	bne.n	8009a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	f043 0204 	orr.w	r2, r3, #4
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e046      	b.n	8009acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a44:	d021      	beq.n	8009a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a46:	f7fd fecf 	bl	80077e8 <HAL_GetTick>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d302      	bcc.n	8009a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d116      	bne.n	8009a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a76:	f043 0220 	orr.w	r2, r3, #32
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e020      	b.n	8009acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	0c1b      	lsrs	r3, r3, #16
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d10c      	bne.n	8009aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	43da      	mvns	r2, r3
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	bf14      	ite	ne
 8009aa6:	2301      	movne	r3, #1
 8009aa8:	2300      	moveq	r3, #0
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	e00b      	b.n	8009ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	43da      	mvns	r2, r3
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	4013      	ands	r3, r2
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	bf14      	ite	ne
 8009ac0:	2301      	movne	r3, #1
 8009ac2:	2300      	moveq	r3, #0
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d18d      	bne.n	80099e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ae0:	e02d      	b.n	8009b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 f8ce 	bl	8009c84 <I2C_IsAcknowledgeFailed>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e02d      	b.n	8009b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af8:	d021      	beq.n	8009b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009afa:	f7fd fe75 	bl	80077e8 <HAL_GetTick>
 8009afe:	4602      	mov	r2, r0
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d302      	bcc.n	8009b10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d116      	bne.n	8009b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2a:	f043 0220 	orr.w	r2, r3, #32
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e007      	b.n	8009b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b48:	2b80      	cmp	r3, #128	; 0x80
 8009b4a:	d1ca      	bne.n	8009ae2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009b62:	e02d      	b.n	8009bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 f88d 	bl	8009c84 <I2C_IsAcknowledgeFailed>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e02d      	b.n	8009bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7a:	d021      	beq.n	8009bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b7c:	f7fd fe34 	bl	80077e8 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d302      	bcc.n	8009b92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d116      	bne.n	8009bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bac:	f043 0220 	orr.w	r2, r3, #32
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e007      	b.n	8009bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	f003 0304 	and.w	r3, r3, #4
 8009bca:	2b04      	cmp	r3, #4
 8009bcc:	d1ca      	bne.n	8009b64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009be4:	e042      	b.n	8009c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	f003 0310 	and.w	r3, r3, #16
 8009bf0:	2b10      	cmp	r3, #16
 8009bf2:	d119      	bne.n	8009c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f06f 0210 	mvn.w	r2, #16
 8009bfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2220      	movs	r2, #32
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e029      	b.n	8009c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c28:	f7fd fdde 	bl	80077e8 <HAL_GetTick>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d302      	bcc.n	8009c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d116      	bne.n	8009c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c58:	f043 0220 	orr.w	r2, r3, #32
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e007      	b.n	8009c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c76:	2b40      	cmp	r3, #64	; 0x40
 8009c78:	d1b5      	bne.n	8009be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c9a:	d11b      	bne.n	8009cd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ca4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc0:	f043 0204 	orr.w	r2, r3, #4
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e000      	b.n	8009cd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
	...

08009ce4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b088      	sub	sp, #32
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e128      	b.n	8009f48 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d109      	bne.n	8009d16 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a90      	ldr	r2, [pc, #576]	; (8009f50 <HAL_I2S_Init+0x26c>)
 8009d0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7f7 fd8b 	bl	800182c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2202      	movs	r2, #2
 8009d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	6812      	ldr	r2, [r2, #0]
 8009d28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009d2c:	f023 030f 	bic.w	r3, r3, #15
 8009d30:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2202      	movs	r2, #2
 8009d38:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d060      	beq.n	8009e04 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d102      	bne.n	8009d50 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8009d4a:	2310      	movs	r3, #16
 8009d4c:	617b      	str	r3, [r7, #20]
 8009d4e:	e001      	b.n	8009d54 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8009d50:	2320      	movs	r3, #32
 8009d52:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	2b20      	cmp	r3, #32
 8009d5a:	d802      	bhi.n	8009d62 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	005b      	lsls	r3, r3, #1
 8009d60:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8009d62:	2001      	movs	r0, #1
 8009d64:	f001 faca 	bl	800b2fc <HAL_RCCEx_GetPeriphCLKFreq>
 8009d68:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d72:	d125      	bne.n	8009dc0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d010      	beq.n	8009d9e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	461a      	mov	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	695b      	ldr	r3, [r3, #20]
 8009d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d98:	3305      	adds	r3, #5
 8009d9a:	613b      	str	r3, [r7, #16]
 8009d9c:	e01f      	b.n	8009dde <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	005b      	lsls	r3, r3, #1
 8009db0:	461a      	mov	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dba:	3305      	adds	r3, #5
 8009dbc:	613b      	str	r3, [r7, #16]
 8009dbe:	e00e      	b.n	8009dde <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	005b      	lsls	r3, r3, #1
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dda:	3305      	adds	r3, #5
 8009ddc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	4a5c      	ldr	r2, [pc, #368]	; (8009f54 <HAL_I2S_Init+0x270>)
 8009de2:	fba2 2303 	umull	r2, r3, r2, r3
 8009de6:	08db      	lsrs	r3, r3, #3
 8009de8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	085b      	lsrs	r3, r3, #1
 8009dfa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	021b      	lsls	r3, r3, #8
 8009e00:	61bb      	str	r3, [r7, #24]
 8009e02:	e003      	b.n	8009e0c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8009e04:	2302      	movs	r3, #2
 8009e06:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d902      	bls.n	8009e18 <HAL_I2S_Init+0x134>
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	2bff      	cmp	r3, #255	; 0xff
 8009e16:	d907      	bls.n	8009e28 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1c:	f043 0210 	orr.w	r2, r3, #16
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e08f      	b.n	8009f48 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	691a      	ldr	r2, [r3, #16]
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	ea42 0103 	orr.w	r1, r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69fa      	ldr	r2, [r7, #28]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009e46:	f023 030f 	bic.w	r3, r3, #15
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	6851      	ldr	r1, [r2, #4]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	6892      	ldr	r2, [r2, #8]
 8009e52:	4311      	orrs	r1, r2
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	68d2      	ldr	r2, [r2, #12]
 8009e58:	4311      	orrs	r1, r2
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	6992      	ldr	r2, [r2, #24]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	431a      	orrs	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e6a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d161      	bne.n	8009f38 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a38      	ldr	r2, [pc, #224]	; (8009f58 <HAL_I2S_Init+0x274>)
 8009e78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a37      	ldr	r2, [pc, #220]	; (8009f5c <HAL_I2S_Init+0x278>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d101      	bne.n	8009e88 <HAL_I2S_Init+0x1a4>
 8009e84:	4b36      	ldr	r3, [pc, #216]	; (8009f60 <HAL_I2S_Init+0x27c>)
 8009e86:	e001      	b.n	8009e8c <HAL_I2S_Init+0x1a8>
 8009e88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	6812      	ldr	r2, [r2, #0]
 8009e92:	4932      	ldr	r1, [pc, #200]	; (8009f5c <HAL_I2S_Init+0x278>)
 8009e94:	428a      	cmp	r2, r1
 8009e96:	d101      	bne.n	8009e9c <HAL_I2S_Init+0x1b8>
 8009e98:	4a31      	ldr	r2, [pc, #196]	; (8009f60 <HAL_I2S_Init+0x27c>)
 8009e9a:	e001      	b.n	8009ea0 <HAL_I2S_Init+0x1bc>
 8009e9c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8009ea0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009ea4:	f023 030f 	bic.w	r3, r3, #15
 8009ea8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a2b      	ldr	r2, [pc, #172]	; (8009f5c <HAL_I2S_Init+0x278>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d101      	bne.n	8009eb8 <HAL_I2S_Init+0x1d4>
 8009eb4:	4b2a      	ldr	r3, [pc, #168]	; (8009f60 <HAL_I2S_Init+0x27c>)
 8009eb6:	e001      	b.n	8009ebc <HAL_I2S_Init+0x1d8>
 8009eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a25      	ldr	r2, [pc, #148]	; (8009f5c <HAL_I2S_Init+0x278>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d101      	bne.n	8009ece <HAL_I2S_Init+0x1ea>
 8009eca:	4b25      	ldr	r3, [pc, #148]	; (8009f60 <HAL_I2S_Init+0x27c>)
 8009ecc:	e001      	b.n	8009ed2 <HAL_I2S_Init+0x1ee>
 8009ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009ed2:	69db      	ldr	r3, [r3, #28]
 8009ed4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ede:	d003      	beq.n	8009ee8 <HAL_I2S_Init+0x204>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d103      	bne.n	8009ef0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8009ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eec:	613b      	str	r3, [r7, #16]
 8009eee:	e001      	b.n	8009ef4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8009efe:	4313      	orrs	r3, r2
 8009f00:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8009f12:	4313      	orrs	r3, r2
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	897b      	ldrh	r3, [r7, #10]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009f20:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a0d      	ldr	r2, [pc, #52]	; (8009f5c <HAL_I2S_Init+0x278>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d101      	bne.n	8009f30 <HAL_I2S_Init+0x24c>
 8009f2c:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <HAL_I2S_Init+0x27c>)
 8009f2e:	e001      	b.n	8009f34 <HAL_I2S_Init+0x250>
 8009f30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009f34:	897a      	ldrh	r2, [r7, #10]
 8009f36:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3720      	adds	r7, #32
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	0800a241 	.word	0x0800a241
 8009f54:	cccccccd 	.word	0xcccccccd
 8009f58:	0800a355 	.word	0x0800a355
 8009f5c:	40003800 	.word	0x40003800
 8009f60:	40003400 	.word	0x40003400

08009f64 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <HAL_I2S_Transmit_DMA+0x1a>
 8009f78:	88fb      	ldrh	r3, [r7, #6]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e08e      	b.n	800a0a0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d101      	bne.n	8009f92 <HAL_I2S_Transmit_DMA+0x2e>
 8009f8e:	2302      	movs	r3, #2
 8009f90:	e086      	b.n	800a0a0 <HAL_I2S_Transmit_DMA+0x13c>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d005      	beq.n	8009fb2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8009fae:	2302      	movs	r3, #2
 8009fb0:	e076      	b.n	800a0a0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2203      	movs	r2, #3
 8009fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69db      	ldr	r3, [r3, #28]
 8009fcc:	f003 0307 	and.w	r3, r3, #7
 8009fd0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2b03      	cmp	r3, #3
 8009fd6:	d002      	beq.n	8009fde <HAL_I2S_Transmit_DMA+0x7a>
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	2b05      	cmp	r3, #5
 8009fdc:	d10a      	bne.n	8009ff4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8009fde:	88fb      	ldrh	r3, [r7, #6]
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8009fe8:	88fb      	ldrh	r3, [r7, #6]
 8009fea:	005b      	lsls	r3, r3, #1
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ff2:	e005      	b.n	800a000 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	88fa      	ldrh	r2, [r7, #6]
 8009ff8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	88fa      	ldrh	r2, [r7, #6]
 8009ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a004:	4a28      	ldr	r2, [pc, #160]	; (800a0a8 <HAL_I2S_Transmit_DMA+0x144>)
 800a006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00c:	4a27      	ldr	r2, [pc, #156]	; (800a0ac <HAL_I2S_Transmit_DMA+0x148>)
 800a00e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a014:	4a26      	ldr	r2, [pc, #152]	; (800a0b0 <HAL_I2S_Transmit_DMA+0x14c>)
 800a016:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800a020:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800a028:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a02e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800a030:	f7fe fa04 	bl	800843c <HAL_DMA_Start_IT>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00f      	beq.n	800a05a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a03e:	f043 0208 	orr.w	r2, r3, #8
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e022      	b.n	800a0a0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a064:	2b00      	cmp	r3, #0
 800a066:	d107      	bne.n	800a078 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	69da      	ldr	r2, [r3, #28]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a076:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d107      	bne.n	800a096 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f042 0202 	orr.w	r2, r2, #2
 800a094:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3718      	adds	r7, #24
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	0800a11f 	.word	0x0800a11f
 800a0ac:	0800a0dd 	.word	0x0800a0dd
 800a0b0:	0800a13b 	.word	0x0800a13b

0800a0b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10e      	bne.n	800a110 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0202 	bic.w	r2, r2, #2
 800a100:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7f9 f9e7 	bl	80034e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a116:	bf00      	nop
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f7f9 f9c9 	bl	80034c4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a132:	bf00      	nop
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a146:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f022 0203 	bic.w	r2, r2, #3
 800a156:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a170:	f043 0208 	orr.w	r2, r3, #8
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7ff ffa5 	bl	800a0c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a17e:	bf00      	nop
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	881a      	ldrh	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	1c9a      	adds	r2, r3, #2
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10e      	bne.n	800a1da <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a1ca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7f9 f985 	bl	80034e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a1da:	bf00      	nop
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b082      	sub	sp, #8
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68da      	ldr	r2, [r3, #12]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f4:	b292      	uxth	r2, r2
 800a1f6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fc:	1c9a      	adds	r2, r3, #2
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a206:	b29b      	uxth	r3, r3
 800a208:	3b01      	subs	r3, #1
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a214:	b29b      	uxth	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10e      	bne.n	800a238 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a228:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7ff ff3e 	bl	800a0b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a238:	bf00      	nop
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b04      	cmp	r3, #4
 800a25a:	d13a      	bne.n	800a2d2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	2b01      	cmp	r3, #1
 800a264:	d109      	bne.n	800a27a <I2S_IRQHandler+0x3a>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a270:	2b40      	cmp	r3, #64	; 0x40
 800a272:	d102      	bne.n	800a27a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7ff ffb4 	bl	800a1e2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a280:	2b40      	cmp	r3, #64	; 0x40
 800a282:	d126      	bne.n	800a2d2 <I2S_IRQHandler+0x92>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f003 0320 	and.w	r3, r3, #32
 800a28e:	2b20      	cmp	r3, #32
 800a290:	d11f      	bne.n	800a2d2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685a      	ldr	r2, [r3, #4]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a2a0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	613b      	str	r3, [r7, #16]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	613b      	str	r3, [r7, #16]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	613b      	str	r3, [r7, #16]
 800a2b6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c4:	f043 0202 	orr.w	r2, r3, #2
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff fefb 	bl	800a0c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d136      	bne.n	800a34c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d109      	bne.n	800a2fc <I2S_IRQHandler+0xbc>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f2:	2b80      	cmp	r3, #128	; 0x80
 800a2f4:	d102      	bne.n	800a2fc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7ff ff45 	bl	800a186 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f003 0308 	and.w	r3, r3, #8
 800a302:	2b08      	cmp	r3, #8
 800a304:	d122      	bne.n	800a34c <I2S_IRQHandler+0x10c>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	f003 0320 	and.w	r3, r3, #32
 800a310:	2b20      	cmp	r3, #32
 800a312:	d11b      	bne.n	800a34c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a322:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a324:	2300      	movs	r3, #0
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	60fb      	str	r3, [r7, #12]
 800a330:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a33e:	f043 0204 	orr.w	r2, r3, #4
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff febe 	bl	800a0c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a34c:	bf00      	nop
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a92      	ldr	r2, [pc, #584]	; (800a5b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d101      	bne.n	800a372 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800a36e:	4b92      	ldr	r3, [pc, #584]	; (800a5b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a370:	e001      	b.n	800a376 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800a372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a8b      	ldr	r2, [pc, #556]	; (800a5b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d101      	bne.n	800a390 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800a38c:	4b8a      	ldr	r3, [pc, #552]	; (800a5b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a38e:	e001      	b.n	800a394 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800a390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3a0:	d004      	beq.n	800a3ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f040 8099 	bne.w	800a4de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d107      	bne.n	800a3c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f925 	bl	800a610 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d107      	bne.n	800a3e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f9c8 	bl	800a770 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e6:	2b40      	cmp	r3, #64	; 0x40
 800a3e8:	d13a      	bne.n	800a460 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f003 0320 	and.w	r3, r3, #32
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d035      	beq.n	800a460 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a6e      	ldr	r2, [pc, #440]	; (800a5b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d101      	bne.n	800a402 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800a3fe:	4b6e      	ldr	r3, [pc, #440]	; (800a5b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a400:	e001      	b.n	800a406 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800a402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4969      	ldr	r1, [pc, #420]	; (800a5b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a40e:	428b      	cmp	r3, r1
 800a410:	d101      	bne.n	800a416 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800a412:	4b69      	ldr	r3, [pc, #420]	; (800a5b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a414:	e001      	b.n	800a41a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800a416:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a41a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a41e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a42e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a430:	2300      	movs	r3, #0
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a452:	f043 0202 	orr.w	r2, r3, #2
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f7ff fe34 	bl	800a0c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	f003 0308 	and.w	r3, r3, #8
 800a466:	2b08      	cmp	r3, #8
 800a468:	f040 80c3 	bne.w	800a5f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	f003 0320 	and.w	r3, r3, #32
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 80bd 	beq.w	800a5f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685a      	ldr	r2, [r3, #4]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a486:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a49      	ldr	r2, [pc, #292]	; (800a5b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d101      	bne.n	800a496 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800a492:	4b49      	ldr	r3, [pc, #292]	; (800a5b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a494:	e001      	b.n	800a49a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800a496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4944      	ldr	r1, [pc, #272]	; (800a5b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a4a2:	428b      	cmp	r3, r1
 800a4a4:	d101      	bne.n	800a4aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800a4a6:	4b44      	ldr	r3, [pc, #272]	; (800a5b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a4a8:	e001      	b.n	800a4ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800a4aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a4ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a4b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	60bb      	str	r3, [r7, #8]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	60bb      	str	r3, [r7, #8]
 800a4c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ce:	f043 0204 	orr.w	r2, r3, #4
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff fdf6 	bl	800a0c8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a4dc:	e089      	b.n	800a5f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d107      	bne.n	800a4f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f8be 	bl	800a674 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	f003 0301 	and.w	r3, r3, #1
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d107      	bne.n	800a512 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f8fd 	bl	800a70c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a518:	2b40      	cmp	r3, #64	; 0x40
 800a51a:	d12f      	bne.n	800a57c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	f003 0320 	and.w	r3, r3, #32
 800a522:	2b00      	cmp	r3, #0
 800a524:	d02a      	beq.n	800a57c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a534:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a1e      	ldr	r2, [pc, #120]	; (800a5b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d101      	bne.n	800a544 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800a540:	4b1d      	ldr	r3, [pc, #116]	; (800a5b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a542:	e001      	b.n	800a548 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800a544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a548:	685a      	ldr	r2, [r3, #4]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4919      	ldr	r1, [pc, #100]	; (800a5b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a550:	428b      	cmp	r3, r1
 800a552:	d101      	bne.n	800a558 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800a554:	4b18      	ldr	r3, [pc, #96]	; (800a5b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a556:	e001      	b.n	800a55c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800a558:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a55c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a560:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a56e:	f043 0202 	orr.w	r2, r3, #2
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff fda6 	bl	800a0c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	f003 0308 	and.w	r3, r3, #8
 800a582:	2b08      	cmp	r3, #8
 800a584:	d136      	bne.n	800a5f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	f003 0320 	and.w	r3, r3, #32
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d031      	beq.n	800a5f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a07      	ldr	r2, [pc, #28]	; (800a5b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d101      	bne.n	800a59e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800a59a:	4b07      	ldr	r3, [pc, #28]	; (800a5b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a59c:	e001      	b.n	800a5a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800a59e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4902      	ldr	r1, [pc, #8]	; (800a5b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a5aa:	428b      	cmp	r3, r1
 800a5ac:	d106      	bne.n	800a5bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800a5ae:	4b02      	ldr	r3, [pc, #8]	; (800a5b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a5b0:	e006      	b.n	800a5c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800a5b2:	bf00      	nop
 800a5b4:	40003800 	.word	0x40003800
 800a5b8:	40003400 	.word	0x40003400
 800a5bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a5c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a5c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a5d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e2:	f043 0204 	orr.w	r2, r3, #4
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7ff fd6c 	bl	800a0c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a5f0:	e000      	b.n	800a5f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a5f2:	bf00      	nop
}
 800a5f4:	bf00      	nop
 800a5f6:	3720      	adds	r7, #32
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61c:	1c99      	adds	r1, r3, #2
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	6251      	str	r1, [r2, #36]	; 0x24
 800a622:	881a      	ldrh	r2, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a62e:	b29b      	uxth	r3, r3
 800a630:	3b01      	subs	r3, #1
 800a632:	b29a      	uxth	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d113      	bne.n	800a66a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a650:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a656:	b29b      	uxth	r3, r3
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d106      	bne.n	800a66a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff ffc9 	bl	800a5fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a66a:	bf00      	nop
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	1c99      	adds	r1, r3, #2
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	6251      	str	r1, [r2, #36]	; 0x24
 800a686:	8819      	ldrh	r1, [r3, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a1d      	ldr	r2, [pc, #116]	; (800a704 <I2SEx_TxISR_I2SExt+0x90>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d101      	bne.n	800a696 <I2SEx_TxISR_I2SExt+0x22>
 800a692:	4b1d      	ldr	r3, [pc, #116]	; (800a708 <I2SEx_TxISR_I2SExt+0x94>)
 800a694:	e001      	b.n	800a69a <I2SEx_TxISR_I2SExt+0x26>
 800a696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a69a:	460a      	mov	r2, r1
 800a69c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d121      	bne.n	800a6fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a12      	ldr	r2, [pc, #72]	; (800a704 <I2SEx_TxISR_I2SExt+0x90>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d101      	bne.n	800a6c4 <I2SEx_TxISR_I2SExt+0x50>
 800a6c0:	4b11      	ldr	r3, [pc, #68]	; (800a708 <I2SEx_TxISR_I2SExt+0x94>)
 800a6c2:	e001      	b.n	800a6c8 <I2SEx_TxISR_I2SExt+0x54>
 800a6c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a6c8:	685a      	ldr	r2, [r3, #4]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	490d      	ldr	r1, [pc, #52]	; (800a704 <I2SEx_TxISR_I2SExt+0x90>)
 800a6d0:	428b      	cmp	r3, r1
 800a6d2:	d101      	bne.n	800a6d8 <I2SEx_TxISR_I2SExt+0x64>
 800a6d4:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <I2SEx_TxISR_I2SExt+0x94>)
 800a6d6:	e001      	b.n	800a6dc <I2SEx_TxISR_I2SExt+0x68>
 800a6d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a6dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a6e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d106      	bne.n	800a6fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff ff81 	bl	800a5fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a6fa:	bf00      	nop
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	40003800 	.word	0x40003800
 800a708:	40003400 	.word	0x40003400

0800a70c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68d8      	ldr	r0, [r3, #12]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71e:	1c99      	adds	r1, r3, #2
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	62d1      	str	r1, [r2, #44]	; 0x2c
 800a724:	b282      	uxth	r2, r0
 800a726:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	3b01      	subs	r3, #1
 800a730:	b29a      	uxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d113      	bne.n	800a768 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a74e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a754:	b29b      	uxth	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d106      	bne.n	800a768 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7ff ff4a 	bl	800a5fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a768:	bf00      	nop
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a20      	ldr	r2, [pc, #128]	; (800a800 <I2SEx_RxISR_I2SExt+0x90>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d101      	bne.n	800a786 <I2SEx_RxISR_I2SExt+0x16>
 800a782:	4b20      	ldr	r3, [pc, #128]	; (800a804 <I2SEx_RxISR_I2SExt+0x94>)
 800a784:	e001      	b.n	800a78a <I2SEx_RxISR_I2SExt+0x1a>
 800a786:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a78a:	68d8      	ldr	r0, [r3, #12]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a790:	1c99      	adds	r1, r3, #2
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	62d1      	str	r1, [r2, #44]	; 0x2c
 800a796:	b282      	uxth	r2, r0
 800a798:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d121      	bne.n	800a7f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a12      	ldr	r2, [pc, #72]	; (800a800 <I2SEx_RxISR_I2SExt+0x90>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d101      	bne.n	800a7c0 <I2SEx_RxISR_I2SExt+0x50>
 800a7bc:	4b11      	ldr	r3, [pc, #68]	; (800a804 <I2SEx_RxISR_I2SExt+0x94>)
 800a7be:	e001      	b.n	800a7c4 <I2SEx_RxISR_I2SExt+0x54>
 800a7c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	490d      	ldr	r1, [pc, #52]	; (800a800 <I2SEx_RxISR_I2SExt+0x90>)
 800a7cc:	428b      	cmp	r3, r1
 800a7ce:	d101      	bne.n	800a7d4 <I2SEx_RxISR_I2SExt+0x64>
 800a7d0:	4b0c      	ldr	r3, [pc, #48]	; (800a804 <I2SEx_RxISR_I2SExt+0x94>)
 800a7d2:	e001      	b.n	800a7d8 <I2SEx_RxISR_I2SExt+0x68>
 800a7d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a7d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a7dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff ff03 	bl	800a5fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a7f6:	bf00      	nop
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	40003800 	.word	0x40003800
 800a804:	40003400 	.word	0x40003400

0800a808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e267      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d075      	beq.n	800a912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a826:	4b88      	ldr	r3, [pc, #544]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f003 030c 	and.w	r3, r3, #12
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d00c      	beq.n	800a84c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a832:	4b85      	ldr	r3, [pc, #532]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a83a:	2b08      	cmp	r3, #8
 800a83c:	d112      	bne.n	800a864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a83e:	4b82      	ldr	r3, [pc, #520]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a84a:	d10b      	bne.n	800a864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a84c:	4b7e      	ldr	r3, [pc, #504]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d05b      	beq.n	800a910 <HAL_RCC_OscConfig+0x108>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d157      	bne.n	800a910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e242      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a86c:	d106      	bne.n	800a87c <HAL_RCC_OscConfig+0x74>
 800a86e:	4b76      	ldr	r3, [pc, #472]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a75      	ldr	r2, [pc, #468]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	e01d      	b.n	800a8b8 <HAL_RCC_OscConfig+0xb0>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a884:	d10c      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x98>
 800a886:	4b70      	ldr	r3, [pc, #448]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a6f      	ldr	r2, [pc, #444]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a88c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a890:	6013      	str	r3, [r2, #0]
 800a892:	4b6d      	ldr	r3, [pc, #436]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a6c      	ldr	r2, [pc, #432]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	e00b      	b.n	800a8b8 <HAL_RCC_OscConfig+0xb0>
 800a8a0:	4b69      	ldr	r3, [pc, #420]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a68      	ldr	r2, [pc, #416]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a8a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8aa:	6013      	str	r3, [r2, #0]
 800a8ac:	4b66      	ldr	r3, [pc, #408]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a65      	ldr	r2, [pc, #404]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a8b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d013      	beq.n	800a8e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8c0:	f7fc ff92 	bl	80077e8 <HAL_GetTick>
 800a8c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8c6:	e008      	b.n	800a8da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8c8:	f7fc ff8e 	bl	80077e8 <HAL_GetTick>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	2b64      	cmp	r3, #100	; 0x64
 800a8d4:	d901      	bls.n	800a8da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e207      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8da:	4b5b      	ldr	r3, [pc, #364]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0f0      	beq.n	800a8c8 <HAL_RCC_OscConfig+0xc0>
 800a8e6:	e014      	b.n	800a912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8e8:	f7fc ff7e 	bl	80077e8 <HAL_GetTick>
 800a8ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8ee:	e008      	b.n	800a902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8f0:	f7fc ff7a 	bl	80077e8 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	2b64      	cmp	r3, #100	; 0x64
 800a8fc:	d901      	bls.n	800a902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e1f3      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a902:	4b51      	ldr	r3, [pc, #324]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d1f0      	bne.n	800a8f0 <HAL_RCC_OscConfig+0xe8>
 800a90e:	e000      	b.n	800a912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d063      	beq.n	800a9e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a91e:	4b4a      	ldr	r3, [pc, #296]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	f003 030c 	and.w	r3, r3, #12
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00b      	beq.n	800a942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a92a:	4b47      	ldr	r3, [pc, #284]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a932:	2b08      	cmp	r3, #8
 800a934:	d11c      	bne.n	800a970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a936:	4b44      	ldr	r3, [pc, #272]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d116      	bne.n	800a970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a942:	4b41      	ldr	r3, [pc, #260]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0302 	and.w	r3, r3, #2
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d005      	beq.n	800a95a <HAL_RCC_OscConfig+0x152>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d001      	beq.n	800a95a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e1c7      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a95a:	4b3b      	ldr	r3, [pc, #236]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	4937      	ldr	r1, [pc, #220]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a96a:	4313      	orrs	r3, r2
 800a96c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a96e:	e03a      	b.n	800a9e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d020      	beq.n	800a9ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a978:	4b34      	ldr	r3, [pc, #208]	; (800aa4c <HAL_RCC_OscConfig+0x244>)
 800a97a:	2201      	movs	r2, #1
 800a97c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a97e:	f7fc ff33 	bl	80077e8 <HAL_GetTick>
 800a982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a984:	e008      	b.n	800a998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a986:	f7fc ff2f 	bl	80077e8 <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	2b02      	cmp	r3, #2
 800a992:	d901      	bls.n	800a998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e1a8      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a998:	4b2b      	ldr	r3, [pc, #172]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 0302 	and.w	r3, r3, #2
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0f0      	beq.n	800a986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9a4:	4b28      	ldr	r3, [pc, #160]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	4925      	ldr	r1, [pc, #148]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	600b      	str	r3, [r1, #0]
 800a9b8:	e015      	b.n	800a9e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9ba:	4b24      	ldr	r3, [pc, #144]	; (800aa4c <HAL_RCC_OscConfig+0x244>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c0:	f7fc ff12 	bl	80077e8 <HAL_GetTick>
 800a9c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9c6:	e008      	b.n	800a9da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9c8:	f7fc ff0e 	bl	80077e8 <HAL_GetTick>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d901      	bls.n	800a9da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e187      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9da:	4b1b      	ldr	r3, [pc, #108]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 0302 	and.w	r3, r3, #2
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f0      	bne.n	800a9c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0308 	and.w	r3, r3, #8
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d036      	beq.n	800aa60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d016      	beq.n	800aa28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9fa:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <HAL_RCC_OscConfig+0x248>)
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa00:	f7fc fef2 	bl	80077e8 <HAL_GetTick>
 800aa04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa06:	e008      	b.n	800aa1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa08:	f7fc feee 	bl	80077e8 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d901      	bls.n	800aa1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e167      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa1a:	4b0b      	ldr	r3, [pc, #44]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800aa1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa1e:	f003 0302 	and.w	r3, r3, #2
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d0f0      	beq.n	800aa08 <HAL_RCC_OscConfig+0x200>
 800aa26:	e01b      	b.n	800aa60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa28:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <HAL_RCC_OscConfig+0x248>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa2e:	f7fc fedb 	bl	80077e8 <HAL_GetTick>
 800aa32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa34:	e00e      	b.n	800aa54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa36:	f7fc fed7 	bl	80077e8 <HAL_GetTick>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d907      	bls.n	800aa54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e150      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
 800aa48:	40023800 	.word	0x40023800
 800aa4c:	42470000 	.word	0x42470000
 800aa50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa54:	4b88      	ldr	r3, [pc, #544]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aa56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1ea      	bne.n	800aa36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 8097 	beq.w	800ab9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa72:	4b81      	ldr	r3, [pc, #516]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10f      	bne.n	800aa9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60bb      	str	r3, [r7, #8]
 800aa82:	4b7d      	ldr	r3, [pc, #500]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aa84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa86:	4a7c      	ldr	r2, [pc, #496]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aa88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa8c:	6413      	str	r3, [r2, #64]	; 0x40
 800aa8e:	4b7a      	ldr	r3, [pc, #488]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa96:	60bb      	str	r3, [r7, #8]
 800aa98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa9e:	4b77      	ldr	r3, [pc, #476]	; (800ac7c <HAL_RCC_OscConfig+0x474>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d118      	bne.n	800aadc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aaaa:	4b74      	ldr	r3, [pc, #464]	; (800ac7c <HAL_RCC_OscConfig+0x474>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a73      	ldr	r2, [pc, #460]	; (800ac7c <HAL_RCC_OscConfig+0x474>)
 800aab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aab6:	f7fc fe97 	bl	80077e8 <HAL_GetTick>
 800aaba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aabc:	e008      	b.n	800aad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aabe:	f7fc fe93 	bl	80077e8 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d901      	bls.n	800aad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e10c      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aad0:	4b6a      	ldr	r3, [pc, #424]	; (800ac7c <HAL_RCC_OscConfig+0x474>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0f0      	beq.n	800aabe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d106      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x2ea>
 800aae4:	4b64      	ldr	r3, [pc, #400]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae8:	4a63      	ldr	r2, [pc, #396]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aaea:	f043 0301 	orr.w	r3, r3, #1
 800aaee:	6713      	str	r3, [r2, #112]	; 0x70
 800aaf0:	e01c      	b.n	800ab2c <HAL_RCC_OscConfig+0x324>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	2b05      	cmp	r3, #5
 800aaf8:	d10c      	bne.n	800ab14 <HAL_RCC_OscConfig+0x30c>
 800aafa:	4b5f      	ldr	r3, [pc, #380]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafe:	4a5e      	ldr	r2, [pc, #376]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab00:	f043 0304 	orr.w	r3, r3, #4
 800ab04:	6713      	str	r3, [r2, #112]	; 0x70
 800ab06:	4b5c      	ldr	r3, [pc, #368]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0a:	4a5b      	ldr	r2, [pc, #364]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab0c:	f043 0301 	orr.w	r3, r3, #1
 800ab10:	6713      	str	r3, [r2, #112]	; 0x70
 800ab12:	e00b      	b.n	800ab2c <HAL_RCC_OscConfig+0x324>
 800ab14:	4b58      	ldr	r3, [pc, #352]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab18:	4a57      	ldr	r2, [pc, #348]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	6713      	str	r3, [r2, #112]	; 0x70
 800ab20:	4b55      	ldr	r3, [pc, #340]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab24:	4a54      	ldr	r2, [pc, #336]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab26:	f023 0304 	bic.w	r3, r3, #4
 800ab2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d015      	beq.n	800ab60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab34:	f7fc fe58 	bl	80077e8 <HAL_GetTick>
 800ab38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab3a:	e00a      	b.n	800ab52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab3c:	f7fc fe54 	bl	80077e8 <HAL_GetTick>
 800ab40:	4602      	mov	r2, r0
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d901      	bls.n	800ab52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	e0cb      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab52:	4b49      	ldr	r3, [pc, #292]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab56:	f003 0302 	and.w	r3, r3, #2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0ee      	beq.n	800ab3c <HAL_RCC_OscConfig+0x334>
 800ab5e:	e014      	b.n	800ab8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab60:	f7fc fe42 	bl	80077e8 <HAL_GetTick>
 800ab64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab66:	e00a      	b.n	800ab7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab68:	f7fc fe3e 	bl	80077e8 <HAL_GetTick>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d901      	bls.n	800ab7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	e0b5      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab7e:	4b3e      	ldr	r3, [pc, #248]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab82:	f003 0302 	and.w	r3, r3, #2
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1ee      	bne.n	800ab68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d105      	bne.n	800ab9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab90:	4b39      	ldr	r3, [pc, #228]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab94:	4a38      	ldr	r2, [pc, #224]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 80a1 	beq.w	800ace8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aba6:	4b34      	ldr	r3, [pc, #208]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	f003 030c 	and.w	r3, r3, #12
 800abae:	2b08      	cmp	r3, #8
 800abb0:	d05c      	beq.n	800ac6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d141      	bne.n	800ac3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abba:	4b31      	ldr	r3, [pc, #196]	; (800ac80 <HAL_RCC_OscConfig+0x478>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abc0:	f7fc fe12 	bl	80077e8 <HAL_GetTick>
 800abc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abc6:	e008      	b.n	800abda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abc8:	f7fc fe0e 	bl	80077e8 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d901      	bls.n	800abda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e087      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abda:	4b27      	ldr	r3, [pc, #156]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1f0      	bne.n	800abc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	69da      	ldr	r2, [r3, #28]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	431a      	orrs	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf4:	019b      	lsls	r3, r3, #6
 800abf6:	431a      	orrs	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfc:	085b      	lsrs	r3, r3, #1
 800abfe:	3b01      	subs	r3, #1
 800ac00:	041b      	lsls	r3, r3, #16
 800ac02:	431a      	orrs	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac08:	061b      	lsls	r3, r3, #24
 800ac0a:	491b      	ldr	r1, [pc, #108]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac10:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <HAL_RCC_OscConfig+0x478>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac16:	f7fc fde7 	bl	80077e8 <HAL_GetTick>
 800ac1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac1c:	e008      	b.n	800ac30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac1e:	f7fc fde3 	bl	80077e8 <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d901      	bls.n	800ac30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e05c      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac30:	4b11      	ldr	r3, [pc, #68]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d0f0      	beq.n	800ac1e <HAL_RCC_OscConfig+0x416>
 800ac3c:	e054      	b.n	800ace8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac3e:	4b10      	ldr	r3, [pc, #64]	; (800ac80 <HAL_RCC_OscConfig+0x478>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac44:	f7fc fdd0 	bl	80077e8 <HAL_GetTick>
 800ac48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac4a:	e008      	b.n	800ac5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac4c:	f7fc fdcc 	bl	80077e8 <HAL_GetTick>
 800ac50:	4602      	mov	r2, r0
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d901      	bls.n	800ac5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e045      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac5e:	4b06      	ldr	r3, [pc, #24]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1f0      	bne.n	800ac4c <HAL_RCC_OscConfig+0x444>
 800ac6a:	e03d      	b.n	800ace8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d107      	bne.n	800ac84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e038      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
 800ac78:	40023800 	.word	0x40023800
 800ac7c:	40007000 	.word	0x40007000
 800ac80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ac84:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <HAL_RCC_OscConfig+0x4ec>)
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d028      	beq.n	800ace4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d121      	bne.n	800ace4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acaa:	429a      	cmp	r2, r3
 800acac:	d11a      	bne.n	800ace4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800acb4:	4013      	ands	r3, r2
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800acba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d111      	bne.n	800ace4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acca:	085b      	lsrs	r3, r3, #1
 800accc:	3b01      	subs	r3, #1
 800acce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d107      	bne.n	800ace4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d001      	beq.n	800ace8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e000      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	40023800 	.word	0x40023800

0800acf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e0cc      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad0c:	4b68      	ldr	r3, [pc, #416]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0307 	and.w	r3, r3, #7
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d90c      	bls.n	800ad34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad1a:	4b65      	ldr	r3, [pc, #404]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	b2d2      	uxtb	r2, r2
 800ad20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad22:	4b63      	ldr	r3, [pc, #396]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d001      	beq.n	800ad34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e0b8      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0302 	and.w	r3, r3, #2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d020      	beq.n	800ad82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0304 	and.w	r3, r3, #4
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d005      	beq.n	800ad58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad4c:	4b59      	ldr	r3, [pc, #356]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	4a58      	ldr	r2, [pc, #352]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0308 	and.w	r3, r3, #8
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d005      	beq.n	800ad70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad64:	4b53      	ldr	r3, [pc, #332]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	4a52      	ldr	r2, [pc, #328]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ad6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad70:	4b50      	ldr	r3, [pc, #320]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	494d      	ldr	r1, [pc, #308]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d044      	beq.n	800ae18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d107      	bne.n	800ada6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad96:	4b47      	ldr	r3, [pc, #284]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d119      	bne.n	800add6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e07f      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d003      	beq.n	800adb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	d107      	bne.n	800adc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adb6:	4b3f      	ldr	r3, [pc, #252]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d109      	bne.n	800add6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e06f      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adc6:	4b3b      	ldr	r3, [pc, #236]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e067      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800add6:	4b37      	ldr	r3, [pc, #220]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f023 0203 	bic.w	r2, r3, #3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	4934      	ldr	r1, [pc, #208]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ade8:	f7fc fcfe 	bl	80077e8 <HAL_GetTick>
 800adec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adee:	e00a      	b.n	800ae06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adf0:	f7fc fcfa 	bl	80077e8 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d901      	bls.n	800ae06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e04f      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae06:	4b2b      	ldr	r3, [pc, #172]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f003 020c 	and.w	r2, r3, #12
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d1eb      	bne.n	800adf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae18:	4b25      	ldr	r3, [pc, #148]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0307 	and.w	r3, r3, #7
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d20c      	bcs.n	800ae40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae26:	4b22      	ldr	r3, [pc, #136]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	b2d2      	uxtb	r2, r2
 800ae2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae2e:	4b20      	ldr	r3, [pc, #128]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d001      	beq.n	800ae40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e032      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 0304 	and.w	r3, r3, #4
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d008      	beq.n	800ae5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae4c:	4b19      	ldr	r3, [pc, #100]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	4916      	ldr	r1, [pc, #88]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0308 	and.w	r3, r3, #8
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d009      	beq.n	800ae7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae6a:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	490e      	ldr	r1, [pc, #56]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ae7e:	f000 f821 	bl	800aec4 <HAL_RCC_GetSysClockFreq>
 800ae82:	4602      	mov	r2, r0
 800ae84:	4b0b      	ldr	r3, [pc, #44]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	091b      	lsrs	r3, r3, #4
 800ae8a:	f003 030f 	and.w	r3, r3, #15
 800ae8e:	490a      	ldr	r1, [pc, #40]	; (800aeb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae90:	5ccb      	ldrb	r3, [r1, r3]
 800ae92:	fa22 f303 	lsr.w	r3, r2, r3
 800ae96:	4a09      	ldr	r2, [pc, #36]	; (800aebc <HAL_RCC_ClockConfig+0x1c4>)
 800ae98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ae9a:	4b09      	ldr	r3, [pc, #36]	; (800aec0 <HAL_RCC_ClockConfig+0x1c8>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f7 f8e6 	bl	8002070 <HAL_InitTick>

  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	40023c00 	.word	0x40023c00
 800aeb4:	40023800 	.word	0x40023800
 800aeb8:	0801aea8 	.word	0x0801aea8
 800aebc:	20000000 	.word	0x20000000
 800aec0:	200008a4 	.word	0x200008a4

0800aec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aec8:	b090      	sub	sp, #64	; 0x40
 800aeca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800aecc:	2300      	movs	r3, #0
 800aece:	637b      	str	r3, [r7, #52]	; 0x34
 800aed0:	2300      	movs	r3, #0
 800aed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aed4:	2300      	movs	r3, #0
 800aed6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800aed8:	2300      	movs	r3, #0
 800aeda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aedc:	4b59      	ldr	r3, [pc, #356]	; (800b044 <HAL_RCC_GetSysClockFreq+0x180>)
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f003 030c 	and.w	r3, r3, #12
 800aee4:	2b08      	cmp	r3, #8
 800aee6:	d00d      	beq.n	800af04 <HAL_RCC_GetSysClockFreq+0x40>
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	f200 80a1 	bhi.w	800b030 <HAL_RCC_GetSysClockFreq+0x16c>
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <HAL_RCC_GetSysClockFreq+0x34>
 800aef2:	2b04      	cmp	r3, #4
 800aef4:	d003      	beq.n	800aefe <HAL_RCC_GetSysClockFreq+0x3a>
 800aef6:	e09b      	b.n	800b030 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aef8:	4b53      	ldr	r3, [pc, #332]	; (800b048 <HAL_RCC_GetSysClockFreq+0x184>)
 800aefa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800aefc:	e09b      	b.n	800b036 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aefe:	4b53      	ldr	r3, [pc, #332]	; (800b04c <HAL_RCC_GetSysClockFreq+0x188>)
 800af00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800af02:	e098      	b.n	800b036 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af04:	4b4f      	ldr	r3, [pc, #316]	; (800b044 <HAL_RCC_GetSysClockFreq+0x180>)
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af0e:	4b4d      	ldr	r3, [pc, #308]	; (800b044 <HAL_RCC_GetSysClockFreq+0x180>)
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af16:	2b00      	cmp	r3, #0
 800af18:	d028      	beq.n	800af6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af1a:	4b4a      	ldr	r3, [pc, #296]	; (800b044 <HAL_RCC_GetSysClockFreq+0x180>)
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	099b      	lsrs	r3, r3, #6
 800af20:	2200      	movs	r2, #0
 800af22:	623b      	str	r3, [r7, #32]
 800af24:	627a      	str	r2, [r7, #36]	; 0x24
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800af2c:	2100      	movs	r1, #0
 800af2e:	4b47      	ldr	r3, [pc, #284]	; (800b04c <HAL_RCC_GetSysClockFreq+0x188>)
 800af30:	fb03 f201 	mul.w	r2, r3, r1
 800af34:	2300      	movs	r3, #0
 800af36:	fb00 f303 	mul.w	r3, r0, r3
 800af3a:	4413      	add	r3, r2
 800af3c:	4a43      	ldr	r2, [pc, #268]	; (800b04c <HAL_RCC_GetSysClockFreq+0x188>)
 800af3e:	fba0 1202 	umull	r1, r2, r0, r2
 800af42:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af44:	460a      	mov	r2, r1
 800af46:	62ba      	str	r2, [r7, #40]	; 0x28
 800af48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af4a:	4413      	add	r3, r2
 800af4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af50:	2200      	movs	r2, #0
 800af52:	61bb      	str	r3, [r7, #24]
 800af54:	61fa      	str	r2, [r7, #28]
 800af56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800af5e:	f7f5 fe4b 	bl	8000bf8 <__aeabi_uldivmod>
 800af62:	4602      	mov	r2, r0
 800af64:	460b      	mov	r3, r1
 800af66:	4613      	mov	r3, r2
 800af68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af6a:	e053      	b.n	800b014 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af6c:	4b35      	ldr	r3, [pc, #212]	; (800b044 <HAL_RCC_GetSysClockFreq+0x180>)
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	099b      	lsrs	r3, r3, #6
 800af72:	2200      	movs	r2, #0
 800af74:	613b      	str	r3, [r7, #16]
 800af76:	617a      	str	r2, [r7, #20]
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800af7e:	f04f 0b00 	mov.w	fp, #0
 800af82:	4652      	mov	r2, sl
 800af84:	465b      	mov	r3, fp
 800af86:	f04f 0000 	mov.w	r0, #0
 800af8a:	f04f 0100 	mov.w	r1, #0
 800af8e:	0159      	lsls	r1, r3, #5
 800af90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800af94:	0150      	lsls	r0, r2, #5
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	ebb2 080a 	subs.w	r8, r2, sl
 800af9e:	eb63 090b 	sbc.w	r9, r3, fp
 800afa2:	f04f 0200 	mov.w	r2, #0
 800afa6:	f04f 0300 	mov.w	r3, #0
 800afaa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800afae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800afb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800afb6:	ebb2 0408 	subs.w	r4, r2, r8
 800afba:	eb63 0509 	sbc.w	r5, r3, r9
 800afbe:	f04f 0200 	mov.w	r2, #0
 800afc2:	f04f 0300 	mov.w	r3, #0
 800afc6:	00eb      	lsls	r3, r5, #3
 800afc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800afcc:	00e2      	lsls	r2, r4, #3
 800afce:	4614      	mov	r4, r2
 800afd0:	461d      	mov	r5, r3
 800afd2:	eb14 030a 	adds.w	r3, r4, sl
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	eb45 030b 	adc.w	r3, r5, fp
 800afdc:	607b      	str	r3, [r7, #4]
 800afde:	f04f 0200 	mov.w	r2, #0
 800afe2:	f04f 0300 	mov.w	r3, #0
 800afe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800afea:	4629      	mov	r1, r5
 800afec:	028b      	lsls	r3, r1, #10
 800afee:	4621      	mov	r1, r4
 800aff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aff4:	4621      	mov	r1, r4
 800aff6:	028a      	lsls	r2, r1, #10
 800aff8:	4610      	mov	r0, r2
 800affa:	4619      	mov	r1, r3
 800affc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affe:	2200      	movs	r2, #0
 800b000:	60bb      	str	r3, [r7, #8]
 800b002:	60fa      	str	r2, [r7, #12]
 800b004:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b008:	f7f5 fdf6 	bl	8000bf8 <__aeabi_uldivmod>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4613      	mov	r3, r2
 800b012:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b014:	4b0b      	ldr	r3, [pc, #44]	; (800b044 <HAL_RCC_GetSysClockFreq+0x180>)
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	0c1b      	lsrs	r3, r3, #16
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	3301      	adds	r3, #1
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800b024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	fbb2 f3f3 	udiv	r3, r2, r3
 800b02c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b02e:	e002      	b.n	800b036 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b030:	4b05      	ldr	r3, [pc, #20]	; (800b048 <HAL_RCC_GetSysClockFreq+0x184>)
 800b032:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b034:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3740      	adds	r7, #64	; 0x40
 800b03c:	46bd      	mov	sp, r7
 800b03e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b042:	bf00      	nop
 800b044:	40023800 	.word	0x40023800
 800b048:	00f42400 	.word	0x00f42400
 800b04c:	017d7840 	.word	0x017d7840

0800b050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b050:	b480      	push	{r7}
 800b052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b054:	4b03      	ldr	r3, [pc, #12]	; (800b064 <HAL_RCC_GetHCLKFreq+0x14>)
 800b056:	681b      	ldr	r3, [r3, #0]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	20000000 	.word	0x20000000

0800b068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b06c:	f7ff fff0 	bl	800b050 <HAL_RCC_GetHCLKFreq>
 800b070:	4602      	mov	r2, r0
 800b072:	4b05      	ldr	r3, [pc, #20]	; (800b088 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	0a9b      	lsrs	r3, r3, #10
 800b078:	f003 0307 	and.w	r3, r3, #7
 800b07c:	4903      	ldr	r1, [pc, #12]	; (800b08c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b07e:	5ccb      	ldrb	r3, [r1, r3]
 800b080:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b084:	4618      	mov	r0, r3
 800b086:	bd80      	pop	{r7, pc}
 800b088:	40023800 	.word	0x40023800
 800b08c:	0801aeb8 	.word	0x0801aeb8

0800b090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b094:	f7ff ffdc 	bl	800b050 <HAL_RCC_GetHCLKFreq>
 800b098:	4602      	mov	r2, r0
 800b09a:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	0b5b      	lsrs	r3, r3, #13
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	4903      	ldr	r1, [pc, #12]	; (800b0b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0a6:	5ccb      	ldrb	r3, [r1, r3]
 800b0a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	40023800 	.word	0x40023800
 800b0b4:	0801aeb8 	.word	0x0801aeb8

0800b0b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	220f      	movs	r2, #15
 800b0c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b0c8:	4b12      	ldr	r3, [pc, #72]	; (800b114 <HAL_RCC_GetClockConfig+0x5c>)
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	f003 0203 	and.w	r2, r3, #3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b0d4:	4b0f      	ldr	r3, [pc, #60]	; (800b114 <HAL_RCC_GetClockConfig+0x5c>)
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b0e0:	4b0c      	ldr	r3, [pc, #48]	; (800b114 <HAL_RCC_GetClockConfig+0x5c>)
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b0ec:	4b09      	ldr	r3, [pc, #36]	; (800b114 <HAL_RCC_GetClockConfig+0x5c>)
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	08db      	lsrs	r3, r3, #3
 800b0f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b0fa:	4b07      	ldr	r3, [pc, #28]	; (800b118 <HAL_RCC_GetClockConfig+0x60>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 0207 	and.w	r2, r3, #7
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	601a      	str	r2, [r3, #0]
}
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	40023800 	.word	0x40023800
 800b118:	40023c00 	.word	0x40023c00

0800b11c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b124:	2300      	movs	r3, #0
 800b126:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b128:	2300      	movs	r3, #0
 800b12a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0301 	and.w	r3, r3, #1
 800b134:	2b00      	cmp	r3, #0
 800b136:	d105      	bne.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b140:	2b00      	cmp	r3, #0
 800b142:	d038      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b144:	4b68      	ldr	r3, [pc, #416]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b146:	2200      	movs	r2, #0
 800b148:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b14a:	f7fc fb4d 	bl	80077e8 <HAL_GetTick>
 800b14e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b150:	e008      	b.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b152:	f7fc fb49 	bl	80077e8 <HAL_GetTick>
 800b156:	4602      	mov	r2, r0
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d901      	bls.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e0bd      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b164:	4b61      	ldr	r3, [pc, #388]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1f0      	bne.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685a      	ldr	r2, [r3, #4]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	019b      	lsls	r3, r3, #6
 800b17a:	431a      	orrs	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	071b      	lsls	r3, r3, #28
 800b182:	495a      	ldr	r1, [pc, #360]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b184:	4313      	orrs	r3, r2
 800b186:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b18a:	4b57      	ldr	r3, [pc, #348]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b18c:	2201      	movs	r2, #1
 800b18e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b190:	f7fc fb2a 	bl	80077e8 <HAL_GetTick>
 800b194:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b196:	e008      	b.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b198:	f7fc fb26 	bl	80077e8 <HAL_GetTick>
 800b19c:	4602      	mov	r2, r0
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d901      	bls.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1a6:	2303      	movs	r3, #3
 800b1a8:	e09a      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b1aa:	4b50      	ldr	r3, [pc, #320]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0f0      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 0302 	and.w	r3, r3, #2
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 8083 	beq.w	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60fb      	str	r3, [r7, #12]
 800b1c8:	4b48      	ldr	r3, [pc, #288]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1cc:	4a47      	ldr	r2, [pc, #284]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1d2:	6413      	str	r3, [r2, #64]	; 0x40
 800b1d4:	4b45      	ldr	r3, [pc, #276]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1dc:	60fb      	str	r3, [r7, #12]
 800b1de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b1e0:	4b43      	ldr	r3, [pc, #268]	; (800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a42      	ldr	r2, [pc, #264]	; (800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b1e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b1ec:	f7fc fafc 	bl	80077e8 <HAL_GetTick>
 800b1f0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b1f2:	e008      	b.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b1f4:	f7fc faf8 	bl	80077e8 <HAL_GetTick>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d901      	bls.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800b202:	2303      	movs	r3, #3
 800b204:	e06c      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b206:	4b3a      	ldr	r3, [pc, #232]	; (800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d0f0      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b212:	4b36      	ldr	r3, [pc, #216]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b21a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d02f      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d028      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b230:	4b2e      	ldr	r3, [pc, #184]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b238:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b23a:	4b2e      	ldr	r3, [pc, #184]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b23c:	2201      	movs	r2, #1
 800b23e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b240:	4b2c      	ldr	r3, [pc, #176]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b242:	2200      	movs	r2, #0
 800b244:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b246:	4a29      	ldr	r2, [pc, #164]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b24c:	4b27      	ldr	r3, [pc, #156]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b24e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b250:	f003 0301 	and.w	r3, r3, #1
 800b254:	2b01      	cmp	r3, #1
 800b256:	d114      	bne.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b258:	f7fc fac6 	bl	80077e8 <HAL_GetTick>
 800b25c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b25e:	e00a      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b260:	f7fc fac2 	bl	80077e8 <HAL_GetTick>
 800b264:	4602      	mov	r2, r0
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b26e:	4293      	cmp	r3, r2
 800b270:	d901      	bls.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800b272:	2303      	movs	r3, #3
 800b274:	e034      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b276:	4b1d      	ldr	r3, [pc, #116]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b27a:	f003 0302 	and.w	r3, r3, #2
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0ee      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b28a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b28e:	d10d      	bne.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x190>
 800b290:	4b16      	ldr	r3, [pc, #88]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b2a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2a4:	4911      	ldr	r1, [pc, #68]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	608b      	str	r3, [r1, #8]
 800b2aa:	e005      	b.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800b2ac:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	4a0e      	ldr	r2, [pc, #56]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b2b6:	6093      	str	r3, [r2, #8]
 800b2b8:	4b0c      	ldr	r3, [pc, #48]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2c4:	4909      	ldr	r1, [pc, #36]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0308 	and.w	r3, r3, #8
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	7d1a      	ldrb	r2, [r3, #20]
 800b2da:	4b07      	ldr	r3, [pc, #28]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800b2dc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3718      	adds	r7, #24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	42470068 	.word	0x42470068
 800b2ec:	40023800 	.word	0x40023800
 800b2f0:	40007000 	.word	0x40007000
 800b2f4:	42470e40 	.word	0x42470e40
 800b2f8:	424711e0 	.word	0x424711e0

0800b2fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b087      	sub	sp, #28
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800b304:	2300      	movs	r3, #0
 800b306:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800b308:	2300      	movs	r3, #0
 800b30a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800b30c:	2300      	movs	r3, #0
 800b30e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800b310:	2300      	movs	r3, #0
 800b312:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d140      	bne.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800b31a:	4b24      	ldr	r3, [pc, #144]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b322:	60fb      	str	r3, [r7, #12]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d005      	beq.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d131      	bne.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800b330:	4b1f      	ldr	r3, [pc, #124]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800b332:	617b      	str	r3, [r7, #20]
          break;
 800b334:	e031      	b.n	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b336:	4b1d      	ldr	r3, [pc, #116]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b33e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b342:	d109      	bne.n	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800b344:	4b19      	ldr	r3, [pc, #100]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b34a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b34e:	4a19      	ldr	r2, [pc, #100]	; (800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800b350:	fbb2 f3f3 	udiv	r3, r2, r3
 800b354:	613b      	str	r3, [r7, #16]
 800b356:	e008      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800b358:	4b14      	ldr	r3, [pc, #80]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b35a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b35e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b362:	4a15      	ldr	r2, [pc, #84]	; (800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800b364:	fbb2 f3f3 	udiv	r3, r2, r3
 800b368:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800b36a:	4b10      	ldr	r3, [pc, #64]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b36c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b370:	099b      	lsrs	r3, r3, #6
 800b372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	fb02 f303 	mul.w	r3, r2, r3
 800b37c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800b37e:	4b0b      	ldr	r3, [pc, #44]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b384:	0f1b      	lsrs	r3, r3, #28
 800b386:	f003 0307 	and.w	r3, r3, #7
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b390:	617b      	str	r3, [r7, #20]
          break;
 800b392:	e002      	b.n	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
          break;
 800b398:	bf00      	nop
        }
      }
      break;
 800b39a:	bf00      	nop
    }
  }
  return frequency;
 800b39c:	697b      	ldr	r3, [r7, #20]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	371c      	adds	r7, #28
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	40023800 	.word	0x40023800
 800b3b0:	00bb8000 	.word	0x00bb8000
 800b3b4:	017d7840 	.word	0x017d7840
 800b3b8:	00f42400 	.word	0x00f42400

0800b3bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e022      	b.n	800b414 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d105      	bne.n	800b3e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f7f6 fc91 	bl	8001d08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2203      	movs	r2, #3
 800b3ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f814 	bl	800b41c <HAL_SD_InitCard>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e00a      	b.n	800b414 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b41c:	b5b0      	push	{r4, r5, r7, lr}
 800b41e:	b08e      	sub	sp, #56	; 0x38
 800b420:	af04      	add	r7, sp, #16
 800b422:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b424:	2300      	movs	r3, #0
 800b426:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b428:	2300      	movs	r3, #0
 800b42a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b42c:	2300      	movs	r3, #0
 800b42e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b430:	2300      	movs	r3, #0
 800b432:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b434:	2300      	movs	r3, #0
 800b436:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b438:	2376      	movs	r3, #118	; 0x76
 800b43a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681d      	ldr	r5, [r3, #0]
 800b440:	466c      	mov	r4, sp
 800b442:	f107 0314 	add.w	r3, r7, #20
 800b446:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b44a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b44e:	f107 0308 	add.w	r3, r7, #8
 800b452:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b454:	4628      	mov	r0, r5
 800b456:	f003 fa19 	bl	800e88c <SDIO_Init>
 800b45a:	4603      	mov	r3, r0
 800b45c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	e04f      	b.n	800b50c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b46c:	4b29      	ldr	r3, [pc, #164]	; (800b514 <HAL_SD_InitCard+0xf8>)
 800b46e:	2200      	movs	r2, #0
 800b470:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4618      	mov	r0, r3
 800b478:	f003 fa51 	bl	800e91e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b47c:	4b25      	ldr	r3, [pc, #148]	; (800b514 <HAL_SD_InitCard+0xf8>)
 800b47e:	2201      	movs	r2, #1
 800b480:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b482:	2002      	movs	r0, #2
 800b484:	f7fc f9bc 	bl	8007800 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f001 f805 	bl	800c498 <SD_PowerON>
 800b48e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b490:	6a3b      	ldr	r3, [r7, #32]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00b      	beq.n	800b4ae <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	431a      	orrs	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e02e      	b.n	800b50c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 ff24 	bl	800c2fc <SD_InitCard>
 800b4b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00b      	beq.n	800b4d4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4c8:	6a3b      	ldr	r3, [r7, #32]
 800b4ca:	431a      	orrs	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e01b      	b.n	800b50c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f003 fab0 	bl	800ea42 <SDMMC_CmdBlockLength>
 800b4e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4e4:	6a3b      	ldr	r3, [r7, #32]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00f      	beq.n	800b50a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a0a      	ldr	r2, [pc, #40]	; (800b518 <HAL_SD_InitCard+0xfc>)
 800b4f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	431a      	orrs	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e000      	b.n	800b50c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3728      	adds	r7, #40	; 0x28
 800b510:	46bd      	mov	sp, r7
 800b512:	bdb0      	pop	{r4, r5, r7, pc}
 800b514:	422580a0 	.word	0x422580a0
 800b518:	004005ff 	.word	0x004005ff

0800b51c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08c      	sub	sp, #48	; 0x30
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
 800b528:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d107      	bne.n	800b544 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b538:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e0c0      	b.n	800b6c6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	f040 80b9 	bne.w	800b6c4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	441a      	add	r2, r3
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b562:	429a      	cmp	r2, r3
 800b564:	d907      	bls.n	800b576 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e0a7      	b.n	800b6c6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2203      	movs	r2, #3
 800b57a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2200      	movs	r2, #0
 800b584:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	6812      	ldr	r2, [r2, #0]
 800b590:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800b594:	f043 0302 	orr.w	r3, r3, #2
 800b598:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59e:	4a4c      	ldr	r2, [pc, #304]	; (800b6d0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800b5a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a6:	4a4b      	ldr	r2, [pc, #300]	; (800b6d4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800b5a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ca:	689a      	ldr	r2, [r3, #8]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	430a      	orrs	r2, r1
 800b5d4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	3380      	adds	r3, #128	; 0x80
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	025b      	lsls	r3, r3, #9
 800b5e8:	089b      	lsrs	r3, r3, #2
 800b5ea:	f7fc ff27 	bl	800843c <HAL_DMA_Start_IT>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d017      	beq.n	800b624 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b602:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a33      	ldr	r2, [pc, #204]	; (800b6d8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800b60a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b610:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	e050      	b.n	800b6c6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b624:	4b2d      	ldr	r3, [pc, #180]	; (800b6dc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b626:	2201      	movs	r2, #1
 800b628:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d002      	beq.n	800b638 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	025b      	lsls	r3, r3, #9
 800b636:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b638:	f04f 33ff 	mov.w	r3, #4294967295
 800b63c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	025b      	lsls	r3, r3, #9
 800b642:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b644:	2390      	movs	r3, #144	; 0x90
 800b646:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b648:	2302      	movs	r3, #2
 800b64a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b64c:	2300      	movs	r3, #0
 800b64e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b650:	2301      	movs	r3, #1
 800b652:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f107 0210 	add.w	r2, r7, #16
 800b65c:	4611      	mov	r1, r2
 800b65e:	4618      	mov	r0, r3
 800b660:	f003 f9c3 	bl	800e9ea <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d90a      	bls.n	800b680 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2282      	movs	r2, #130	; 0x82
 800b66e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b676:	4618      	mov	r0, r3
 800b678:	f003 fa27 	bl	800eaca <SDMMC_CmdReadMultiBlock>
 800b67c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b67e:	e009      	b.n	800b694 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2281      	movs	r2, #129	; 0x81
 800b684:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b68c:	4618      	mov	r0, r3
 800b68e:	f003 f9fa 	bl	800ea86 <SDMMC_CmdReadSingleBlock>
 800b692:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b696:	2b00      	cmp	r3, #0
 800b698:	d012      	beq.n	800b6c0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a0e      	ldr	r2, [pc, #56]	; (800b6d8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800b6a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a8:	431a      	orrs	r2, r3
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e002      	b.n	800b6c6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	e000      	b.n	800b6c6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800b6c4:	2302      	movs	r3, #2
  }
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3730      	adds	r7, #48	; 0x30
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	0800c10b 	.word	0x0800c10b
 800b6d4:	0800c17d 	.word	0x0800c17d
 800b6d8:	004005ff 	.word	0x004005ff
 800b6dc:	4225858c 	.word	0x4225858c

0800b6e0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b08c      	sub	sp, #48	; 0x30
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
 800b6ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d107      	bne.n	800b708 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	e0c5      	b.n	800b894 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b01      	cmp	r3, #1
 800b712:	f040 80be 	bne.w	800b892 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b71c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	441a      	add	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b726:	429a      	cmp	r2, r3
 800b728:	d907      	bls.n	800b73a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	e0ac      	b.n	800b894 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2203      	movs	r2, #3
 800b73e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2200      	movs	r2, #0
 800b748:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	6812      	ldr	r2, [r2, #0]
 800b754:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800b758:	f043 0302 	orr.w	r3, r3, #2
 800b75c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b762:	4a4e      	ldr	r2, [pc, #312]	; (800b89c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800b764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b76a:	4a4d      	ldr	r2, [pc, #308]	; (800b8a0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800b76c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b772:	2200      	movs	r2, #0
 800b774:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d002      	beq.n	800b784 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b780:	025b      	lsls	r3, r3, #9
 800b782:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d90a      	bls.n	800b7a0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	22a0      	movs	r2, #160	; 0xa0
 800b78e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b796:	4618      	mov	r0, r3
 800b798:	f003 f9db 	bl	800eb52 <SDMMC_CmdWriteMultiBlock>
 800b79c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b79e:	e009      	b.n	800b7b4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2290      	movs	r2, #144	; 0x90
 800b7a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f003 f9ae 	bl	800eb0e <SDMMC_CmdWriteSingleBlock>
 800b7b2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d012      	beq.n	800b7e0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a39      	ldr	r2, [pc, #228]	; (800b8a4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b7c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c8:	431a      	orrs	r2, r3
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e059      	b.n	800b894 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b7e0:	4b31      	ldr	r3, [pc, #196]	; (800b8a8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ea:	2240      	movs	r2, #64	; 0x40
 800b7ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7fe:	689a      	ldr	r2, [r3, #8]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	430a      	orrs	r2, r1
 800b808:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b80e:	68b9      	ldr	r1, [r7, #8]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3380      	adds	r3, #128	; 0x80
 800b816:	461a      	mov	r2, r3
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	025b      	lsls	r3, r3, #9
 800b81c:	089b      	lsrs	r3, r3, #2
 800b81e:	f7fc fe0d 	bl	800843c <HAL_DMA_Start_IT>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d01c      	beq.n	800b862 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	6812      	ldr	r2, [r2, #0]
 800b832:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800b836:	f023 0302 	bic.w	r3, r3, #2
 800b83a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a18      	ldr	r2, [pc, #96]	; (800b8a4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b842:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b848:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e018      	b.n	800b894 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b862:	f04f 33ff 	mov.w	r3, #4294967295
 800b866:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	025b      	lsls	r3, r3, #9
 800b86c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b86e:	2390      	movs	r3, #144	; 0x90
 800b870:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b872:	2300      	movs	r3, #0
 800b874:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b876:	2300      	movs	r3, #0
 800b878:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b87a:	2301      	movs	r3, #1
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f107 0210 	add.w	r2, r7, #16
 800b886:	4611      	mov	r1, r2
 800b888:	4618      	mov	r0, r3
 800b88a:	f003 f8ae 	bl	800e9ea <SDIO_ConfigData>

      return HAL_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	e000      	b.n	800b894 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800b892:	2302      	movs	r3, #2
  }
}
 800b894:	4618      	mov	r0, r3
 800b896:	3730      	adds	r7, #48	; 0x30
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	0800c0e1 	.word	0x0800c0e1
 800b8a0:	0800c17d 	.word	0x0800c17d
 800b8a4:	004005ff 	.word	0x004005ff
 800b8a8:	4225858c 	.word	0x4225858c

0800b8ac <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d008      	beq.n	800b8da <HAL_SD_IRQHandler+0x2e>
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f003 0308 	and.w	r3, r3, #8
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 ffff 	bl	800c8d6 <SD_Read_IT>
 800b8d8:	e165      	b.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 808f 	beq.w	800ba08 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8f2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	6812      	ldr	r2, [r2, #0]
 800b8fe:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800b902:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b906:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f022 0201 	bic.w	r2, r2, #1
 800b916:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f003 0308 	and.w	r3, r3, #8
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d039      	beq.n	800b996 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f003 0302 	and.w	r3, r3, #2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d104      	bne.n	800b936 <HAL_SD_IRQHandler+0x8a>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f003 0320 	and.w	r3, r3, #32
 800b932:	2b00      	cmp	r3, #0
 800b934:	d011      	beq.n	800b95a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f003 f92c 	bl	800eb98 <SDMMC_CmdStopTransfer>
 800b940:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d008      	beq.n	800b95a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	431a      	orrs	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 f92f 	bl	800bbb8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f240 523a 	movw	r2, #1338	; 0x53a
 800b962:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f003 0301 	and.w	r3, r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d104      	bne.n	800b986 <HAL_SD_IRQHandler+0xda>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f003 0302 	and.w	r3, r3, #2
 800b982:	2b00      	cmp	r3, #0
 800b984:	d003      	beq.n	800b98e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f004 f8e2 	bl	800fb50 <HAL_SD_RxCpltCallback>
 800b98c:	e10b      	b.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f004 f8d4 	bl	800fb3c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b994:	e107      	b.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f000 8102 	beq.w	800bba6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f003 0320 	and.w	r3, r3, #32
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d011      	beq.n	800b9d0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f003 f8f1 	bl	800eb98 <SDMMC_CmdStopTransfer>
 800b9b6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d008      	beq.n	800b9d0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	431a      	orrs	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 f8f4 	bl	800bbb8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f003 0301 	and.w	r3, r3, #1
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f040 80e5 	bne.w	800bba6 <HAL_SD_IRQHandler+0x2fa>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f003 0302 	and.w	r3, r3, #2
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f040 80df 	bne.w	800bba6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f022 0208 	bic.w	r2, r2, #8
 800b9f6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f004 f89b 	bl	800fb3c <HAL_SD_TxCpltCallback>
}
 800ba06:	e0ce      	b.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d008      	beq.n	800ba28 <HAL_SD_IRQHandler+0x17c>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f003 0308 	and.w	r3, r3, #8
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 ffa9 	bl	800c978 <SD_Write_IT>
 800ba26:	e0be      	b.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba2e:	f240 233a 	movw	r3, #570	; 0x23a
 800ba32:	4013      	ands	r3, r2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 80b6 	beq.w	800bba6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d005      	beq.n	800ba54 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4c:	f043 0202 	orr.w	r2, r3, #2
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5a:	f003 0308 	and.w	r3, r3, #8
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d005      	beq.n	800ba6e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba66:	f043 0208 	orr.w	r2, r3, #8
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba74:	f003 0320 	and.w	r3, r3, #32
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d005      	beq.n	800ba88 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba80:	f043 0220 	orr.w	r2, r3, #32
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8e:	f003 0310 	and.w	r3, r3, #16
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d005      	beq.n	800baa2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9a:	f043 0210 	orr.w	r2, r3, #16
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800baac:	2b00      	cmp	r3, #0
 800baae:	d005      	beq.n	800babc <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab4:	f043 0208 	orr.w	r2, r3, #8
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f240 723a 	movw	r2, #1850	; 0x73a
 800bac4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	6812      	ldr	r2, [r2, #0]
 800bad0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800bad4:	f023 0302 	bic.w	r3, r3, #2
 800bad8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4618      	mov	r0, r3
 800bae0:	f003 f85a 	bl	800eb98 <SDMMC_CmdStopTransfer>
 800bae4:	4602      	mov	r2, r0
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baea:	431a      	orrs	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f003 0308 	and.w	r3, r3, #8
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00a      	beq.n	800bb10 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 f855 	bl	800bbb8 <HAL_SD_ErrorCallback>
}
 800bb0e:	e04a      	b.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d045      	beq.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f003 0310 	and.w	r3, r3, #16
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d104      	bne.n	800bb2e <HAL_SD_IRQHandler+0x282>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f003 0320 	and.w	r3, r3, #32
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d011      	beq.n	800bb52 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb32:	4a1f      	ldr	r2, [pc, #124]	; (800bbb0 <HAL_SD_IRQHandler+0x304>)
 800bb34:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fc fcd6 	bl	80084ec <HAL_DMA_Abort_IT>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d02f      	beq.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 fb68 	bl	800c220 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bb50:	e029      	b.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f003 0301 	and.w	r3, r3, #1
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d104      	bne.n	800bb66 <HAL_SD_IRQHandler+0x2ba>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f003 0302 	and.w	r3, r3, #2
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d011      	beq.n	800bb8a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6a:	4a12      	ldr	r2, [pc, #72]	; (800bbb4 <HAL_SD_IRQHandler+0x308>)
 800bb6c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fc fcba 	bl	80084ec <HAL_DMA_Abort_IT>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d013      	beq.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb82:	4618      	mov	r0, r3
 800bb84:	f000 fb83 	bl	800c28e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bb88:	e00d      	b.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f003 ffc2 	bl	800fb28 <HAL_SD_AbortCallback>
}
 800bba4:	e7ff      	b.n	800bba6 <HAL_SD_IRQHandler+0x2fa>
 800bba6:	bf00      	nop
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	0800c221 	.word	0x0800c221
 800bbb4:	0800c28f 	.word	0x0800c28f

0800bbb8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbda:	0f9b      	lsrs	r3, r3, #30
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbe6:	0e9b      	lsrs	r3, r3, #26
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	f003 030f 	and.w	r3, r3, #15
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbf8:	0e1b      	lsrs	r3, r3, #24
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	f003 0303 	and.w	r3, r3, #3
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc0a:	0c1b      	lsrs	r3, r3, #16
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc16:	0a1b      	lsrs	r3, r3, #8
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc2c:	0d1b      	lsrs	r3, r3, #20
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc38:	0c1b      	lsrs	r3, r3, #16
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	f003 030f 	and.w	r3, r3, #15
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc4a:	0bdb      	lsrs	r3, r3, #15
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	f003 0301 	and.w	r3, r3, #1
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc5c:	0b9b      	lsrs	r3, r3, #14
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	f003 0301 	and.w	r3, r3, #1
 800bc64:	b2da      	uxtb	r2, r3
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc6e:	0b5b      	lsrs	r3, r3, #13
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	f003 0301 	and.w	r3, r3, #1
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc80:	0b1b      	lsrs	r3, r3, #12
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	f003 0301 	and.w	r3, r3, #1
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	2200      	movs	r2, #0
 800bc92:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d163      	bne.n	800bd64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bca0:	009a      	lsls	r2, r3, #2
 800bca2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bca6:	4013      	ands	r3, r2
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bcac:	0f92      	lsrs	r2, r2, #30
 800bcae:	431a      	orrs	r2, r3
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcb8:	0edb      	lsrs	r3, r3, #27
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	f003 0307 	and.w	r3, r3, #7
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcca:	0e1b      	lsrs	r3, r3, #24
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	f003 0307 	and.w	r3, r3, #7
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcdc:	0d5b      	lsrs	r3, r3, #21
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	f003 0307 	and.w	r3, r3, #7
 800bce4:	b2da      	uxtb	r2, r3
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcee:	0c9b      	lsrs	r3, r3, #18
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	f003 0307 	and.w	r3, r3, #7
 800bcf6:	b2da      	uxtb	r2, r3
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd00:	0bdb      	lsrs	r3, r3, #15
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	f003 0307 	and.w	r3, r3, #7
 800bd08:	b2da      	uxtb	r2, r3
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	1c5a      	adds	r2, r3, #1
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	7e1b      	ldrb	r3, [r3, #24]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	f003 0307 	and.w	r3, r3, #7
 800bd22:	3302      	adds	r3, #2
 800bd24:	2201      	movs	r2, #1
 800bd26:	fa02 f303 	lsl.w	r3, r2, r3
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bd2e:	fb03 f202 	mul.w	r2, r3, r2
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	7a1b      	ldrb	r3, [r3, #8]
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	f003 030f 	and.w	r3, r3, #15
 800bd40:	2201      	movs	r2, #1
 800bd42:	409a      	lsls	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bd50:	0a52      	lsrs	r2, r2, #9
 800bd52:	fb03 f202 	mul.w	r2, r3, r2
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd60:	661a      	str	r2, [r3, #96]	; 0x60
 800bd62:	e031      	b.n	800bdc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d11d      	bne.n	800bda8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd70:	041b      	lsls	r3, r3, #16
 800bd72:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd7a:	0c1b      	lsrs	r3, r3, #16
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	3301      	adds	r3, #1
 800bd88:	029a      	lsls	r2, r3, #10
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd9c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	661a      	str	r2, [r3, #96]	; 0x60
 800bda6:	e00f      	b.n	800bdc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a58      	ldr	r2, [pc, #352]	; (800bf10 <HAL_SD_GetCardCSD+0x344>)
 800bdae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e09d      	b.n	800bf04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdcc:	0b9b      	lsrs	r3, r3, #14
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	f003 0301 	and.w	r3, r3, #1
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdde:	09db      	lsrs	r3, r3, #7
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bde6:	b2da      	uxtb	r2, r3
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be00:	0fdb      	lsrs	r3, r3, #31
 800be02:	b2da      	uxtb	r2, r3
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be0c:	0f5b      	lsrs	r3, r3, #29
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	f003 0303 	and.w	r3, r3, #3
 800be14:	b2da      	uxtb	r2, r3
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be1e:	0e9b      	lsrs	r3, r3, #26
 800be20:	b2db      	uxtb	r3, r3
 800be22:	f003 0307 	and.w	r3, r3, #7
 800be26:	b2da      	uxtb	r2, r3
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be30:	0d9b      	lsrs	r3, r3, #22
 800be32:	b2db      	uxtb	r3, r3
 800be34:	f003 030f 	and.w	r3, r3, #15
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be42:	0d5b      	lsrs	r3, r3, #21
 800be44:	b2db      	uxtb	r3, r3
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	2200      	movs	r2, #0
 800be56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be5e:	0c1b      	lsrs	r3, r3, #16
 800be60:	b2db      	uxtb	r3, r3
 800be62:	f003 0301 	and.w	r3, r3, #1
 800be66:	b2da      	uxtb	r2, r3
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be72:	0bdb      	lsrs	r3, r3, #15
 800be74:	b2db      	uxtb	r3, r3
 800be76:	f003 0301 	and.w	r3, r3, #1
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be86:	0b9b      	lsrs	r3, r3, #14
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be9a:	0b5b      	lsrs	r3, r3, #13
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	f003 0301 	and.w	r3, r3, #1
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beae:	0b1b      	lsrs	r3, r3, #12
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	f003 0301 	and.w	r3, r3, #1
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec2:	0a9b      	lsrs	r3, r3, #10
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	f003 0303 	and.w	r3, r3, #3
 800beca:	b2da      	uxtb	r2, r3
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bed6:	0a1b      	lsrs	r3, r3, #8
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	f003 0303 	and.w	r3, r3, #3
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beea:	085b      	lsrs	r3, r3, #1
 800beec:	b2db      	uxtb	r3, r3
 800beee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2201      	movs	r2, #1
 800befe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr
 800bf10:	004005ff 	.word	0x004005ff

0800bf14 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bf6c:	b5b0      	push	{r4, r5, r7, lr}
 800bf6e:	b08e      	sub	sp, #56	; 0x38
 800bf70:	af04      	add	r7, sp, #16
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800bf76:	2300      	movs	r3, #0
 800bf78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2203      	movs	r2, #3
 800bf80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d02e      	beq.n	800bfea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf92:	d106      	bne.n	800bfa2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	639a      	str	r2, [r3, #56]	; 0x38
 800bfa0:	e029      	b.n	800bff6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfa8:	d10a      	bne.n	800bfc0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fb2a 	bl	800c604 <SD_WideBus_Enable>
 800bfb0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfb6:	6a3b      	ldr	r3, [r7, #32]
 800bfb8:	431a      	orrs	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	639a      	str	r2, [r3, #56]	; 0x38
 800bfbe:	e01a      	b.n	800bff6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10a      	bne.n	800bfdc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fb67 	bl	800c69a <SD_WideBus_Disable>
 800bfcc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfd2:	6a3b      	ldr	r3, [r7, #32]
 800bfd4:	431a      	orrs	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	639a      	str	r2, [r3, #56]	; 0x38
 800bfda:	e00c      	b.n	800bff6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	639a      	str	r2, [r3, #56]	; 0x38
 800bfe8:	e005      	b.n	800bff6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00b      	beq.n	800c016 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a26      	ldr	r2, [pc, #152]	; (800c09c <HAL_SD_ConfigWideBusOperation+0x130>)
 800c004:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2201      	movs	r2, #1
 800c00a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c00e:	2301      	movs	r3, #1
 800c010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c014:	e01f      	b.n	800c056 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681d      	ldr	r5, [r3, #0]
 800c03c:	466c      	mov	r4, sp
 800c03e:	f107 0314 	add.w	r3, r7, #20
 800c042:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c04a:	f107 0308 	add.w	r3, r7, #8
 800c04e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c050:	4628      	mov	r0, r5
 800c052:	f002 fc1b 	bl	800e88c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c05e:	4618      	mov	r0, r3
 800c060:	f002 fcef 	bl	800ea42 <SDMMC_CmdBlockLength>
 800c064:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00c      	beq.n	800c086 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a0a      	ldr	r2, [pc, #40]	; (800c09c <HAL_SD_ConfigWideBusOperation+0x130>)
 800c072:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	431a      	orrs	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c08e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c092:	4618      	mov	r0, r3
 800c094:	3728      	adds	r7, #40	; 0x28
 800c096:	46bd      	mov	sp, r7
 800c098:	bdb0      	pop	{r4, r5, r7, pc}
 800c09a:	bf00      	nop
 800c09c:	004005ff 	.word	0x004005ff

0800c0a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c0ac:	f107 030c 	add.w	r3, r7, #12
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fa7e 	bl	800c5b4 <SD_SendStatus>
 800c0b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d005      	beq.n	800c0cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	431a      	orrs	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	0a5b      	lsrs	r3, r3, #9
 800c0d0:	f003 030f 	and.w	r3, r3, #15
 800c0d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c0d6:	693b      	ldr	r3, [r7, #16]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3718      	adds	r7, #24
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c0fe:	bf00      	nop
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b084      	sub	sp, #16
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c116:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11c:	2b82      	cmp	r3, #130	; 0x82
 800c11e:	d111      	bne.n	800c144 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4618      	mov	r0, r3
 800c126:	f002 fd37 	bl	800eb98 <SDMMC_CmdStopTransfer>
 800c12a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d008      	beq.n	800c144 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	431a      	orrs	r2, r3
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f7ff fd3a 	bl	800bbb8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f022 0208 	bic.w	r2, r2, #8
 800c152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f240 523a 	movw	r2, #1338	; 0x53a
 800c15c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f003 fcef 	bl	800fb50 <HAL_SD_RxCpltCallback>
#endif
}
 800c172:	bf00      	nop
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
	...

0800c17c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c188:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7fc fb5a 	bl	8008844 <HAL_DMA_GetError>
 800c190:	4603      	mov	r3, r0
 800c192:	2b02      	cmp	r3, #2
 800c194:	d03e      	beq.n	800c214 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c19c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d002      	beq.n	800c1b2 <SD_DMAError+0x36>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d12d      	bne.n	800c20e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a19      	ldr	r2, [pc, #100]	; (800c21c <SD_DMAError+0xa0>)
 800c1b8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c1c8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c1d6:	6978      	ldr	r0, [r7, #20]
 800c1d8:	f7ff ff62 	bl	800c0a0 <HAL_SD_GetCardState>
 800c1dc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b06      	cmp	r3, #6
 800c1e2:	d002      	beq.n	800c1ea <SD_DMAError+0x6e>
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b05      	cmp	r3, #5
 800c1e8:	d10a      	bne.n	800c200 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f002 fcd2 	bl	800eb98 <SDMMC_CmdStopTransfer>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	2200      	movs	r2, #0
 800c20c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c20e:	6978      	ldr	r0, [r7, #20]
 800c210:	f7ff fcd2 	bl	800bbb8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c214:	bf00      	nop
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	004005ff 	.word	0x004005ff

0800c220 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f240 523a 	movw	r2, #1338	; 0x53a
 800c236:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7ff ff31 	bl	800c0a0 <HAL_SD_GetCardState>
 800c23e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2201      	movs	r2, #1
 800c244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2200      	movs	r2, #0
 800c24c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	2b06      	cmp	r3, #6
 800c252:	d002      	beq.n	800c25a <SD_DMATxAbort+0x3a>
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	2b05      	cmp	r3, #5
 800c258:	d10a      	bne.n	800c270 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4618      	mov	r0, r3
 800c260:	f002 fc9a 	bl	800eb98 <SDMMC_CmdStopTransfer>
 800c264:	4602      	mov	r2, r0
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c26a:	431a      	orrs	r2, r3
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c274:	2b00      	cmp	r3, #0
 800c276:	d103      	bne.n	800c280 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f003 fc55 	bl	800fb28 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c27e:	e002      	b.n	800c286 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f7ff fc99 	bl	800bbb8 <HAL_SD_ErrorCallback>
}
 800c286:	bf00      	nop
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f240 523a 	movw	r2, #1338	; 0x53a
 800c2a4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f7ff fefa 	bl	800c0a0 <HAL_SD_GetCardState>
 800c2ac:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	2b06      	cmp	r3, #6
 800c2c0:	d002      	beq.n	800c2c8 <SD_DMARxAbort+0x3a>
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	2b05      	cmp	r3, #5
 800c2c6:	d10a      	bne.n	800c2de <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f002 fc63 	bl	800eb98 <SDMMC_CmdStopTransfer>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d8:	431a      	orrs	r2, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d103      	bne.n	800c2ee <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f003 fc1e 	bl	800fb28 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c2ec:	e002      	b.n	800c2f4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f7ff fc62 	bl	800bbb8 <HAL_SD_ErrorCallback>
}
 800c2f4:	bf00      	nop
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c2fc:	b5b0      	push	{r4, r5, r7, lr}
 800c2fe:	b094      	sub	sp, #80	; 0x50
 800c300:	af04      	add	r7, sp, #16
 800c302:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c304:	2301      	movs	r3, #1
 800c306:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f002 fb14 	bl	800e93a <SDIO_GetPowerState>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d102      	bne.n	800c31e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c318:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c31c:	e0b8      	b.n	800c490 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c322:	2b03      	cmp	r3, #3
 800c324:	d02f      	beq.n	800c386 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f002 fd3e 	bl	800edac <SDMMC_CmdSendCID>
 800c330:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c334:	2b00      	cmp	r3, #0
 800c336:	d001      	beq.n	800c33c <SD_InitCard+0x40>
    {
      return errorstate;
 800c338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33a:	e0a9      	b.n	800c490 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2100      	movs	r1, #0
 800c342:	4618      	mov	r0, r3
 800c344:	f002 fb3e 	bl	800e9c4 <SDIO_GetResponse>
 800c348:	4602      	mov	r2, r0
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2104      	movs	r1, #4
 800c354:	4618      	mov	r0, r3
 800c356:	f002 fb35 	bl	800e9c4 <SDIO_GetResponse>
 800c35a:	4602      	mov	r2, r0
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2108      	movs	r1, #8
 800c366:	4618      	mov	r0, r3
 800c368:	f002 fb2c 	bl	800e9c4 <SDIO_GetResponse>
 800c36c:	4602      	mov	r2, r0
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	210c      	movs	r1, #12
 800c378:	4618      	mov	r0, r3
 800c37a:	f002 fb23 	bl	800e9c4 <SDIO_GetResponse>
 800c37e:	4602      	mov	r2, r0
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c38a:	2b03      	cmp	r3, #3
 800c38c:	d00d      	beq.n	800c3aa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f107 020e 	add.w	r2, r7, #14
 800c396:	4611      	mov	r1, r2
 800c398:	4618      	mov	r0, r3
 800c39a:	f002 fd44 	bl	800ee26 <SDMMC_CmdSetRelAdd>
 800c39e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <SD_InitCard+0xae>
    {
      return errorstate;
 800c3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a8:	e072      	b.n	800c490 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	d036      	beq.n	800c420 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c3b2:	89fb      	ldrh	r3, [r7, #14]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3c2:	041b      	lsls	r3, r3, #16
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	f002 fd0e 	bl	800ede8 <SDMMC_CmdSendCSD>
 800c3cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d001      	beq.n	800c3d8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c3d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d6:	e05b      	b.n	800c490 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2100      	movs	r1, #0
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f002 faf0 	bl	800e9c4 <SDIO_GetResponse>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2104      	movs	r1, #4
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f002 fae7 	bl	800e9c4 <SDIO_GetResponse>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2108      	movs	r1, #8
 800c402:	4618      	mov	r0, r3
 800c404:	f002 fade 	bl	800e9c4 <SDIO_GetResponse>
 800c408:	4602      	mov	r2, r0
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	210c      	movs	r1, #12
 800c414:	4618      	mov	r0, r3
 800c416:	f002 fad5 	bl	800e9c4 <SDIO_GetResponse>
 800c41a:	4602      	mov	r2, r0
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2104      	movs	r1, #4
 800c426:	4618      	mov	r0, r3
 800c428:	f002 facc 	bl	800e9c4 <SDIO_GetResponse>
 800c42c:	4603      	mov	r3, r0
 800c42e:	0d1a      	lsrs	r2, r3, #20
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c434:	f107 0310 	add.w	r3, r7, #16
 800c438:	4619      	mov	r1, r3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7ff fbc6 	bl	800bbcc <HAL_SD_GetCardCSD>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c446:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c44a:	e021      	b.n	800c490 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6819      	ldr	r1, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c454:	041b      	lsls	r3, r3, #16
 800c456:	2200      	movs	r2, #0
 800c458:	461c      	mov	r4, r3
 800c45a:	4615      	mov	r5, r2
 800c45c:	4622      	mov	r2, r4
 800c45e:	462b      	mov	r3, r5
 800c460:	4608      	mov	r0, r1
 800c462:	f002 fbbb 	bl	800ebdc <SDMMC_CmdSelDesel>
 800c466:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <SD_InitCard+0x176>
  {
    return errorstate;
 800c46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c470:	e00e      	b.n	800c490 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681d      	ldr	r5, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	466c      	mov	r4, sp
 800c47a:	f103 0210 	add.w	r2, r3, #16
 800c47e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c480:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c484:	3304      	adds	r3, #4
 800c486:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c488:	4628      	mov	r0, r5
 800c48a:	f002 f9ff 	bl	800e88c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3740      	adds	r7, #64	; 0x40
 800c494:	46bd      	mov	sp, r7
 800c496:	bdb0      	pop	{r4, r5, r7, pc}

0800c498 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	617b      	str	r3, [r7, #20]
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f002 fbb6 	bl	800ec22 <SDMMC_CmdGoIdleState>
 800c4b6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d001      	beq.n	800c4c2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	e072      	b.n	800c5a8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f002 fbc9 	bl	800ec5e <SDMMC_CmdOperCond>
 800c4cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00d      	beq.n	800c4f0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f002 fb9f 	bl	800ec22 <SDMMC_CmdGoIdleState>
 800c4e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d004      	beq.n	800c4f6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	e05b      	b.n	800c5a8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d137      	bne.n	800c56e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2100      	movs	r1, #0
 800c504:	4618      	mov	r0, r3
 800c506:	f002 fbc9 	bl	800ec9c <SDMMC_CmdAppCommand>
 800c50a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d02d      	beq.n	800c56e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c512:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c516:	e047      	b.n	800c5a8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2100      	movs	r1, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f002 fbbc 	bl	800ec9c <SDMMC_CmdAppCommand>
 800c524:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d001      	beq.n	800c530 <SD_PowerON+0x98>
    {
      return errorstate;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	e03b      	b.n	800c5a8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	491e      	ldr	r1, [pc, #120]	; (800c5b0 <SD_PowerON+0x118>)
 800c536:	4618      	mov	r0, r3
 800c538:	f002 fbd2 	bl	800ece0 <SDMMC_CmdAppOperCommand>
 800c53c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c544:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c548:	e02e      	b.n	800c5a8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2100      	movs	r1, #0
 800c550:	4618      	mov	r0, r3
 800c552:	f002 fa37 	bl	800e9c4 <SDIO_GetResponse>
 800c556:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	0fdb      	lsrs	r3, r3, #31
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d101      	bne.n	800c564 <SD_PowerON+0xcc>
 800c560:	2301      	movs	r3, #1
 800c562:	e000      	b.n	800c566 <SD_PowerON+0xce>
 800c564:	2300      	movs	r3, #0
 800c566:	613b      	str	r3, [r7, #16]

    count++;
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	3301      	adds	r3, #1
 800c56c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c574:	4293      	cmp	r3, r2
 800c576:	d802      	bhi.n	800c57e <SD_PowerON+0xe6>
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d0cc      	beq.n	800c518 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c584:	4293      	cmp	r3, r2
 800c586:	d902      	bls.n	800c58e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c58c:	e00c      	b.n	800c5a8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	645a      	str	r2, [r3, #68]	; 0x44
 800c59e:	e002      	b.n	800c5a6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	c1100000 	.word	0xc1100000

0800c5b4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d102      	bne.n	800c5ca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c5c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c5c8:	e018      	b.n	800c5fc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5d2:	041b      	lsls	r3, r3, #16
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	f002 fc46 	bl	800ee68 <SDMMC_CmdSendStatus>
 800c5dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d001      	beq.n	800c5e8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	e009      	b.n	800c5fc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f002 f9e8 	bl	800e9c4 <SDIO_GetResponse>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c60c:	2300      	movs	r3, #0
 800c60e:	60fb      	str	r3, [r7, #12]
 800c610:	2300      	movs	r3, #0
 800c612:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2100      	movs	r1, #0
 800c61a:	4618      	mov	r0, r3
 800c61c:	f002 f9d2 	bl	800e9c4 <SDIO_GetResponse>
 800c620:	4603      	mov	r3, r0
 800c622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c62a:	d102      	bne.n	800c632 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c62c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c630:	e02f      	b.n	800c692 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c632:	f107 030c 	add.w	r3, r7, #12
 800c636:	4619      	mov	r1, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f879 	bl	800c730 <SD_FindSCR>
 800c63e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d001      	beq.n	800c64a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	e023      	b.n	800c692 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c650:	2b00      	cmp	r3, #0
 800c652:	d01c      	beq.n	800c68e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c65c:	041b      	lsls	r3, r3, #16
 800c65e:	4619      	mov	r1, r3
 800c660:	4610      	mov	r0, r2
 800c662:	f002 fb1b 	bl	800ec9c <SDMMC_CmdAppCommand>
 800c666:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d001      	beq.n	800c672 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	e00f      	b.n	800c692 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2102      	movs	r1, #2
 800c678:	4618      	mov	r0, r3
 800c67a:	f002 fb54 	bl	800ed26 <SDMMC_CmdBusWidth>
 800c67e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d001      	beq.n	800c68a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	e003      	b.n	800c692 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c68a:	2300      	movs	r3, #0
 800c68c:	e001      	b.n	800c692 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c68e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c692:	4618      	mov	r0, r3
 800c694:	3718      	adds	r7, #24
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b086      	sub	sp, #24
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	60fb      	str	r3, [r7, #12]
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f002 f987 	bl	800e9c4 <SDIO_GetResponse>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6c0:	d102      	bne.n	800c6c8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c6c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6c6:	e02f      	b.n	800c728 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c6c8:	f107 030c 	add.w	r3, r7, #12
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f82e 	bl	800c730 <SD_FindSCR>
 800c6d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d001      	beq.n	800c6e0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	e023      	b.n	800c728 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d01c      	beq.n	800c724 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f2:	041b      	lsls	r3, r3, #16
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	4610      	mov	r0, r2
 800c6f8:	f002 fad0 	bl	800ec9c <SDMMC_CmdAppCommand>
 800c6fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	e00f      	b.n	800c728 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2100      	movs	r1, #0
 800c70e:	4618      	mov	r0, r3
 800c710:	f002 fb09 	bl	800ed26 <SDMMC_CmdBusWidth>
 800c714:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d001      	beq.n	800c720 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	e003      	b.n	800c728 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c720:	2300      	movs	r3, #0
 800c722:	e001      	b.n	800c728 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c724:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3718      	adds	r7, #24
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c730:	b590      	push	{r4, r7, lr}
 800c732:	b08f      	sub	sp, #60	; 0x3c
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c73a:	f7fb f855 	bl	80077e8 <HAL_GetTick>
 800c73e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c740:	2300      	movs	r3, #0
 800c742:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c744:	2300      	movs	r3, #0
 800c746:	60bb      	str	r3, [r7, #8]
 800c748:	2300      	movs	r3, #0
 800c74a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2108      	movs	r1, #8
 800c756:	4618      	mov	r0, r3
 800c758:	f002 f973 	bl	800ea42 <SDMMC_CmdBlockLength>
 800c75c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c760:	2b00      	cmp	r3, #0
 800c762:	d001      	beq.n	800c768 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	e0b2      	b.n	800c8ce <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c770:	041b      	lsls	r3, r3, #16
 800c772:	4619      	mov	r1, r3
 800c774:	4610      	mov	r0, r2
 800c776:	f002 fa91 	bl	800ec9c <SDMMC_CmdAppCommand>
 800c77a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	e0a3      	b.n	800c8ce <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c786:	f04f 33ff 	mov.w	r3, #4294967295
 800c78a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c78c:	2308      	movs	r3, #8
 800c78e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800c790:	2330      	movs	r3, #48	; 0x30
 800c792:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c794:	2302      	movs	r3, #2
 800c796:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c798:	2300      	movs	r3, #0
 800c79a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800c79c:	2301      	movs	r3, #1
 800c79e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f107 0210 	add.w	r2, r7, #16
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f002 f91d 	bl	800e9ea <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f002 fad8 	bl	800ed6a <SDMMC_CmdSendSCR>
 800c7ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d02a      	beq.n	800c818 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	e083      	b.n	800c8ce <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00f      	beq.n	800c7f4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6819      	ldr	r1, [r3, #0]
 800c7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	f107 0208 	add.w	r2, r7, #8
 800c7e0:	18d4      	adds	r4, r2, r3
 800c7e2:	4608      	mov	r0, r1
 800c7e4:	f002 f87d 	bl	800e8e2 <SDIO_ReadFIFO>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	6023      	str	r3, [r4, #0]
      index++;
 800c7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	637b      	str	r3, [r7, #52]	; 0x34
 800c7f2:	e006      	b.n	800c802 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d012      	beq.n	800c828 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c802:	f7fa fff1 	bl	80077e8 <HAL_GetTick>
 800c806:	4602      	mov	r2, r0
 800c808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c810:	d102      	bne.n	800c818 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c812:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c816:	e05a      	b.n	800c8ce <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c81e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800c822:	2b00      	cmp	r3, #0
 800c824:	d0cf      	beq.n	800c7c6 <SD_FindSCR+0x96>
 800c826:	e000      	b.n	800c82a <SD_FindSCR+0xfa>
      break;
 800c828:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c830:	f003 0308 	and.w	r3, r3, #8
 800c834:	2b00      	cmp	r3, #0
 800c836:	d005      	beq.n	800c844 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2208      	movs	r2, #8
 800c83e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c840:	2308      	movs	r3, #8
 800c842:	e044      	b.n	800c8ce <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c84a:	f003 0302 	and.w	r3, r3, #2
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d005      	beq.n	800c85e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2202      	movs	r2, #2
 800c858:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c85a:	2302      	movs	r3, #2
 800c85c:	e037      	b.n	800c8ce <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c864:	f003 0320 	and.w	r3, r3, #32
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d005      	beq.n	800c878 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2220      	movs	r2, #32
 800c872:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c874:	2320      	movs	r3, #32
 800c876:	e02a      	b.n	800c8ce <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f240 523a 	movw	r2, #1338	; 0x53a
 800c880:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	061a      	lsls	r2, r3, #24
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	021b      	lsls	r3, r3, #8
 800c88a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c88e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	0a1b      	lsrs	r3, r3, #8
 800c894:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c898:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	0e1b      	lsrs	r3, r3, #24
 800c89e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a2:	601a      	str	r2, [r3, #0]
    scr++;
 800c8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	061a      	lsls	r2, r3, #24
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	021b      	lsls	r3, r3, #8
 800c8b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c8b6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	0a1b      	lsrs	r3, r3, #8
 800c8bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c8c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	0e1b      	lsrs	r3, r3, #24
 800c8c6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ca:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	373c      	adds	r7, #60	; 0x3c
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd90      	pop	{r4, r7, pc}

0800c8d6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b086      	sub	sp, #24
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d03f      	beq.n	800c970 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	617b      	str	r3, [r7, #20]
 800c8f4:	e033      	b.n	800c95e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f001 fff1 	bl	800e8e2 <SDIO_ReadFIFO>
 800c900:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	b2da      	uxtb	r2, r3
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3301      	adds	r3, #1
 800c90e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	3b01      	subs	r3, #1
 800c914:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	0a1b      	lsrs	r3, r3, #8
 800c91a:	b2da      	uxtb	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3301      	adds	r3, #1
 800c924:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	3b01      	subs	r3, #1
 800c92a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	0c1b      	lsrs	r3, r3, #16
 800c930:	b2da      	uxtb	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3301      	adds	r3, #1
 800c93a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	3b01      	subs	r3, #1
 800c940:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	0e1b      	lsrs	r3, r3, #24
 800c946:	b2da      	uxtb	r2, r3
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3301      	adds	r3, #1
 800c950:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	3b01      	subs	r3, #1
 800c956:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	3301      	adds	r3, #1
 800c95c:	617b      	str	r3, [r7, #20]
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2b07      	cmp	r3, #7
 800c962:	d9c8      	bls.n	800c8f6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c970:	bf00      	nop
 800c972:	3718      	adds	r7, #24
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b086      	sub	sp, #24
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a1b      	ldr	r3, [r3, #32]
 800c984:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d043      	beq.n	800ca1a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c992:	2300      	movs	r3, #0
 800c994:	617b      	str	r3, [r7, #20]
 800c996:	e037      	b.n	800ca08 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	021a      	lsls	r2, r3, #8
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	041a      	lsls	r2, r3, #16
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	061a      	lsls	r2, r3, #24
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f107 0208 	add.w	r2, r7, #8
 800c9fa:	4611      	mov	r1, r2
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f001 ff7d 	bl	800e8fc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	3301      	adds	r3, #1
 800ca06:	617b      	str	r3, [r7, #20]
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	2b07      	cmp	r3, #7
 800ca0c:	d9c4      	bls.n	800c998 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ca1a:	bf00      	nop
 800ca1c:	3718      	adds	r7, #24
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b082      	sub	sp, #8
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d101      	bne.n	800ca34 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e07b      	b.n	800cb2c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d108      	bne.n	800ca4e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca44:	d009      	beq.n	800ca5a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	61da      	str	r2, [r3, #28]
 800ca4c:	e005      	b.n	800ca5a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d106      	bne.n	800ca7a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f7f5 fa35 	bl	8001ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca90:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800caa2:	431a      	orrs	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800caac:	431a      	orrs	r2, r3
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	f003 0302 	and.w	r3, r3, #2
 800cab6:	431a      	orrs	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	695b      	ldr	r3, [r3, #20]
 800cabc:	f003 0301 	and.w	r3, r3, #1
 800cac0:	431a      	orrs	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800caca:	431a      	orrs	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	69db      	ldr	r3, [r3, #28]
 800cad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cad4:	431a      	orrs	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cade:	ea42 0103 	orr.w	r1, r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cae6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	430a      	orrs	r2, r1
 800caf0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	0c1b      	lsrs	r3, r3, #16
 800caf8:	f003 0104 	and.w	r1, r3, #4
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb00:	f003 0210 	and.w	r2, r3, #16
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	430a      	orrs	r2, r1
 800cb0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	69da      	ldr	r2, [r3, #28]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2201      	movs	r2, #1
 800cb26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b088      	sub	sp, #32
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	603b      	str	r3, [r7, #0]
 800cb40:	4613      	mov	r3, r2
 800cb42:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cb44:	2300      	movs	r3, #0
 800cb46:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d101      	bne.n	800cb56 <HAL_SPI_Transmit+0x22>
 800cb52:	2302      	movs	r3, #2
 800cb54:	e126      	b.n	800cda4 <HAL_SPI_Transmit+0x270>
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cb5e:	f7fa fe43 	bl	80077e8 <HAL_GetTick>
 800cb62:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800cb64:	88fb      	ldrh	r3, [r7, #6]
 800cb66:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d002      	beq.n	800cb7a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800cb74:	2302      	movs	r3, #2
 800cb76:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cb78:	e10b      	b.n	800cd92 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d002      	beq.n	800cb86 <HAL_SPI_Transmit+0x52>
 800cb80:	88fb      	ldrh	r3, [r7, #6]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d102      	bne.n	800cb8c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cb8a:	e102      	b.n	800cd92 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2203      	movs	r2, #3
 800cb90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2200      	movs	r2, #0
 800cb98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	88fa      	ldrh	r2, [r7, #6]
 800cba4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	88fa      	ldrh	r2, [r7, #6]
 800cbaa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbd2:	d10f      	bne.n	800cbf4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbe2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cbf2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbfe:	2b40      	cmp	r3, #64	; 0x40
 800cc00:	d007      	beq.n	800cc12 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc1a:	d14b      	bne.n	800ccb4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <HAL_SPI_Transmit+0xf6>
 800cc24:	8afb      	ldrh	r3, [r7, #22]
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d13e      	bne.n	800cca8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2e:	881a      	ldrh	r2, [r3, #0]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3a:	1c9a      	adds	r2, r3, #2
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	3b01      	subs	r3, #1
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cc4e:	e02b      	b.n	800cca8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	f003 0302 	and.w	r3, r3, #2
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d112      	bne.n	800cc84 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc62:	881a      	ldrh	r2, [r3, #0]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc6e:	1c9a      	adds	r2, r3, #2
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	86da      	strh	r2, [r3, #54]	; 0x36
 800cc82:	e011      	b.n	800cca8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc84:	f7fa fdb0 	bl	80077e8 <HAL_GetTick>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d803      	bhi.n	800cc9c <HAL_SPI_Transmit+0x168>
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9a:	d102      	bne.n	800cca2 <HAL_SPI_Transmit+0x16e>
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d102      	bne.n	800cca8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800cca2:	2303      	movs	r3, #3
 800cca4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cca6:	e074      	b.n	800cd92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1ce      	bne.n	800cc50 <HAL_SPI_Transmit+0x11c>
 800ccb2:	e04c      	b.n	800cd4e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d002      	beq.n	800ccc2 <HAL_SPI_Transmit+0x18e>
 800ccbc:	8afb      	ldrh	r3, [r7, #22]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d140      	bne.n	800cd44 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	330c      	adds	r3, #12
 800cccc:	7812      	ldrb	r2, [r2, #0]
 800ccce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd4:	1c5a      	adds	r2, r3, #1
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	3b01      	subs	r3, #1
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cce8:	e02c      	b.n	800cd44 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	f003 0302 	and.w	r3, r3, #2
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	d113      	bne.n	800cd20 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	330c      	adds	r3, #12
 800cd02:	7812      	ldrb	r2, [r2, #0]
 800cd04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	3b01      	subs	r3, #1
 800cd18:	b29a      	uxth	r2, r3
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	86da      	strh	r2, [r3, #54]	; 0x36
 800cd1e:	e011      	b.n	800cd44 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd20:	f7fa fd62 	bl	80077e8 <HAL_GetTick>
 800cd24:	4602      	mov	r2, r0
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	683a      	ldr	r2, [r7, #0]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d803      	bhi.n	800cd38 <HAL_SPI_Transmit+0x204>
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd36:	d102      	bne.n	800cd3e <HAL_SPI_Transmit+0x20a>
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d102      	bne.n	800cd44 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800cd3e:	2303      	movs	r3, #3
 800cd40:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cd42:	e026      	b.n	800cd92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1cd      	bne.n	800ccea <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cd4e:	69ba      	ldr	r2, [r7, #24]
 800cd50:	6839      	ldr	r1, [r7, #0]
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f000 fd22 	bl	800d79c <SPI_EndRxTxTransaction>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d002      	beq.n	800cd64 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2220      	movs	r2, #32
 800cd62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10a      	bne.n	800cd82 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	613b      	str	r3, [r7, #16]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	613b      	str	r3, [r7, #16]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	613b      	str	r3, [r7, #16]
 800cd80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d002      	beq.n	800cd90 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	77fb      	strb	r3, [r7, #31]
 800cd8e:	e000      	b.n	800cd92 <HAL_SPI_Transmit+0x25e>
  }

error:
 800cd90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cda2:	7ffb      	ldrb	r3, [r7, #31]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3720      	adds	r7, #32
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b088      	sub	sp, #32
 800cdb0:	af02      	add	r7, sp, #8
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	603b      	str	r3, [r7, #0]
 800cdb8:	4613      	mov	r3, r2
 800cdba:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cdc8:	d112      	bne.n	800cdf0 <HAL_SPI_Receive+0x44>
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10e      	bne.n	800cdf0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2204      	movs	r2, #4
 800cdd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800cdda:	88fa      	ldrh	r2, [r7, #6]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	4613      	mov	r3, r2
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	68b9      	ldr	r1, [r7, #8]
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f000 f8f1 	bl	800cfce <HAL_SPI_TransmitReceive>
 800cdec:	4603      	mov	r3, r0
 800cdee:	e0ea      	b.n	800cfc6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d101      	bne.n	800cdfe <HAL_SPI_Receive+0x52>
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	e0e3      	b.n	800cfc6 <HAL_SPI_Receive+0x21a>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce06:	f7fa fcef 	bl	80077e8 <HAL_GetTick>
 800ce0a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d002      	beq.n	800ce1e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ce18:	2302      	movs	r3, #2
 800ce1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ce1c:	e0ca      	b.n	800cfb4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d002      	beq.n	800ce2a <HAL_SPI_Receive+0x7e>
 800ce24:	88fb      	ldrh	r3, [r7, #6]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d102      	bne.n	800ce30 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ce2e:	e0c1      	b.n	800cfb4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2204      	movs	r2, #4
 800ce34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	88fa      	ldrh	r2, [r7, #6]
 800ce48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	88fa      	ldrh	r2, [r7, #6]
 800ce4e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2200      	movs	r2, #0
 800ce54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce76:	d10f      	bne.n	800ce98 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce96:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea2:	2b40      	cmp	r3, #64	; 0x40
 800cea4:	d007      	beq.n	800ceb6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ceb4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d162      	bne.n	800cf84 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cebe:	e02e      	b.n	800cf1e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	f003 0301 	and.w	r3, r3, #1
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d115      	bne.n	800cefa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f103 020c 	add.w	r2, r3, #12
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceda:	7812      	ldrb	r2, [r2, #0]
 800cedc:	b2d2      	uxtb	r2, r2
 800cede:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee4:	1c5a      	adds	r2, r3, #1
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	3b01      	subs	r3, #1
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cef8:	e011      	b.n	800cf1e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cefa:	f7fa fc75 	bl	80077e8 <HAL_GetTick>
 800cefe:	4602      	mov	r2, r0
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	1ad3      	subs	r3, r2, r3
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d803      	bhi.n	800cf12 <HAL_SPI_Receive+0x166>
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf10:	d102      	bne.n	800cf18 <HAL_SPI_Receive+0x16c>
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d102      	bne.n	800cf1e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cf1c:	e04a      	b.n	800cfb4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1cb      	bne.n	800cec0 <HAL_SPI_Receive+0x114>
 800cf28:	e031      	b.n	800cf8e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	f003 0301 	and.w	r3, r3, #1
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d113      	bne.n	800cf60 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	68da      	ldr	r2, [r3, #12]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf42:	b292      	uxth	r2, r2
 800cf44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4a:	1c9a      	adds	r2, r3, #2
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	3b01      	subs	r3, #1
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cf5e:	e011      	b.n	800cf84 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf60:	f7fa fc42 	bl	80077e8 <HAL_GetTick>
 800cf64:	4602      	mov	r2, r0
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	683a      	ldr	r2, [r7, #0]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d803      	bhi.n	800cf78 <HAL_SPI_Receive+0x1cc>
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf76:	d102      	bne.n	800cf7e <HAL_SPI_Receive+0x1d2>
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d102      	bne.n	800cf84 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800cf7e:	2303      	movs	r3, #3
 800cf80:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cf82:	e017      	b.n	800cfb4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1cd      	bne.n	800cf2a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cf8e:	693a      	ldr	r2, [r7, #16]
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f000 fb9c 	bl	800d6d0 <SPI_EndRxTransaction>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d002      	beq.n	800cfa4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2220      	movs	r2, #32
 800cfa2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800cfac:	2301      	movs	r3, #1
 800cfae:	75fb      	strb	r3, [r7, #23]
 800cfb0:	e000      	b.n	800cfb4 <HAL_SPI_Receive+0x208>
  }

error :
 800cfb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cfc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b08c      	sub	sp, #48	; 0x30
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	60f8      	str	r0, [r7, #12]
 800cfd6:	60b9      	str	r1, [r7, #8]
 800cfd8:	607a      	str	r2, [r7, #4]
 800cfda:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d101      	bne.n	800cff4 <HAL_SPI_TransmitReceive+0x26>
 800cff0:	2302      	movs	r3, #2
 800cff2:	e18a      	b.n	800d30a <HAL_SPI_TransmitReceive+0x33c>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cffc:	f7fa fbf4 	bl	80077e8 <HAL_GetTick>
 800d000:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d012:	887b      	ldrh	r3, [r7, #2]
 800d014:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d016:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d00f      	beq.n	800d03e <HAL_SPI_TransmitReceive+0x70>
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d024:	d107      	bne.n	800d036 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d103      	bne.n	800d036 <HAL_SPI_TransmitReceive+0x68>
 800d02e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d032:	2b04      	cmp	r3, #4
 800d034:	d003      	beq.n	800d03e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d036:	2302      	movs	r3, #2
 800d038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d03c:	e15b      	b.n	800d2f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d005      	beq.n	800d050 <HAL_SPI_TransmitReceive+0x82>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <HAL_SPI_TransmitReceive+0x82>
 800d04a:	887b      	ldrh	r3, [r7, #2]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d103      	bne.n	800d058 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d050:	2301      	movs	r3, #1
 800d052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d056:	e14e      	b.n	800d2f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	2b04      	cmp	r3, #4
 800d062:	d003      	beq.n	800d06c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2205      	movs	r2, #5
 800d068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	887a      	ldrh	r2, [r7, #2]
 800d07c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	887a      	ldrh	r2, [r7, #2]
 800d082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	887a      	ldrh	r2, [r7, #2]
 800d08e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	887a      	ldrh	r2, [r7, #2]
 800d094:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2200      	movs	r2, #0
 800d09a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ac:	2b40      	cmp	r3, #64	; 0x40
 800d0ae:	d007      	beq.n	800d0c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0c8:	d178      	bne.n	800d1bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d002      	beq.n	800d0d8 <HAL_SPI_TransmitReceive+0x10a>
 800d0d2:	8b7b      	ldrh	r3, [r7, #26]
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d166      	bne.n	800d1a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0dc:	881a      	ldrh	r2, [r3, #0]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e8:	1c9a      	adds	r2, r3, #2
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	3b01      	subs	r3, #1
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d0fc:	e053      	b.n	800d1a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	f003 0302 	and.w	r3, r3, #2
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d11b      	bne.n	800d144 <HAL_SPI_TransmitReceive+0x176>
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d110:	b29b      	uxth	r3, r3
 800d112:	2b00      	cmp	r3, #0
 800d114:	d016      	beq.n	800d144 <HAL_SPI_TransmitReceive+0x176>
 800d116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d113      	bne.n	800d144 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d120:	881a      	ldrh	r2, [r3, #0]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d12c:	1c9a      	adds	r2, r3, #2
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d136:	b29b      	uxth	r3, r3
 800d138:	3b01      	subs	r3, #1
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d140:	2300      	movs	r3, #0
 800d142:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	f003 0301 	and.w	r3, r3, #1
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d119      	bne.n	800d186 <HAL_SPI_TransmitReceive+0x1b8>
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d156:	b29b      	uxth	r3, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d014      	beq.n	800d186 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68da      	ldr	r2, [r3, #12]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d166:	b292      	uxth	r2, r2
 800d168:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16e:	1c9a      	adds	r2, r3, #2
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d178:	b29b      	uxth	r3, r3
 800d17a:	3b01      	subs	r3, #1
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d182:	2301      	movs	r3, #1
 800d184:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d186:	f7fa fb2f 	bl	80077e8 <HAL_GetTick>
 800d18a:	4602      	mov	r2, r0
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d192:	429a      	cmp	r2, r3
 800d194:	d807      	bhi.n	800d1a6 <HAL_SPI_TransmitReceive+0x1d8>
 800d196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19c:	d003      	beq.n	800d1a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d1a4:	e0a7      	b.n	800d2f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d1a6      	bne.n	800d0fe <HAL_SPI_TransmitReceive+0x130>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1a1      	bne.n	800d0fe <HAL_SPI_TransmitReceive+0x130>
 800d1ba:	e07c      	b.n	800d2b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d002      	beq.n	800d1ca <HAL_SPI_TransmitReceive+0x1fc>
 800d1c4:	8b7b      	ldrh	r3, [r7, #26]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d16b      	bne.n	800d2a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	330c      	adds	r3, #12
 800d1d4:	7812      	ldrb	r2, [r2, #0]
 800d1d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1dc:	1c5a      	adds	r2, r3, #1
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d1f0:	e057      	b.n	800d2a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	f003 0302 	and.w	r3, r3, #2
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d11c      	bne.n	800d23a <HAL_SPI_TransmitReceive+0x26c>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d204:	b29b      	uxth	r3, r3
 800d206:	2b00      	cmp	r3, #0
 800d208:	d017      	beq.n	800d23a <HAL_SPI_TransmitReceive+0x26c>
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d114      	bne.n	800d23a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	330c      	adds	r3, #12
 800d21a:	7812      	ldrb	r2, [r2, #0]
 800d21c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d222:	1c5a      	adds	r2, r3, #1
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	3b01      	subs	r3, #1
 800d230:	b29a      	uxth	r2, r3
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d236:	2300      	movs	r3, #0
 800d238:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	f003 0301 	and.w	r3, r3, #1
 800d244:	2b01      	cmp	r3, #1
 800d246:	d119      	bne.n	800d27c <HAL_SPI_TransmitReceive+0x2ae>
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d014      	beq.n	800d27c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	68da      	ldr	r2, [r3, #12]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d25c:	b2d2      	uxtb	r2, r2
 800d25e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d264:	1c5a      	adds	r2, r3, #1
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d26e:	b29b      	uxth	r3, r3
 800d270:	3b01      	subs	r3, #1
 800d272:	b29a      	uxth	r2, r3
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d278:	2301      	movs	r3, #1
 800d27a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d27c:	f7fa fab4 	bl	80077e8 <HAL_GetTick>
 800d280:	4602      	mov	r2, r0
 800d282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d288:	429a      	cmp	r2, r3
 800d28a:	d803      	bhi.n	800d294 <HAL_SPI_TransmitReceive+0x2c6>
 800d28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d292:	d102      	bne.n	800d29a <HAL_SPI_TransmitReceive+0x2cc>
 800d294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d296:	2b00      	cmp	r3, #0
 800d298:	d103      	bne.n	800d2a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d29a:	2303      	movs	r3, #3
 800d29c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d2a0:	e029      	b.n	800d2f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1a2      	bne.n	800d1f2 <HAL_SPI_TransmitReceive+0x224>
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d19d      	bne.n	800d1f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f000 fa6e 	bl	800d79c <SPI_EndRxTxTransaction>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d006      	beq.n	800d2d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2220      	movs	r2, #32
 800d2d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d2d2:	e010      	b.n	800d2f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d10b      	bne.n	800d2f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2dc:	2300      	movs	r3, #0
 800d2de:	617b      	str	r3, [r7, #20]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	617b      	str	r3, [r7, #20]
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	617b      	str	r3, [r7, #20]
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	e000      	b.n	800d2f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d2f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3730      	adds	r7, #48	; 0x30
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
	...

0800d314 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b086      	sub	sp, #24
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	4613      	mov	r3, r2
 800d320:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d322:	2300      	movs	r3, #0
 800d324:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d101      	bne.n	800d334 <HAL_SPI_Transmit_DMA+0x20>
 800d330:	2302      	movs	r3, #2
 800d332:	e09b      	b.n	800d46c <HAL_SPI_Transmit_DMA+0x158>
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d342:	b2db      	uxtb	r3, r3
 800d344:	2b01      	cmp	r3, #1
 800d346:	d002      	beq.n	800d34e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800d348:	2302      	movs	r3, #2
 800d34a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d34c:	e089      	b.n	800d462 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d002      	beq.n	800d35a <HAL_SPI_Transmit_DMA+0x46>
 800d354:	88fb      	ldrh	r3, [r7, #6]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d102      	bne.n	800d360 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800d35a:	2301      	movs	r3, #1
 800d35c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d35e:	e080      	b.n	800d462 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2203      	movs	r2, #3
 800d364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2200      	movs	r2, #0
 800d36c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	68ba      	ldr	r2, [r7, #8]
 800d372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	88fa      	ldrh	r2, [r7, #6]
 800d378:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	88fa      	ldrh	r2, [r7, #6]
 800d37e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2200      	movs	r2, #0
 800d384:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2200      	movs	r2, #0
 800d390:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2200      	movs	r2, #0
 800d39c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3a6:	d10f      	bne.n	800d3c8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d3c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3cc:	4a29      	ldr	r2, [pc, #164]	; (800d474 <HAL_SPI_Transmit_DMA+0x160>)
 800d3ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3d4:	4a28      	ldr	r2, [pc, #160]	; (800d478 <HAL_SPI_Transmit_DMA+0x164>)
 800d3d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3dc:	4a27      	ldr	r2, [pc, #156]	; (800d47c <HAL_SPI_Transmit_DMA+0x168>)
 800d3de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	330c      	adds	r3, #12
 800d3f8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d3fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d400:	f7fb f81c 	bl	800843c <HAL_DMA_Start_IT>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00c      	beq.n	800d424 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d40e:	f043 0210 	orr.w	r2, r3, #16
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800d416:	2301      	movs	r3, #1
 800d418:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800d422:	e01e      	b.n	800d462 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d42e:	2b40      	cmp	r3, #64	; 0x40
 800d430:	d007      	beq.n	800d442 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d440:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	685a      	ldr	r2, [r3, #4]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f042 0220 	orr.w	r2, r2, #32
 800d450:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	685a      	ldr	r2, [r3, #4]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f042 0202 	orr.w	r2, r2, #2
 800d460:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3718      	adds	r7, #24
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	0800d565 	.word	0x0800d565
 800d478:	0800d4bd 	.word	0x0800d4bd
 800d47c:	0800d581 	.word	0x0800d581

0800d480 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b086      	sub	sp, #24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d4ca:	f7fa f98d 	bl	80077e8 <HAL_GetTick>
 800d4ce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4de:	d03b      	beq.n	800d558 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	685a      	ldr	r2, [r3, #4]
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f022 0220 	bic.w	r2, r2, #32
 800d4ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	685a      	ldr	r2, [r3, #4]
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f022 0202 	bic.w	r2, r2, #2
 800d4fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d500:	693a      	ldr	r2, [r7, #16]
 800d502:	2164      	movs	r1, #100	; 0x64
 800d504:	6978      	ldr	r0, [r7, #20]
 800d506:	f000 f949 	bl	800d79c <SPI_EndRxTxTransaction>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d005      	beq.n	800d51c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d514:	f043 0220 	orr.w	r2, r3, #32
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10a      	bne.n	800d53a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d524:	2300      	movs	r3, #0
 800d526:	60fb      	str	r3, [r7, #12]
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	60fb      	str	r3, [r7, #12]
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	60fb      	str	r3, [r7, #12]
 800d538:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	2200      	movs	r2, #0
 800d53e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	2201      	movs	r2, #1
 800d544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d003      	beq.n	800d558 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d550:	6978      	ldr	r0, [r7, #20]
 800d552:	f7ff ffa9 	bl	800d4a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d556:	e002      	b.n	800d55e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d558:	6978      	ldr	r0, [r7, #20]
 800d55a:	f7ff ff91 	bl	800d480 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d55e:	3718      	adds	r7, #24
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d570:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f7ff ff8e 	bl	800d494 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d578:	bf00      	nop
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d58c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f022 0203 	bic.w	r2, r2, #3
 800d59c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5a2:	f043 0210 	orr.w	r2, r3, #16
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	f7ff ff78 	bl	800d4a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d5b8:	bf00      	nop
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b088      	sub	sp, #32
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	603b      	str	r3, [r7, #0]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d5d0:	f7fa f90a 	bl	80077e8 <HAL_GetTick>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d8:	1a9b      	subs	r3, r3, r2
 800d5da:	683a      	ldr	r2, [r7, #0]
 800d5dc:	4413      	add	r3, r2
 800d5de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d5e0:	f7fa f902 	bl	80077e8 <HAL_GetTick>
 800d5e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d5e6:	4b39      	ldr	r3, [pc, #228]	; (800d6cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	015b      	lsls	r3, r3, #5
 800d5ec:	0d1b      	lsrs	r3, r3, #20
 800d5ee:	69fa      	ldr	r2, [r7, #28]
 800d5f0:	fb02 f303 	mul.w	r3, r2, r3
 800d5f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d5f6:	e054      	b.n	800d6a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5fe:	d050      	beq.n	800d6a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d600:	f7fa f8f2 	bl	80077e8 <HAL_GetTick>
 800d604:	4602      	mov	r2, r0
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	69fa      	ldr	r2, [r7, #28]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d902      	bls.n	800d616 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d13d      	bne.n	800d692 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	685a      	ldr	r2, [r3, #4]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d624:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d62e:	d111      	bne.n	800d654 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d638:	d004      	beq.n	800d644 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d642:	d107      	bne.n	800d654 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d652:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d65c:	d10f      	bne.n	800d67e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d66c:	601a      	str	r2, [r3, #0]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d67c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2201      	movs	r2, #1
 800d682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d68e:	2303      	movs	r3, #3
 800d690:	e017      	b.n	800d6c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d101      	bne.n	800d69c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d698:	2300      	movs	r3, #0
 800d69a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	689a      	ldr	r2, [r3, #8]
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	68ba      	ldr	r2, [r7, #8]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	bf0c      	ite	eq
 800d6b2:	2301      	moveq	r3, #1
 800d6b4:	2300      	movne	r3, #0
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	79fb      	ldrb	r3, [r7, #7]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d19b      	bne.n	800d5f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3720      	adds	r7, #32
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	20000000 	.word	0x20000000

0800d6d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af02      	add	r7, sp, #8
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d6e4:	d111      	bne.n	800d70a <SPI_EndRxTransaction+0x3a>
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6ee:	d004      	beq.n	800d6fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6f8:	d107      	bne.n	800d70a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d708:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d712:	d12a      	bne.n	800d76a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d71c:	d012      	beq.n	800d744 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	2200      	movs	r2, #0
 800d726:	2180      	movs	r1, #128	; 0x80
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f7ff ff49 	bl	800d5c0 <SPI_WaitFlagStateUntilTimeout>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d02d      	beq.n	800d790 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d738:	f043 0220 	orr.w	r2, r3, #32
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d740:	2303      	movs	r3, #3
 800d742:	e026      	b.n	800d792 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	2200      	movs	r2, #0
 800d74c:	2101      	movs	r1, #1
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f7ff ff36 	bl	800d5c0 <SPI_WaitFlagStateUntilTimeout>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d01a      	beq.n	800d790 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d75e:	f043 0220 	orr.w	r2, r3, #32
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d766:	2303      	movs	r3, #3
 800d768:	e013      	b.n	800d792 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	2200      	movs	r2, #0
 800d772:	2101      	movs	r1, #1
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f7ff ff23 	bl	800d5c0 <SPI_WaitFlagStateUntilTimeout>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d007      	beq.n	800d790 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d784:	f043 0220 	orr.w	r2, r3, #32
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d78c:	2303      	movs	r3, #3
 800d78e:	e000      	b.n	800d792 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
	...

0800d79c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b088      	sub	sp, #32
 800d7a0:	af02      	add	r7, sp, #8
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d7a8:	4b1b      	ldr	r3, [pc, #108]	; (800d818 <SPI_EndRxTxTransaction+0x7c>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a1b      	ldr	r2, [pc, #108]	; (800d81c <SPI_EndRxTxTransaction+0x80>)
 800d7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d7b2:	0d5b      	lsrs	r3, r3, #21
 800d7b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d7b8:	fb02 f303 	mul.w	r3, r2, r3
 800d7bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d7c6:	d112      	bne.n	800d7ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	2180      	movs	r1, #128	; 0x80
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f7ff fef4 	bl	800d5c0 <SPI_WaitFlagStateUntilTimeout>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d016      	beq.n	800d80c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7e2:	f043 0220 	orr.w	r2, r3, #32
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d7ea:	2303      	movs	r3, #3
 800d7ec:	e00f      	b.n	800d80e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00a      	beq.n	800d80a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d804:	2b80      	cmp	r3, #128	; 0x80
 800d806:	d0f2      	beq.n	800d7ee <SPI_EndRxTxTransaction+0x52>
 800d808:	e000      	b.n	800d80c <SPI_EndRxTxTransaction+0x70>
        break;
 800d80a:	bf00      	nop
  }

  return HAL_OK;
 800d80c:	2300      	movs	r3, #0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	20000000 	.word	0x20000000
 800d81c:	165e9f81 	.word	0x165e9f81

0800d820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d101      	bne.n	800d832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	e041      	b.n	800d8b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2200      	movs	r2, #0
 800d842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7f4 fe78 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2202      	movs	r2, #2
 800d850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	3304      	adds	r3, #4
 800d85c:	4619      	mov	r1, r3
 800d85e:	4610      	mov	r0, r2
 800d860:	f000 fab6 	bl	800ddd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2201      	movs	r2, #1
 800d868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2201      	movs	r2, #1
 800d878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2201      	movs	r2, #1
 800d880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2201      	movs	r2, #1
 800d888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2201      	movs	r2, #1
 800d890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
	...

0800d8c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d001      	beq.n	800d8d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	e044      	b.n	800d962 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2202      	movs	r2, #2
 800d8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	68da      	ldr	r2, [r3, #12]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f042 0201 	orr.w	r2, r2, #1
 800d8ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a1e      	ldr	r2, [pc, #120]	; (800d970 <HAL_TIM_Base_Start_IT+0xb0>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d018      	beq.n	800d92c <HAL_TIM_Base_Start_IT+0x6c>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d902:	d013      	beq.n	800d92c <HAL_TIM_Base_Start_IT+0x6c>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a1a      	ldr	r2, [pc, #104]	; (800d974 <HAL_TIM_Base_Start_IT+0xb4>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d00e      	beq.n	800d92c <HAL_TIM_Base_Start_IT+0x6c>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4a19      	ldr	r2, [pc, #100]	; (800d978 <HAL_TIM_Base_Start_IT+0xb8>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d009      	beq.n	800d92c <HAL_TIM_Base_Start_IT+0x6c>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a17      	ldr	r2, [pc, #92]	; (800d97c <HAL_TIM_Base_Start_IT+0xbc>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d004      	beq.n	800d92c <HAL_TIM_Base_Start_IT+0x6c>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a16      	ldr	r2, [pc, #88]	; (800d980 <HAL_TIM_Base_Start_IT+0xc0>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d111      	bne.n	800d950 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	f003 0307 	and.w	r3, r3, #7
 800d936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b06      	cmp	r3, #6
 800d93c:	d010      	beq.n	800d960 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f042 0201 	orr.w	r2, r2, #1
 800d94c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d94e:	e007      	b.n	800d960 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f042 0201 	orr.w	r2, r2, #1
 800d95e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3714      	adds	r7, #20
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	40010000 	.word	0x40010000
 800d974:	40000400 	.word	0x40000400
 800d978:	40000800 	.word	0x40000800
 800d97c:	40000c00 	.word	0x40000c00
 800d980:	40014000 	.word	0x40014000

0800d984 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68da      	ldr	r2, [r3, #12]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f022 0201 	bic.w	r2, r2, #1
 800d99a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	6a1a      	ldr	r2, [r3, #32]
 800d9a2:	f241 1311 	movw	r3, #4369	; 0x1111
 800d9a6:	4013      	ands	r3, r2
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10f      	bne.n	800d9cc <HAL_TIM_Base_Stop_IT+0x48>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	6a1a      	ldr	r2, [r3, #32]
 800d9b2:	f240 4344 	movw	r3, #1092	; 0x444
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d107      	bne.n	800d9cc <HAL_TIM_Base_Stop_IT+0x48>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f022 0201 	bic.w	r2, r2, #1
 800d9ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	370c      	adds	r7, #12
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr

0800d9e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	691b      	ldr	r3, [r3, #16]
 800d9f0:	f003 0302 	and.w	r3, r3, #2
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d122      	bne.n	800da3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	f003 0302 	and.w	r3, r3, #2
 800da02:	2b02      	cmp	r3, #2
 800da04:	d11b      	bne.n	800da3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f06f 0202 	mvn.w	r2, #2
 800da0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	f003 0303 	and.w	r3, r3, #3
 800da20:	2b00      	cmp	r3, #0
 800da22:	d003      	beq.n	800da2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f000 f9b5 	bl	800dd94 <HAL_TIM_IC_CaptureCallback>
 800da2a:	e005      	b.n	800da38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 f9a7 	bl	800dd80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f9b8 	bl	800dda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	691b      	ldr	r3, [r3, #16]
 800da44:	f003 0304 	and.w	r3, r3, #4
 800da48:	2b04      	cmp	r3, #4
 800da4a:	d122      	bne.n	800da92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	f003 0304 	and.w	r3, r3, #4
 800da56:	2b04      	cmp	r3, #4
 800da58:	d11b      	bne.n	800da92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f06f 0204 	mvn.w	r2, #4
 800da62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2202      	movs	r2, #2
 800da68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	699b      	ldr	r3, [r3, #24]
 800da70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da74:	2b00      	cmp	r3, #0
 800da76:	d003      	beq.n	800da80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f98b 	bl	800dd94 <HAL_TIM_IC_CaptureCallback>
 800da7e:	e005      	b.n	800da8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 f97d 	bl	800dd80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 f98e 	bl	800dda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	f003 0308 	and.w	r3, r3, #8
 800da9c:	2b08      	cmp	r3, #8
 800da9e:	d122      	bne.n	800dae6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	f003 0308 	and.w	r3, r3, #8
 800daaa:	2b08      	cmp	r3, #8
 800daac:	d11b      	bne.n	800dae6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f06f 0208 	mvn.w	r2, #8
 800dab6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2204      	movs	r2, #4
 800dabc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	69db      	ldr	r3, [r3, #28]
 800dac4:	f003 0303 	and.w	r3, r3, #3
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d003      	beq.n	800dad4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 f961 	bl	800dd94 <HAL_TIM_IC_CaptureCallback>
 800dad2:	e005      	b.n	800dae0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f000 f953 	bl	800dd80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 f964 	bl	800dda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	691b      	ldr	r3, [r3, #16]
 800daec:	f003 0310 	and.w	r3, r3, #16
 800daf0:	2b10      	cmp	r3, #16
 800daf2:	d122      	bne.n	800db3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	f003 0310 	and.w	r3, r3, #16
 800dafe:	2b10      	cmp	r3, #16
 800db00:	d11b      	bne.n	800db3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f06f 0210 	mvn.w	r2, #16
 800db0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2208      	movs	r2, #8
 800db10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	69db      	ldr	r3, [r3, #28]
 800db18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d003      	beq.n	800db28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f937 	bl	800dd94 <HAL_TIM_IC_CaptureCallback>
 800db26:	e005      	b.n	800db34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f929 	bl	800dd80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f93a 	bl	800dda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	f003 0301 	and.w	r3, r3, #1
 800db44:	2b01      	cmp	r3, #1
 800db46:	d10e      	bne.n	800db66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	f003 0301 	and.w	r3, r3, #1
 800db52:	2b01      	cmp	r3, #1
 800db54:	d107      	bne.n	800db66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f06f 0201 	mvn.w	r2, #1
 800db5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7f4 f823 	bl	8001bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db70:	2b80      	cmp	r3, #128	; 0x80
 800db72:	d10e      	bne.n	800db92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db7e:	2b80      	cmp	r3, #128	; 0x80
 800db80:	d107      	bne.n	800db92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800db8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f000 fab1 	bl	800e0f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db9c:	2b40      	cmp	r3, #64	; 0x40
 800db9e:	d10e      	bne.n	800dbbe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbaa:	2b40      	cmp	r3, #64	; 0x40
 800dbac:	d107      	bne.n	800dbbe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dbb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 f8ff 	bl	800ddbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	f003 0320 	and.w	r3, r3, #32
 800dbc8:	2b20      	cmp	r3, #32
 800dbca:	d10e      	bne.n	800dbea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	f003 0320 	and.w	r3, r3, #32
 800dbd6:	2b20      	cmp	r3, #32
 800dbd8:	d107      	bne.n	800dbea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f06f 0220 	mvn.w	r2, #32
 800dbe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 fa7b 	bl	800e0e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dbea:	bf00      	nop
 800dbec:	3708      	adds	r7, #8
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b084      	sub	sp, #16
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
 800dbfa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d101      	bne.n	800dc0e <HAL_TIM_ConfigClockSource+0x1c>
 800dc0a:	2302      	movs	r3, #2
 800dc0c:	e0b4      	b.n	800dd78 <HAL_TIM_ConfigClockSource+0x186>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2201      	movs	r2, #1
 800dc12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2202      	movs	r2, #2
 800dc1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800dc2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	68ba      	ldr	r2, [r7, #8]
 800dc3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc46:	d03e      	beq.n	800dcc6 <HAL_TIM_ConfigClockSource+0xd4>
 800dc48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc4c:	f200 8087 	bhi.w	800dd5e <HAL_TIM_ConfigClockSource+0x16c>
 800dc50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc54:	f000 8086 	beq.w	800dd64 <HAL_TIM_ConfigClockSource+0x172>
 800dc58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc5c:	d87f      	bhi.n	800dd5e <HAL_TIM_ConfigClockSource+0x16c>
 800dc5e:	2b70      	cmp	r3, #112	; 0x70
 800dc60:	d01a      	beq.n	800dc98 <HAL_TIM_ConfigClockSource+0xa6>
 800dc62:	2b70      	cmp	r3, #112	; 0x70
 800dc64:	d87b      	bhi.n	800dd5e <HAL_TIM_ConfigClockSource+0x16c>
 800dc66:	2b60      	cmp	r3, #96	; 0x60
 800dc68:	d050      	beq.n	800dd0c <HAL_TIM_ConfigClockSource+0x11a>
 800dc6a:	2b60      	cmp	r3, #96	; 0x60
 800dc6c:	d877      	bhi.n	800dd5e <HAL_TIM_ConfigClockSource+0x16c>
 800dc6e:	2b50      	cmp	r3, #80	; 0x50
 800dc70:	d03c      	beq.n	800dcec <HAL_TIM_ConfigClockSource+0xfa>
 800dc72:	2b50      	cmp	r3, #80	; 0x50
 800dc74:	d873      	bhi.n	800dd5e <HAL_TIM_ConfigClockSource+0x16c>
 800dc76:	2b40      	cmp	r3, #64	; 0x40
 800dc78:	d058      	beq.n	800dd2c <HAL_TIM_ConfigClockSource+0x13a>
 800dc7a:	2b40      	cmp	r3, #64	; 0x40
 800dc7c:	d86f      	bhi.n	800dd5e <HAL_TIM_ConfigClockSource+0x16c>
 800dc7e:	2b30      	cmp	r3, #48	; 0x30
 800dc80:	d064      	beq.n	800dd4c <HAL_TIM_ConfigClockSource+0x15a>
 800dc82:	2b30      	cmp	r3, #48	; 0x30
 800dc84:	d86b      	bhi.n	800dd5e <HAL_TIM_ConfigClockSource+0x16c>
 800dc86:	2b20      	cmp	r3, #32
 800dc88:	d060      	beq.n	800dd4c <HAL_TIM_ConfigClockSource+0x15a>
 800dc8a:	2b20      	cmp	r3, #32
 800dc8c:	d867      	bhi.n	800dd5e <HAL_TIM_ConfigClockSource+0x16c>
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d05c      	beq.n	800dd4c <HAL_TIM_ConfigClockSource+0x15a>
 800dc92:	2b10      	cmp	r3, #16
 800dc94:	d05a      	beq.n	800dd4c <HAL_TIM_ConfigClockSource+0x15a>
 800dc96:	e062      	b.n	800dd5e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6818      	ldr	r0, [r3, #0]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	6899      	ldr	r1, [r3, #8]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	685a      	ldr	r2, [r3, #4]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	f000 f98c 	bl	800dfc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dcba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	609a      	str	r2, [r3, #8]
      break;
 800dcc4:	e04f      	b.n	800dd66 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6818      	ldr	r0, [r3, #0]
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	6899      	ldr	r1, [r3, #8]
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	685a      	ldr	r2, [r3, #4]
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	f000 f975 	bl	800dfc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	689a      	ldr	r2, [r3, #8]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dce8:	609a      	str	r2, [r3, #8]
      break;
 800dcea:	e03c      	b.n	800dd66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6818      	ldr	r0, [r3, #0]
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	6859      	ldr	r1, [r3, #4]
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	f000 f8e9 	bl	800ded0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2150      	movs	r1, #80	; 0x50
 800dd04:	4618      	mov	r0, r3
 800dd06:	f000 f942 	bl	800df8e <TIM_ITRx_SetConfig>
      break;
 800dd0a:	e02c      	b.n	800dd66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6818      	ldr	r0, [r3, #0]
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	6859      	ldr	r1, [r3, #4]
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	461a      	mov	r2, r3
 800dd1a:	f000 f908 	bl	800df2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2160      	movs	r1, #96	; 0x60
 800dd24:	4618      	mov	r0, r3
 800dd26:	f000 f932 	bl	800df8e <TIM_ITRx_SetConfig>
      break;
 800dd2a:	e01c      	b.n	800dd66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6818      	ldr	r0, [r3, #0]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	6859      	ldr	r1, [r3, #4]
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	461a      	mov	r2, r3
 800dd3a:	f000 f8c9 	bl	800ded0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2140      	movs	r1, #64	; 0x40
 800dd44:	4618      	mov	r0, r3
 800dd46:	f000 f922 	bl	800df8e <TIM_ITRx_SetConfig>
      break;
 800dd4a:	e00c      	b.n	800dd66 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4619      	mov	r1, r3
 800dd56:	4610      	mov	r0, r2
 800dd58:	f000 f919 	bl	800df8e <TIM_ITRx_SetConfig>
      break;
 800dd5c:	e003      	b.n	800dd66 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	73fb      	strb	r3, [r7, #15]
      break;
 800dd62:	e000      	b.n	800dd66 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800dd64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2201      	movs	r2, #1
 800dd6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd88:	bf00      	nop
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dd9c:	bf00      	nop
 800dd9e:	370c      	adds	r7, #12
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddb0:	bf00      	nop
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ddc4:	bf00      	nop
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b085      	sub	sp, #20
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	4a34      	ldr	r2, [pc, #208]	; (800deb4 <TIM_Base_SetConfig+0xe4>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d00f      	beq.n	800de08 <TIM_Base_SetConfig+0x38>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddee:	d00b      	beq.n	800de08 <TIM_Base_SetConfig+0x38>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	4a31      	ldr	r2, [pc, #196]	; (800deb8 <TIM_Base_SetConfig+0xe8>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d007      	beq.n	800de08 <TIM_Base_SetConfig+0x38>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4a30      	ldr	r2, [pc, #192]	; (800debc <TIM_Base_SetConfig+0xec>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d003      	beq.n	800de08 <TIM_Base_SetConfig+0x38>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4a2f      	ldr	r2, [pc, #188]	; (800dec0 <TIM_Base_SetConfig+0xf0>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d108      	bne.n	800de1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	4313      	orrs	r3, r2
 800de18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4a25      	ldr	r2, [pc, #148]	; (800deb4 <TIM_Base_SetConfig+0xe4>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d01b      	beq.n	800de5a <TIM_Base_SetConfig+0x8a>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de28:	d017      	beq.n	800de5a <TIM_Base_SetConfig+0x8a>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4a22      	ldr	r2, [pc, #136]	; (800deb8 <TIM_Base_SetConfig+0xe8>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d013      	beq.n	800de5a <TIM_Base_SetConfig+0x8a>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4a21      	ldr	r2, [pc, #132]	; (800debc <TIM_Base_SetConfig+0xec>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d00f      	beq.n	800de5a <TIM_Base_SetConfig+0x8a>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a20      	ldr	r2, [pc, #128]	; (800dec0 <TIM_Base_SetConfig+0xf0>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d00b      	beq.n	800de5a <TIM_Base_SetConfig+0x8a>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a1f      	ldr	r2, [pc, #124]	; (800dec4 <TIM_Base_SetConfig+0xf4>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d007      	beq.n	800de5a <TIM_Base_SetConfig+0x8a>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4a1e      	ldr	r2, [pc, #120]	; (800dec8 <TIM_Base_SetConfig+0xf8>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d003      	beq.n	800de5a <TIM_Base_SetConfig+0x8a>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4a1d      	ldr	r2, [pc, #116]	; (800decc <TIM_Base_SetConfig+0xfc>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d108      	bne.n	800de6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	4313      	orrs	r3, r2
 800de6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	695b      	ldr	r3, [r3, #20]
 800de76:	4313      	orrs	r3, r2
 800de78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	68fa      	ldr	r2, [r7, #12]
 800de7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	689a      	ldr	r2, [r3, #8]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	4a08      	ldr	r2, [pc, #32]	; (800deb4 <TIM_Base_SetConfig+0xe4>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d103      	bne.n	800dea0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	691a      	ldr	r2, [r3, #16]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	615a      	str	r2, [r3, #20]
}
 800dea6:	bf00      	nop
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	40010000 	.word	0x40010000
 800deb8:	40000400 	.word	0x40000400
 800debc:	40000800 	.word	0x40000800
 800dec0:	40000c00 	.word	0x40000c00
 800dec4:	40014000 	.word	0x40014000
 800dec8:	40014400 	.word	0x40014400
 800decc:	40014800 	.word	0x40014800

0800ded0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b087      	sub	sp, #28
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	6a1b      	ldr	r3, [r3, #32]
 800dee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	6a1b      	ldr	r3, [r3, #32]
 800dee6:	f023 0201 	bic.w	r2, r3, #1
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	699b      	ldr	r3, [r3, #24]
 800def2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800defa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	011b      	lsls	r3, r3, #4
 800df00:	693a      	ldr	r2, [r7, #16]
 800df02:	4313      	orrs	r3, r2
 800df04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	f023 030a 	bic.w	r3, r3, #10
 800df0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800df0e:	697a      	ldr	r2, [r7, #20]
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	4313      	orrs	r3, r2
 800df14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	693a      	ldr	r2, [r7, #16]
 800df1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	697a      	ldr	r2, [r7, #20]
 800df20:	621a      	str	r2, [r3, #32]
}
 800df22:	bf00      	nop
 800df24:	371c      	adds	r7, #28
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df2e:	b480      	push	{r7}
 800df30:	b087      	sub	sp, #28
 800df32:	af00      	add	r7, sp, #0
 800df34:	60f8      	str	r0, [r7, #12]
 800df36:	60b9      	str	r1, [r7, #8]
 800df38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6a1b      	ldr	r3, [r3, #32]
 800df3e:	f023 0210 	bic.w	r2, r3, #16
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	699b      	ldr	r3, [r3, #24]
 800df4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6a1b      	ldr	r3, [r3, #32]
 800df50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	031b      	lsls	r3, r3, #12
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	4313      	orrs	r3, r2
 800df62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800df6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	011b      	lsls	r3, r3, #4
 800df70:	693a      	ldr	r2, [r7, #16]
 800df72:	4313      	orrs	r3, r2
 800df74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	697a      	ldr	r2, [r7, #20]
 800df7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	621a      	str	r2, [r3, #32]
}
 800df82:	bf00      	nop
 800df84:	371c      	adds	r7, #28
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800df8e:	b480      	push	{r7}
 800df90:	b085      	sub	sp, #20
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
 800df96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dfa6:	683a      	ldr	r2, [r7, #0]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	f043 0307 	orr.w	r3, r3, #7
 800dfb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	609a      	str	r2, [r3, #8]
}
 800dfb8:	bf00      	nop
 800dfba:	3714      	adds	r7, #20
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b087      	sub	sp, #28
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
 800dfd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dfde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	021a      	lsls	r2, r3, #8
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	431a      	orrs	r2, r3
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	4313      	orrs	r3, r2
 800dfec:	697a      	ldr	r2, [r7, #20]
 800dfee:	4313      	orrs	r3, r2
 800dff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	697a      	ldr	r2, [r7, #20]
 800dff6:	609a      	str	r2, [r3, #8]
}
 800dff8:	bf00      	nop
 800dffa:	371c      	adds	r7, #28
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e014:	2b01      	cmp	r3, #1
 800e016:	d101      	bne.n	800e01c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e018:	2302      	movs	r3, #2
 800e01a:	e050      	b.n	800e0be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2202      	movs	r2, #2
 800e028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68fa      	ldr	r2, [r7, #12]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	68fa      	ldr	r2, [r7, #12]
 800e054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a1c      	ldr	r2, [pc, #112]	; (800e0cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d018      	beq.n	800e092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e068:	d013      	beq.n	800e092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a18      	ldr	r2, [pc, #96]	; (800e0d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d00e      	beq.n	800e092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a16      	ldr	r2, [pc, #88]	; (800e0d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d009      	beq.n	800e092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a15      	ldr	r2, [pc, #84]	; (800e0d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d004      	beq.n	800e092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a13      	ldr	r2, [pc, #76]	; (800e0dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d10c      	bne.n	800e0ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	68ba      	ldr	r2, [r7, #8]
 800e0aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e0bc:	2300      	movs	r3, #0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3714      	adds	r7, #20
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop
 800e0cc:	40010000 	.word	0x40010000
 800e0d0:	40000400 	.word	0x40000400
 800e0d4:	40000800 	.word	0x40000800
 800e0d8:	40000c00 	.word	0x40000c00
 800e0dc:	40014000 	.word	0x40014000

0800e0e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0fc:	bf00      	nop
 800e0fe:	370c      	adds	r7, #12
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d101      	bne.n	800e11a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e03f      	b.n	800e19a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e120:	b2db      	uxtb	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	d106      	bne.n	800e134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7f4 fa72 	bl	8002618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2224      	movs	r2, #36	; 0x24
 800e138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68da      	ldr	r2, [r3, #12]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e14a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 f929 	bl	800e3a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	691a      	ldr	r2, [r3, #16]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	695a      	ldr	r2, [r3, #20]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	68da      	ldr	r2, [r3, #12]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2200      	movs	r2, #0
 800e186:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2220      	movs	r2, #32
 800e18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2220      	movs	r2, #32
 800e194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b08a      	sub	sp, #40	; 0x28
 800e1a6:	af02      	add	r7, sp, #8
 800e1a8:	60f8      	str	r0, [r7, #12]
 800e1aa:	60b9      	str	r1, [r7, #8]
 800e1ac:	603b      	str	r3, [r7, #0]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b20      	cmp	r3, #32
 800e1c0:	d17c      	bne.n	800e2bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d002      	beq.n	800e1ce <HAL_UART_Transmit+0x2c>
 800e1c8:	88fb      	ldrh	r3, [r7, #6]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e075      	b.n	800e2be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d101      	bne.n	800e1e0 <HAL_UART_Transmit+0x3e>
 800e1dc:	2302      	movs	r3, #2
 800e1de:	e06e      	b.n	800e2be <HAL_UART_Transmit+0x11c>
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2221      	movs	r2, #33	; 0x21
 800e1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e1f6:	f7f9 faf7 	bl	80077e8 <HAL_GetTick>
 800e1fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	88fa      	ldrh	r2, [r7, #6]
 800e200:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	88fa      	ldrh	r2, [r7, #6]
 800e206:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	689b      	ldr	r3, [r3, #8]
 800e20c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e210:	d108      	bne.n	800e224 <HAL_UART_Transmit+0x82>
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	691b      	ldr	r3, [r3, #16]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d104      	bne.n	800e224 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e21a:	2300      	movs	r3, #0
 800e21c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	61bb      	str	r3, [r7, #24]
 800e222:	e003      	b.n	800e22c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e228:	2300      	movs	r3, #0
 800e22a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2200      	movs	r2, #0
 800e230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e234:	e02a      	b.n	800e28c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	2200      	movs	r2, #0
 800e23e:	2180      	movs	r1, #128	; 0x80
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	f000 f840 	bl	800e2c6 <UART_WaitOnFlagUntilTimeout>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e24c:	2303      	movs	r3, #3
 800e24e:	e036      	b.n	800e2be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d10b      	bne.n	800e26e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	881b      	ldrh	r3, [r3, #0]
 800e25a:	461a      	mov	r2, r3
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e264:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	3302      	adds	r3, #2
 800e26a:	61bb      	str	r3, [r7, #24]
 800e26c:	e007      	b.n	800e27e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	781a      	ldrb	r2, [r3, #0]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	3301      	adds	r3, #1
 800e27c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e282:	b29b      	uxth	r3, r3
 800e284:	3b01      	subs	r3, #1
 800e286:	b29a      	uxth	r2, r3
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e290:	b29b      	uxth	r3, r3
 800e292:	2b00      	cmp	r3, #0
 800e294:	d1cf      	bne.n	800e236 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	2200      	movs	r2, #0
 800e29e:	2140      	movs	r1, #64	; 0x40
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f000 f810 	bl	800e2c6 <UART_WaitOnFlagUntilTimeout>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d001      	beq.n	800e2b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	e006      	b.n	800e2be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2220      	movs	r2, #32
 800e2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e000      	b.n	800e2be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e2bc:	2302      	movs	r3, #2
  }
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3720      	adds	r7, #32
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b090      	sub	sp, #64	; 0x40
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	60f8      	str	r0, [r7, #12]
 800e2ce:	60b9      	str	r1, [r7, #8]
 800e2d0:	603b      	str	r3, [r7, #0]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2d6:	e050      	b.n	800e37a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2de:	d04c      	beq.n	800e37a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e2e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d007      	beq.n	800e2f6 <UART_WaitOnFlagUntilTimeout+0x30>
 800e2e6:	f7f9 fa7f 	bl	80077e8 <HAL_GetTick>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d241      	bcs.n	800e37a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	330c      	adds	r3, #12
 800e2fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e300:	e853 3f00 	ldrex	r3, [r3]
 800e304:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e308:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e30c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	330c      	adds	r3, #12
 800e314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e316:	637a      	str	r2, [r7, #52]	; 0x34
 800e318:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e31a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e31c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e31e:	e841 2300 	strex	r3, r2, [r1]
 800e322:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1e5      	bne.n	800e2f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	3314      	adds	r3, #20
 800e330:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	e853 3f00 	ldrex	r3, [r3]
 800e338:	613b      	str	r3, [r7, #16]
   return(result);
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	f023 0301 	bic.w	r3, r3, #1
 800e340:	63bb      	str	r3, [r7, #56]	; 0x38
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	3314      	adds	r3, #20
 800e348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e34a:	623a      	str	r2, [r7, #32]
 800e34c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e34e:	69f9      	ldr	r1, [r7, #28]
 800e350:	6a3a      	ldr	r2, [r7, #32]
 800e352:	e841 2300 	strex	r3, r2, [r1]
 800e356:	61bb      	str	r3, [r7, #24]
   return(result);
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1e5      	bne.n	800e32a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2220      	movs	r2, #32
 800e362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2220      	movs	r2, #32
 800e36a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2200      	movs	r2, #0
 800e372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e376:	2303      	movs	r3, #3
 800e378:	e00f      	b.n	800e39a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	4013      	ands	r3, r2
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	429a      	cmp	r2, r3
 800e388:	bf0c      	ite	eq
 800e38a:	2301      	moveq	r3, #1
 800e38c:	2300      	movne	r3, #0
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	461a      	mov	r2, r3
 800e392:	79fb      	ldrb	r3, [r7, #7]
 800e394:	429a      	cmp	r2, r3
 800e396:	d09f      	beq.n	800e2d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3740      	adds	r7, #64	; 0x40
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
	...

0800e3a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e3a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e3a8:	b0c0      	sub	sp, #256	; 0x100
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3c0:	68d9      	ldr	r1, [r3, #12]
 800e3c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	ea40 0301 	orr.w	r3, r0, r1
 800e3cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e3ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3d2:	689a      	ldr	r2, [r3, #8]
 800e3d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3d8:	691b      	ldr	r3, [r3, #16]
 800e3da:	431a      	orrs	r2, r3
 800e3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3e0:	695b      	ldr	r3, [r3, #20]
 800e3e2:	431a      	orrs	r2, r3
 800e3e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3e8:	69db      	ldr	r3, [r3, #28]
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e3fc:	f021 010c 	bic.w	r1, r1, #12
 800e400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e40a:	430b      	orrs	r3, r1
 800e40c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e40e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	695b      	ldr	r3, [r3, #20]
 800e416:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e41a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e41e:	6999      	ldr	r1, [r3, #24]
 800e420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	ea40 0301 	orr.w	r3, r0, r1
 800e42a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e42c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	4b8f      	ldr	r3, [pc, #572]	; (800e670 <UART_SetConfig+0x2cc>)
 800e434:	429a      	cmp	r2, r3
 800e436:	d005      	beq.n	800e444 <UART_SetConfig+0xa0>
 800e438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	4b8d      	ldr	r3, [pc, #564]	; (800e674 <UART_SetConfig+0x2d0>)
 800e440:	429a      	cmp	r2, r3
 800e442:	d104      	bne.n	800e44e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e444:	f7fc fe24 	bl	800b090 <HAL_RCC_GetPCLK2Freq>
 800e448:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e44c:	e003      	b.n	800e456 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e44e:	f7fc fe0b 	bl	800b068 <HAL_RCC_GetPCLK1Freq>
 800e452:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e45a:	69db      	ldr	r3, [r3, #28]
 800e45c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e460:	f040 810c 	bne.w	800e67c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e468:	2200      	movs	r2, #0
 800e46a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e46e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e472:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e476:	4622      	mov	r2, r4
 800e478:	462b      	mov	r3, r5
 800e47a:	1891      	adds	r1, r2, r2
 800e47c:	65b9      	str	r1, [r7, #88]	; 0x58
 800e47e:	415b      	adcs	r3, r3
 800e480:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e482:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e486:	4621      	mov	r1, r4
 800e488:	eb12 0801 	adds.w	r8, r2, r1
 800e48c:	4629      	mov	r1, r5
 800e48e:	eb43 0901 	adc.w	r9, r3, r1
 800e492:	f04f 0200 	mov.w	r2, #0
 800e496:	f04f 0300 	mov.w	r3, #0
 800e49a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e49e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e4a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e4a6:	4690      	mov	r8, r2
 800e4a8:	4699      	mov	r9, r3
 800e4aa:	4623      	mov	r3, r4
 800e4ac:	eb18 0303 	adds.w	r3, r8, r3
 800e4b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e4b4:	462b      	mov	r3, r5
 800e4b6:	eb49 0303 	adc.w	r3, r9, r3
 800e4ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e4be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e4ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e4ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	18db      	adds	r3, r3, r3
 800e4d6:	653b      	str	r3, [r7, #80]	; 0x50
 800e4d8:	4613      	mov	r3, r2
 800e4da:	eb42 0303 	adc.w	r3, r2, r3
 800e4de:	657b      	str	r3, [r7, #84]	; 0x54
 800e4e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e4e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e4e8:	f7f2 fb86 	bl	8000bf8 <__aeabi_uldivmod>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	4b61      	ldr	r3, [pc, #388]	; (800e678 <UART_SetConfig+0x2d4>)
 800e4f2:	fba3 2302 	umull	r2, r3, r3, r2
 800e4f6:	095b      	lsrs	r3, r3, #5
 800e4f8:	011c      	lsls	r4, r3, #4
 800e4fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e4fe:	2200      	movs	r2, #0
 800e500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e504:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e508:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e50c:	4642      	mov	r2, r8
 800e50e:	464b      	mov	r3, r9
 800e510:	1891      	adds	r1, r2, r2
 800e512:	64b9      	str	r1, [r7, #72]	; 0x48
 800e514:	415b      	adcs	r3, r3
 800e516:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e518:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e51c:	4641      	mov	r1, r8
 800e51e:	eb12 0a01 	adds.w	sl, r2, r1
 800e522:	4649      	mov	r1, r9
 800e524:	eb43 0b01 	adc.w	fp, r3, r1
 800e528:	f04f 0200 	mov.w	r2, #0
 800e52c:	f04f 0300 	mov.w	r3, #0
 800e530:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e534:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e53c:	4692      	mov	sl, r2
 800e53e:	469b      	mov	fp, r3
 800e540:	4643      	mov	r3, r8
 800e542:	eb1a 0303 	adds.w	r3, sl, r3
 800e546:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e54a:	464b      	mov	r3, r9
 800e54c:	eb4b 0303 	adc.w	r3, fp, r3
 800e550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e560:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e564:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e568:	460b      	mov	r3, r1
 800e56a:	18db      	adds	r3, r3, r3
 800e56c:	643b      	str	r3, [r7, #64]	; 0x40
 800e56e:	4613      	mov	r3, r2
 800e570:	eb42 0303 	adc.w	r3, r2, r3
 800e574:	647b      	str	r3, [r7, #68]	; 0x44
 800e576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e57a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e57e:	f7f2 fb3b 	bl	8000bf8 <__aeabi_uldivmod>
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	4611      	mov	r1, r2
 800e588:	4b3b      	ldr	r3, [pc, #236]	; (800e678 <UART_SetConfig+0x2d4>)
 800e58a:	fba3 2301 	umull	r2, r3, r3, r1
 800e58e:	095b      	lsrs	r3, r3, #5
 800e590:	2264      	movs	r2, #100	; 0x64
 800e592:	fb02 f303 	mul.w	r3, r2, r3
 800e596:	1acb      	subs	r3, r1, r3
 800e598:	00db      	lsls	r3, r3, #3
 800e59a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e59e:	4b36      	ldr	r3, [pc, #216]	; (800e678 <UART_SetConfig+0x2d4>)
 800e5a0:	fba3 2302 	umull	r2, r3, r3, r2
 800e5a4:	095b      	lsrs	r3, r3, #5
 800e5a6:	005b      	lsls	r3, r3, #1
 800e5a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e5ac:	441c      	add	r4, r3
 800e5ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e5b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e5bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e5c0:	4642      	mov	r2, r8
 800e5c2:	464b      	mov	r3, r9
 800e5c4:	1891      	adds	r1, r2, r2
 800e5c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5c8:	415b      	adcs	r3, r3
 800e5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e5d0:	4641      	mov	r1, r8
 800e5d2:	1851      	adds	r1, r2, r1
 800e5d4:	6339      	str	r1, [r7, #48]	; 0x30
 800e5d6:	4649      	mov	r1, r9
 800e5d8:	414b      	adcs	r3, r1
 800e5da:	637b      	str	r3, [r7, #52]	; 0x34
 800e5dc:	f04f 0200 	mov.w	r2, #0
 800e5e0:	f04f 0300 	mov.w	r3, #0
 800e5e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e5e8:	4659      	mov	r1, fp
 800e5ea:	00cb      	lsls	r3, r1, #3
 800e5ec:	4651      	mov	r1, sl
 800e5ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e5f2:	4651      	mov	r1, sl
 800e5f4:	00ca      	lsls	r2, r1, #3
 800e5f6:	4610      	mov	r0, r2
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	4642      	mov	r2, r8
 800e5fe:	189b      	adds	r3, r3, r2
 800e600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e604:	464b      	mov	r3, r9
 800e606:	460a      	mov	r2, r1
 800e608:	eb42 0303 	adc.w	r3, r2, r3
 800e60c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e61c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e620:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e624:	460b      	mov	r3, r1
 800e626:	18db      	adds	r3, r3, r3
 800e628:	62bb      	str	r3, [r7, #40]	; 0x28
 800e62a:	4613      	mov	r3, r2
 800e62c:	eb42 0303 	adc.w	r3, r2, r3
 800e630:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e636:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e63a:	f7f2 fadd 	bl	8000bf8 <__aeabi_uldivmod>
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	4b0d      	ldr	r3, [pc, #52]	; (800e678 <UART_SetConfig+0x2d4>)
 800e644:	fba3 1302 	umull	r1, r3, r3, r2
 800e648:	095b      	lsrs	r3, r3, #5
 800e64a:	2164      	movs	r1, #100	; 0x64
 800e64c:	fb01 f303 	mul.w	r3, r1, r3
 800e650:	1ad3      	subs	r3, r2, r3
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	3332      	adds	r3, #50	; 0x32
 800e656:	4a08      	ldr	r2, [pc, #32]	; (800e678 <UART_SetConfig+0x2d4>)
 800e658:	fba2 2303 	umull	r2, r3, r2, r3
 800e65c:	095b      	lsrs	r3, r3, #5
 800e65e:	f003 0207 	and.w	r2, r3, #7
 800e662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4422      	add	r2, r4
 800e66a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e66c:	e105      	b.n	800e87a <UART_SetConfig+0x4d6>
 800e66e:	bf00      	nop
 800e670:	40011000 	.word	0x40011000
 800e674:	40011400 	.word	0x40011400
 800e678:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e67c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e680:	2200      	movs	r2, #0
 800e682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e686:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e68a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e68e:	4642      	mov	r2, r8
 800e690:	464b      	mov	r3, r9
 800e692:	1891      	adds	r1, r2, r2
 800e694:	6239      	str	r1, [r7, #32]
 800e696:	415b      	adcs	r3, r3
 800e698:	627b      	str	r3, [r7, #36]	; 0x24
 800e69a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e69e:	4641      	mov	r1, r8
 800e6a0:	1854      	adds	r4, r2, r1
 800e6a2:	4649      	mov	r1, r9
 800e6a4:	eb43 0501 	adc.w	r5, r3, r1
 800e6a8:	f04f 0200 	mov.w	r2, #0
 800e6ac:	f04f 0300 	mov.w	r3, #0
 800e6b0:	00eb      	lsls	r3, r5, #3
 800e6b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e6b6:	00e2      	lsls	r2, r4, #3
 800e6b8:	4614      	mov	r4, r2
 800e6ba:	461d      	mov	r5, r3
 800e6bc:	4643      	mov	r3, r8
 800e6be:	18e3      	adds	r3, r4, r3
 800e6c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e6c4:	464b      	mov	r3, r9
 800e6c6:	eb45 0303 	adc.w	r3, r5, r3
 800e6ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e6da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e6de:	f04f 0200 	mov.w	r2, #0
 800e6e2:	f04f 0300 	mov.w	r3, #0
 800e6e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e6ea:	4629      	mov	r1, r5
 800e6ec:	008b      	lsls	r3, r1, #2
 800e6ee:	4621      	mov	r1, r4
 800e6f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	008a      	lsls	r2, r1, #2
 800e6f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e6fc:	f7f2 fa7c 	bl	8000bf8 <__aeabi_uldivmod>
 800e700:	4602      	mov	r2, r0
 800e702:	460b      	mov	r3, r1
 800e704:	4b60      	ldr	r3, [pc, #384]	; (800e888 <UART_SetConfig+0x4e4>)
 800e706:	fba3 2302 	umull	r2, r3, r3, r2
 800e70a:	095b      	lsrs	r3, r3, #5
 800e70c:	011c      	lsls	r4, r3, #4
 800e70e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e712:	2200      	movs	r2, #0
 800e714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e718:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e71c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e720:	4642      	mov	r2, r8
 800e722:	464b      	mov	r3, r9
 800e724:	1891      	adds	r1, r2, r2
 800e726:	61b9      	str	r1, [r7, #24]
 800e728:	415b      	adcs	r3, r3
 800e72a:	61fb      	str	r3, [r7, #28]
 800e72c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e730:	4641      	mov	r1, r8
 800e732:	1851      	adds	r1, r2, r1
 800e734:	6139      	str	r1, [r7, #16]
 800e736:	4649      	mov	r1, r9
 800e738:	414b      	adcs	r3, r1
 800e73a:	617b      	str	r3, [r7, #20]
 800e73c:	f04f 0200 	mov.w	r2, #0
 800e740:	f04f 0300 	mov.w	r3, #0
 800e744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e748:	4659      	mov	r1, fp
 800e74a:	00cb      	lsls	r3, r1, #3
 800e74c:	4651      	mov	r1, sl
 800e74e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e752:	4651      	mov	r1, sl
 800e754:	00ca      	lsls	r2, r1, #3
 800e756:	4610      	mov	r0, r2
 800e758:	4619      	mov	r1, r3
 800e75a:	4603      	mov	r3, r0
 800e75c:	4642      	mov	r2, r8
 800e75e:	189b      	adds	r3, r3, r2
 800e760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e764:	464b      	mov	r3, r9
 800e766:	460a      	mov	r2, r1
 800e768:	eb42 0303 	adc.w	r3, r2, r3
 800e76c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	2200      	movs	r2, #0
 800e778:	67bb      	str	r3, [r7, #120]	; 0x78
 800e77a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e77c:	f04f 0200 	mov.w	r2, #0
 800e780:	f04f 0300 	mov.w	r3, #0
 800e784:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e788:	4649      	mov	r1, r9
 800e78a:	008b      	lsls	r3, r1, #2
 800e78c:	4641      	mov	r1, r8
 800e78e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e792:	4641      	mov	r1, r8
 800e794:	008a      	lsls	r2, r1, #2
 800e796:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e79a:	f7f2 fa2d 	bl	8000bf8 <__aeabi_uldivmod>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4b39      	ldr	r3, [pc, #228]	; (800e888 <UART_SetConfig+0x4e4>)
 800e7a4:	fba3 1302 	umull	r1, r3, r3, r2
 800e7a8:	095b      	lsrs	r3, r3, #5
 800e7aa:	2164      	movs	r1, #100	; 0x64
 800e7ac:	fb01 f303 	mul.w	r3, r1, r3
 800e7b0:	1ad3      	subs	r3, r2, r3
 800e7b2:	011b      	lsls	r3, r3, #4
 800e7b4:	3332      	adds	r3, #50	; 0x32
 800e7b6:	4a34      	ldr	r2, [pc, #208]	; (800e888 <UART_SetConfig+0x4e4>)
 800e7b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e7bc:	095b      	lsrs	r3, r3, #5
 800e7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e7c2:	441c      	add	r4, r3
 800e7c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	673b      	str	r3, [r7, #112]	; 0x70
 800e7cc:	677a      	str	r2, [r7, #116]	; 0x74
 800e7ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e7d2:	4642      	mov	r2, r8
 800e7d4:	464b      	mov	r3, r9
 800e7d6:	1891      	adds	r1, r2, r2
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	415b      	adcs	r3, r3
 800e7dc:	60fb      	str	r3, [r7, #12]
 800e7de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e7e2:	4641      	mov	r1, r8
 800e7e4:	1851      	adds	r1, r2, r1
 800e7e6:	6039      	str	r1, [r7, #0]
 800e7e8:	4649      	mov	r1, r9
 800e7ea:	414b      	adcs	r3, r1
 800e7ec:	607b      	str	r3, [r7, #4]
 800e7ee:	f04f 0200 	mov.w	r2, #0
 800e7f2:	f04f 0300 	mov.w	r3, #0
 800e7f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e7fa:	4659      	mov	r1, fp
 800e7fc:	00cb      	lsls	r3, r1, #3
 800e7fe:	4651      	mov	r1, sl
 800e800:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e804:	4651      	mov	r1, sl
 800e806:	00ca      	lsls	r2, r1, #3
 800e808:	4610      	mov	r0, r2
 800e80a:	4619      	mov	r1, r3
 800e80c:	4603      	mov	r3, r0
 800e80e:	4642      	mov	r2, r8
 800e810:	189b      	adds	r3, r3, r2
 800e812:	66bb      	str	r3, [r7, #104]	; 0x68
 800e814:	464b      	mov	r3, r9
 800e816:	460a      	mov	r2, r1
 800e818:	eb42 0303 	adc.w	r3, r2, r3
 800e81c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e81e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	2200      	movs	r2, #0
 800e826:	663b      	str	r3, [r7, #96]	; 0x60
 800e828:	667a      	str	r2, [r7, #100]	; 0x64
 800e82a:	f04f 0200 	mov.w	r2, #0
 800e82e:	f04f 0300 	mov.w	r3, #0
 800e832:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e836:	4649      	mov	r1, r9
 800e838:	008b      	lsls	r3, r1, #2
 800e83a:	4641      	mov	r1, r8
 800e83c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e840:	4641      	mov	r1, r8
 800e842:	008a      	lsls	r2, r1, #2
 800e844:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e848:	f7f2 f9d6 	bl	8000bf8 <__aeabi_uldivmod>
 800e84c:	4602      	mov	r2, r0
 800e84e:	460b      	mov	r3, r1
 800e850:	4b0d      	ldr	r3, [pc, #52]	; (800e888 <UART_SetConfig+0x4e4>)
 800e852:	fba3 1302 	umull	r1, r3, r3, r2
 800e856:	095b      	lsrs	r3, r3, #5
 800e858:	2164      	movs	r1, #100	; 0x64
 800e85a:	fb01 f303 	mul.w	r3, r1, r3
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	011b      	lsls	r3, r3, #4
 800e862:	3332      	adds	r3, #50	; 0x32
 800e864:	4a08      	ldr	r2, [pc, #32]	; (800e888 <UART_SetConfig+0x4e4>)
 800e866:	fba2 2303 	umull	r2, r3, r2, r3
 800e86a:	095b      	lsrs	r3, r3, #5
 800e86c:	f003 020f 	and.w	r2, r3, #15
 800e870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4422      	add	r2, r4
 800e878:	609a      	str	r2, [r3, #8]
}
 800e87a:	bf00      	nop
 800e87c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e880:	46bd      	mov	sp, r7
 800e882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e886:	bf00      	nop
 800e888:	51eb851f 	.word	0x51eb851f

0800e88c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e88c:	b084      	sub	sp, #16
 800e88e:	b480      	push	{r7}
 800e890:	b085      	sub	sp, #20
 800e892:	af00      	add	r7, sp, #0
 800e894:	6078      	str	r0, [r7, #4]
 800e896:	f107 001c 	add.w	r0, r7, #28
 800e89a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e8a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e8a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e8a6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e8aa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e8ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e8b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e8b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e8b8:	68fa      	ldr	r2, [r7, #12]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e8c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	431a      	orrs	r2, r3
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3714      	adds	r7, #20
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	b004      	add	sp, #16
 800e8e0:	4770      	bx	lr

0800e8e2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e8e2:	b480      	push	{r7}
 800e8e4:	b083      	sub	sp, #12
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	370c      	adds	r7, #12
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr

0800e91e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e91e:	b480      	push	{r7}
 800e920:	b083      	sub	sp, #12
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2203      	movs	r2, #3
 800e92a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e92c:	2300      	movs	r3, #0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	370c      	adds	r7, #12
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr

0800e93a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e93a:	b480      	push	{r7}
 800e93c:	b083      	sub	sp, #12
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f003 0303 	and.w	r3, r3, #3
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	370c      	adds	r7, #12
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr

0800e956 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e956:	b480      	push	{r7}
 800e958:	b085      	sub	sp, #20
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
 800e95e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e960:	2300      	movs	r3, #0
 800e962:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e974:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e97a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e980:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	4313      	orrs	r3, r2
 800e986:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e990:	f023 030f 	bic.w	r3, r3, #15
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	431a      	orrs	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3714      	adds	r7, #20
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b083      	sub	sp, #12
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	691b      	ldr	r3, [r3, #16]
 800e9b6:	b2db      	uxtb	r3, r3
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	370c      	adds	r7, #12
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c2:	4770      	bx	lr

0800e9c4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b085      	sub	sp, #20
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	3314      	adds	r3, #20
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	4413      	add	r3, r2
 800e9d8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
}  
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3714      	adds	r7, #20
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr

0800e9ea <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e9ea:	b480      	push	{r7}
 800e9ec:	b085      	sub	sp, #20
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
 800e9f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	685a      	ldr	r2, [r3, #4]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ea10:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ea16:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ea1c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ea1e:	68fa      	ldr	r2, [r7, #12]
 800ea20:	4313      	orrs	r3, r2
 800ea22:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea28:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	431a      	orrs	r2, r3
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ea34:	2300      	movs	r3, #0

}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ea42:	b580      	push	{r7, lr}
 800ea44:	b088      	sub	sp, #32
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
 800ea4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ea50:	2310      	movs	r3, #16
 800ea52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea54:	2340      	movs	r3, #64	; 0x40
 800ea56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea62:	f107 0308 	add.w	r3, r7, #8
 800ea66:	4619      	mov	r1, r3
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7ff ff74 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ea6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea72:	2110      	movs	r1, #16
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 fa19 	bl	800eeac <SDMMC_GetCmdResp1>
 800ea7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea7c:	69fb      	ldr	r3, [r7, #28]
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3720      	adds	r7, #32
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b088      	sub	sp, #32
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	6078      	str	r0, [r7, #4]
 800ea8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ea94:	2311      	movs	r3, #17
 800ea96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea98:	2340      	movs	r3, #64	; 0x40
 800ea9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eaa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eaa6:	f107 0308 	add.w	r3, r7, #8
 800eaaa:	4619      	mov	r1, r3
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f7ff ff52 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800eab2:	f241 3288 	movw	r2, #5000	; 0x1388
 800eab6:	2111      	movs	r1, #17
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f9f7 	bl	800eeac <SDMMC_GetCmdResp1>
 800eabe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eac0:	69fb      	ldr	r3, [r7, #28]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3720      	adds	r7, #32
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b088      	sub	sp, #32
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ead8:	2312      	movs	r3, #18
 800eada:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eadc:	2340      	movs	r3, #64	; 0x40
 800eade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eae0:	2300      	movs	r3, #0
 800eae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eae8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eaea:	f107 0308 	add.w	r3, r7, #8
 800eaee:	4619      	mov	r1, r3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7ff ff30 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800eaf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800eafa:	2112      	movs	r1, #18
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 f9d5 	bl	800eeac <SDMMC_GetCmdResp1>
 800eb02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb04:	69fb      	ldr	r3, [r7, #28]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3720      	adds	r7, #32
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b088      	sub	sp, #32
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
 800eb16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800eb1c:	2318      	movs	r3, #24
 800eb1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb20:	2340      	movs	r3, #64	; 0x40
 800eb22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb24:	2300      	movs	r3, #0
 800eb26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb2e:	f107 0308 	add.w	r3, r7, #8
 800eb32:	4619      	mov	r1, r3
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7ff ff0e 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800eb3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb3e:	2118      	movs	r1, #24
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 f9b3 	bl	800eeac <SDMMC_GetCmdResp1>
 800eb46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb48:	69fb      	ldr	r3, [r7, #28]
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3720      	adds	r7, #32
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b088      	sub	sp, #32
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
 800eb5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800eb60:	2319      	movs	r3, #25
 800eb62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb64:	2340      	movs	r3, #64	; 0x40
 800eb66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb72:	f107 0308 	add.w	r3, r7, #8
 800eb76:	4619      	mov	r1, r3
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f7ff feec 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800eb7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb82:	2119      	movs	r1, #25
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 f991 	bl	800eeac <SDMMC_GetCmdResp1>
 800eb8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb8c:	69fb      	ldr	r3, [r7, #28]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3720      	adds	r7, #32
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
	...

0800eb98 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b088      	sub	sp, #32
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800eba0:	2300      	movs	r3, #0
 800eba2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800eba4:	230c      	movs	r3, #12
 800eba6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eba8:	2340      	movs	r3, #64	; 0x40
 800ebaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebac:	2300      	movs	r3, #0
 800ebae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebb6:	f107 0308 	add.w	r3, r7, #8
 800ebba:	4619      	mov	r1, r3
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f7ff feca 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ebc2:	4a05      	ldr	r2, [pc, #20]	; (800ebd8 <SDMMC_CmdStopTransfer+0x40>)
 800ebc4:	210c      	movs	r1, #12
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f000 f970 	bl	800eeac <SDMMC_GetCmdResp1>
 800ebcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebce:	69fb      	ldr	r3, [r7, #28]
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3720      	adds	r7, #32
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	05f5e100 	.word	0x05f5e100

0800ebdc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08a      	sub	sp, #40	; 0x28
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ebec:	2307      	movs	r3, #7
 800ebee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ebf0:	2340      	movs	r3, #64	; 0x40
 800ebf2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebfc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebfe:	f107 0310 	add.w	r3, r7, #16
 800ec02:	4619      	mov	r1, r3
 800ec04:	68f8      	ldr	r0, [r7, #12]
 800ec06:	f7ff fea6 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ec0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec0e:	2107      	movs	r1, #7
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	f000 f94b 	bl	800eeac <SDMMC_GetCmdResp1>
 800ec16:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3728      	adds	r7, #40	; 0x28
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b088      	sub	sp, #32
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ec32:	2300      	movs	r3, #0
 800ec34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec36:	2300      	movs	r3, #0
 800ec38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec40:	f107 0308 	add.w	r3, r7, #8
 800ec44:	4619      	mov	r1, r3
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f7ff fe85 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 fb65 	bl	800f31c <SDMMC_GetCmdError>
 800ec52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec54:	69fb      	ldr	r3, [r7, #28]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3720      	adds	r7, #32
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b088      	sub	sp, #32
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ec66:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ec6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ec6c:	2308      	movs	r3, #8
 800ec6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec70:	2340      	movs	r3, #64	; 0x40
 800ec72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec74:	2300      	movs	r3, #0
 800ec76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec7e:	f107 0308 	add.w	r3, r7, #8
 800ec82:	4619      	mov	r1, r3
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f7ff fe66 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f000 faf8 	bl	800f280 <SDMMC_GetCmdResp7>
 800ec90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec92:	69fb      	ldr	r3, [r7, #28]
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3720      	adds	r7, #32
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b088      	sub	sp, #32
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ecaa:	2337      	movs	r3, #55	; 0x37
 800ecac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ecae:	2340      	movs	r3, #64	; 0x40
 800ecb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ecb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ecbc:	f107 0308 	add.w	r3, r7, #8
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f7ff fe47 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ecc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800eccc:	2137      	movs	r1, #55	; 0x37
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 f8ec 	bl	800eeac <SDMMC_GetCmdResp1>
 800ecd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecd6:	69fb      	ldr	r3, [r7, #28]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3720      	adds	r7, #32
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b088      	sub	sp, #32
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ecf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ecf6:	2329      	movs	r3, #41	; 0x29
 800ecf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ecfa:	2340      	movs	r3, #64	; 0x40
 800ecfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed08:	f107 0308 	add.w	r3, r7, #8
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f7ff fe21 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 f9ff 	bl	800f118 <SDMMC_GetCmdResp3>
 800ed1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed1c:	69fb      	ldr	r3, [r7, #28]
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3720      	adds	r7, #32
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}

0800ed26 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b088      	sub	sp, #32
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
 800ed2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ed34:	2306      	movs	r3, #6
 800ed36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed38:	2340      	movs	r3, #64	; 0x40
 800ed3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed46:	f107 0308 	add.w	r3, r7, #8
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f7ff fe02 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ed52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed56:	2106      	movs	r1, #6
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f000 f8a7 	bl	800eeac <SDMMC_GetCmdResp1>
 800ed5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed60:	69fb      	ldr	r3, [r7, #28]
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3720      	adds	r7, #32
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b088      	sub	sp, #32
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ed72:	2300      	movs	r3, #0
 800ed74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ed76:	2333      	movs	r3, #51	; 0x33
 800ed78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed7a:	2340      	movs	r3, #64	; 0x40
 800ed7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed88:	f107 0308 	add.w	r3, r7, #8
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7ff fde1 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ed94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed98:	2133      	movs	r1, #51	; 0x33
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 f886 	bl	800eeac <SDMMC_GetCmdResp1>
 800eda0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eda2:	69fb      	ldr	r3, [r7, #28]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3720      	adds	r7, #32
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b088      	sub	sp, #32
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800edb4:	2300      	movs	r3, #0
 800edb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800edb8:	2302      	movs	r3, #2
 800edba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800edbc:	23c0      	movs	r3, #192	; 0xc0
 800edbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800edc0:	2300      	movs	r3, #0
 800edc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800edc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800edca:	f107 0308 	add.w	r3, r7, #8
 800edce:	4619      	mov	r1, r3
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f7ff fdc0 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 f956 	bl	800f088 <SDMMC_GetCmdResp2>
 800eddc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edde:	69fb      	ldr	r3, [r7, #28]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3720      	adds	r7, #32
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b088      	sub	sp, #32
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800edf6:	2309      	movs	r3, #9
 800edf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800edfa:	23c0      	movs	r3, #192	; 0xc0
 800edfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800edfe:	2300      	movs	r3, #0
 800ee00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee08:	f107 0308 	add.w	r3, r7, #8
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7ff fda1 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 f937 	bl	800f088 <SDMMC_GetCmdResp2>
 800ee1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee1c:	69fb      	ldr	r3, [r7, #28]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3720      	adds	r7, #32
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}

0800ee26 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b088      	sub	sp, #32
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
 800ee2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ee30:	2300      	movs	r3, #0
 800ee32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ee34:	2303      	movs	r3, #3
 800ee36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee38:	2340      	movs	r3, #64	; 0x40
 800ee3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee46:	f107 0308 	add.w	r3, r7, #8
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7ff fd82 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ee52:	683a      	ldr	r2, [r7, #0]
 800ee54:	2103      	movs	r1, #3
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 f99c 	bl	800f194 <SDMMC_GetCmdResp6>
 800ee5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee5e:	69fb      	ldr	r3, [r7, #28]
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3720      	adds	r7, #32
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b088      	sub	sp, #32
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ee76:	230d      	movs	r3, #13
 800ee78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee7a:	2340      	movs	r3, #64	; 0x40
 800ee7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee88:	f107 0308 	add.w	r3, r7, #8
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f7ff fd61 	bl	800e956 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ee94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee98:	210d      	movs	r1, #13
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f806 	bl	800eeac <SDMMC_GetCmdResp1>
 800eea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eea2:	69fb      	ldr	r3, [r7, #28]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3720      	adds	r7, #32
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b088      	sub	sp, #32
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	607a      	str	r2, [r7, #4]
 800eeb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800eeba:	4b70      	ldr	r3, [pc, #448]	; (800f07c <SDMMC_GetCmdResp1+0x1d0>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a70      	ldr	r2, [pc, #448]	; (800f080 <SDMMC_GetCmdResp1+0x1d4>)
 800eec0:	fba2 2303 	umull	r2, r3, r2, r3
 800eec4:	0a5a      	lsrs	r2, r3, #9
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	fb02 f303 	mul.w	r3, r2, r3
 800eecc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800eece:	69fb      	ldr	r3, [r7, #28]
 800eed0:	1e5a      	subs	r2, r3, #1
 800eed2:	61fa      	str	r2, [r7, #28]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d102      	bne.n	800eede <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eed8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eedc:	e0c9      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eee2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d0ef      	beq.n	800eece <SDMMC_GetCmdResp1+0x22>
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1ea      	bne.n	800eece <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eefc:	f003 0304 	and.w	r3, r3, #4
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d004      	beq.n	800ef0e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2204      	movs	r2, #4
 800ef08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef0a:	2304      	movs	r3, #4
 800ef0c:	e0b1      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef12:	f003 0301 	and.w	r3, r3, #1
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d004      	beq.n	800ef24 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef20:	2301      	movs	r3, #1
 800ef22:	e0a6      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	22c5      	movs	r2, #197	; 0xc5
 800ef28:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f7ff fd3d 	bl	800e9aa <SDIO_GetCommandResponse>
 800ef30:	4603      	mov	r3, r0
 800ef32:	461a      	mov	r2, r3
 800ef34:	7afb      	ldrb	r3, [r7, #11]
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d001      	beq.n	800ef3e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e099      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ef3e:	2100      	movs	r1, #0
 800ef40:	68f8      	ldr	r0, [r7, #12]
 800ef42:	f7ff fd3f 	bl	800e9c4 <SDIO_GetResponse>
 800ef46:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ef48:	697a      	ldr	r2, [r7, #20]
 800ef4a:	4b4e      	ldr	r3, [pc, #312]	; (800f084 <SDMMC_GetCmdResp1+0x1d8>)
 800ef4c:	4013      	ands	r3, r2
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d101      	bne.n	800ef56 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ef52:	2300      	movs	r3, #0
 800ef54:	e08d      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	da02      	bge.n	800ef62 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ef5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ef60:	e087      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d001      	beq.n	800ef70 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ef6c:	2340      	movs	r3, #64	; 0x40
 800ef6e:	e080      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d001      	beq.n	800ef7e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ef7a:	2380      	movs	r3, #128	; 0x80
 800ef7c:	e079      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d002      	beq.n	800ef8e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ef88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef8c:	e071      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d002      	beq.n	800ef9e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ef98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef9c:	e069      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d002      	beq.n	800efae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800efa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efac:	e061      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d002      	beq.n	800efbe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800efb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800efbc:	e059      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d002      	beq.n	800efce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800efc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efcc:	e051      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800efd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800efdc:	e049      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d002      	beq.n	800efee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800efe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800efec:	e041      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d002      	beq.n	800effe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800eff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800effc:	e039      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f004:	2b00      	cmp	r3, #0
 800f006:	d002      	beq.n	800f00e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f00c:	e031      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f014:	2b00      	cmp	r3, #0
 800f016:	d002      	beq.n	800f01e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f018:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f01c:	e029      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f024:	2b00      	cmp	r3, #0
 800f026:	d002      	beq.n	800f02e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f028:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f02c:	e021      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f038:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f03c:	e019      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f044:	2b00      	cmp	r3, #0
 800f046:	d002      	beq.n	800f04e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f048:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f04c:	e011      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f054:	2b00      	cmp	r3, #0
 800f056:	d002      	beq.n	800f05e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f058:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f05c:	e009      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	f003 0308 	and.w	r3, r3, #8
 800f064:	2b00      	cmp	r3, #0
 800f066:	d002      	beq.n	800f06e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f068:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f06c:	e001      	b.n	800f072 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f06e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f072:	4618      	mov	r0, r3
 800f074:	3720      	adds	r7, #32
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	20000000 	.word	0x20000000
 800f080:	10624dd3 	.word	0x10624dd3
 800f084:	fdffe008 	.word	0xfdffe008

0800f088 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f088:	b480      	push	{r7}
 800f08a:	b085      	sub	sp, #20
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f090:	4b1f      	ldr	r3, [pc, #124]	; (800f110 <SDMMC_GetCmdResp2+0x88>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a1f      	ldr	r2, [pc, #124]	; (800f114 <SDMMC_GetCmdResp2+0x8c>)
 800f096:	fba2 2303 	umull	r2, r3, r2, r3
 800f09a:	0a5b      	lsrs	r3, r3, #9
 800f09c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0a0:	fb02 f303 	mul.w	r3, r2, r3
 800f0a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	1e5a      	subs	r2, r3, #1
 800f0aa:	60fa      	str	r2, [r7, #12]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d102      	bne.n	800f0b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f0b4:	e026      	b.n	800f104 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d0ef      	beq.n	800f0a6 <SDMMC_GetCmdResp2+0x1e>
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d1ea      	bne.n	800f0a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0d4:	f003 0304 	and.w	r3, r3, #4
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d004      	beq.n	800f0e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2204      	movs	r2, #4
 800f0e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f0e2:	2304      	movs	r3, #4
 800f0e4:	e00e      	b.n	800f104 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0ea:	f003 0301 	and.w	r3, r3, #1
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d004      	beq.n	800f0fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e003      	b.n	800f104 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	22c5      	movs	r2, #197	; 0xc5
 800f100:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f102:	2300      	movs	r3, #0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3714      	adds	r7, #20
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr
 800f110:	20000000 	.word	0x20000000
 800f114:	10624dd3 	.word	0x10624dd3

0800f118 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f120:	4b1a      	ldr	r3, [pc, #104]	; (800f18c <SDMMC_GetCmdResp3+0x74>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a1a      	ldr	r2, [pc, #104]	; (800f190 <SDMMC_GetCmdResp3+0x78>)
 800f126:	fba2 2303 	umull	r2, r3, r2, r3
 800f12a:	0a5b      	lsrs	r3, r3, #9
 800f12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f130:	fb02 f303 	mul.w	r3, r2, r3
 800f134:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	1e5a      	subs	r2, r3, #1
 800f13a:	60fa      	str	r2, [r7, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d102      	bne.n	800f146 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f140:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f144:	e01b      	b.n	800f17e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f14a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f152:	2b00      	cmp	r3, #0
 800f154:	d0ef      	beq.n	800f136 <SDMMC_GetCmdResp3+0x1e>
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1ea      	bne.n	800f136 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f164:	f003 0304 	and.w	r3, r3, #4
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d004      	beq.n	800f176 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2204      	movs	r2, #4
 800f170:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f172:	2304      	movs	r3, #4
 800f174:	e003      	b.n	800f17e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	22c5      	movs	r2, #197	; 0xc5
 800f17a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f17c:	2300      	movs	r3, #0
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3714      	adds	r7, #20
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	20000000 	.word	0x20000000
 800f190:	10624dd3 	.word	0x10624dd3

0800f194 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b088      	sub	sp, #32
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	460b      	mov	r3, r1
 800f19e:	607a      	str	r2, [r7, #4]
 800f1a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f1a2:	4b35      	ldr	r3, [pc, #212]	; (800f278 <SDMMC_GetCmdResp6+0xe4>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4a35      	ldr	r2, [pc, #212]	; (800f27c <SDMMC_GetCmdResp6+0xe8>)
 800f1a8:	fba2 2303 	umull	r2, r3, r2, r3
 800f1ac:	0a5b      	lsrs	r3, r3, #9
 800f1ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1b2:	fb02 f303 	mul.w	r3, r2, r3
 800f1b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	1e5a      	subs	r2, r3, #1
 800f1bc:	61fa      	str	r2, [r7, #28]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d102      	bne.n	800f1c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f1c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f1c6:	e052      	b.n	800f26e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f1ce:	69bb      	ldr	r3, [r7, #24]
 800f1d0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d0ef      	beq.n	800f1b8 <SDMMC_GetCmdResp6+0x24>
 800f1d8:	69bb      	ldr	r3, [r7, #24]
 800f1da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d1ea      	bne.n	800f1b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1e6:	f003 0304 	and.w	r3, r3, #4
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d004      	beq.n	800f1f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2204      	movs	r2, #4
 800f1f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f1f4:	2304      	movs	r3, #4
 800f1f6:	e03a      	b.n	800f26e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1fc:	f003 0301 	and.w	r3, r3, #1
 800f200:	2b00      	cmp	r3, #0
 800f202:	d004      	beq.n	800f20e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2201      	movs	r2, #1
 800f208:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f20a:	2301      	movs	r3, #1
 800f20c:	e02f      	b.n	800f26e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f7ff fbcb 	bl	800e9aa <SDIO_GetCommandResponse>
 800f214:	4603      	mov	r3, r0
 800f216:	461a      	mov	r2, r3
 800f218:	7afb      	ldrb	r3, [r7, #11]
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d001      	beq.n	800f222 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f21e:	2301      	movs	r3, #1
 800f220:	e025      	b.n	800f26e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	22c5      	movs	r2, #197	; 0xc5
 800f226:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f228:	2100      	movs	r1, #0
 800f22a:	68f8      	ldr	r0, [r7, #12]
 800f22c:	f7ff fbca 	bl	800e9c4 <SDIO_GetResponse>
 800f230:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d106      	bne.n	800f24a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	0c1b      	lsrs	r3, r3, #16
 800f240:	b29a      	uxth	r2, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f246:	2300      	movs	r3, #0
 800f248:	e011      	b.n	800f26e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f250:	2b00      	cmp	r3, #0
 800f252:	d002      	beq.n	800f25a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f258:	e009      	b.n	800f26e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f260:	2b00      	cmp	r3, #0
 800f262:	d002      	beq.n	800f26a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f268:	e001      	b.n	800f26e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f26a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3720      	adds	r7, #32
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	20000000 	.word	0x20000000
 800f27c:	10624dd3 	.word	0x10624dd3

0800f280 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f288:	4b22      	ldr	r3, [pc, #136]	; (800f314 <SDMMC_GetCmdResp7+0x94>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	4a22      	ldr	r2, [pc, #136]	; (800f318 <SDMMC_GetCmdResp7+0x98>)
 800f28e:	fba2 2303 	umull	r2, r3, r2, r3
 800f292:	0a5b      	lsrs	r3, r3, #9
 800f294:	f241 3288 	movw	r2, #5000	; 0x1388
 800f298:	fb02 f303 	mul.w	r3, r2, r3
 800f29c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	1e5a      	subs	r2, r3, #1
 800f2a2:	60fa      	str	r2, [r7, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d102      	bne.n	800f2ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f2a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f2ac:	e02c      	b.n	800f308 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d0ef      	beq.n	800f29e <SDMMC_GetCmdResp7+0x1e>
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d1ea      	bne.n	800f29e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2cc:	f003 0304 	and.w	r3, r3, #4
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d004      	beq.n	800f2de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2204      	movs	r2, #4
 800f2d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f2da:	2304      	movs	r3, #4
 800f2dc:	e014      	b.n	800f308 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e2:	f003 0301 	and.w	r3, r3, #1
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d004      	beq.n	800f2f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e009      	b.n	800f308 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d002      	beq.n	800f306 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2240      	movs	r2, #64	; 0x40
 800f304:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f306:	2300      	movs	r3, #0
  
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3714      	adds	r7, #20
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr
 800f314:	20000000 	.word	0x20000000
 800f318:	10624dd3 	.word	0x10624dd3

0800f31c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f324:	4b11      	ldr	r3, [pc, #68]	; (800f36c <SDMMC_GetCmdError+0x50>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a11      	ldr	r2, [pc, #68]	; (800f370 <SDMMC_GetCmdError+0x54>)
 800f32a:	fba2 2303 	umull	r2, r3, r2, r3
 800f32e:	0a5b      	lsrs	r3, r3, #9
 800f330:	f241 3288 	movw	r2, #5000	; 0x1388
 800f334:	fb02 f303 	mul.w	r3, r2, r3
 800f338:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	1e5a      	subs	r2, r3, #1
 800f33e:	60fa      	str	r2, [r7, #12]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d102      	bne.n	800f34a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f344:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f348:	e009      	b.n	800f35e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f34e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f352:	2b00      	cmp	r3, #0
 800f354:	d0f1      	beq.n	800f33a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	22c5      	movs	r2, #197	; 0xc5
 800f35a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f35c:	2300      	movs	r3, #0
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3714      	adds	r7, #20
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	20000000 	.word	0x20000000
 800f370:	10624dd3 	.word	0x10624dd3

0800f374 <Setting_Init>:
__ICONS Toggle_Button_Off_Icons =
{
    50, 36, Toggle_Button_Off_Data
};
void Setting_Init(void)
{
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
  // setting event, will be overwrited by read flash
  Setting.Music_RandomSong = true;
 800f37a:	4b3a      	ldr	r3, [pc, #232]	; (800f464 <Setting_Init+0xf0>)
 800f37c:	2201      	movs	r2, #1
 800f37e:	701a      	strb	r2, [r3, #0]
  Setting.Music_LoopOneSong = false;
 800f380:	4b38      	ldr	r3, [pc, #224]	; (800f464 <Setting_Init+0xf0>)
 800f382:	2200      	movs	r2, #0
 800f384:	705a      	strb	r2, [r3, #1]
  Setting.Always_Display = true;
 800f386:	4b37      	ldr	r3, [pc, #220]	; (800f464 <Setting_Init+0xf0>)
 800f388:	2201      	movs	r2, #1
 800f38a:	709a      	strb	r2, [r3, #2]
  // object 1
  Setting.Object[0].ID = 0;
 800f38c:	4b35      	ldr	r3, [pc, #212]	; (800f464 <Setting_Init+0xf0>)
 800f38e:	2200      	movs	r2, #0
 800f390:	711a      	strb	r2, [r3, #4]
  Setting.Object[0].Event = &Setting.Music_RandomSong;
 800f392:	4b34      	ldr	r3, [pc, #208]	; (800f464 <Setting_Init+0xf0>)
 800f394:	4a33      	ldr	r2, [pc, #204]	; (800f464 <Setting_Init+0xf0>)
 800f396:	611a      	str	r2, [r3, #16]
  Setting.Object[0].Name = "Random Songs";
 800f398:	4b32      	ldr	r3, [pc, #200]	; (800f464 <Setting_Init+0xf0>)
 800f39a:	4a33      	ldr	r2, [pc, #204]	; (800f468 <Setting_Init+0xf4>)
 800f39c:	609a      	str	r2, [r3, #8]
  if(*((bool*)(Setting.Object[0].Event)) == true)
 800f39e:	4b31      	ldr	r3, [pc, #196]	; (800f464 <Setting_Init+0xf0>)
 800f3a0:	691b      	ldr	r3, [r3, #16]
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d003      	beq.n	800f3b0 <Setting_Init+0x3c>
  {
    Setting.Object[0].Icons = &Toggle_Button_On_Icons;
 800f3a8:	4b2e      	ldr	r3, [pc, #184]	; (800f464 <Setting_Init+0xf0>)
 800f3aa:	4a30      	ldr	r2, [pc, #192]	; (800f46c <Setting_Init+0xf8>)
 800f3ac:	60da      	str	r2, [r3, #12]
 800f3ae:	e002      	b.n	800f3b6 <Setting_Init+0x42>
  }
  else
  {
    Setting.Object[0].Icons = &Toggle_Button_Off_Icons;
 800f3b0:	4b2c      	ldr	r3, [pc, #176]	; (800f464 <Setting_Init+0xf0>)
 800f3b2:	4a2f      	ldr	r2, [pc, #188]	; (800f470 <Setting_Init+0xfc>)
 800f3b4:	60da      	str	r2, [r3, #12]
  }
  // object 2
  Setting.Object[1].ID = 1;
 800f3b6:	4b2b      	ldr	r3, [pc, #172]	; (800f464 <Setting_Init+0xf0>)
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	751a      	strb	r2, [r3, #20]
  Setting.Object[1].Event = &Setting.Music_LoopOneSong;
 800f3bc:	4b29      	ldr	r3, [pc, #164]	; (800f464 <Setting_Init+0xf0>)
 800f3be:	4a2d      	ldr	r2, [pc, #180]	; (800f474 <Setting_Init+0x100>)
 800f3c0:	621a      	str	r2, [r3, #32]
  Setting.Object[1].Name = "Repeat Songs";
 800f3c2:	4b28      	ldr	r3, [pc, #160]	; (800f464 <Setting_Init+0xf0>)
 800f3c4:	4a2c      	ldr	r2, [pc, #176]	; (800f478 <Setting_Init+0x104>)
 800f3c6:	619a      	str	r2, [r3, #24]
  if(*((bool*)(Setting.Object[1].Event)) == true)
 800f3c8:	4b26      	ldr	r3, [pc, #152]	; (800f464 <Setting_Init+0xf0>)
 800f3ca:	6a1b      	ldr	r3, [r3, #32]
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d003      	beq.n	800f3da <Setting_Init+0x66>
  {
    Setting.Object[1].Icons = &Toggle_Button_On_Icons;
 800f3d2:	4b24      	ldr	r3, [pc, #144]	; (800f464 <Setting_Init+0xf0>)
 800f3d4:	4a25      	ldr	r2, [pc, #148]	; (800f46c <Setting_Init+0xf8>)
 800f3d6:	61da      	str	r2, [r3, #28]
 800f3d8:	e002      	b.n	800f3e0 <Setting_Init+0x6c>
  }
  else
  {
    Setting.Object[1].Icons = &Toggle_Button_Off_Icons;
 800f3da:	4b22      	ldr	r3, [pc, #136]	; (800f464 <Setting_Init+0xf0>)
 800f3dc:	4a24      	ldr	r2, [pc, #144]	; (800f470 <Setting_Init+0xfc>)
 800f3de:	61da      	str	r2, [r3, #28]
  }
  // object 3
  Setting.Object[2].ID = 2;
 800f3e0:	4b20      	ldr	r3, [pc, #128]	; (800f464 <Setting_Init+0xf0>)
 800f3e2:	2202      	movs	r2, #2
 800f3e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  Setting.Object[2].Event = &Setting.Always_Display;
 800f3e8:	4b1e      	ldr	r3, [pc, #120]	; (800f464 <Setting_Init+0xf0>)
 800f3ea:	4a24      	ldr	r2, [pc, #144]	; (800f47c <Setting_Init+0x108>)
 800f3ec:	631a      	str	r2, [r3, #48]	; 0x30
  Setting.Object[2].Name = "Always Display";
 800f3ee:	4b1d      	ldr	r3, [pc, #116]	; (800f464 <Setting_Init+0xf0>)
 800f3f0:	4a23      	ldr	r2, [pc, #140]	; (800f480 <Setting_Init+0x10c>)
 800f3f2:	629a      	str	r2, [r3, #40]	; 0x28
  if(*((bool*)(Setting.Object[2].Event)) == true)
 800f3f4:	4b1b      	ldr	r3, [pc, #108]	; (800f464 <Setting_Init+0xf0>)
 800f3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d003      	beq.n	800f406 <Setting_Init+0x92>
  {
    Setting.Object[2].Icons = &Toggle_Button_On_Icons;
 800f3fe:	4b19      	ldr	r3, [pc, #100]	; (800f464 <Setting_Init+0xf0>)
 800f400:	4a1a      	ldr	r2, [pc, #104]	; (800f46c <Setting_Init+0xf8>)
 800f402:	62da      	str	r2, [r3, #44]	; 0x2c
 800f404:	e002      	b.n	800f40c <Setting_Init+0x98>
  }
  else
  {
    Setting.Object[2].Icons = &Toggle_Button_Off_Icons;
 800f406:	4b17      	ldr	r3, [pc, #92]	; (800f464 <Setting_Init+0xf0>)
 800f408:	4a19      	ldr	r2, [pc, #100]	; (800f470 <Setting_Init+0xfc>)
 800f40a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  for(uint8_t i = 0; i < SETTING_MAX_ELEMENT; i++)
 800f40c:	2300      	movs	r3, #0
 800f40e:	71fb      	strb	r3, [r7, #7]
 800f410:	e009      	b.n	800f426 <Setting_Init+0xb2>
  {
    Setting.Object[i].ID = i;
 800f412:	79fb      	ldrb	r3, [r7, #7]
 800f414:	4a13      	ldr	r2, [pc, #76]	; (800f464 <Setting_Init+0xf0>)
 800f416:	011b      	lsls	r3, r3, #4
 800f418:	4413      	add	r3, r2
 800f41a:	3304      	adds	r3, #4
 800f41c:	79fa      	ldrb	r2, [r7, #7]
 800f41e:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < SETTING_MAX_ELEMENT; i++)
 800f420:	79fb      	ldrb	r3, [r7, #7]
 800f422:	3301      	adds	r3, #1
 800f424:	71fb      	strb	r3, [r7, #7]
 800f426:	79fb      	ldrb	r3, [r7, #7]
 800f428:	2b02      	cmp	r3, #2
 800f42a:	d9f2      	bls.n	800f412 <Setting_Init+0x9e>
//  Setting.Object[4].ID = 4;
//  // object 5
//  Setting.Object[5].ID = 5;
//  // object 6
//  Setting.Object[6].ID = 6;
  for(uint8_t i = 0; i < SCREEN_SETTING_MAX_LIST; i++)
 800f42c:	2300      	movs	r3, #0
 800f42e:	71bb      	strb	r3, [r7, #6]
 800f430:	e00e      	b.n	800f450 <Setting_Init+0xdc>
  {

    Display.ListLCDScreenSetting[i] = Setting.Object[i].ID;
 800f432:	79ba      	ldrb	r2, [r7, #6]
 800f434:	79bb      	ldrb	r3, [r7, #6]
 800f436:	490b      	ldr	r1, [pc, #44]	; (800f464 <Setting_Init+0xf0>)
 800f438:	0112      	lsls	r2, r2, #4
 800f43a:	440a      	add	r2, r1
 800f43c:	3204      	adds	r2, #4
 800f43e:	7811      	ldrb	r1, [r2, #0]
 800f440:	4a10      	ldr	r2, [pc, #64]	; (800f484 <Setting_Init+0x110>)
 800f442:	4413      	add	r3, r2
 800f444:	460a      	mov	r2, r1
 800f446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  for(uint8_t i = 0; i < SCREEN_SETTING_MAX_LIST; i++)
 800f44a:	79bb      	ldrb	r3, [r7, #6]
 800f44c:	3301      	adds	r3, #1
 800f44e:	71bb      	strb	r3, [r7, #6]
 800f450:	79bb      	ldrb	r3, [r7, #6]
 800f452:	2b02      	cmp	r3, #2
 800f454:	d9ed      	bls.n	800f432 <Setting_Init+0xbe>

  }
}
 800f456:	bf00      	nop
 800f458:	bf00      	nop
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	200197f4 	.word	0x200197f4
 800f468:	0801ac14 	.word	0x0801ac14
 800f46c:	200008ac 	.word	0x200008ac
 800f470:	200008b4 	.word	0x200008b4
 800f474:	200197f5 	.word	0x200197f5
 800f478:	0801ac24 	.word	0x0801ac24
 800f47c:	200197f6 	.word	0x200197f6
 800f480:	0801ac34 	.word	0x0801ac34
 800f484:	20014cb8 	.word	0x20014cb8

0800f488 <Setting_ToggleEvent>:
void Setting_ToggleEvent(uint8_t id)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	4603      	mov	r3, r0
 800f490:	71fb      	strb	r3, [r7, #7]
  if(id >= SETTING_MAX_ELEMENT)
 800f492:	79fb      	ldrb	r3, [r7, #7]
 800f494:	2b02      	cmp	r3, #2
 800f496:	d903      	bls.n	800f4a0 <Setting_ToggleEvent+0x18>
  {
    printf("Out of range\n");
 800f498:	4812      	ldr	r0, [pc, #72]	; (800f4e4 <Setting_ToggleEvent+0x5c>)
 800f49a:	f008 fd3b 	bl	8017f14 <puts>
    return;
 800f49e:	e01d      	b.n	800f4dc <Setting_ToggleEvent+0x54>
  }
  else
  {
    if(*((bool*)(Setting.Object[id].Event)) == true)
 800f4a0:	79fb      	ldrb	r3, [r7, #7]
 800f4a2:	4a11      	ldr	r2, [pc, #68]	; (800f4e8 <Setting_ToggleEvent+0x60>)
 800f4a4:	011b      	lsls	r3, r3, #4
 800f4a6:	4413      	add	r3, r2
 800f4a8:	3310      	adds	r3, #16
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d008      	beq.n	800f4c4 <Setting_ToggleEvent+0x3c>
    {
      *((bool*)(Setting.Object[id].Event)) = false;
 800f4b2:	79fb      	ldrb	r3, [r7, #7]
 800f4b4:	4a0c      	ldr	r2, [pc, #48]	; (800f4e8 <Setting_ToggleEvent+0x60>)
 800f4b6:	011b      	lsls	r3, r3, #4
 800f4b8:	4413      	add	r3, r2
 800f4ba:	3310      	adds	r3, #16
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	701a      	strb	r2, [r3, #0]
 800f4c2:	e007      	b.n	800f4d4 <Setting_ToggleEvent+0x4c>
//      Setting.Object[id].Icons = &Toggle_Button_Off_Icons;
    }
    else
    {
      *((bool*)(Setting.Object[id].Event)) = true;
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	4a08      	ldr	r2, [pc, #32]	; (800f4e8 <Setting_ToggleEvent+0x60>)
 800f4c8:	011b      	lsls	r3, r3, #4
 800f4ca:	4413      	add	r3, r2
 800f4cc:	3310      	adds	r3, #16
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	701a      	strb	r2, [r3, #0]
//      Setting.Object[id].Icons = &Toggle_Button_On_Icons;
    }
    Setting_SyncEvent(id);
 800f4d4:	79fb      	ldrb	r3, [r7, #7]
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f000 f808 	bl	800f4ec <Setting_SyncEvent>
//    printf("Setting.Music_RandomSong = %d\n", Setting.Music_RandomSong);
//    printf("Setting.Music_LoopOneSong = %d\n", Setting.Music_LoopOneSong);
//    printf("Setting.Always_Display = %d\n", Setting.Always_Display);
  }
}
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	0801ac44 	.word	0x0801ac44
 800f4e8:	200197f4 	.word	0x200197f4

0800f4ec <Setting_SyncEvent>:
void Setting_SyncEvent(uint8_t id)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	71fb      	strb	r3, [r7, #7]
  if(id >= SETTING_MAX_ELEMENT)
 800f4f6:	79fb      	ldrb	r3, [r7, #7]
 800f4f8:	2b02      	cmp	r3, #2
 800f4fa:	d903      	bls.n	800f504 <Setting_SyncEvent+0x18>
  {
    printf("Out of range\n");
 800f4fc:	480f      	ldr	r0, [pc, #60]	; (800f53c <Setting_SyncEvent+0x50>)
 800f4fe:	f008 fd09 	bl	8017f14 <puts>
    return;
 800f502:	e017      	b.n	800f534 <Setting_SyncEvent+0x48>
  }
  else
  {
    if(*((bool*)(Setting.Object[id].Event)) == true)
 800f504:	79fb      	ldrb	r3, [r7, #7]
 800f506:	4a0e      	ldr	r2, [pc, #56]	; (800f540 <Setting_SyncEvent+0x54>)
 800f508:	011b      	lsls	r3, r3, #4
 800f50a:	4413      	add	r3, r2
 800f50c:	3310      	adds	r3, #16
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d007      	beq.n	800f526 <Setting_SyncEvent+0x3a>
    {
      Setting.Object[id].Icons = &Toggle_Button_On_Icons;
 800f516:	79fb      	ldrb	r3, [r7, #7]
 800f518:	4a09      	ldr	r2, [pc, #36]	; (800f540 <Setting_SyncEvent+0x54>)
 800f51a:	011b      	lsls	r3, r3, #4
 800f51c:	4413      	add	r3, r2
 800f51e:	330c      	adds	r3, #12
 800f520:	4a08      	ldr	r2, [pc, #32]	; (800f544 <Setting_SyncEvent+0x58>)
 800f522:	601a      	str	r2, [r3, #0]
 800f524:	e006      	b.n	800f534 <Setting_SyncEvent+0x48>
    }
    else
    {
      Setting.Object[id].Icons = &Toggle_Button_Off_Icons;
 800f526:	79fb      	ldrb	r3, [r7, #7]
 800f528:	4a05      	ldr	r2, [pc, #20]	; (800f540 <Setting_SyncEvent+0x54>)
 800f52a:	011b      	lsls	r3, r3, #4
 800f52c:	4413      	add	r3, r2
 800f52e:	330c      	adds	r3, #12
 800f530:	4a05      	ldr	r2, [pc, #20]	; (800f548 <Setting_SyncEvent+0x5c>)
 800f532:	601a      	str	r2, [r3, #0]
    }
  }
}
 800f534:	3708      	adds	r7, #8
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	0801ac44 	.word	0x0801ac44
 800f540:	200197f4 	.word	0x200197f4
 800f544:	200008ac 	.word	0x200008ac
 800f548:	200008b4 	.word	0x200008b4

0800f54c <RingBuffer_LIFO_Init>:
 */

#include <RingBuffer_LIFO.h>
#include <stdio.h>
LIFO_STATUS RingBuffer_LIFO_Init(RingBuffer_LIFO *Buffer, uint16_t *buff, uint32_t size)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b084      	sub	sp, #16
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	607a      	str	r2, [r7, #4]
  if(Buffer == NULL || buff == NULL || size < 2)
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d005      	beq.n	800f56a <RingBuffer_LIFO_Init+0x1e>
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d002      	beq.n	800f56a <RingBuffer_LIFO_Init+0x1e>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2b01      	cmp	r3, #1
 800f568:	d803      	bhi.n	800f572 <RingBuffer_LIFO_Init+0x26>
  {
    Buffer->Status = IS_NOT_INITIALIZED;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2200      	movs	r2, #0
 800f56e:	741a      	strb	r2, [r3, #16]
 800f570:	e010      	b.n	800f594 <RingBuffer_LIFO_Init+0x48>
  }
  else
  {
    Buffer->BaseAddress = buff;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	68ba      	ldr	r2, [r7, #8]
 800f576:	601a      	str	r2, [r3, #0]
    Buffer->Cursor = Buffer->BaseAddress - 1;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	1e9a      	subs	r2, r3, #2
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	605a      	str	r2, [r3, #4]
    Buffer->Counter = 0;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	609a      	str	r2, [r3, #8]
    Buffer->Size = size;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	60da      	str	r2, [r3, #12]
    Buffer->Status = IS_EMPTY;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2201      	movs	r2, #1
 800f592:	741a      	strb	r2, [r3, #16]
  }
  if(Buffer->Status != IS_NOT_INITIALIZED)
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	7c1b      	ldrb	r3, [r3, #16]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d002      	beq.n	800f5a2 <RingBuffer_LIFO_Init+0x56>
  {
    printf("Buffer is Init OK\n");
 800f59c:	4804      	ldr	r0, [pc, #16]	; (800f5b0 <RingBuffer_LIFO_Init+0x64>)
 800f59e:	f008 fcb9 	bl	8017f14 <puts>
  }
  return Buffer->Status;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	7c1b      	ldrb	r3, [r3, #16]
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	0801ac54 	.word	0x0801ac54

0800f5b4 <RingBuffer_LIFO_Push>:

LIFO_STATUS RingBuffer_LIFO_Push(RingBuffer_LIFO *Buffer, uint16_t data)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	460b      	mov	r3, r1
 800f5be:	807b      	strh	r3, [r7, #2]
  // Push data to buffer
  Buffer->Cursor++;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	1c9a      	adds	r2, r3, #2
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	605a      	str	r2, [r3, #4]
  if(Buffer->Cursor >= Buffer->BaseAddress + Buffer->Size)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	685a      	ldr	r2, [r3, #4]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6819      	ldr	r1, [r3, #0]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	005b      	lsls	r3, r3, #1
 800f5d8:	440b      	add	r3, r1
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d303      	bcc.n	800f5e6 <RingBuffer_LIFO_Push+0x32>
  {
    Buffer->Cursor = Buffer->BaseAddress; //Full buffer, roll back
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	605a      	str	r2, [r3, #4]
  }
  *Buffer->Cursor = data;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	887a      	ldrh	r2, [r7, #2]
 800f5ec:	801a      	strh	r2, [r3, #0]

  // Increase counter of buffer
  Buffer->Counter++;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	689b      	ldr	r3, [r3, #8]
 800f5f2:	1c5a      	adds	r2, r3, #1
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	609a      	str	r2, [r3, #8]
  // Check current size
  if(Buffer->Counter >= Buffer->Size)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	689a      	ldr	r2, [r3, #8]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	429a      	cmp	r2, r3
 800f602:	d307      	bcc.n	800f614 <RingBuffer_LIFO_Push+0x60>
  {
    Buffer->Counter = Buffer->Size; // Keep counter buffer do not over
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	68da      	ldr	r2, [r3, #12]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	609a      	str	r2, [r3, #8]
    Buffer->Status = IS_FULLY; // Notice fully
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2202      	movs	r2, #2
 800f610:	741a      	strb	r2, [r3, #16]
 800f612:	e002      	b.n	800f61a <RingBuffer_LIFO_Push+0x66>
  }
  else
  {
    Buffer->Status = IS_CONTAIN;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2203      	movs	r2, #3
 800f618:	741a      	strb	r2, [r3, #16]
  }

  return Buffer->Status;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	7c1b      	ldrb	r3, [r3, #16]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	370c      	adds	r7, #12
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr

0800f62a <RingBuffer_LIFO_Pop>:

LIFO_STATUS RingBuffer_LIFO_Pop(RingBuffer_LIFO *Buffer, uint16_t *data)
{
 800f62a:	b480      	push	{r7}
 800f62c:	b083      	sub	sp, #12
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
 800f632:	6039      	str	r1, [r7, #0]
  if(Buffer->Status != IS_EMPTY)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	7c1b      	ldrb	r3, [r3, #16]
 800f638:	2b01      	cmp	r3, #1
 800f63a:	d027      	beq.n	800f68c <RingBuffer_LIFO_Pop+0x62>
  {
    // Pop data from buffer
    *data = *Buffer->Cursor;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	881b      	ldrh	r3, [r3, #0]
 800f642:	b29a      	uxth	r2, r3
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	801a      	strh	r2, [r3, #0]
    Buffer->Cursor--;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	1e9a      	subs	r2, r3, #2
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	605a      	str	r2, [r3, #4]
    if(Buffer->Cursor < Buffer->BaseAddress)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	685a      	ldr	r2, [r3, #4]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d20a      	bcs.n	800f674 <RingBuffer_LIFO_Pop+0x4a>
    {
      Buffer->Cursor = Buffer->BaseAddress + Buffer->Size - 1;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f66a:	3b01      	subs	r3, #1
 800f66c:	005b      	lsls	r3, r3, #1
 800f66e:	441a      	add	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	605a      	str	r2, [r3, #4]
    }
    // Decrease counter of buffer
    Buffer->Counter--;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	689b      	ldr	r3, [r3, #8]
 800f678:	1e5a      	subs	r2, r3, #1
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	609a      	str	r2, [r3, #8]
    // Check current size
    if(Buffer->Counter == 0)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	689b      	ldr	r3, [r3, #8]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d102      	bne.n	800f68c <RingBuffer_LIFO_Pop+0x62>
    {
      Buffer->Status = IS_EMPTY; // Notice fully
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2201      	movs	r2, #1
 800f68a:	741a      	strb	r2, [r3, #16]
    }
  }
  return Buffer->Status;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	7c1b      	ldrb	r3, [r3, #16]
}
 800f690:	4618      	mov	r0, r3
 800f692:	370c      	adds	r7, #12
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <RandomVariableWithoutValue>:
    randomVariable = min;
  }
  return randomVariable;
}
uint32_t RandomVariableWithoutValue(uint32_t min, uint32_t max, uint32_t value)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b086      	sub	sp, #24
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	607a      	str	r2, [r7, #4]
  uint32_t randomVariable = 0;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	617b      	str	r3, [r7, #20]
  do{
#if (SELECT_RANDOM == USE_MANUAL_TIMER)
    randomVariable = variableCounter;
#elif (SELECT_RANDOM == USE_SYSTEM_TIMER)
    randomVariable = HAL_GetTick();
 800f6ac:	f7f8 f89c 	bl	80077e8 <HAL_GetTick>
 800f6b0:	6178      	str	r0, [r7, #20]
#endif
    if(max > min)
 800f6b2:	68ba      	ldr	r2, [r7, #8]
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d90c      	bls.n	800f6d4 <RandomVariableWithoutValue+0x38>
    {
      randomVariable = min + (randomVariable % (max - min));
 800f6ba:	68ba      	ldr	r2, [r7, #8]
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	1ad2      	subs	r2, r2, r3
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6c6:	fb01 f202 	mul.w	r2, r1, r2
 800f6ca:	1a9b      	subs	r3, r3, r2
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	617b      	str	r3, [r7, #20]
 800f6d2:	e001      	b.n	800f6d8 <RandomVariableWithoutValue+0x3c>
    }
    else
    {
      randomVariable = min;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	617b      	str	r3, [r7, #20]
    }
  }while(value == randomVariable);
 800f6d8:	687a      	ldr	r2, [r7, #4]
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d0e5      	beq.n	800f6ac <RandomVariableWithoutValue+0x10>
  return randomVariable;
 800f6e0:	697b      	ldr	r3, [r7, #20]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3718      	adds	r7, #24
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	0000      	movs	r0, r0
 800f6ec:	0000      	movs	r0, r0
	...

0800f6f0 <BatteryPercentCalculation>:
uint8_t BatteryPercentCalculation(float voltage)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	ed87 0a01 	vstr	s0, [r7, #4]
  // 4.2v --> 100%
  // 3.5v --> 0%
  // step 0.007v --> 1%
  // 3.8v ==> (3.8 - 3.5) / 0.007
  return (voltage >= 3.5 ? (uint8_t)((voltage - 3.5) / 0.007) : 0);
 800f6fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800f6fe:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 800f702:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70a:	db19      	blt.n	800f740 <BatteryPercentCalculation+0x50>
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f7f0 ff23 	bl	8000558 <__aeabi_f2d>
 800f712:	f04f 0200 	mov.w	r2, #0
 800f716:	4b10      	ldr	r3, [pc, #64]	; (800f758 <BatteryPercentCalculation+0x68>)
 800f718:	f7f0 fdbe 	bl	8000298 <__aeabi_dsub>
 800f71c:	4602      	mov	r2, r0
 800f71e:	460b      	mov	r3, r1
 800f720:	4610      	mov	r0, r2
 800f722:	4619      	mov	r1, r3
 800f724:	a30a      	add	r3, pc, #40	; (adr r3, 800f750 <BatteryPercentCalculation+0x60>)
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	f7f1 f897 	bl	800085c <__aeabi_ddiv>
 800f72e:	4602      	mov	r2, r0
 800f730:	460b      	mov	r3, r1
 800f732:	4610      	mov	r0, r2
 800f734:	4619      	mov	r1, r3
 800f736:	f7f1 fa3f 	bl	8000bb8 <__aeabi_d2uiz>
 800f73a:	4603      	mov	r3, r0
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	e000      	b.n	800f742 <BatteryPercentCalculation+0x52>
 800f740:	2300      	movs	r3, #0
}
 800f742:	4618      	mov	r0, r3
 800f744:	3708      	adds	r7, #8
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	f3af 8000 	nop.w
 800f750:	3126e979 	.word	0x3126e979
 800f754:	3f7cac08 	.word	0x3f7cac08
 800f758:	400c0000 	.word	0x400c0000

0800f75c <MX_FATFS_Init>:
extern SD_HandleTypeDef hsd;
extern DMA_HandleTypeDef hdma_sdio;
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f760:	4904      	ldr	r1, [pc, #16]	; (800f774 <MX_FATFS_Init+0x18>)
 800f762:	4805      	ldr	r0, [pc, #20]	; (800f778 <MX_FATFS_Init+0x1c>)
 800f764:	f004 f848 	bl	80137f8 <FATFS_LinkDriver>
 800f768:	4603      	mov	r3, r0
 800f76a:	461a      	mov	r2, r3
 800f76c:	4b03      	ldr	r3, [pc, #12]	; (800f77c <MX_FATFS_Init+0x20>)
 800f76e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f770:	bf00      	nop
 800f772:	bd80      	pop	{r7, pc}
 800f774:	2001982c 	.word	0x2001982c
 800f778:	0804d97c 	.word	0x0804d97c
 800f77c:	20019828 	.word	0x20019828

0800f780 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f780:	b480      	push	{r7}
 800f782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f784:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f786:	4618      	mov	r0, r3
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <BSP_SD_Init>:

/* USER CODE BEGIN Application */
uint8_t BSP_SD_Init(void)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f796:	2300      	movs	r3, #0
 800f798:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f79a:	f000 f9ea 	bl	800fb72 <BSP_SD_IsDetected>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d001      	beq.n	800f7a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	e01b      	b.n	800f7e0 <BSP_SD_Init+0x50>
  }
  printf("Detected SDcard !!!\r\n");
 800f7a8:	480f      	ldr	r0, [pc, #60]	; (800f7e8 <BSP_SD_Init+0x58>)
 800f7aa:	f008 fbb3 	bl	8017f14 <puts>
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f7ae:	480f      	ldr	r0, [pc, #60]	; (800f7ec <BSP_SD_Init+0x5c>)
 800f7b0:	f7fb fe04 	bl	800b3bc <HAL_SD_Init>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f7b8:	79fb      	ldrb	r3, [r7, #7]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d10f      	bne.n	800f7de <BSP_SD_Init+0x4e>
  {

    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800f7be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f7c2:	480a      	ldr	r0, [pc, #40]	; (800f7ec <BSP_SD_Init+0x5c>)
 800f7c4:	f7fc fbd2 	bl	800bf6c <HAL_SD_ConfigWideBusOperation>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d007      	beq.n	800f7de <BSP_SD_Init+0x4e>
    {
      sd_state = MSD_ERROR;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	71fb      	strb	r3, [r7, #7]
      printf("BSP SD Init failed Error code = %ld\r\n", hsd.ErrorCode);
 800f7d2:	4b06      	ldr	r3, [pc, #24]	; (800f7ec <BSP_SD_Init+0x5c>)
 800f7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	4805      	ldr	r0, [pc, #20]	; (800f7f0 <BSP_SD_Init+0x60>)
 800f7da:	f008 fb15 	bl	8017e08 <iprintf>
    }
  }

  return sd_state;
 800f7de:	79fb      	ldrb	r3, [r7, #7]
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	0801ac68 	.word	0x0801ac68
 800f7ec:	20001d18 	.word	0x20001d18
 800f7f0:	0801ac80 	.word	0x0801ac80

0800f7f4 <ScanSDCard>:
void ScanSDCard(void)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b08c      	sub	sp, #48	; 0x30
 800f7f8:	af02      	add	r7, sp, #8
  char msg[30] = {0};
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	60bb      	str	r3, [r7, #8]
 800f7fe:	f107 030c 	add.w	r3, r7, #12
 800f802:	2200      	movs	r2, #0
 800f804:	601a      	str	r2, [r3, #0]
 800f806:	605a      	str	r2, [r3, #4]
 800f808:	609a      	str	r2, [r3, #8]
 800f80a:	60da      	str	r2, [r3, #12]
 800f80c:	611a      	str	r2, [r3, #16]
 800f80e:	615a      	str	r2, [r3, #20]
 800f810:	831a      	strh	r2, [r3, #24]
  uint8_t isError = 0;
 800f812:	2300      	movs	r3, #0
 800f814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FontDef font = Font_11x18;
 800f818:	4a85      	ldr	r2, [pc, #532]	; (800fa30 <ScanSDCard+0x23c>)
 800f81a:	463b      	mov	r3, r7
 800f81c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f820:	e883 0003 	stmia.w	r3, {r0, r1}
  while(1)
  {
    // Detect SDCard
    while (BSP_SD_Init() == MSD_ERROR)
 800f824:	e024      	b.n	800f870 <ScanSDCard+0x7c>
    {
      printf("Do not detected SDCard!!!\n");
 800f826:	4883      	ldr	r0, [pc, #524]	; (800fa34 <ScanSDCard+0x240>)
 800f828:	f008 fb74 	bl	8017f14 <puts>
      printf("Please insert your SDCard\n");
 800f82c:	4882      	ldr	r0, [pc, #520]	; (800fa38 <ScanSDCard+0x244>)
 800f82e:	f008 fb71 	bl	8017f14 <puts>
      ST7789_WriteStringAutoDownLine(1 , "[+] Do not detected SDCard!!!", font, RED, WHITE);
 800f832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f836:	9301      	str	r3, [sp, #4]
 800f838:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	463b      	mov	r3, r7
 800f840:	cb0c      	ldmia	r3, {r2, r3}
 800f842:	497e      	ldr	r1, [pc, #504]	; (800fa3c <ScanSDCard+0x248>)
 800f844:	2001      	movs	r0, #1
 800f846:	f7f7 fb65 	bl	8006f14 <ST7789_WriteStringAutoDownLine>
      ST7789_WriteStringAutoDownLine(0 , "[+] Please insert your SDCard.", font, RED, WHITE);
 800f84a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f84e:	9301      	str	r3, [sp, #4]
 800f850:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	463b      	mov	r3, r7
 800f858:	cb0c      	ldmia	r3, {r2, r3}
 800f85a:	4979      	ldr	r1, [pc, #484]	; (800fa40 <ScanSDCard+0x24c>)
 800f85c:	2000      	movs	r0, #0
 800f85e:	f7f7 fb59 	bl	8006f14 <ST7789_WriteStringAutoDownLine>
      HAL_Delay(1000);
 800f862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f866:	f7f7 ffcb 	bl	8007800 <HAL_Delay>
      isError = 1;
 800f86a:	2301      	movs	r3, #1
 800f86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while (BSP_SD_Init() == MSD_ERROR)
 800f870:	f7ff ff8e 	bl	800f790 <BSP_SD_Init>
 800f874:	4603      	mov	r3, r0
 800f876:	2b01      	cmp	r3, #1
 800f878:	d0d5      	beq.n	800f826 <ScanSDCard+0x32>
    }
    // Mount to drive
    retSD = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 800f87a:	2200      	movs	r2, #0
 800f87c:	4971      	ldr	r1, [pc, #452]	; (800fa44 <ScanSDCard+0x250>)
 800f87e:	4872      	ldr	r0, [pc, #456]	; (800fa48 <ScanSDCard+0x254>)
 800f880:	f002 fede 	bl	8012640 <f_mount>
 800f884:	4603      	mov	r3, r0
 800f886:	461a      	mov	r2, r3
 800f888:	4b70      	ldr	r3, [pc, #448]	; (800fa4c <ScanSDCard+0x258>)
 800f88a:	701a      	strb	r2, [r3, #0]
    if(retSD != FR_OK)
 800f88c:	4b6f      	ldr	r3, [pc, #444]	; (800fa4c <ScanSDCard+0x258>)
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d028      	beq.n	800f8e6 <ScanSDCard+0xf2>
    {
      printf("f_mount fail ! Error code: %d\r\n", retSD);
 800f894:	4b6d      	ldr	r3, [pc, #436]	; (800fa4c <ScanSDCard+0x258>)
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	4619      	mov	r1, r3
 800f89a:	486d      	ldr	r0, [pc, #436]	; (800fa50 <ScanSDCard+0x25c>)
 800f89c:	f008 fab4 	bl	8017e08 <iprintf>
      ST7789_WriteStringAutoDownLine(0 , "[+] Wrong SDCard!!!", font, RED, WHITE);
 800f8a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8a4:	9301      	str	r3, [sp, #4]
 800f8a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800f8aa:	9300      	str	r3, [sp, #0]
 800f8ac:	463b      	mov	r3, r7
 800f8ae:	cb0c      	ldmia	r3, {r2, r3}
 800f8b0:	4968      	ldr	r1, [pc, #416]	; (800fa54 <ScanSDCard+0x260>)
 800f8b2:	2000      	movs	r0, #0
 800f8b4:	f7f7 fb2e 	bl	8006f14 <ST7789_WriteStringAutoDownLine>
      ST7789_WriteStringAutoDownLine(0 , "[+] Please change your SDCrad format.", font, RED, WHITE);
 800f8b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8bc:	9301      	str	r3, [sp, #4]
 800f8be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800f8c2:	9300      	str	r3, [sp, #0]
 800f8c4:	463b      	mov	r3, r7
 800f8c6:	cb0c      	ldmia	r3, {r2, r3}
 800f8c8:	4963      	ldr	r1, [pc, #396]	; (800fa58 <ScanSDCard+0x264>)
 800f8ca:	2000      	movs	r0, #0
 800f8cc:	f7f7 fb22 	bl	8006f14 <ST7789_WriteStringAutoDownLine>
      while(BSP_SD_IsDetected() == SD_PRESENT)
 800f8d0:	e003      	b.n	800f8da <ScanSDCard+0xe6>
      {
        HAL_Delay(1000);
 800f8d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f8d6:	f7f7 ff93 	bl	8007800 <HAL_Delay>
      while(BSP_SD_IsDetected() == SD_PRESENT)
 800f8da:	f000 f94a 	bl	800fb72 <BSP_SD_IsDetected>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d0f6      	beq.n	800f8d2 <ScanSDCard+0xde>
      }
      continue;
 800f8e4:	e09f      	b.n	800fa26 <ScanSDCard+0x232>
    }
    else
    {
      printf("f_mount completed !!\r\n");
 800f8e6:	485d      	ldr	r0, [pc, #372]	; (800fa5c <ScanSDCard+0x268>)
 800f8e8:	f008 fb14 	bl	8017f14 <puts>
    }
    if(isError > 0)
 800f8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d015      	beq.n	800f920 <ScanSDCard+0x12c>
    {
      ST7789_WriteStringAutoDownLine(0 , "[+] Detected SDCard", font, BLUE, WHITE);
 800f8f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8f8:	9301      	str	r3, [sp, #4]
 800f8fa:	231f      	movs	r3, #31
 800f8fc:	9300      	str	r3, [sp, #0]
 800f8fe:	463b      	mov	r3, r7
 800f900:	cb0c      	ldmia	r3, {r2, r3}
 800f902:	4957      	ldr	r1, [pc, #348]	; (800fa60 <ScanSDCard+0x26c>)
 800f904:	2000      	movs	r0, #0
 800f906:	f7f7 fb05 	bl	8006f14 <ST7789_WriteStringAutoDownLine>
      ST7789_WriteStringAutoDownLine(0 , "[+] Scanning WAV file...", font, BLUE, WHITE);
 800f90a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f90e:	9301      	str	r3, [sp, #4]
 800f910:	231f      	movs	r3, #31
 800f912:	9300      	str	r3, [sp, #0]
 800f914:	463b      	mov	r3, r7
 800f916:	cb0c      	ldmia	r3, {r2, r3}
 800f918:	4952      	ldr	r1, [pc, #328]	; (800fa64 <ScanSDCard+0x270>)
 800f91a:	2000      	movs	r0, #0
 800f91c:	f7f7 fafa 	bl	8006f14 <ST7789_WriteStringAutoDownLine>
    }
    // Scan wav file
    ScanWavefiles(F_Music);
 800f920:	4851      	ldr	r0, [pc, #324]	; (800fa68 <ScanSDCard+0x274>)
 800f922:	f7f2 ffad 	bl	8002880 <ScanWavefiles>
    if(Audio.MaxSong > 0 && isError > 0)
 800f926:	4b51      	ldr	r3, [pc, #324]	; (800fa6c <ScanSDCard+0x278>)
 800f928:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f92c:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800f930:	2b00      	cmp	r3, #0
 800f932:	d04b      	beq.n	800f9cc <ScanSDCard+0x1d8>
 800f934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d047      	beq.n	800f9cc <ScanSDCard+0x1d8>
    {
      if(Audio.MaxSong == 1)
 800f93c:	4b4b      	ldr	r3, [pc, #300]	; (800fa6c <ScanSDCard+0x278>)
 800f93e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f942:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800f946:	2b01      	cmp	r3, #1
 800f948:	d118      	bne.n	800f97c <ScanSDCard+0x188>
      {
        sprintf(msg, "[+] Found %d song", Audio.MaxSong);
 800f94a:	4b48      	ldr	r3, [pc, #288]	; (800fa6c <ScanSDCard+0x278>)
 800f94c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f950:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800f954:	461a      	mov	r2, r3
 800f956:	f107 0308 	add.w	r3, r7, #8
 800f95a:	4945      	ldr	r1, [pc, #276]	; (800fa70 <ScanSDCard+0x27c>)
 800f95c:	4618      	mov	r0, r3
 800f95e:	f008 fae1 	bl	8017f24 <siprintf>
        ST7789_WriteStringAutoDownLine(0 , msg, font, BLUE, WHITE);
 800f962:	f107 0108 	add.w	r1, r7, #8
 800f966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f96a:	9301      	str	r3, [sp, #4]
 800f96c:	231f      	movs	r3, #31
 800f96e:	9300      	str	r3, [sp, #0]
 800f970:	463b      	mov	r3, r7
 800f972:	cb0c      	ldmia	r3, {r2, r3}
 800f974:	2000      	movs	r0, #0
 800f976:	f7f7 facd 	bl	8006f14 <ST7789_WriteStringAutoDownLine>
 800f97a:	e017      	b.n	800f9ac <ScanSDCard+0x1b8>
      }
      else
      {
        sprintf(msg, "[+] Found %d songs", Audio.MaxSong);
 800f97c:	4b3b      	ldr	r3, [pc, #236]	; (800fa6c <ScanSDCard+0x278>)
 800f97e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f982:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800f986:	461a      	mov	r2, r3
 800f988:	f107 0308 	add.w	r3, r7, #8
 800f98c:	4939      	ldr	r1, [pc, #228]	; (800fa74 <ScanSDCard+0x280>)
 800f98e:	4618      	mov	r0, r3
 800f990:	f008 fac8 	bl	8017f24 <siprintf>
        ST7789_WriteStringAutoDownLine(0 , msg, font, BLUE, WHITE);
 800f994:	f107 0108 	add.w	r1, r7, #8
 800f998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f99c:	9301      	str	r3, [sp, #4]
 800f99e:	231f      	movs	r3, #31
 800f9a0:	9300      	str	r3, [sp, #0]
 800f9a2:	463b      	mov	r3, r7
 800f9a4:	cb0c      	ldmia	r3, {r2, r3}
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	f7f7 fab4 	bl	8006f14 <ST7789_WriteStringAutoDownLine>

      }
      ST7789_WriteStringAutoDownLine(0 , "[+] Start play music after 5s...", font, BLUE, WHITE);
 800f9ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	231f      	movs	r3, #31
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	463b      	mov	r3, r7
 800f9b8:	cb0c      	ldmia	r3, {r2, r3}
 800f9ba:	492f      	ldr	r1, [pc, #188]	; (800fa78 <ScanSDCard+0x284>)
 800f9bc:	2000      	movs	r0, #0
 800f9be:	f7f7 faa9 	bl	8006f14 <ST7789_WriteStringAutoDownLine>
      HAL_Delay(5000);
 800f9c2:	f241 3088 	movw	r0, #5000	; 0x1388
 800f9c6:	f7f7 ff1b 	bl	8007800 <HAL_Delay>
      return;
 800f9ca:	e02e      	b.n	800fa2a <ScanSDCard+0x236>
    }
    else if(Audio.MaxSong > 0)
 800f9cc:	4b27      	ldr	r3, [pc, #156]	; (800fa6c <ScanSDCard+0x278>)
 800f9ce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f9d2:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d126      	bne.n	800fa28 <ScanSDCard+0x234>
    {
      return;
    }
    else
    {
      ST7789_WriteStringAutoDownLine(0 , "[+] Do not found any song!!!", font, RED, WHITE);
 800f9da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9de:	9301      	str	r3, [sp, #4]
 800f9e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800f9e4:	9300      	str	r3, [sp, #0]
 800f9e6:	463b      	mov	r3, r7
 800f9e8:	cb0c      	ldmia	r3, {r2, r3}
 800f9ea:	4924      	ldr	r1, [pc, #144]	; (800fa7c <ScanSDCard+0x288>)
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	f7f7 fa91 	bl	8006f14 <ST7789_WriteStringAutoDownLine>
      ST7789_WriteStringAutoDownLine(0 , "[+] Please add more song.", font, RED, WHITE);
 800f9f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9f6:	9301      	str	r3, [sp, #4]
 800f9f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800f9fc:	9300      	str	r3, [sp, #0]
 800f9fe:	463b      	mov	r3, r7
 800fa00:	cb0c      	ldmia	r3, {r2, r3}
 800fa02:	491f      	ldr	r1, [pc, #124]	; (800fa80 <ScanSDCard+0x28c>)
 800fa04:	2000      	movs	r0, #0
 800fa06:	f7f7 fa85 	bl	8006f14 <ST7789_WriteStringAutoDownLine>
      isError = 2;
 800fa0a:	2302      	movs	r3, #2
 800fa0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while(BSP_SD_IsDetected() == SD_PRESENT)
 800fa10:	e003      	b.n	800fa1a <ScanSDCard+0x226>
      {
        HAL_Delay(1000);
 800fa12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fa16:	f7f7 fef3 	bl	8007800 <HAL_Delay>
      while(BSP_SD_IsDetected() == SD_PRESENT)
 800fa1a:	f000 f8aa 	bl	800fb72 <BSP_SD_IsDetected>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d0f6      	beq.n	800fa12 <ScanSDCard+0x21e>
      }
      continue;
 800fa24:	bf00      	nop
    while (BSP_SD_Init() == MSD_ERROR)
 800fa26:	e723      	b.n	800f870 <ScanSDCard+0x7c>
      return;
 800fa28:	bf00      	nop
    }
  }
}
 800fa2a:	3728      	adds	r7, #40	; 0x28
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	2000089c 	.word	0x2000089c
 800fa34:	0801aca8 	.word	0x0801aca8
 800fa38:	0801acc4 	.word	0x0801acc4
 800fa3c:	0801ace0 	.word	0x0801ace0
 800fa40:	0801ad00 	.word	0x0801ad00
 800fa44:	2001982c 	.word	0x2001982c
 800fa48:	20019830 	.word	0x20019830
 800fa4c:	20019828 	.word	0x20019828
 800fa50:	0801ad20 	.word	0x0801ad20
 800fa54:	0801ad40 	.word	0x0801ad40
 800fa58:	0801ad54 	.word	0x0801ad54
 800fa5c:	0801ad7c 	.word	0x0801ad7c
 800fa60:	0801ad94 	.word	0x0801ad94
 800fa64:	0801ada8 	.word	0x0801ada8
 800fa68:	0801adc4 	.word	0x0801adc4
 800fa6c:	2000cc84 	.word	0x2000cc84
 800fa70:	0801add0 	.word	0x0801add0
 800fa74:	0801ade4 	.word	0x0801ade4
 800fa78:	0801adf8 	.word	0x0801adf8
 800fa7c:	0801ae1c 	.word	0x0801ae1c
 800fa80:	0801ae3c 	.word	0x0801ae3c

0800fa84 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b086      	sub	sp, #24
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fa90:	2300      	movs	r3, #0
 800fa92:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	68ba      	ldr	r2, [r7, #8]
 800fa98:	68f9      	ldr	r1, [r7, #12]
 800fa9a:	4806      	ldr	r0, [pc, #24]	; (800fab4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fa9c:	f7fb fd3e 	bl	800b51c <HAL_SD_ReadBlocks_DMA>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d001      	beq.n	800faaa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800faa6:	2301      	movs	r3, #1
 800faa8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800faaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800faac:	4618      	mov	r0, r3
 800faae:	3718      	adds	r7, #24
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	20001d18 	.word	0x20001d18

0800fab8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	68ba      	ldr	r2, [r7, #8]
 800facc:	68f9      	ldr	r1, [r7, #12]
 800face:	4806      	ldr	r0, [pc, #24]	; (800fae8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fad0:	f7fb fe06 	bl	800b6e0 <HAL_SD_WriteBlocks_DMA>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d001      	beq.n	800fade <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fada:	2301      	movs	r3, #1
 800fadc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fade:	7dfb      	ldrb	r3, [r7, #23]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3718      	adds	r7, #24
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	20001d18 	.word	0x20001d18

0800faec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800faf0:	4805      	ldr	r0, [pc, #20]	; (800fb08 <BSP_SD_GetCardState+0x1c>)
 800faf2:	f7fc fad5 	bl	800c0a0 <HAL_SD_GetCardState>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b04      	cmp	r3, #4
 800fafa:	bf14      	ite	ne
 800fafc:	2301      	movne	r3, #1
 800fafe:	2300      	moveq	r3, #0
 800fb00:	b2db      	uxtb	r3, r3
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	bd80      	pop	{r7, pc}
 800fb06:	bf00      	nop
 800fb08:	20001d18 	.word	0x20001d18

0800fb0c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800fb14:	6879      	ldr	r1, [r7, #4]
 800fb16:	4803      	ldr	r0, [pc, #12]	; (800fb24 <BSP_SD_GetCardInfo+0x18>)
 800fb18:	f7fc f9fc 	bl	800bf14 <HAL_SD_GetCardInfo>
}
 800fb1c:	bf00      	nop
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	20001d18 	.word	0x20001d18

0800fb28 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800fb30:	f000 f818 	bl	800fb64 <BSP_SD_AbortCallback>
}
 800fb34:	bf00      	nop
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fb44:	f000 f9a8 	bl	800fe98 <BSP_SD_WriteCpltCallback>
}
 800fb48:	bf00      	nop
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fb58:	f000 f9aa 	bl	800feb0 <BSP_SD_ReadCpltCallback>
}
 800fb5c:	bf00      	nop
 800fb5e:	3708      	adds	r7, #8
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800fb64:	b480      	push	{r7}
 800fb66:	af00      	add	r7, sp, #0

}
 800fb68:	bf00      	nop
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr

0800fb72 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b082      	sub	sp, #8
 800fb76:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fb7c:	f000 f80c 	bl	800fb98 <BSP_PlatformIsDetected>
 800fb80:	4603      	mov	r3, r0
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d101      	bne.n	800fb8a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fb86:	2300      	movs	r3, #0
 800fb88:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fb8a:	79fb      	ldrb	r3, [r7, #7]
 800fb8c:	b2db      	uxtb	r3, r3
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
	...

0800fb98 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fba6:	4806      	ldr	r0, [pc, #24]	; (800fbc0 <BSP_PlatformIsDetected+0x28>)
 800fba8:	f7f9 f8bc 	bl	8008d24 <HAL_GPIO_ReadPin>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fbb6:	79fb      	ldrb	r3, [r7, #7]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3708      	adds	r7, #8
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	40020400 	.word	0x40020400

0800fbc4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fbcc:	f7f7 fe0c 	bl	80077e8 <HAL_GetTick>
 800fbd0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fbd2:	e006      	b.n	800fbe2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fbd4:	f7ff ff8a 	bl	800faec <BSP_SD_GetCardState>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d101      	bne.n	800fbe2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	e009      	b.n	800fbf6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fbe2:	f7f7 fe01 	bl	80077e8 <HAL_GetTick>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	1ad3      	subs	r3, r2, r3
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d8f0      	bhi.n	800fbd4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fbf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3710      	adds	r7, #16
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
	...

0800fc00 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	4603      	mov	r3, r0
 800fc08:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fc0a:	4b0b      	ldr	r3, [pc, #44]	; (800fc38 <SD_CheckStatus+0x38>)
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fc10:	f7ff ff6c 	bl	800faec <BSP_SD_GetCardState>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d107      	bne.n	800fc2a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fc1a:	4b07      	ldr	r3, [pc, #28]	; (800fc38 <SD_CheckStatus+0x38>)
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	f023 0301 	bic.w	r3, r3, #1
 800fc24:	b2da      	uxtb	r2, r3
 800fc26:	4b04      	ldr	r3, [pc, #16]	; (800fc38 <SD_CheckStatus+0x38>)
 800fc28:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fc2a:	4b03      	ldr	r3, [pc, #12]	; (800fc38 <SD_CheckStatus+0x38>)
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	b2db      	uxtb	r3, r3
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3708      	adds	r7, #8
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	200008bc 	.word	0x200008bc

0800fc3c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	4603      	mov	r3, r0
 800fc44:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fc46:	f7ff fda3 	bl	800f790 <BSP_SD_Init>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d107      	bne.n	800fc60 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800fc50:	79fb      	ldrb	r3, [r7, #7]
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7ff ffd4 	bl	800fc00 <SD_CheckStatus>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	4b04      	ldr	r3, [pc, #16]	; (800fc70 <SD_initialize+0x34>)
 800fc5e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fc60:	4b03      	ldr	r3, [pc, #12]	; (800fc70 <SD_initialize+0x34>)
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	b2db      	uxtb	r3, r3
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3708      	adds	r7, #8
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	200008bc 	.word	0x200008bc

0800fc74 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fc7e:	79fb      	ldrb	r3, [r7, #7]
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7ff ffbd 	bl	800fc00 <SD_CheckStatus>
 800fc86:	4603      	mov	r3, r0
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b086      	sub	sp, #24
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60b9      	str	r1, [r7, #8]
 800fc98:	607a      	str	r2, [r7, #4]
 800fc9a:	603b      	str	r3, [r7, #0]
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fca0:	2301      	movs	r3, #1
 800fca2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fca4:	f247 5030 	movw	r0, #30000	; 0x7530
 800fca8:	f7ff ff8c 	bl	800fbc4 <SD_CheckStatusWithTimeout>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	da01      	bge.n	800fcb6 <SD_read+0x26>
  {
    return res;
 800fcb2:	7dfb      	ldrb	r3, [r7, #23]
 800fcb4:	e03b      	b.n	800fd2e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800fcb6:	683a      	ldr	r2, [r7, #0]
 800fcb8:	6879      	ldr	r1, [r7, #4]
 800fcba:	68b8      	ldr	r0, [r7, #8]
 800fcbc:	f7ff fee2 	bl	800fa84 <BSP_SD_ReadBlocks_DMA>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d132      	bne.n	800fd2c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800fcc6:	4b1c      	ldr	r3, [pc, #112]	; (800fd38 <SD_read+0xa8>)
 800fcc8:	2200      	movs	r2, #0
 800fcca:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800fccc:	f7f7 fd8c 	bl	80077e8 <HAL_GetTick>
 800fcd0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fcd2:	bf00      	nop
 800fcd4:	4b18      	ldr	r3, [pc, #96]	; (800fd38 <SD_read+0xa8>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d108      	bne.n	800fcee <SD_read+0x5e>
 800fcdc:	f7f7 fd84 	bl	80077e8 <HAL_GetTick>
 800fce0:	4602      	mov	r2, r0
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	f247 522f 	movw	r2, #29999	; 0x752f
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d9f2      	bls.n	800fcd4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800fcee:	4b12      	ldr	r3, [pc, #72]	; (800fd38 <SD_read+0xa8>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d102      	bne.n	800fcfc <SD_read+0x6c>
      {
        res = RES_ERROR;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	75fb      	strb	r3, [r7, #23]
 800fcfa:	e017      	b.n	800fd2c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800fcfc:	4b0e      	ldr	r3, [pc, #56]	; (800fd38 <SD_read+0xa8>)
 800fcfe:	2200      	movs	r2, #0
 800fd00:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fd02:	f7f7 fd71 	bl	80077e8 <HAL_GetTick>
 800fd06:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd08:	e007      	b.n	800fd1a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd0a:	f7ff feef 	bl	800faec <BSP_SD_GetCardState>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d102      	bne.n	800fd1a <SD_read+0x8a>
          {
            res = RES_OK;
 800fd14:	2300      	movs	r3, #0
 800fd16:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800fd18:	e008      	b.n	800fd2c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd1a:	f7f7 fd65 	bl	80077e8 <HAL_GetTick>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	1ad3      	subs	r3, r2, r3
 800fd24:	f247 522f 	movw	r2, #29999	; 0x752f
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d9ee      	bls.n	800fd0a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800fd2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3718      	adds	r7, #24
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	2001a86c 	.word	0x2001a86c

0800fd3c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b086      	sub	sp, #24
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60b9      	str	r1, [r7, #8]
 800fd44:	607a      	str	r2, [r7, #4]
 800fd46:	603b      	str	r3, [r7, #0]
 800fd48:	4603      	mov	r3, r0
 800fd4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800fd50:	4b24      	ldr	r3, [pc, #144]	; (800fde4 <SD_write+0xa8>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fd56:	f247 5030 	movw	r0, #30000	; 0x7530
 800fd5a:	f7ff ff33 	bl	800fbc4 <SD_CheckStatusWithTimeout>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	da01      	bge.n	800fd68 <SD_write+0x2c>
  {
    return res;
 800fd64:	7dfb      	ldrb	r3, [r7, #23]
 800fd66:	e038      	b.n	800fdda <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fd68:	683a      	ldr	r2, [r7, #0]
 800fd6a:	6879      	ldr	r1, [r7, #4]
 800fd6c:	68b8      	ldr	r0, [r7, #8]
 800fd6e:	f7ff fea3 	bl	800fab8 <BSP_SD_WriteBlocks_DMA>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d12f      	bne.n	800fdd8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800fd78:	f7f7 fd36 	bl	80077e8 <HAL_GetTick>
 800fd7c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fd7e:	bf00      	nop
 800fd80:	4b18      	ldr	r3, [pc, #96]	; (800fde4 <SD_write+0xa8>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d108      	bne.n	800fd9a <SD_write+0x5e>
 800fd88:	f7f7 fd2e 	bl	80077e8 <HAL_GetTick>
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	1ad3      	subs	r3, r2, r3
 800fd92:	f247 522f 	movw	r2, #29999	; 0x752f
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d9f2      	bls.n	800fd80 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800fd9a:	4b12      	ldr	r3, [pc, #72]	; (800fde4 <SD_write+0xa8>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d102      	bne.n	800fda8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800fda2:	2301      	movs	r3, #1
 800fda4:	75fb      	strb	r3, [r7, #23]
 800fda6:	e017      	b.n	800fdd8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800fda8:	4b0e      	ldr	r3, [pc, #56]	; (800fde4 <SD_write+0xa8>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fdae:	f7f7 fd1b 	bl	80077e8 <HAL_GetTick>
 800fdb2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fdb4:	e007      	b.n	800fdc6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fdb6:	f7ff fe99 	bl	800faec <BSP_SD_GetCardState>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d102      	bne.n	800fdc6 <SD_write+0x8a>
          {
            res = RES_OK;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	75fb      	strb	r3, [r7, #23]
            break;
 800fdc4:	e008      	b.n	800fdd8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fdc6:	f7f7 fd0f 	bl	80077e8 <HAL_GetTick>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	1ad3      	subs	r3, r2, r3
 800fdd0:	f247 522f 	movw	r2, #29999	; 0x752f
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d9ee      	bls.n	800fdb6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800fdd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3718      	adds	r7, #24
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	2001a868 	.word	0x2001a868

0800fde8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b08c      	sub	sp, #48	; 0x30
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	4603      	mov	r3, r0
 800fdf0:	603a      	str	r2, [r7, #0]
 800fdf2:	71fb      	strb	r3, [r7, #7]
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fdfe:	4b25      	ldr	r3, [pc, #148]	; (800fe94 <SD_ioctl+0xac>)
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	f003 0301 	and.w	r3, r3, #1
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d001      	beq.n	800fe10 <SD_ioctl+0x28>
 800fe0c:	2303      	movs	r3, #3
 800fe0e:	e03c      	b.n	800fe8a <SD_ioctl+0xa2>

  switch (cmd)
 800fe10:	79bb      	ldrb	r3, [r7, #6]
 800fe12:	2b03      	cmp	r3, #3
 800fe14:	d834      	bhi.n	800fe80 <SD_ioctl+0x98>
 800fe16:	a201      	add	r2, pc, #4	; (adr r2, 800fe1c <SD_ioctl+0x34>)
 800fe18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe1c:	0800fe2d 	.word	0x0800fe2d
 800fe20:	0800fe35 	.word	0x0800fe35
 800fe24:	0800fe4d 	.word	0x0800fe4d
 800fe28:	0800fe67 	.word	0x0800fe67
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe32:	e028      	b.n	800fe86 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe34:	f107 030c 	add.w	r3, r7, #12
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7ff fe67 	bl	800fb0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fe3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fe44:	2300      	movs	r3, #0
 800fe46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe4a:	e01c      	b.n	800fe86 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe4c:	f107 030c 	add.w	r3, r7, #12
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7ff fe5b 	bl	800fb0c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fe56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe58:	b29a      	uxth	r2, r3
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe64:	e00f      	b.n	800fe86 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe66:	f107 030c 	add.w	r3, r7, #12
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7ff fe4e 	bl	800fb0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fe70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe72:	0a5a      	lsrs	r2, r3, #9
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe7e:	e002      	b.n	800fe86 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fe80:	2304      	movs	r3, #4
 800fe82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800fe86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3730      	adds	r7, #48	; 0x30
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
 800fe92:	bf00      	nop
 800fe94:	200008bc 	.word	0x200008bc

0800fe98 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800fe9c:	4b03      	ldr	r3, [pc, #12]	; (800feac <BSP_SD_WriteCpltCallback+0x14>)
 800fe9e:	2201      	movs	r2, #1
 800fea0:	601a      	str	r2, [r3, #0]
}
 800fea2:	bf00      	nop
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr
 800feac:	2001a868 	.word	0x2001a868

0800feb0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800feb0:	b480      	push	{r7}
 800feb2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800feb4:	4b03      	ldr	r3, [pc, #12]	; (800fec4 <BSP_SD_ReadCpltCallback+0x14>)
 800feb6:	2201      	movs	r2, #1
 800feb8:	601a      	str	r2, [r3, #0]
}
 800feba:	bf00      	nop
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr
 800fec4:	2001a86c 	.word	0x2001a86c

0800fec8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	4603      	mov	r3, r0
 800fed0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fed2:	79fb      	ldrb	r3, [r7, #7]
 800fed4:	4a08      	ldr	r2, [pc, #32]	; (800fef8 <disk_status+0x30>)
 800fed6:	009b      	lsls	r3, r3, #2
 800fed8:	4413      	add	r3, r2
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	79fa      	ldrb	r2, [r7, #7]
 800fee0:	4905      	ldr	r1, [pc, #20]	; (800fef8 <disk_status+0x30>)
 800fee2:	440a      	add	r2, r1
 800fee4:	7a12      	ldrb	r2, [r2, #8]
 800fee6:	4610      	mov	r0, r2
 800fee8:	4798      	blx	r3
 800feea:	4603      	mov	r3, r0
 800feec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800feee:	7bfb      	ldrb	r3, [r7, #15]
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3710      	adds	r7, #16
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	2001a898 	.word	0x2001a898

0800fefc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	4603      	mov	r3, r0
 800ff04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ff06:	2300      	movs	r3, #0
 800ff08:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ff0a:	79fb      	ldrb	r3, [r7, #7]
 800ff0c:	4a0d      	ldr	r2, [pc, #52]	; (800ff44 <disk_initialize+0x48>)
 800ff0e:	5cd3      	ldrb	r3, [r2, r3]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d111      	bne.n	800ff38 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ff14:	79fb      	ldrb	r3, [r7, #7]
 800ff16:	4a0b      	ldr	r2, [pc, #44]	; (800ff44 <disk_initialize+0x48>)
 800ff18:	2101      	movs	r1, #1
 800ff1a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ff1c:	79fb      	ldrb	r3, [r7, #7]
 800ff1e:	4a09      	ldr	r2, [pc, #36]	; (800ff44 <disk_initialize+0x48>)
 800ff20:	009b      	lsls	r3, r3, #2
 800ff22:	4413      	add	r3, r2
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	79fa      	ldrb	r2, [r7, #7]
 800ff2a:	4906      	ldr	r1, [pc, #24]	; (800ff44 <disk_initialize+0x48>)
 800ff2c:	440a      	add	r2, r1
 800ff2e:	7a12      	ldrb	r2, [r2, #8]
 800ff30:	4610      	mov	r0, r2
 800ff32:	4798      	blx	r3
 800ff34:	4603      	mov	r3, r0
 800ff36:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ff38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3710      	adds	r7, #16
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	2001a898 	.word	0x2001a898

0800ff48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ff48:	b590      	push	{r4, r7, lr}
 800ff4a:	b087      	sub	sp, #28
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60b9      	str	r1, [r7, #8]
 800ff50:	607a      	str	r2, [r7, #4]
 800ff52:	603b      	str	r3, [r7, #0]
 800ff54:	4603      	mov	r3, r0
 800ff56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ff58:	7bfb      	ldrb	r3, [r7, #15]
 800ff5a:	4a0a      	ldr	r2, [pc, #40]	; (800ff84 <disk_read+0x3c>)
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	4413      	add	r3, r2
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	689c      	ldr	r4, [r3, #8]
 800ff64:	7bfb      	ldrb	r3, [r7, #15]
 800ff66:	4a07      	ldr	r2, [pc, #28]	; (800ff84 <disk_read+0x3c>)
 800ff68:	4413      	add	r3, r2
 800ff6a:	7a18      	ldrb	r0, [r3, #8]
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	68b9      	ldr	r1, [r7, #8]
 800ff72:	47a0      	blx	r4
 800ff74:	4603      	mov	r3, r0
 800ff76:	75fb      	strb	r3, [r7, #23]
  return res;
 800ff78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	371c      	adds	r7, #28
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd90      	pop	{r4, r7, pc}
 800ff82:	bf00      	nop
 800ff84:	2001a898 	.word	0x2001a898

0800ff88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ff88:	b590      	push	{r4, r7, lr}
 800ff8a:	b087      	sub	sp, #28
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	60b9      	str	r1, [r7, #8]
 800ff90:	607a      	str	r2, [r7, #4]
 800ff92:	603b      	str	r3, [r7, #0]
 800ff94:	4603      	mov	r3, r0
 800ff96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ff98:	7bfb      	ldrb	r3, [r7, #15]
 800ff9a:	4a0a      	ldr	r2, [pc, #40]	; (800ffc4 <disk_write+0x3c>)
 800ff9c:	009b      	lsls	r3, r3, #2
 800ff9e:	4413      	add	r3, r2
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	68dc      	ldr	r4, [r3, #12]
 800ffa4:	7bfb      	ldrb	r3, [r7, #15]
 800ffa6:	4a07      	ldr	r2, [pc, #28]	; (800ffc4 <disk_write+0x3c>)
 800ffa8:	4413      	add	r3, r2
 800ffaa:	7a18      	ldrb	r0, [r3, #8]
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	68b9      	ldr	r1, [r7, #8]
 800ffb2:	47a0      	blx	r4
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	75fb      	strb	r3, [r7, #23]
  return res;
 800ffb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	371c      	adds	r7, #28
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd90      	pop	{r4, r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	2001a898 	.word	0x2001a898

0800ffc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	4603      	mov	r3, r0
 800ffd0:	603a      	str	r2, [r7, #0]
 800ffd2:	71fb      	strb	r3, [r7, #7]
 800ffd4:	460b      	mov	r3, r1
 800ffd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ffd8:	79fb      	ldrb	r3, [r7, #7]
 800ffda:	4a09      	ldr	r2, [pc, #36]	; (8010000 <disk_ioctl+0x38>)
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	4413      	add	r3, r2
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	79fa      	ldrb	r2, [r7, #7]
 800ffe6:	4906      	ldr	r1, [pc, #24]	; (8010000 <disk_ioctl+0x38>)
 800ffe8:	440a      	add	r2, r1
 800ffea:	7a10      	ldrb	r0, [r2, #8]
 800ffec:	79b9      	ldrb	r1, [r7, #6]
 800ffee:	683a      	ldr	r2, [r7, #0]
 800fff0:	4798      	blx	r3
 800fff2:	4603      	mov	r3, r0
 800fff4:	73fb      	strb	r3, [r7, #15]
  return res;
 800fff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3710      	adds	r7, #16
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	2001a898 	.word	0x2001a898

08010004 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010004:	b480      	push	{r7}
 8010006:	b085      	sub	sp, #20
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	3301      	adds	r3, #1
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010014:	89fb      	ldrh	r3, [r7, #14]
 8010016:	021b      	lsls	r3, r3, #8
 8010018:	b21a      	sxth	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	b21b      	sxth	r3, r3
 8010020:	4313      	orrs	r3, r2
 8010022:	b21b      	sxth	r3, r3
 8010024:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010026:	89fb      	ldrh	r3, [r7, #14]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3714      	adds	r7, #20
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr

08010034 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010034:	b480      	push	{r7}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	3303      	adds	r3, #3
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	021b      	lsls	r3, r3, #8
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	3202      	adds	r2, #2
 801004c:	7812      	ldrb	r2, [r2, #0]
 801004e:	4313      	orrs	r3, r2
 8010050:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	021b      	lsls	r3, r3, #8
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	3201      	adds	r2, #1
 801005a:	7812      	ldrb	r2, [r2, #0]
 801005c:	4313      	orrs	r3, r2
 801005e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	021b      	lsls	r3, r3, #8
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	7812      	ldrb	r2, [r2, #0]
 8010068:	4313      	orrs	r3, r2
 801006a:	60fb      	str	r3, [r7, #12]
	return rv;
 801006c:	68fb      	ldr	r3, [r7, #12]
}
 801006e:	4618      	mov	r0, r3
 8010070:	3714      	adds	r7, #20
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr

0801007a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801007a:	b480      	push	{r7}
 801007c:	b083      	sub	sp, #12
 801007e:	af00      	add	r7, sp, #0
 8010080:	6078      	str	r0, [r7, #4]
 8010082:	460b      	mov	r3, r1
 8010084:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	1c5a      	adds	r2, r3, #1
 801008a:	607a      	str	r2, [r7, #4]
 801008c:	887a      	ldrh	r2, [r7, #2]
 801008e:	b2d2      	uxtb	r2, r2
 8010090:	701a      	strb	r2, [r3, #0]
 8010092:	887b      	ldrh	r3, [r7, #2]
 8010094:	0a1b      	lsrs	r3, r3, #8
 8010096:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	1c5a      	adds	r2, r3, #1
 801009c:	607a      	str	r2, [r7, #4]
 801009e:	887a      	ldrh	r2, [r7, #2]
 80100a0:	b2d2      	uxtb	r2, r2
 80100a2:	701a      	strb	r2, [r3, #0]
}
 80100a4:	bf00      	nop
 80100a6:	370c      	adds	r7, #12
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr

080100b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	1c5a      	adds	r2, r3, #1
 80100be:	607a      	str	r2, [r7, #4]
 80100c0:	683a      	ldr	r2, [r7, #0]
 80100c2:	b2d2      	uxtb	r2, r2
 80100c4:	701a      	strb	r2, [r3, #0]
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	0a1b      	lsrs	r3, r3, #8
 80100ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	1c5a      	adds	r2, r3, #1
 80100d0:	607a      	str	r2, [r7, #4]
 80100d2:	683a      	ldr	r2, [r7, #0]
 80100d4:	b2d2      	uxtb	r2, r2
 80100d6:	701a      	strb	r2, [r3, #0]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	0a1b      	lsrs	r3, r3, #8
 80100dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	1c5a      	adds	r2, r3, #1
 80100e2:	607a      	str	r2, [r7, #4]
 80100e4:	683a      	ldr	r2, [r7, #0]
 80100e6:	b2d2      	uxtb	r2, r2
 80100e8:	701a      	strb	r2, [r3, #0]
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	0a1b      	lsrs	r3, r3, #8
 80100ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	1c5a      	adds	r2, r3, #1
 80100f4:	607a      	str	r2, [r7, #4]
 80100f6:	683a      	ldr	r2, [r7, #0]
 80100f8:	b2d2      	uxtb	r2, r2
 80100fa:	701a      	strb	r2, [r3, #0]
}
 80100fc:	bf00      	nop
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010108:	b480      	push	{r7}
 801010a:	b087      	sub	sp, #28
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d00d      	beq.n	801013e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010122:	693a      	ldr	r2, [r7, #16]
 8010124:	1c53      	adds	r3, r2, #1
 8010126:	613b      	str	r3, [r7, #16]
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	1c59      	adds	r1, r3, #1
 801012c:	6179      	str	r1, [r7, #20]
 801012e:	7812      	ldrb	r2, [r2, #0]
 8010130:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	3b01      	subs	r3, #1
 8010136:	607b      	str	r3, [r7, #4]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d1f1      	bne.n	8010122 <mem_cpy+0x1a>
	}
}
 801013e:	bf00      	nop
 8010140:	371c      	adds	r7, #28
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr

0801014a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801014a:	b480      	push	{r7}
 801014c:	b087      	sub	sp, #28
 801014e:	af00      	add	r7, sp, #0
 8010150:	60f8      	str	r0, [r7, #12]
 8010152:	60b9      	str	r1, [r7, #8]
 8010154:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	1c5a      	adds	r2, r3, #1
 801015e:	617a      	str	r2, [r7, #20]
 8010160:	68ba      	ldr	r2, [r7, #8]
 8010162:	b2d2      	uxtb	r2, r2
 8010164:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	3b01      	subs	r3, #1
 801016a:	607b      	str	r3, [r7, #4]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d1f3      	bne.n	801015a <mem_set+0x10>
}
 8010172:	bf00      	nop
 8010174:	bf00      	nop
 8010176:	371c      	adds	r7, #28
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr

08010180 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010180:	b480      	push	{r7}
 8010182:	b089      	sub	sp, #36	; 0x24
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	61fb      	str	r3, [r7, #28]
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010194:	2300      	movs	r3, #0
 8010196:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	1c5a      	adds	r2, r3, #1
 801019c:	61fa      	str	r2, [r7, #28]
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	4619      	mov	r1, r3
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	1c5a      	adds	r2, r3, #1
 80101a6:	61ba      	str	r2, [r7, #24]
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	1acb      	subs	r3, r1, r3
 80101ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	3b01      	subs	r3, #1
 80101b2:	607b      	str	r3, [r7, #4]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d002      	beq.n	80101c0 <mem_cmp+0x40>
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d0eb      	beq.n	8010198 <mem_cmp+0x18>

	return r;
 80101c0:	697b      	ldr	r3, [r7, #20]
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3724      	adds	r7, #36	; 0x24
 80101c6:	46bd      	mov	sp, r7
 80101c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101cc:	4770      	bx	lr

080101ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80101ce:	b480      	push	{r7}
 80101d0:	b083      	sub	sp, #12
 80101d2:	af00      	add	r7, sp, #0
 80101d4:	6078      	str	r0, [r7, #4]
 80101d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80101d8:	e002      	b.n	80101e0 <chk_chr+0x12>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	3301      	adds	r3, #1
 80101de:	607b      	str	r3, [r7, #4]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d005      	beq.n	80101f4 <chk_chr+0x26>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	461a      	mov	r2, r3
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d1f2      	bne.n	80101da <chk_chr+0xc>
	return *str;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	781b      	ldrb	r3, [r3, #0]
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	370c      	adds	r7, #12
 80101fc:	46bd      	mov	sp, r7
 80101fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010202:	4770      	bx	lr

08010204 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010204:	b480      	push	{r7}
 8010206:	b085      	sub	sp, #20
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801020e:	2300      	movs	r3, #0
 8010210:	60bb      	str	r3, [r7, #8]
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	60fb      	str	r3, [r7, #12]
 8010216:	e029      	b.n	801026c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010218:	4a27      	ldr	r2, [pc, #156]	; (80102b8 <chk_lock+0xb4>)
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	011b      	lsls	r3, r3, #4
 801021e:	4413      	add	r3, r2
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d01d      	beq.n	8010262 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010226:	4a24      	ldr	r2, [pc, #144]	; (80102b8 <chk_lock+0xb4>)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	011b      	lsls	r3, r3, #4
 801022c:	4413      	add	r3, r2
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	429a      	cmp	r2, r3
 8010236:	d116      	bne.n	8010266 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010238:	4a1f      	ldr	r2, [pc, #124]	; (80102b8 <chk_lock+0xb4>)
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	011b      	lsls	r3, r3, #4
 801023e:	4413      	add	r3, r2
 8010240:	3304      	adds	r3, #4
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010248:	429a      	cmp	r2, r3
 801024a:	d10c      	bne.n	8010266 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801024c:	4a1a      	ldr	r2, [pc, #104]	; (80102b8 <chk_lock+0xb4>)
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	011b      	lsls	r3, r3, #4
 8010252:	4413      	add	r3, r2
 8010254:	3308      	adds	r3, #8
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801025c:	429a      	cmp	r2, r3
 801025e:	d102      	bne.n	8010266 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010260:	e007      	b.n	8010272 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010262:	2301      	movs	r3, #1
 8010264:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	3301      	adds	r3, #1
 801026a:	60fb      	str	r3, [r7, #12]
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2b01      	cmp	r3, #1
 8010270:	d9d2      	bls.n	8010218 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2b02      	cmp	r3, #2
 8010276:	d109      	bne.n	801028c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d102      	bne.n	8010284 <chk_lock+0x80>
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	2b02      	cmp	r3, #2
 8010282:	d101      	bne.n	8010288 <chk_lock+0x84>
 8010284:	2300      	movs	r3, #0
 8010286:	e010      	b.n	80102aa <chk_lock+0xa6>
 8010288:	2312      	movs	r3, #18
 801028a:	e00e      	b.n	80102aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d108      	bne.n	80102a4 <chk_lock+0xa0>
 8010292:	4a09      	ldr	r2, [pc, #36]	; (80102b8 <chk_lock+0xb4>)
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	011b      	lsls	r3, r3, #4
 8010298:	4413      	add	r3, r2
 801029a:	330c      	adds	r3, #12
 801029c:	881b      	ldrh	r3, [r3, #0]
 801029e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102a2:	d101      	bne.n	80102a8 <chk_lock+0xa4>
 80102a4:	2310      	movs	r3, #16
 80102a6:	e000      	b.n	80102aa <chk_lock+0xa6>
 80102a8:	2300      	movs	r3, #0
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3714      	adds	r7, #20
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop
 80102b8:	2001a878 	.word	0x2001a878

080102bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80102bc:	b480      	push	{r7}
 80102be:	b083      	sub	sp, #12
 80102c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80102c2:	2300      	movs	r3, #0
 80102c4:	607b      	str	r3, [r7, #4]
 80102c6:	e002      	b.n	80102ce <enq_lock+0x12>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	3301      	adds	r3, #1
 80102cc:	607b      	str	r3, [r7, #4]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d806      	bhi.n	80102e2 <enq_lock+0x26>
 80102d4:	4a09      	ldr	r2, [pc, #36]	; (80102fc <enq_lock+0x40>)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	011b      	lsls	r3, r3, #4
 80102da:	4413      	add	r3, r2
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d1f2      	bne.n	80102c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2b02      	cmp	r3, #2
 80102e6:	bf14      	ite	ne
 80102e8:	2301      	movne	r3, #1
 80102ea:	2300      	moveq	r3, #0
 80102ec:	b2db      	uxtb	r3, r3
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	370c      	adds	r7, #12
 80102f2:	46bd      	mov	sp, r7
 80102f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f8:	4770      	bx	lr
 80102fa:	bf00      	nop
 80102fc:	2001a878 	.word	0x2001a878

08010300 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010300:	b480      	push	{r7}
 8010302:	b085      	sub	sp, #20
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801030a:	2300      	movs	r3, #0
 801030c:	60fb      	str	r3, [r7, #12]
 801030e:	e01f      	b.n	8010350 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010310:	4a41      	ldr	r2, [pc, #260]	; (8010418 <inc_lock+0x118>)
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	011b      	lsls	r3, r3, #4
 8010316:	4413      	add	r3, r2
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	429a      	cmp	r2, r3
 8010320:	d113      	bne.n	801034a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010322:	4a3d      	ldr	r2, [pc, #244]	; (8010418 <inc_lock+0x118>)
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	011b      	lsls	r3, r3, #4
 8010328:	4413      	add	r3, r2
 801032a:	3304      	adds	r3, #4
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010332:	429a      	cmp	r2, r3
 8010334:	d109      	bne.n	801034a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010336:	4a38      	ldr	r2, [pc, #224]	; (8010418 <inc_lock+0x118>)
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	011b      	lsls	r3, r3, #4
 801033c:	4413      	add	r3, r2
 801033e:	3308      	adds	r3, #8
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010346:	429a      	cmp	r2, r3
 8010348:	d006      	beq.n	8010358 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	3301      	adds	r3, #1
 801034e:	60fb      	str	r3, [r7, #12]
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2b01      	cmp	r3, #1
 8010354:	d9dc      	bls.n	8010310 <inc_lock+0x10>
 8010356:	e000      	b.n	801035a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010358:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2b02      	cmp	r3, #2
 801035e:	d132      	bne.n	80103c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010360:	2300      	movs	r3, #0
 8010362:	60fb      	str	r3, [r7, #12]
 8010364:	e002      	b.n	801036c <inc_lock+0x6c>
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	3301      	adds	r3, #1
 801036a:	60fb      	str	r3, [r7, #12]
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2b01      	cmp	r3, #1
 8010370:	d806      	bhi.n	8010380 <inc_lock+0x80>
 8010372:	4a29      	ldr	r2, [pc, #164]	; (8010418 <inc_lock+0x118>)
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	011b      	lsls	r3, r3, #4
 8010378:	4413      	add	r3, r2
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d1f2      	bne.n	8010366 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2b02      	cmp	r3, #2
 8010384:	d101      	bne.n	801038a <inc_lock+0x8a>
 8010386:	2300      	movs	r3, #0
 8010388:	e040      	b.n	801040c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	4922      	ldr	r1, [pc, #136]	; (8010418 <inc_lock+0x118>)
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	011b      	lsls	r3, r3, #4
 8010394:	440b      	add	r3, r1
 8010396:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	689a      	ldr	r2, [r3, #8]
 801039c:	491e      	ldr	r1, [pc, #120]	; (8010418 <inc_lock+0x118>)
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	011b      	lsls	r3, r3, #4
 80103a2:	440b      	add	r3, r1
 80103a4:	3304      	adds	r3, #4
 80103a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	695a      	ldr	r2, [r3, #20]
 80103ac:	491a      	ldr	r1, [pc, #104]	; (8010418 <inc_lock+0x118>)
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	011b      	lsls	r3, r3, #4
 80103b2:	440b      	add	r3, r1
 80103b4:	3308      	adds	r3, #8
 80103b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80103b8:	4a17      	ldr	r2, [pc, #92]	; (8010418 <inc_lock+0x118>)
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	011b      	lsls	r3, r3, #4
 80103be:	4413      	add	r3, r2
 80103c0:	330c      	adds	r3, #12
 80103c2:	2200      	movs	r2, #0
 80103c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d009      	beq.n	80103e0 <inc_lock+0xe0>
 80103cc:	4a12      	ldr	r2, [pc, #72]	; (8010418 <inc_lock+0x118>)
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	011b      	lsls	r3, r3, #4
 80103d2:	4413      	add	r3, r2
 80103d4:	330c      	adds	r3, #12
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d001      	beq.n	80103e0 <inc_lock+0xe0>
 80103dc:	2300      	movs	r3, #0
 80103de:	e015      	b.n	801040c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d108      	bne.n	80103f8 <inc_lock+0xf8>
 80103e6:	4a0c      	ldr	r2, [pc, #48]	; (8010418 <inc_lock+0x118>)
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	011b      	lsls	r3, r3, #4
 80103ec:	4413      	add	r3, r2
 80103ee:	330c      	adds	r3, #12
 80103f0:	881b      	ldrh	r3, [r3, #0]
 80103f2:	3301      	adds	r3, #1
 80103f4:	b29a      	uxth	r2, r3
 80103f6:	e001      	b.n	80103fc <inc_lock+0xfc>
 80103f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103fc:	4906      	ldr	r1, [pc, #24]	; (8010418 <inc_lock+0x118>)
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	011b      	lsls	r3, r3, #4
 8010402:	440b      	add	r3, r1
 8010404:	330c      	adds	r3, #12
 8010406:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	3301      	adds	r3, #1
}
 801040c:	4618      	mov	r0, r3
 801040e:	3714      	adds	r7, #20
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr
 8010418:	2001a878 	.word	0x2001a878

0801041c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	3b01      	subs	r3, #1
 8010428:	607b      	str	r3, [r7, #4]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2b01      	cmp	r3, #1
 801042e:	d825      	bhi.n	801047c <dec_lock+0x60>
		n = Files[i].ctr;
 8010430:	4a17      	ldr	r2, [pc, #92]	; (8010490 <dec_lock+0x74>)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	011b      	lsls	r3, r3, #4
 8010436:	4413      	add	r3, r2
 8010438:	330c      	adds	r3, #12
 801043a:	881b      	ldrh	r3, [r3, #0]
 801043c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801043e:	89fb      	ldrh	r3, [r7, #14]
 8010440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010444:	d101      	bne.n	801044a <dec_lock+0x2e>
 8010446:	2300      	movs	r3, #0
 8010448:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801044a:	89fb      	ldrh	r3, [r7, #14]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d002      	beq.n	8010456 <dec_lock+0x3a>
 8010450:	89fb      	ldrh	r3, [r7, #14]
 8010452:	3b01      	subs	r3, #1
 8010454:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010456:	4a0e      	ldr	r2, [pc, #56]	; (8010490 <dec_lock+0x74>)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	011b      	lsls	r3, r3, #4
 801045c:	4413      	add	r3, r2
 801045e:	330c      	adds	r3, #12
 8010460:	89fa      	ldrh	r2, [r7, #14]
 8010462:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010464:	89fb      	ldrh	r3, [r7, #14]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d105      	bne.n	8010476 <dec_lock+0x5a>
 801046a:	4a09      	ldr	r2, [pc, #36]	; (8010490 <dec_lock+0x74>)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	011b      	lsls	r3, r3, #4
 8010470:	4413      	add	r3, r2
 8010472:	2200      	movs	r2, #0
 8010474:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010476:	2300      	movs	r3, #0
 8010478:	737b      	strb	r3, [r7, #13]
 801047a:	e001      	b.n	8010480 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801047c:	2302      	movs	r3, #2
 801047e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010480:	7b7b      	ldrb	r3, [r7, #13]
}
 8010482:	4618      	mov	r0, r3
 8010484:	3714      	adds	r7, #20
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop
 8010490:	2001a878 	.word	0x2001a878

08010494 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010494:	b480      	push	{r7}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801049c:	2300      	movs	r3, #0
 801049e:	60fb      	str	r3, [r7, #12]
 80104a0:	e010      	b.n	80104c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80104a2:	4a0d      	ldr	r2, [pc, #52]	; (80104d8 <clear_lock+0x44>)
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	011b      	lsls	r3, r3, #4
 80104a8:	4413      	add	r3, r2
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	687a      	ldr	r2, [r7, #4]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d105      	bne.n	80104be <clear_lock+0x2a>
 80104b2:	4a09      	ldr	r2, [pc, #36]	; (80104d8 <clear_lock+0x44>)
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	011b      	lsls	r3, r3, #4
 80104b8:	4413      	add	r3, r2
 80104ba:	2200      	movs	r2, #0
 80104bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	3301      	adds	r3, #1
 80104c2:	60fb      	str	r3, [r7, #12]
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d9eb      	bls.n	80104a2 <clear_lock+0xe>
	}
}
 80104ca:	bf00      	nop
 80104cc:	bf00      	nop
 80104ce:	3714      	adds	r7, #20
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr
 80104d8:	2001a878 	.word	0x2001a878

080104dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b086      	sub	sp, #24
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80104e4:	2300      	movs	r3, #0
 80104e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	78db      	ldrb	r3, [r3, #3]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d034      	beq.n	801055a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	7858      	ldrb	r0, [r3, #1]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010500:	2301      	movs	r3, #1
 8010502:	697a      	ldr	r2, [r7, #20]
 8010504:	f7ff fd40 	bl	800ff88 <disk_write>
 8010508:	4603      	mov	r3, r0
 801050a:	2b00      	cmp	r3, #0
 801050c:	d002      	beq.n	8010514 <sync_window+0x38>
			res = FR_DISK_ERR;
 801050e:	2301      	movs	r3, #1
 8010510:	73fb      	strb	r3, [r7, #15]
 8010512:	e022      	b.n	801055a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2200      	movs	r2, #0
 8010518:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801051e:	697a      	ldr	r2, [r7, #20]
 8010520:	1ad2      	subs	r2, r2, r3
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6a1b      	ldr	r3, [r3, #32]
 8010526:	429a      	cmp	r2, r3
 8010528:	d217      	bcs.n	801055a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	789b      	ldrb	r3, [r3, #2]
 801052e:	613b      	str	r3, [r7, #16]
 8010530:	e010      	b.n	8010554 <sync_window+0x78>
					wsect += fs->fsize;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6a1b      	ldr	r3, [r3, #32]
 8010536:	697a      	ldr	r2, [r7, #20]
 8010538:	4413      	add	r3, r2
 801053a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	7858      	ldrb	r0, [r3, #1]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010546:	2301      	movs	r3, #1
 8010548:	697a      	ldr	r2, [r7, #20]
 801054a:	f7ff fd1d 	bl	800ff88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	3b01      	subs	r3, #1
 8010552:	613b      	str	r3, [r7, #16]
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	2b01      	cmp	r3, #1
 8010558:	d8eb      	bhi.n	8010532 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801055a:	7bfb      	ldrb	r3, [r7, #15]
}
 801055c:	4618      	mov	r0, r3
 801055e:	3718      	adds	r7, #24
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801056e:	2300      	movs	r3, #0
 8010570:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010576:	683a      	ldr	r2, [r7, #0]
 8010578:	429a      	cmp	r2, r3
 801057a:	d01b      	beq.n	80105b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f7ff ffad 	bl	80104dc <sync_window>
 8010582:	4603      	mov	r3, r0
 8010584:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010586:	7bfb      	ldrb	r3, [r7, #15]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d113      	bne.n	80105b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	7858      	ldrb	r0, [r3, #1]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010596:	2301      	movs	r3, #1
 8010598:	683a      	ldr	r2, [r7, #0]
 801059a:	f7ff fcd5 	bl	800ff48 <disk_read>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d004      	beq.n	80105ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80105a4:	f04f 33ff 	mov.w	r3, #4294967295
 80105a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80105aa:	2301      	movs	r3, #1
 80105ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80105b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3710      	adds	r7, #16
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
	...

080105c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f7ff ff87 	bl	80104dc <sync_window>
 80105ce:	4603      	mov	r3, r0
 80105d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80105d2:	7bfb      	ldrb	r3, [r7, #15]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d159      	bne.n	801068c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	2b03      	cmp	r3, #3
 80105de:	d149      	bne.n	8010674 <sync_fs+0xb4>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	791b      	ldrb	r3, [r3, #4]
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d145      	bne.n	8010674 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	899b      	ldrh	r3, [r3, #12]
 80105f2:	461a      	mov	r2, r3
 80105f4:	2100      	movs	r1, #0
 80105f6:	f7ff fda8 	bl	801014a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	3338      	adds	r3, #56	; 0x38
 80105fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010602:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010606:	4618      	mov	r0, r3
 8010608:	f7ff fd37 	bl	801007a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	3338      	adds	r3, #56	; 0x38
 8010610:	4921      	ldr	r1, [pc, #132]	; (8010698 <sync_fs+0xd8>)
 8010612:	4618      	mov	r0, r3
 8010614:	f7ff fd4c 	bl	80100b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	3338      	adds	r3, #56	; 0x38
 801061c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010620:	491e      	ldr	r1, [pc, #120]	; (801069c <sync_fs+0xdc>)
 8010622:	4618      	mov	r0, r3
 8010624:	f7ff fd44 	bl	80100b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	3338      	adds	r3, #56	; 0x38
 801062c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	4619      	mov	r1, r3
 8010636:	4610      	mov	r0, r2
 8010638:	f7ff fd3a 	bl	80100b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	3338      	adds	r3, #56	; 0x38
 8010640:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	695b      	ldr	r3, [r3, #20]
 8010648:	4619      	mov	r1, r3
 801064a:	4610      	mov	r0, r2
 801064c:	f7ff fd30 	bl	80100b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010654:	1c5a      	adds	r2, r3, #1
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	7858      	ldrb	r0, [r3, #1]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010668:	2301      	movs	r3, #1
 801066a:	f7ff fc8d 	bl	800ff88 <disk_write>
			fs->fsi_flag = 0;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2200      	movs	r2, #0
 8010672:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	785b      	ldrb	r3, [r3, #1]
 8010678:	2200      	movs	r2, #0
 801067a:	2100      	movs	r1, #0
 801067c:	4618      	mov	r0, r3
 801067e:	f7ff fca3 	bl	800ffc8 <disk_ioctl>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	d001      	beq.n	801068c <sync_fs+0xcc>
 8010688:	2301      	movs	r3, #1
 801068a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801068c:	7bfb      	ldrb	r3, [r7, #15]
}
 801068e:	4618      	mov	r0, r3
 8010690:	3710      	adds	r7, #16
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	41615252 	.word	0x41615252
 801069c:	61417272 	.word	0x61417272

080106a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80106a0:	b480      	push	{r7}
 80106a2:	b083      	sub	sp, #12
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	3b02      	subs	r3, #2
 80106ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	69db      	ldr	r3, [r3, #28]
 80106b4:	3b02      	subs	r3, #2
 80106b6:	683a      	ldr	r2, [r7, #0]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d301      	bcc.n	80106c0 <clust2sect+0x20>
 80106bc:	2300      	movs	r3, #0
 80106be:	e008      	b.n	80106d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	895b      	ldrh	r3, [r3, #10]
 80106c4:	461a      	mov	r2, r3
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	fb03 f202 	mul.w	r2, r3, r2
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106d0:	4413      	add	r3, r2
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	370c      	adds	r7, #12
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr

080106de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80106de:	b580      	push	{r7, lr}
 80106e0:	b086      	sub	sp, #24
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d904      	bls.n	80106fe <get_fat+0x20>
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	69db      	ldr	r3, [r3, #28]
 80106f8:	683a      	ldr	r2, [r7, #0]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d302      	bcc.n	8010704 <get_fat+0x26>
		val = 1;	/* Internal error */
 80106fe:	2301      	movs	r3, #1
 8010700:	617b      	str	r3, [r7, #20]
 8010702:	e0bb      	b.n	801087c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010704:	f04f 33ff 	mov.w	r3, #4294967295
 8010708:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	2b03      	cmp	r3, #3
 8010710:	f000 8083 	beq.w	801081a <get_fat+0x13c>
 8010714:	2b03      	cmp	r3, #3
 8010716:	f300 80a7 	bgt.w	8010868 <get_fat+0x18a>
 801071a:	2b01      	cmp	r3, #1
 801071c:	d002      	beq.n	8010724 <get_fat+0x46>
 801071e:	2b02      	cmp	r3, #2
 8010720:	d056      	beq.n	80107d0 <get_fat+0xf2>
 8010722:	e0a1      	b.n	8010868 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	60fb      	str	r3, [r7, #12]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	085b      	lsrs	r3, r3, #1
 801072c:	68fa      	ldr	r2, [r7, #12]
 801072e:	4413      	add	r3, r2
 8010730:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	899b      	ldrh	r3, [r3, #12]
 801073a:	4619      	mov	r1, r3
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010742:	4413      	add	r3, r2
 8010744:	4619      	mov	r1, r3
 8010746:	6938      	ldr	r0, [r7, #16]
 8010748:	f7ff ff0c 	bl	8010564 <move_window>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	f040 808d 	bne.w	801086e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	1c5a      	adds	r2, r3, #1
 8010758:	60fa      	str	r2, [r7, #12]
 801075a:	693a      	ldr	r2, [r7, #16]
 801075c:	8992      	ldrh	r2, [r2, #12]
 801075e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010762:	fb01 f202 	mul.w	r2, r1, r2
 8010766:	1a9b      	subs	r3, r3, r2
 8010768:	693a      	ldr	r2, [r7, #16]
 801076a:	4413      	add	r3, r2
 801076c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010770:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	899b      	ldrh	r3, [r3, #12]
 801077a:	4619      	mov	r1, r3
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010782:	4413      	add	r3, r2
 8010784:	4619      	mov	r1, r3
 8010786:	6938      	ldr	r0, [r7, #16]
 8010788:	f7ff feec 	bl	8010564 <move_window>
 801078c:	4603      	mov	r3, r0
 801078e:	2b00      	cmp	r3, #0
 8010790:	d16f      	bne.n	8010872 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	899b      	ldrh	r3, [r3, #12]
 8010796:	461a      	mov	r2, r3
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	fbb3 f1f2 	udiv	r1, r3, r2
 801079e:	fb01 f202 	mul.w	r2, r1, r2
 80107a2:	1a9b      	subs	r3, r3, r2
 80107a4:	693a      	ldr	r2, [r7, #16]
 80107a6:	4413      	add	r3, r2
 80107a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80107ac:	021b      	lsls	r3, r3, #8
 80107ae:	461a      	mov	r2, r3
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	4313      	orrs	r3, r2
 80107b4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	f003 0301 	and.w	r3, r3, #1
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d002      	beq.n	80107c6 <get_fat+0xe8>
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	091b      	lsrs	r3, r3, #4
 80107c4:	e002      	b.n	80107cc <get_fat+0xee>
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80107cc:	617b      	str	r3, [r7, #20]
			break;
 80107ce:	e055      	b.n	801087c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	899b      	ldrh	r3, [r3, #12]
 80107d8:	085b      	lsrs	r3, r3, #1
 80107da:	b29b      	uxth	r3, r3
 80107dc:	4619      	mov	r1, r3
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80107e4:	4413      	add	r3, r2
 80107e6:	4619      	mov	r1, r3
 80107e8:	6938      	ldr	r0, [r7, #16]
 80107ea:	f7ff febb 	bl	8010564 <move_window>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d140      	bne.n	8010876 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	005b      	lsls	r3, r3, #1
 80107fe:	693a      	ldr	r2, [r7, #16]
 8010800:	8992      	ldrh	r2, [r2, #12]
 8010802:	fbb3 f0f2 	udiv	r0, r3, r2
 8010806:	fb00 f202 	mul.w	r2, r0, r2
 801080a:	1a9b      	subs	r3, r3, r2
 801080c:	440b      	add	r3, r1
 801080e:	4618      	mov	r0, r3
 8010810:	f7ff fbf8 	bl	8010004 <ld_word>
 8010814:	4603      	mov	r3, r0
 8010816:	617b      	str	r3, [r7, #20]
			break;
 8010818:	e030      	b.n	801087c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	899b      	ldrh	r3, [r3, #12]
 8010822:	089b      	lsrs	r3, r3, #2
 8010824:	b29b      	uxth	r3, r3
 8010826:	4619      	mov	r1, r3
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	fbb3 f3f1 	udiv	r3, r3, r1
 801082e:	4413      	add	r3, r2
 8010830:	4619      	mov	r1, r3
 8010832:	6938      	ldr	r0, [r7, #16]
 8010834:	f7ff fe96 	bl	8010564 <move_window>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d11d      	bne.n	801087a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	009b      	lsls	r3, r3, #2
 8010848:	693a      	ldr	r2, [r7, #16]
 801084a:	8992      	ldrh	r2, [r2, #12]
 801084c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010850:	fb00 f202 	mul.w	r2, r0, r2
 8010854:	1a9b      	subs	r3, r3, r2
 8010856:	440b      	add	r3, r1
 8010858:	4618      	mov	r0, r3
 801085a:	f7ff fbeb 	bl	8010034 <ld_dword>
 801085e:	4603      	mov	r3, r0
 8010860:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010864:	617b      	str	r3, [r7, #20]
			break;
 8010866:	e009      	b.n	801087c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010868:	2301      	movs	r3, #1
 801086a:	617b      	str	r3, [r7, #20]
 801086c:	e006      	b.n	801087c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801086e:	bf00      	nop
 8010870:	e004      	b.n	801087c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010872:	bf00      	nop
 8010874:	e002      	b.n	801087c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010876:	bf00      	nop
 8010878:	e000      	b.n	801087c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801087a:	bf00      	nop
		}
	}

	return val;
 801087c:	697b      	ldr	r3, [r7, #20]
}
 801087e:	4618      	mov	r0, r3
 8010880:	3718      	adds	r7, #24
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010886:	b590      	push	{r4, r7, lr}
 8010888:	b089      	sub	sp, #36	; 0x24
 801088a:	af00      	add	r7, sp, #0
 801088c:	60f8      	str	r0, [r7, #12]
 801088e:	60b9      	str	r1, [r7, #8]
 8010890:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010892:	2302      	movs	r3, #2
 8010894:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	2b01      	cmp	r3, #1
 801089a:	f240 8102 	bls.w	8010aa2 <put_fat+0x21c>
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	69db      	ldr	r3, [r3, #28]
 80108a2:	68ba      	ldr	r2, [r7, #8]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	f080 80fc 	bcs.w	8010aa2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	2b03      	cmp	r3, #3
 80108b0:	f000 80b6 	beq.w	8010a20 <put_fat+0x19a>
 80108b4:	2b03      	cmp	r3, #3
 80108b6:	f300 80fd 	bgt.w	8010ab4 <put_fat+0x22e>
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d003      	beq.n	80108c6 <put_fat+0x40>
 80108be:	2b02      	cmp	r3, #2
 80108c0:	f000 8083 	beq.w	80109ca <put_fat+0x144>
 80108c4:	e0f6      	b.n	8010ab4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	61bb      	str	r3, [r7, #24]
 80108ca:	69bb      	ldr	r3, [r7, #24]
 80108cc:	085b      	lsrs	r3, r3, #1
 80108ce:	69ba      	ldr	r2, [r7, #24]
 80108d0:	4413      	add	r3, r2
 80108d2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	899b      	ldrh	r3, [r3, #12]
 80108dc:	4619      	mov	r1, r3
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80108e4:	4413      	add	r3, r2
 80108e6:	4619      	mov	r1, r3
 80108e8:	68f8      	ldr	r0, [r7, #12]
 80108ea:	f7ff fe3b 	bl	8010564 <move_window>
 80108ee:	4603      	mov	r3, r0
 80108f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80108f2:	7ffb      	ldrb	r3, [r7, #31]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	f040 80d6 	bne.w	8010aa6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	1c5a      	adds	r2, r3, #1
 8010904:	61ba      	str	r2, [r7, #24]
 8010906:	68fa      	ldr	r2, [r7, #12]
 8010908:	8992      	ldrh	r2, [r2, #12]
 801090a:	fbb3 f0f2 	udiv	r0, r3, r2
 801090e:	fb00 f202 	mul.w	r2, r0, r2
 8010912:	1a9b      	subs	r3, r3, r2
 8010914:	440b      	add	r3, r1
 8010916:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	f003 0301 	and.w	r3, r3, #1
 801091e:	2b00      	cmp	r3, #0
 8010920:	d00d      	beq.n	801093e <put_fat+0xb8>
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	b25b      	sxtb	r3, r3
 8010928:	f003 030f 	and.w	r3, r3, #15
 801092c:	b25a      	sxtb	r2, r3
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	b2db      	uxtb	r3, r3
 8010932:	011b      	lsls	r3, r3, #4
 8010934:	b25b      	sxtb	r3, r3
 8010936:	4313      	orrs	r3, r2
 8010938:	b25b      	sxtb	r3, r3
 801093a:	b2db      	uxtb	r3, r3
 801093c:	e001      	b.n	8010942 <put_fat+0xbc>
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	b2db      	uxtb	r3, r3
 8010942:	697a      	ldr	r2, [r7, #20]
 8010944:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	2201      	movs	r2, #1
 801094a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	899b      	ldrh	r3, [r3, #12]
 8010954:	4619      	mov	r1, r3
 8010956:	69bb      	ldr	r3, [r7, #24]
 8010958:	fbb3 f3f1 	udiv	r3, r3, r1
 801095c:	4413      	add	r3, r2
 801095e:	4619      	mov	r1, r3
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f7ff fdff 	bl	8010564 <move_window>
 8010966:	4603      	mov	r3, r0
 8010968:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801096a:	7ffb      	ldrb	r3, [r7, #31]
 801096c:	2b00      	cmp	r3, #0
 801096e:	f040 809c 	bne.w	8010aaa <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	899b      	ldrh	r3, [r3, #12]
 801097c:	461a      	mov	r2, r3
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	fbb3 f0f2 	udiv	r0, r3, r2
 8010984:	fb00 f202 	mul.w	r2, r0, r2
 8010988:	1a9b      	subs	r3, r3, r2
 801098a:	440b      	add	r3, r1
 801098c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	f003 0301 	and.w	r3, r3, #1
 8010994:	2b00      	cmp	r3, #0
 8010996:	d003      	beq.n	80109a0 <put_fat+0x11a>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	091b      	lsrs	r3, r3, #4
 801099c:	b2db      	uxtb	r3, r3
 801099e:	e00e      	b.n	80109be <put_fat+0x138>
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	b25b      	sxtb	r3, r3
 80109a6:	f023 030f 	bic.w	r3, r3, #15
 80109aa:	b25a      	sxtb	r2, r3
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	0a1b      	lsrs	r3, r3, #8
 80109b0:	b25b      	sxtb	r3, r3
 80109b2:	f003 030f 	and.w	r3, r3, #15
 80109b6:	b25b      	sxtb	r3, r3
 80109b8:	4313      	orrs	r3, r2
 80109ba:	b25b      	sxtb	r3, r3
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	697a      	ldr	r2, [r7, #20]
 80109c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2201      	movs	r2, #1
 80109c6:	70da      	strb	r2, [r3, #3]
			break;
 80109c8:	e074      	b.n	8010ab4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	899b      	ldrh	r3, [r3, #12]
 80109d2:	085b      	lsrs	r3, r3, #1
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	4619      	mov	r1, r3
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	fbb3 f3f1 	udiv	r3, r3, r1
 80109de:	4413      	add	r3, r2
 80109e0:	4619      	mov	r1, r3
 80109e2:	68f8      	ldr	r0, [r7, #12]
 80109e4:	f7ff fdbe 	bl	8010564 <move_window>
 80109e8:	4603      	mov	r3, r0
 80109ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80109ec:	7ffb      	ldrb	r3, [r7, #31]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d15d      	bne.n	8010aae <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	005b      	lsls	r3, r3, #1
 80109fc:	68fa      	ldr	r2, [r7, #12]
 80109fe:	8992      	ldrh	r2, [r2, #12]
 8010a00:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a04:	fb00 f202 	mul.w	r2, r0, r2
 8010a08:	1a9b      	subs	r3, r3, r2
 8010a0a:	440b      	add	r3, r1
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	b292      	uxth	r2, r2
 8010a10:	4611      	mov	r1, r2
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7ff fb31 	bl	801007a <st_word>
			fs->wflag = 1;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	70da      	strb	r2, [r3, #3]
			break;
 8010a1e:	e049      	b.n	8010ab4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	899b      	ldrh	r3, [r3, #12]
 8010a28:	089b      	lsrs	r3, r3, #2
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a34:	4413      	add	r3, r2
 8010a36:	4619      	mov	r1, r3
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f7ff fd93 	bl	8010564 <move_window>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a42:	7ffb      	ldrb	r3, [r7, #31]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d134      	bne.n	8010ab2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	68fa      	ldr	r2, [r7, #12]
 8010a5a:	8992      	ldrh	r2, [r2, #12]
 8010a5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a60:	fb00 f202 	mul.w	r2, r0, r2
 8010a64:	1a9b      	subs	r3, r3, r2
 8010a66:	440b      	add	r3, r1
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7ff fae3 	bl	8010034 <ld_dword>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010a74:	4323      	orrs	r3, r4
 8010a76:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	009b      	lsls	r3, r3, #2
 8010a82:	68fa      	ldr	r2, [r7, #12]
 8010a84:	8992      	ldrh	r2, [r2, #12]
 8010a86:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a8a:	fb00 f202 	mul.w	r2, r0, r2
 8010a8e:	1a9b      	subs	r3, r3, r2
 8010a90:	440b      	add	r3, r1
 8010a92:	6879      	ldr	r1, [r7, #4]
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7ff fb0b 	bl	80100b0 <st_dword>
			fs->wflag = 1;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	70da      	strb	r2, [r3, #3]
			break;
 8010aa0:	e008      	b.n	8010ab4 <put_fat+0x22e>
		}
	}
 8010aa2:	bf00      	nop
 8010aa4:	e006      	b.n	8010ab4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010aa6:	bf00      	nop
 8010aa8:	e004      	b.n	8010ab4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010aaa:	bf00      	nop
 8010aac:	e002      	b.n	8010ab4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010aae:	bf00      	nop
 8010ab0:	e000      	b.n	8010ab4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010ab2:	bf00      	nop
	return res;
 8010ab4:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3724      	adds	r7, #36	; 0x24
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd90      	pop	{r4, r7, pc}

08010abe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010abe:	b580      	push	{r7, lr}
 8010ac0:	b088      	sub	sp, #32
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	60f8      	str	r0, [r7, #12]
 8010ac6:	60b9      	str	r1, [r7, #8]
 8010ac8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010aca:	2300      	movs	r3, #0
 8010acc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	2b01      	cmp	r3, #1
 8010ad8:	d904      	bls.n	8010ae4 <remove_chain+0x26>
 8010ada:	69bb      	ldr	r3, [r7, #24]
 8010adc:	69db      	ldr	r3, [r3, #28]
 8010ade:	68ba      	ldr	r2, [r7, #8]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d301      	bcc.n	8010ae8 <remove_chain+0x2a>
 8010ae4:	2302      	movs	r3, #2
 8010ae6:	e04b      	b.n	8010b80 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00c      	beq.n	8010b08 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010aee:	f04f 32ff 	mov.w	r2, #4294967295
 8010af2:	6879      	ldr	r1, [r7, #4]
 8010af4:	69b8      	ldr	r0, [r7, #24]
 8010af6:	f7ff fec6 	bl	8010886 <put_fat>
 8010afa:	4603      	mov	r3, r0
 8010afc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010afe:	7ffb      	ldrb	r3, [r7, #31]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d001      	beq.n	8010b08 <remove_chain+0x4a>
 8010b04:	7ffb      	ldrb	r3, [r7, #31]
 8010b06:	e03b      	b.n	8010b80 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010b08:	68b9      	ldr	r1, [r7, #8]
 8010b0a:	68f8      	ldr	r0, [r7, #12]
 8010b0c:	f7ff fde7 	bl	80106de <get_fat>
 8010b10:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d031      	beq.n	8010b7c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d101      	bne.n	8010b22 <remove_chain+0x64>
 8010b1e:	2302      	movs	r3, #2
 8010b20:	e02e      	b.n	8010b80 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b28:	d101      	bne.n	8010b2e <remove_chain+0x70>
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	e028      	b.n	8010b80 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010b2e:	2200      	movs	r2, #0
 8010b30:	68b9      	ldr	r1, [r7, #8]
 8010b32:	69b8      	ldr	r0, [r7, #24]
 8010b34:	f7ff fea7 	bl	8010886 <put_fat>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010b3c:	7ffb      	ldrb	r3, [r7, #31]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d001      	beq.n	8010b46 <remove_chain+0x88>
 8010b42:	7ffb      	ldrb	r3, [r7, #31]
 8010b44:	e01c      	b.n	8010b80 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	699a      	ldr	r2, [r3, #24]
 8010b4a:	69bb      	ldr	r3, [r7, #24]
 8010b4c:	69db      	ldr	r3, [r3, #28]
 8010b4e:	3b02      	subs	r3, #2
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d20b      	bcs.n	8010b6c <remove_chain+0xae>
			fs->free_clst++;
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	699b      	ldr	r3, [r3, #24]
 8010b58:	1c5a      	adds	r2, r3, #1
 8010b5a:	69bb      	ldr	r3, [r7, #24]
 8010b5c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	791b      	ldrb	r3, [r3, #4]
 8010b62:	f043 0301 	orr.w	r3, r3, #1
 8010b66:	b2da      	uxtb	r2, r3
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	69db      	ldr	r3, [r3, #28]
 8010b74:	68ba      	ldr	r2, [r7, #8]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d3c6      	bcc.n	8010b08 <remove_chain+0x4a>
 8010b7a:	e000      	b.n	8010b7e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010b7c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010b7e:	2300      	movs	r3, #0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3720      	adds	r7, #32
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b088      	sub	sp, #32
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d10d      	bne.n	8010bba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010b9e:	693b      	ldr	r3, [r7, #16]
 8010ba0:	695b      	ldr	r3, [r3, #20]
 8010ba2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010ba4:	69bb      	ldr	r3, [r7, #24]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d004      	beq.n	8010bb4 <create_chain+0x2c>
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	69db      	ldr	r3, [r3, #28]
 8010bae:	69ba      	ldr	r2, [r7, #24]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d31b      	bcc.n	8010bec <create_chain+0x64>
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	61bb      	str	r3, [r7, #24]
 8010bb8:	e018      	b.n	8010bec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010bba:	6839      	ldr	r1, [r7, #0]
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7ff fd8e 	bl	80106de <get_fat>
 8010bc2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d801      	bhi.n	8010bce <create_chain+0x46>
 8010bca:	2301      	movs	r3, #1
 8010bcc:	e070      	b.n	8010cb0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bd4:	d101      	bne.n	8010bda <create_chain+0x52>
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	e06a      	b.n	8010cb0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010bda:	693b      	ldr	r3, [r7, #16]
 8010bdc:	69db      	ldr	r3, [r3, #28]
 8010bde:	68fa      	ldr	r2, [r7, #12]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d201      	bcs.n	8010be8 <create_chain+0x60>
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	e063      	b.n	8010cb0 <create_chain+0x128>
		scl = clst;
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010bf0:	69fb      	ldr	r3, [r7, #28]
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	69db      	ldr	r3, [r3, #28]
 8010bfa:	69fa      	ldr	r2, [r7, #28]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	d307      	bcc.n	8010c10 <create_chain+0x88>
				ncl = 2;
 8010c00:	2302      	movs	r3, #2
 8010c02:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010c04:	69fa      	ldr	r2, [r7, #28]
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d901      	bls.n	8010c10 <create_chain+0x88>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	e04f      	b.n	8010cb0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010c10:	69f9      	ldr	r1, [r7, #28]
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7ff fd63 	bl	80106de <get_fat>
 8010c18:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d00e      	beq.n	8010c3e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	2b01      	cmp	r3, #1
 8010c24:	d003      	beq.n	8010c2e <create_chain+0xa6>
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c2c:	d101      	bne.n	8010c32 <create_chain+0xaa>
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	e03e      	b.n	8010cb0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010c32:	69fa      	ldr	r2, [r7, #28]
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d1da      	bne.n	8010bf0 <create_chain+0x68>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	e038      	b.n	8010cb0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010c3e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010c40:	f04f 32ff 	mov.w	r2, #4294967295
 8010c44:	69f9      	ldr	r1, [r7, #28]
 8010c46:	6938      	ldr	r0, [r7, #16]
 8010c48:	f7ff fe1d 	bl	8010886 <put_fat>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010c50:	7dfb      	ldrb	r3, [r7, #23]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d109      	bne.n	8010c6a <create_chain+0xe2>
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d006      	beq.n	8010c6a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010c5c:	69fa      	ldr	r2, [r7, #28]
 8010c5e:	6839      	ldr	r1, [r7, #0]
 8010c60:	6938      	ldr	r0, [r7, #16]
 8010c62:	f7ff fe10 	bl	8010886 <put_fat>
 8010c66:	4603      	mov	r3, r0
 8010c68:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010c6a:	7dfb      	ldrb	r3, [r7, #23]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d116      	bne.n	8010c9e <create_chain+0x116>
		fs->last_clst = ncl;
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	69fa      	ldr	r2, [r7, #28]
 8010c74:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	699a      	ldr	r2, [r3, #24]
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	69db      	ldr	r3, [r3, #28]
 8010c7e:	3b02      	subs	r3, #2
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d804      	bhi.n	8010c8e <create_chain+0x106>
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	699b      	ldr	r3, [r3, #24]
 8010c88:	1e5a      	subs	r2, r3, #1
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	791b      	ldrb	r3, [r3, #4]
 8010c92:	f043 0301 	orr.w	r3, r3, #1
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	711a      	strb	r2, [r3, #4]
 8010c9c:	e007      	b.n	8010cae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010c9e:	7dfb      	ldrb	r3, [r7, #23]
 8010ca0:	2b01      	cmp	r3, #1
 8010ca2:	d102      	bne.n	8010caa <create_chain+0x122>
 8010ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ca8:	e000      	b.n	8010cac <create_chain+0x124>
 8010caa:	2301      	movs	r3, #1
 8010cac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010cae:	69fb      	ldr	r3, [r7, #28]
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3720      	adds	r7, #32
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b087      	sub	sp, #28
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ccc:	3304      	adds	r3, #4
 8010cce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	899b      	ldrh	r3, [r3, #12]
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cdc:	68fa      	ldr	r2, [r7, #12]
 8010cde:	8952      	ldrh	r2, [r2, #10]
 8010ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ce4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	1d1a      	adds	r2, r3, #4
 8010cea:	613a      	str	r2, [r7, #16]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d101      	bne.n	8010cfa <clmt_clust+0x42>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	e010      	b.n	8010d1c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010cfa:	697a      	ldr	r2, [r7, #20]
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d307      	bcc.n	8010d12 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010d02:	697a      	ldr	r2, [r7, #20]
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	1ad3      	subs	r3, r2, r3
 8010d08:	617b      	str	r3, [r7, #20]
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	3304      	adds	r3, #4
 8010d0e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010d10:	e7e9      	b.n	8010ce6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8010d12:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	4413      	add	r3, r2
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	371c      	adds	r7, #28
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b086      	sub	sp, #24
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010d3e:	d204      	bcs.n	8010d4a <dir_sdi+0x22>
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	f003 031f 	and.w	r3, r3, #31
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d001      	beq.n	8010d4e <dir_sdi+0x26>
		return FR_INT_ERR;
 8010d4a:	2302      	movs	r3, #2
 8010d4c:	e071      	b.n	8010e32 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	683a      	ldr	r2, [r7, #0]
 8010d52:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	689b      	ldr	r3, [r3, #8]
 8010d58:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d106      	bne.n	8010d6e <dir_sdi+0x46>
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	781b      	ldrb	r3, [r3, #0]
 8010d64:	2b02      	cmp	r3, #2
 8010d66:	d902      	bls.n	8010d6e <dir_sdi+0x46>
		clst = fs->dirbase;
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d6c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d10c      	bne.n	8010d8e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	095b      	lsrs	r3, r3, #5
 8010d78:	693a      	ldr	r2, [r7, #16]
 8010d7a:	8912      	ldrh	r2, [r2, #8]
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	d301      	bcc.n	8010d84 <dir_sdi+0x5c>
 8010d80:	2302      	movs	r3, #2
 8010d82:	e056      	b.n	8010e32 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	61da      	str	r2, [r3, #28]
 8010d8c:	e02d      	b.n	8010dea <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	895b      	ldrh	r3, [r3, #10]
 8010d92:	461a      	mov	r2, r3
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	899b      	ldrh	r3, [r3, #12]
 8010d98:	fb02 f303 	mul.w	r3, r2, r3
 8010d9c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010d9e:	e019      	b.n	8010dd4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6979      	ldr	r1, [r7, #20]
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7ff fc9a 	bl	80106de <get_fat>
 8010daa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010db2:	d101      	bne.n	8010db8 <dir_sdi+0x90>
 8010db4:	2301      	movs	r3, #1
 8010db6:	e03c      	b.n	8010e32 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d904      	bls.n	8010dc8 <dir_sdi+0xa0>
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	69db      	ldr	r3, [r3, #28]
 8010dc2:	697a      	ldr	r2, [r7, #20]
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d301      	bcc.n	8010dcc <dir_sdi+0xa4>
 8010dc8:	2302      	movs	r3, #2
 8010dca:	e032      	b.n	8010e32 <dir_sdi+0x10a>
			ofs -= csz;
 8010dcc:	683a      	ldr	r2, [r7, #0]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	1ad3      	subs	r3, r2, r3
 8010dd2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010dd4:	683a      	ldr	r2, [r7, #0]
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d2e1      	bcs.n	8010da0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010ddc:	6979      	ldr	r1, [r7, #20]
 8010dde:	6938      	ldr	r0, [r7, #16]
 8010de0:	f7ff fc5e 	bl	80106a0 <clust2sect>
 8010de4:	4602      	mov	r2, r0
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	697a      	ldr	r2, [r7, #20]
 8010dee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	69db      	ldr	r3, [r3, #28]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d101      	bne.n	8010dfc <dir_sdi+0xd4>
 8010df8:	2302      	movs	r3, #2
 8010dfa:	e01a      	b.n	8010e32 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	69da      	ldr	r2, [r3, #28]
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	899b      	ldrh	r3, [r3, #12]
 8010e04:	4619      	mov	r1, r3
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e0c:	441a      	add	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	899b      	ldrh	r3, [r3, #12]
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e24:	fb00 f202 	mul.w	r2, r0, r2
 8010e28:	1a9b      	subs	r3, r3, r2
 8010e2a:	18ca      	adds	r2, r1, r3
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010e30:	2300      	movs	r3, #0
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3718      	adds	r7, #24
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b086      	sub	sp, #24
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
 8010e42:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	695b      	ldr	r3, [r3, #20]
 8010e4e:	3320      	adds	r3, #32
 8010e50:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	69db      	ldr	r3, [r3, #28]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d003      	beq.n	8010e62 <dir_next+0x28>
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010e60:	d301      	bcc.n	8010e66 <dir_next+0x2c>
 8010e62:	2304      	movs	r3, #4
 8010e64:	e0bb      	b.n	8010fde <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	899b      	ldrh	r3, [r3, #12]
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e72:	fb01 f202 	mul.w	r2, r1, r2
 8010e76:	1a9b      	subs	r3, r3, r2
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f040 809d 	bne.w	8010fb8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	69db      	ldr	r3, [r3, #28]
 8010e82:	1c5a      	adds	r2, r3, #1
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	699b      	ldr	r3, [r3, #24]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d10b      	bne.n	8010ea8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	095b      	lsrs	r3, r3, #5
 8010e94:	68fa      	ldr	r2, [r7, #12]
 8010e96:	8912      	ldrh	r2, [r2, #8]
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	f0c0 808d 	bcc.w	8010fb8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	61da      	str	r2, [r3, #28]
 8010ea4:	2304      	movs	r3, #4
 8010ea6:	e09a      	b.n	8010fde <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	899b      	ldrh	r3, [r3, #12]
 8010eac:	461a      	mov	r2, r3
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010eb4:	68fa      	ldr	r2, [r7, #12]
 8010eb6:	8952      	ldrh	r2, [r2, #10]
 8010eb8:	3a01      	subs	r2, #1
 8010eba:	4013      	ands	r3, r2
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d17b      	bne.n	8010fb8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	699b      	ldr	r3, [r3, #24]
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	4610      	mov	r0, r2
 8010eca:	f7ff fc08 	bl	80106de <get_fat>
 8010ece:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d801      	bhi.n	8010eda <dir_next+0xa0>
 8010ed6:	2302      	movs	r3, #2
 8010ed8:	e081      	b.n	8010fde <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ee0:	d101      	bne.n	8010ee6 <dir_next+0xac>
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	e07b      	b.n	8010fde <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	69db      	ldr	r3, [r3, #28]
 8010eea:	697a      	ldr	r2, [r7, #20]
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d359      	bcc.n	8010fa4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d104      	bne.n	8010f00 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	61da      	str	r2, [r3, #28]
 8010efc:	2304      	movs	r3, #4
 8010efe:	e06e      	b.n	8010fde <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	699b      	ldr	r3, [r3, #24]
 8010f06:	4619      	mov	r1, r3
 8010f08:	4610      	mov	r0, r2
 8010f0a:	f7ff fe3d 	bl	8010b88 <create_chain>
 8010f0e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d101      	bne.n	8010f1a <dir_next+0xe0>
 8010f16:	2307      	movs	r3, #7
 8010f18:	e061      	b.n	8010fde <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d101      	bne.n	8010f24 <dir_next+0xea>
 8010f20:	2302      	movs	r3, #2
 8010f22:	e05c      	b.n	8010fde <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f2a:	d101      	bne.n	8010f30 <dir_next+0xf6>
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	e056      	b.n	8010fde <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010f30:	68f8      	ldr	r0, [r7, #12]
 8010f32:	f7ff fad3 	bl	80104dc <sync_window>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d001      	beq.n	8010f40 <dir_next+0x106>
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	e04e      	b.n	8010fde <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	899b      	ldrh	r3, [r3, #12]
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	2100      	movs	r1, #0
 8010f4e:	f7ff f8fc 	bl	801014a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010f52:	2300      	movs	r3, #0
 8010f54:	613b      	str	r3, [r7, #16]
 8010f56:	6979      	ldr	r1, [r7, #20]
 8010f58:	68f8      	ldr	r0, [r7, #12]
 8010f5a:	f7ff fba1 	bl	80106a0 <clust2sect>
 8010f5e:	4602      	mov	r2, r0
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	635a      	str	r2, [r3, #52]	; 0x34
 8010f64:	e012      	b.n	8010f8c <dir_next+0x152>
						fs->wflag = 1;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	2201      	movs	r2, #1
 8010f6a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	f7ff fab5 	bl	80104dc <sync_window>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d001      	beq.n	8010f7c <dir_next+0x142>
 8010f78:	2301      	movs	r3, #1
 8010f7a:	e030      	b.n	8010fde <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	3301      	adds	r3, #1
 8010f80:	613b      	str	r3, [r7, #16]
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f86:	1c5a      	adds	r2, r3, #1
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	635a      	str	r2, [r3, #52]	; 0x34
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	895b      	ldrh	r3, [r3, #10]
 8010f90:	461a      	mov	r2, r3
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	4293      	cmp	r3, r2
 8010f96:	d3e6      	bcc.n	8010f66 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	1ad2      	subs	r2, r2, r3
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	697a      	ldr	r2, [r7, #20]
 8010fa8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010faa:	6979      	ldr	r1, [r7, #20]
 8010fac:	68f8      	ldr	r0, [r7, #12]
 8010fae:	f7ff fb77 	bl	80106a0 <clust2sect>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	68ba      	ldr	r2, [r7, #8]
 8010fbc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	899b      	ldrh	r3, [r3, #12]
 8010fc8:	461a      	mov	r2, r3
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fd0:	fb00 f202 	mul.w	r2, r0, r2
 8010fd4:	1a9b      	subs	r3, r3, r2
 8010fd6:	18ca      	adds	r2, r1, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010fdc:	2300      	movs	r3, #0
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3718      	adds	r7, #24
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}

08010fe6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b086      	sub	sp, #24
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
 8010fee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f7ff fe95 	bl	8010d28 <dir_sdi>
 8010ffe:	4603      	mov	r3, r0
 8011000:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011002:	7dfb      	ldrb	r3, [r7, #23]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d12b      	bne.n	8011060 <dir_alloc+0x7a>
		n = 0;
 8011008:	2300      	movs	r3, #0
 801100a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	69db      	ldr	r3, [r3, #28]
 8011010:	4619      	mov	r1, r3
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f7ff faa6 	bl	8010564 <move_window>
 8011018:	4603      	mov	r3, r0
 801101a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801101c:	7dfb      	ldrb	r3, [r7, #23]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d11d      	bne.n	801105e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6a1b      	ldr	r3, [r3, #32]
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	2be5      	cmp	r3, #229	; 0xe5
 801102a:	d004      	beq.n	8011036 <dir_alloc+0x50>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6a1b      	ldr	r3, [r3, #32]
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d107      	bne.n	8011046 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	3301      	adds	r3, #1
 801103a:	613b      	str	r3, [r7, #16]
 801103c:	693a      	ldr	r2, [r7, #16]
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	429a      	cmp	r2, r3
 8011042:	d102      	bne.n	801104a <dir_alloc+0x64>
 8011044:	e00c      	b.n	8011060 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011046:	2300      	movs	r3, #0
 8011048:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801104a:	2101      	movs	r1, #1
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f7ff fef4 	bl	8010e3a <dir_next>
 8011052:	4603      	mov	r3, r0
 8011054:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011056:	7dfb      	ldrb	r3, [r7, #23]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d0d7      	beq.n	801100c <dir_alloc+0x26>
 801105c:	e000      	b.n	8011060 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801105e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011060:	7dfb      	ldrb	r3, [r7, #23]
 8011062:	2b04      	cmp	r3, #4
 8011064:	d101      	bne.n	801106a <dir_alloc+0x84>
 8011066:	2307      	movs	r3, #7
 8011068:	75fb      	strb	r3, [r7, #23]
	return res;
 801106a:	7dfb      	ldrb	r3, [r7, #23]
}
 801106c:	4618      	mov	r0, r3
 801106e:	3718      	adds	r7, #24
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}

08011074 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	331a      	adds	r3, #26
 8011082:	4618      	mov	r0, r3
 8011084:	f7fe ffbe 	bl	8010004 <ld_word>
 8011088:	4603      	mov	r3, r0
 801108a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	2b03      	cmp	r3, #3
 8011092:	d109      	bne.n	80110a8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	3314      	adds	r3, #20
 8011098:	4618      	mov	r0, r3
 801109a:	f7fe ffb3 	bl	8010004 <ld_word>
 801109e:	4603      	mov	r3, r0
 80110a0:	041b      	lsls	r3, r3, #16
 80110a2:	68fa      	ldr	r2, [r7, #12]
 80110a4:	4313      	orrs	r3, r2
 80110a6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80110a8:	68fb      	ldr	r3, [r7, #12]
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b084      	sub	sp, #16
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	60f8      	str	r0, [r7, #12]
 80110ba:	60b9      	str	r1, [r7, #8]
 80110bc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	331a      	adds	r3, #26
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	b292      	uxth	r2, r2
 80110c6:	4611      	mov	r1, r2
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7fe ffd6 	bl	801007a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	2b03      	cmp	r3, #3
 80110d4:	d109      	bne.n	80110ea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	f103 0214 	add.w	r2, r3, #20
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	0c1b      	lsrs	r3, r3, #16
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	4619      	mov	r1, r3
 80110e4:	4610      	mov	r0, r2
 80110e6:	f7fe ffc8 	bl	801007a <st_word>
	}
}
 80110ea:	bf00      	nop
 80110ec:	3710      	adds	r7, #16
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
	...

080110f4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80110f4:	b590      	push	{r4, r7, lr}
 80110f6:	b087      	sub	sp, #28
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	331a      	adds	r3, #26
 8011102:	4618      	mov	r0, r3
 8011104:	f7fe ff7e 	bl	8010004 <ld_word>
 8011108:	4603      	mov	r3, r0
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <cmp_lfn+0x1e>
 801110e:	2300      	movs	r3, #0
 8011110:	e059      	b.n	80111c6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801111a:	1e5a      	subs	r2, r3, #1
 801111c:	4613      	mov	r3, r2
 801111e:	005b      	lsls	r3, r3, #1
 8011120:	4413      	add	r3, r2
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	4413      	add	r3, r2
 8011126:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011128:	2301      	movs	r3, #1
 801112a:	81fb      	strh	r3, [r7, #14]
 801112c:	2300      	movs	r3, #0
 801112e:	613b      	str	r3, [r7, #16]
 8011130:	e033      	b.n	801119a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011132:	4a27      	ldr	r2, [pc, #156]	; (80111d0 <cmp_lfn+0xdc>)
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	4413      	add	r3, r2
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	461a      	mov	r2, r3
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	4413      	add	r3, r2
 8011140:	4618      	mov	r0, r3
 8011142:	f7fe ff5f 	bl	8010004 <ld_word>
 8011146:	4603      	mov	r3, r0
 8011148:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801114a:	89fb      	ldrh	r3, [r7, #14]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d01a      	beq.n	8011186 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	2bfe      	cmp	r3, #254	; 0xfe
 8011154:	d812      	bhi.n	801117c <cmp_lfn+0x88>
 8011156:	89bb      	ldrh	r3, [r7, #12]
 8011158:	4618      	mov	r0, r3
 801115a:	f002 fb99 	bl	8013890 <ff_wtoupper>
 801115e:	4603      	mov	r3, r0
 8011160:	461c      	mov	r4, r3
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	1c5a      	adds	r2, r3, #1
 8011166:	617a      	str	r2, [r7, #20]
 8011168:	005b      	lsls	r3, r3, #1
 801116a:	687a      	ldr	r2, [r7, #4]
 801116c:	4413      	add	r3, r2
 801116e:	881b      	ldrh	r3, [r3, #0]
 8011170:	4618      	mov	r0, r3
 8011172:	f002 fb8d 	bl	8013890 <ff_wtoupper>
 8011176:	4603      	mov	r3, r0
 8011178:	429c      	cmp	r4, r3
 801117a:	d001      	beq.n	8011180 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801117c:	2300      	movs	r3, #0
 801117e:	e022      	b.n	80111c6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8011180:	89bb      	ldrh	r3, [r7, #12]
 8011182:	81fb      	strh	r3, [r7, #14]
 8011184:	e006      	b.n	8011194 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011186:	89bb      	ldrh	r3, [r7, #12]
 8011188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801118c:	4293      	cmp	r3, r2
 801118e:	d001      	beq.n	8011194 <cmp_lfn+0xa0>
 8011190:	2300      	movs	r3, #0
 8011192:	e018      	b.n	80111c6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	3301      	adds	r3, #1
 8011198:	613b      	str	r3, [r7, #16]
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	2b0c      	cmp	r3, #12
 801119e:	d9c8      	bls.n	8011132 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d00b      	beq.n	80111c4 <cmp_lfn+0xd0>
 80111ac:	89fb      	ldrh	r3, [r7, #14]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d008      	beq.n	80111c4 <cmp_lfn+0xd0>
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	005b      	lsls	r3, r3, #1
 80111b6:	687a      	ldr	r2, [r7, #4]
 80111b8:	4413      	add	r3, r2
 80111ba:	881b      	ldrh	r3, [r3, #0]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d001      	beq.n	80111c4 <cmp_lfn+0xd0>
 80111c0:	2300      	movs	r3, #0
 80111c2:	e000      	b.n	80111c6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80111c4:	2301      	movs	r3, #1
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	371c      	adds	r7, #28
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd90      	pop	{r4, r7, pc}
 80111ce:	bf00      	nop
 80111d0:	0804da10 	.word	0x0804da10

080111d4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b086      	sub	sp, #24
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	331a      	adds	r3, #26
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fe ff0e 	bl	8010004 <ld_word>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d001      	beq.n	80111f2 <pick_lfn+0x1e>
 80111ee:	2300      	movs	r3, #0
 80111f0:	e04d      	b.n	801128e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111fa:	1e5a      	subs	r2, r3, #1
 80111fc:	4613      	mov	r3, r2
 80111fe:	005b      	lsls	r3, r3, #1
 8011200:	4413      	add	r3, r2
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	4413      	add	r3, r2
 8011206:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011208:	2301      	movs	r3, #1
 801120a:	81fb      	strh	r3, [r7, #14]
 801120c:	2300      	movs	r3, #0
 801120e:	613b      	str	r3, [r7, #16]
 8011210:	e028      	b.n	8011264 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011212:	4a21      	ldr	r2, [pc, #132]	; (8011298 <pick_lfn+0xc4>)
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	4413      	add	r3, r2
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	461a      	mov	r2, r3
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	4413      	add	r3, r2
 8011220:	4618      	mov	r0, r3
 8011222:	f7fe feef 	bl	8010004 <ld_word>
 8011226:	4603      	mov	r3, r0
 8011228:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801122a:	89fb      	ldrh	r3, [r7, #14]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00f      	beq.n	8011250 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	2bfe      	cmp	r3, #254	; 0xfe
 8011234:	d901      	bls.n	801123a <pick_lfn+0x66>
 8011236:	2300      	movs	r3, #0
 8011238:	e029      	b.n	801128e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801123a:	89bb      	ldrh	r3, [r7, #12]
 801123c:	81fb      	strh	r3, [r7, #14]
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	1c5a      	adds	r2, r3, #1
 8011242:	617a      	str	r2, [r7, #20]
 8011244:	005b      	lsls	r3, r3, #1
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	4413      	add	r3, r2
 801124a:	89fa      	ldrh	r2, [r7, #14]
 801124c:	801a      	strh	r2, [r3, #0]
 801124e:	e006      	b.n	801125e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011250:	89bb      	ldrh	r3, [r7, #12]
 8011252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011256:	4293      	cmp	r3, r2
 8011258:	d001      	beq.n	801125e <pick_lfn+0x8a>
 801125a:	2300      	movs	r3, #0
 801125c:	e017      	b.n	801128e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801125e:	693b      	ldr	r3, [r7, #16]
 8011260:	3301      	adds	r3, #1
 8011262:	613b      	str	r3, [r7, #16]
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	2b0c      	cmp	r3, #12
 8011268:	d9d3      	bls.n	8011212 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011272:	2b00      	cmp	r3, #0
 8011274:	d00a      	beq.n	801128c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	2bfe      	cmp	r3, #254	; 0xfe
 801127a:	d901      	bls.n	8011280 <pick_lfn+0xac>
 801127c:	2300      	movs	r3, #0
 801127e:	e006      	b.n	801128e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	005b      	lsls	r3, r3, #1
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	4413      	add	r3, r2
 8011288:	2200      	movs	r2, #0
 801128a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801128c:	2301      	movs	r3, #1
}
 801128e:	4618      	mov	r0, r3
 8011290:	3718      	adds	r7, #24
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}
 8011296:	bf00      	nop
 8011298:	0804da10 	.word	0x0804da10

0801129c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b088      	sub	sp, #32
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	60f8      	str	r0, [r7, #12]
 80112a4:	60b9      	str	r1, [r7, #8]
 80112a6:	4611      	mov	r1, r2
 80112a8:	461a      	mov	r2, r3
 80112aa:	460b      	mov	r3, r1
 80112ac:	71fb      	strb	r3, [r7, #7]
 80112ae:	4613      	mov	r3, r2
 80112b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	330d      	adds	r3, #13
 80112b6:	79ba      	ldrb	r2, [r7, #6]
 80112b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	330b      	adds	r3, #11
 80112be:	220f      	movs	r2, #15
 80112c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	330c      	adds	r3, #12
 80112c6:	2200      	movs	r2, #0
 80112c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	331a      	adds	r3, #26
 80112ce:	2100      	movs	r1, #0
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fe fed2 	bl	801007a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80112d6:	79fb      	ldrb	r3, [r7, #7]
 80112d8:	1e5a      	subs	r2, r3, #1
 80112da:	4613      	mov	r3, r2
 80112dc:	005b      	lsls	r3, r3, #1
 80112de:	4413      	add	r3, r2
 80112e0:	009b      	lsls	r3, r3, #2
 80112e2:	4413      	add	r3, r2
 80112e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80112e6:	2300      	movs	r3, #0
 80112e8:	82fb      	strh	r3, [r7, #22]
 80112ea:	2300      	movs	r3, #0
 80112ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80112ee:	8afb      	ldrh	r3, [r7, #22]
 80112f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112f4:	4293      	cmp	r3, r2
 80112f6:	d007      	beq.n	8011308 <put_lfn+0x6c>
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	1c5a      	adds	r2, r3, #1
 80112fc:	61fa      	str	r2, [r7, #28]
 80112fe:	005b      	lsls	r3, r3, #1
 8011300:	68fa      	ldr	r2, [r7, #12]
 8011302:	4413      	add	r3, r2
 8011304:	881b      	ldrh	r3, [r3, #0]
 8011306:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011308:	4a17      	ldr	r2, [pc, #92]	; (8011368 <put_lfn+0xcc>)
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	4413      	add	r3, r2
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	461a      	mov	r2, r3
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	4413      	add	r3, r2
 8011316:	8afa      	ldrh	r2, [r7, #22]
 8011318:	4611      	mov	r1, r2
 801131a:	4618      	mov	r0, r3
 801131c:	f7fe fead 	bl	801007a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011320:	8afb      	ldrh	r3, [r7, #22]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d102      	bne.n	801132c <put_lfn+0x90>
 8011326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801132a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801132c:	69bb      	ldr	r3, [r7, #24]
 801132e:	3301      	adds	r3, #1
 8011330:	61bb      	str	r3, [r7, #24]
 8011332:	69bb      	ldr	r3, [r7, #24]
 8011334:	2b0c      	cmp	r3, #12
 8011336:	d9da      	bls.n	80112ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011338:	8afb      	ldrh	r3, [r7, #22]
 801133a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801133e:	4293      	cmp	r3, r2
 8011340:	d006      	beq.n	8011350 <put_lfn+0xb4>
 8011342:	69fb      	ldr	r3, [r7, #28]
 8011344:	005b      	lsls	r3, r3, #1
 8011346:	68fa      	ldr	r2, [r7, #12]
 8011348:	4413      	add	r3, r2
 801134a:	881b      	ldrh	r3, [r3, #0]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d103      	bne.n	8011358 <put_lfn+0xbc>
 8011350:	79fb      	ldrb	r3, [r7, #7]
 8011352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011356:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	79fa      	ldrb	r2, [r7, #7]
 801135c:	701a      	strb	r2, [r3, #0]
}
 801135e:	bf00      	nop
 8011360:	3720      	adds	r7, #32
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop
 8011368:	0804da10 	.word	0x0804da10

0801136c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b08c      	sub	sp, #48	; 0x30
 8011370:	af00      	add	r7, sp, #0
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	607a      	str	r2, [r7, #4]
 8011378:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801137a:	220b      	movs	r2, #11
 801137c:	68b9      	ldr	r1, [r7, #8]
 801137e:	68f8      	ldr	r0, [r7, #12]
 8011380:	f7fe fec2 	bl	8010108 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	2b05      	cmp	r3, #5
 8011388:	d92b      	bls.n	80113e2 <gen_numname+0x76>
		sr = seq;
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801138e:	e022      	b.n	80113d6 <gen_numname+0x6a>
			wc = *lfn++;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	1c9a      	adds	r2, r3, #2
 8011394:	607a      	str	r2, [r7, #4]
 8011396:	881b      	ldrh	r3, [r3, #0]
 8011398:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801139a:	2300      	movs	r3, #0
 801139c:	62bb      	str	r3, [r7, #40]	; 0x28
 801139e:	e017      	b.n	80113d0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	005a      	lsls	r2, r3, #1
 80113a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113a6:	f003 0301 	and.w	r3, r3, #1
 80113aa:	4413      	add	r3, r2
 80113ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80113ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113b0:	085b      	lsrs	r3, r3, #1
 80113b2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d005      	beq.n	80113ca <gen_numname+0x5e>
 80113be:	69fb      	ldr	r3, [r7, #28]
 80113c0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80113c4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80113c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80113ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113cc:	3301      	adds	r3, #1
 80113ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80113d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d2:	2b0f      	cmp	r3, #15
 80113d4:	d9e4      	bls.n	80113a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	881b      	ldrh	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d1d8      	bne.n	8011390 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80113de:	69fb      	ldr	r3, [r7, #28]
 80113e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80113e2:	2307      	movs	r3, #7
 80113e4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	f003 030f 	and.w	r3, r3, #15
 80113ee:	b2db      	uxtb	r3, r3
 80113f0:	3330      	adds	r3, #48	; 0x30
 80113f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80113f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113fa:	2b39      	cmp	r3, #57	; 0x39
 80113fc:	d904      	bls.n	8011408 <gen_numname+0x9c>
 80113fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011402:	3307      	adds	r3, #7
 8011404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140a:	1e5a      	subs	r2, r3, #1
 801140c:	62ba      	str	r2, [r7, #40]	; 0x28
 801140e:	3330      	adds	r3, #48	; 0x30
 8011410:	443b      	add	r3, r7
 8011412:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011416:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	091b      	lsrs	r3, r3, #4
 801141e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d1df      	bne.n	80113e6 <gen_numname+0x7a>
	ns[i] = '~';
 8011426:	f107 0214 	add.w	r2, r7, #20
 801142a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142c:	4413      	add	r3, r2
 801142e:	227e      	movs	r2, #126	; 0x7e
 8011430:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011432:	2300      	movs	r3, #0
 8011434:	627b      	str	r3, [r7, #36]	; 0x24
 8011436:	e002      	b.n	801143e <gen_numname+0xd2>
 8011438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143a:	3301      	adds	r3, #1
 801143c:	627b      	str	r3, [r7, #36]	; 0x24
 801143e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011442:	429a      	cmp	r2, r3
 8011444:	d205      	bcs.n	8011452 <gen_numname+0xe6>
 8011446:	68fa      	ldr	r2, [r7, #12]
 8011448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144a:	4413      	add	r3, r2
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	2b20      	cmp	r3, #32
 8011450:	d1f2      	bne.n	8011438 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011454:	2b07      	cmp	r3, #7
 8011456:	d807      	bhi.n	8011468 <gen_numname+0xfc>
 8011458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145a:	1c5a      	adds	r2, r3, #1
 801145c:	62ba      	str	r2, [r7, #40]	; 0x28
 801145e:	3330      	adds	r3, #48	; 0x30
 8011460:	443b      	add	r3, r7
 8011462:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011466:	e000      	b.n	801146a <gen_numname+0xfe>
 8011468:	2120      	movs	r1, #32
 801146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146c:	1c5a      	adds	r2, r3, #1
 801146e:	627a      	str	r2, [r7, #36]	; 0x24
 8011470:	68fa      	ldr	r2, [r7, #12]
 8011472:	4413      	add	r3, r2
 8011474:	460a      	mov	r2, r1
 8011476:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801147a:	2b07      	cmp	r3, #7
 801147c:	d9e9      	bls.n	8011452 <gen_numname+0xe6>
}
 801147e:	bf00      	nop
 8011480:	bf00      	nop
 8011482:	3730      	adds	r7, #48	; 0x30
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011488:	b480      	push	{r7}
 801148a:	b085      	sub	sp, #20
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011490:	2300      	movs	r3, #0
 8011492:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011494:	230b      	movs	r3, #11
 8011496:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011498:	7bfb      	ldrb	r3, [r7, #15]
 801149a:	b2da      	uxtb	r2, r3
 801149c:	0852      	lsrs	r2, r2, #1
 801149e:	01db      	lsls	r3, r3, #7
 80114a0:	4313      	orrs	r3, r2
 80114a2:	b2da      	uxtb	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	1c59      	adds	r1, r3, #1
 80114a8:	6079      	str	r1, [r7, #4]
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	4413      	add	r3, r2
 80114ae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	3b01      	subs	r3, #1
 80114b4:	60bb      	str	r3, [r7, #8]
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d1ed      	bne.n	8011498 <sum_sfn+0x10>
	return sum;
 80114bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3714      	adds	r7, #20
 80114c2:	46bd      	mov	sp, r7
 80114c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c8:	4770      	bx	lr

080114ca <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b086      	sub	sp, #24
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
 80114d2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80114d4:	2304      	movs	r3, #4
 80114d6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80114de:	23ff      	movs	r3, #255	; 0xff
 80114e0:	757b      	strb	r3, [r7, #21]
 80114e2:	23ff      	movs	r3, #255	; 0xff
 80114e4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80114e6:	e081      	b.n	80115ec <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	69db      	ldr	r3, [r3, #28]
 80114ec:	4619      	mov	r1, r3
 80114ee:	6938      	ldr	r0, [r7, #16]
 80114f0:	f7ff f838 	bl	8010564 <move_window>
 80114f4:	4603      	mov	r3, r0
 80114f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80114f8:	7dfb      	ldrb	r3, [r7, #23]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d17c      	bne.n	80115f8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6a1b      	ldr	r3, [r3, #32]
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8011506:	7dbb      	ldrb	r3, [r7, #22]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d102      	bne.n	8011512 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801150c:	2304      	movs	r3, #4
 801150e:	75fb      	strb	r3, [r7, #23]
 8011510:	e077      	b.n	8011602 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6a1b      	ldr	r3, [r3, #32]
 8011516:	330b      	adds	r3, #11
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801151e:	73fb      	strb	r3, [r7, #15]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	7bfa      	ldrb	r2, [r7, #15]
 8011524:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011526:	7dbb      	ldrb	r3, [r7, #22]
 8011528:	2be5      	cmp	r3, #229	; 0xe5
 801152a:	d00e      	beq.n	801154a <dir_read+0x80>
 801152c:	7dbb      	ldrb	r3, [r7, #22]
 801152e:	2b2e      	cmp	r3, #46	; 0x2e
 8011530:	d00b      	beq.n	801154a <dir_read+0x80>
 8011532:	7bfb      	ldrb	r3, [r7, #15]
 8011534:	f023 0320 	bic.w	r3, r3, #32
 8011538:	2b08      	cmp	r3, #8
 801153a:	bf0c      	ite	eq
 801153c:	2301      	moveq	r3, #1
 801153e:	2300      	movne	r3, #0
 8011540:	b2db      	uxtb	r3, r3
 8011542:	461a      	mov	r2, r3
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	4293      	cmp	r3, r2
 8011548:	d002      	beq.n	8011550 <dir_read+0x86>
				ord = 0xFF;
 801154a:	23ff      	movs	r3, #255	; 0xff
 801154c:	757b      	strb	r3, [r7, #21]
 801154e:	e044      	b.n	80115da <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011550:	7bfb      	ldrb	r3, [r7, #15]
 8011552:	2b0f      	cmp	r3, #15
 8011554:	d12f      	bne.n	80115b6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011556:	7dbb      	ldrb	r3, [r7, #22]
 8011558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801155c:	2b00      	cmp	r3, #0
 801155e:	d00d      	beq.n	801157c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6a1b      	ldr	r3, [r3, #32]
 8011564:	7b5b      	ldrb	r3, [r3, #13]
 8011566:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011568:	7dbb      	ldrb	r3, [r7, #22]
 801156a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801156e:	75bb      	strb	r3, [r7, #22]
 8011570:	7dbb      	ldrb	r3, [r7, #22]
 8011572:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	695a      	ldr	r2, [r3, #20]
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801157c:	7dba      	ldrb	r2, [r7, #22]
 801157e:	7d7b      	ldrb	r3, [r7, #21]
 8011580:	429a      	cmp	r2, r3
 8011582:	d115      	bne.n	80115b0 <dir_read+0xe6>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6a1b      	ldr	r3, [r3, #32]
 8011588:	330d      	adds	r3, #13
 801158a:	781b      	ldrb	r3, [r3, #0]
 801158c:	7d3a      	ldrb	r2, [r7, #20]
 801158e:	429a      	cmp	r2, r3
 8011590:	d10e      	bne.n	80115b0 <dir_read+0xe6>
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	691a      	ldr	r2, [r3, #16]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6a1b      	ldr	r3, [r3, #32]
 801159a:	4619      	mov	r1, r3
 801159c:	4610      	mov	r0, r2
 801159e:	f7ff fe19 	bl	80111d4 <pick_lfn>
 80115a2:	4603      	mov	r3, r0
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d003      	beq.n	80115b0 <dir_read+0xe6>
 80115a8:	7d7b      	ldrb	r3, [r7, #21]
 80115aa:	3b01      	subs	r3, #1
 80115ac:	b2db      	uxtb	r3, r3
 80115ae:	e000      	b.n	80115b2 <dir_read+0xe8>
 80115b0:	23ff      	movs	r3, #255	; 0xff
 80115b2:	757b      	strb	r3, [r7, #21]
 80115b4:	e011      	b.n	80115da <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80115b6:	7d7b      	ldrb	r3, [r7, #21]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d109      	bne.n	80115d0 <dir_read+0x106>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6a1b      	ldr	r3, [r3, #32]
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7ff ff61 	bl	8011488 <sum_sfn>
 80115c6:	4603      	mov	r3, r0
 80115c8:	461a      	mov	r2, r3
 80115ca:	7d3b      	ldrb	r3, [r7, #20]
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d015      	beq.n	80115fc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f04f 32ff 	mov.w	r2, #4294967295
 80115d6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80115d8:	e010      	b.n	80115fc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80115da:	2100      	movs	r1, #0
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f7ff fc2c 	bl	8010e3a <dir_next>
 80115e2:	4603      	mov	r3, r0
 80115e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80115e6:	7dfb      	ldrb	r3, [r7, #23]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d109      	bne.n	8011600 <dir_read+0x136>
	while (dp->sect) {
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	69db      	ldr	r3, [r3, #28]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f47f af79 	bne.w	80114e8 <dir_read+0x1e>
 80115f6:	e004      	b.n	8011602 <dir_read+0x138>
		if (res != FR_OK) break;
 80115f8:	bf00      	nop
 80115fa:	e002      	b.n	8011602 <dir_read+0x138>
					break;
 80115fc:	bf00      	nop
 80115fe:	e000      	b.n	8011602 <dir_read+0x138>
		if (res != FR_OK) break;
 8011600:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011602:	7dfb      	ldrb	r3, [r7, #23]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d002      	beq.n	801160e <dir_read+0x144>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2200      	movs	r2, #0
 801160c:	61da      	str	r2, [r3, #28]
	return res;
 801160e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011610:	4618      	mov	r0, r3
 8011612:	3718      	adds	r7, #24
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b086      	sub	sp, #24
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011626:	2100      	movs	r1, #0
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f7ff fb7d 	bl	8010d28 <dir_sdi>
 801162e:	4603      	mov	r3, r0
 8011630:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011632:	7dfb      	ldrb	r3, [r7, #23]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d001      	beq.n	801163c <dir_find+0x24>
 8011638:	7dfb      	ldrb	r3, [r7, #23]
 801163a:	e0a9      	b.n	8011790 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801163c:	23ff      	movs	r3, #255	; 0xff
 801163e:	753b      	strb	r3, [r7, #20]
 8011640:	7d3b      	ldrb	r3, [r7, #20]
 8011642:	757b      	strb	r3, [r7, #21]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f04f 32ff 	mov.w	r2, #4294967295
 801164a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	69db      	ldr	r3, [r3, #28]
 8011650:	4619      	mov	r1, r3
 8011652:	6938      	ldr	r0, [r7, #16]
 8011654:	f7fe ff86 	bl	8010564 <move_window>
 8011658:	4603      	mov	r3, r0
 801165a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801165c:	7dfb      	ldrb	r3, [r7, #23]
 801165e:	2b00      	cmp	r3, #0
 8011660:	f040 8090 	bne.w	8011784 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6a1b      	ldr	r3, [r3, #32]
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801166c:	7dbb      	ldrb	r3, [r7, #22]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d102      	bne.n	8011678 <dir_find+0x60>
 8011672:	2304      	movs	r3, #4
 8011674:	75fb      	strb	r3, [r7, #23]
 8011676:	e08a      	b.n	801178e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6a1b      	ldr	r3, [r3, #32]
 801167c:	330b      	adds	r3, #11
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011684:	73fb      	strb	r3, [r7, #15]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	7bfa      	ldrb	r2, [r7, #15]
 801168a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801168c:	7dbb      	ldrb	r3, [r7, #22]
 801168e:	2be5      	cmp	r3, #229	; 0xe5
 8011690:	d007      	beq.n	80116a2 <dir_find+0x8a>
 8011692:	7bfb      	ldrb	r3, [r7, #15]
 8011694:	f003 0308 	and.w	r3, r3, #8
 8011698:	2b00      	cmp	r3, #0
 801169a:	d009      	beq.n	80116b0 <dir_find+0x98>
 801169c:	7bfb      	ldrb	r3, [r7, #15]
 801169e:	2b0f      	cmp	r3, #15
 80116a0:	d006      	beq.n	80116b0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80116a2:	23ff      	movs	r3, #255	; 0xff
 80116a4:	757b      	strb	r3, [r7, #21]
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f04f 32ff 	mov.w	r2, #4294967295
 80116ac:	631a      	str	r2, [r3, #48]	; 0x30
 80116ae:	e05e      	b.n	801176e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80116b0:	7bfb      	ldrb	r3, [r7, #15]
 80116b2:	2b0f      	cmp	r3, #15
 80116b4:	d136      	bne.n	8011724 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80116bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d154      	bne.n	801176e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80116c4:	7dbb      	ldrb	r3, [r7, #22]
 80116c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00d      	beq.n	80116ea <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6a1b      	ldr	r3, [r3, #32]
 80116d2:	7b5b      	ldrb	r3, [r3, #13]
 80116d4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80116d6:	7dbb      	ldrb	r3, [r7, #22]
 80116d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116dc:	75bb      	strb	r3, [r7, #22]
 80116de:	7dbb      	ldrb	r3, [r7, #22]
 80116e0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	695a      	ldr	r2, [r3, #20]
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80116ea:	7dba      	ldrb	r2, [r7, #22]
 80116ec:	7d7b      	ldrb	r3, [r7, #21]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d115      	bne.n	801171e <dir_find+0x106>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6a1b      	ldr	r3, [r3, #32]
 80116f6:	330d      	adds	r3, #13
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	7d3a      	ldrb	r2, [r7, #20]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d10e      	bne.n	801171e <dir_find+0x106>
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	691a      	ldr	r2, [r3, #16]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6a1b      	ldr	r3, [r3, #32]
 8011708:	4619      	mov	r1, r3
 801170a:	4610      	mov	r0, r2
 801170c:	f7ff fcf2 	bl	80110f4 <cmp_lfn>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d003      	beq.n	801171e <dir_find+0x106>
 8011716:	7d7b      	ldrb	r3, [r7, #21]
 8011718:	3b01      	subs	r3, #1
 801171a:	b2db      	uxtb	r3, r3
 801171c:	e000      	b.n	8011720 <dir_find+0x108>
 801171e:	23ff      	movs	r3, #255	; 0xff
 8011720:	757b      	strb	r3, [r7, #21]
 8011722:	e024      	b.n	801176e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011724:	7d7b      	ldrb	r3, [r7, #21]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d109      	bne.n	801173e <dir_find+0x126>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6a1b      	ldr	r3, [r3, #32]
 801172e:	4618      	mov	r0, r3
 8011730:	f7ff feaa 	bl	8011488 <sum_sfn>
 8011734:	4603      	mov	r3, r0
 8011736:	461a      	mov	r2, r3
 8011738:	7d3b      	ldrb	r3, [r7, #20]
 801173a:	4293      	cmp	r3, r2
 801173c:	d024      	beq.n	8011788 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011744:	f003 0301 	and.w	r3, r3, #1
 8011748:	2b00      	cmp	r3, #0
 801174a:	d10a      	bne.n	8011762 <dir_find+0x14a>
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6a18      	ldr	r0, [r3, #32]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	3324      	adds	r3, #36	; 0x24
 8011754:	220b      	movs	r2, #11
 8011756:	4619      	mov	r1, r3
 8011758:	f7fe fd12 	bl	8010180 <mem_cmp>
 801175c:	4603      	mov	r3, r0
 801175e:	2b00      	cmp	r3, #0
 8011760:	d014      	beq.n	801178c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011762:	23ff      	movs	r3, #255	; 0xff
 8011764:	757b      	strb	r3, [r7, #21]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f04f 32ff 	mov.w	r2, #4294967295
 801176c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801176e:	2100      	movs	r1, #0
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f7ff fb62 	bl	8010e3a <dir_next>
 8011776:	4603      	mov	r3, r0
 8011778:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801177a:	7dfb      	ldrb	r3, [r7, #23]
 801177c:	2b00      	cmp	r3, #0
 801177e:	f43f af65 	beq.w	801164c <dir_find+0x34>
 8011782:	e004      	b.n	801178e <dir_find+0x176>
		if (res != FR_OK) break;
 8011784:	bf00      	nop
 8011786:	e002      	b.n	801178e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011788:	bf00      	nop
 801178a:	e000      	b.n	801178e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801178c:	bf00      	nop

	return res;
 801178e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011790:	4618      	mov	r0, r3
 8011792:	3718      	adds	r7, #24
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}

08011798 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b08c      	sub	sp, #48	; 0x30
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80117ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d001      	beq.n	80117b8 <dir_register+0x20>
 80117b4:	2306      	movs	r3, #6
 80117b6:	e0e0      	b.n	801197a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80117b8:	2300      	movs	r3, #0
 80117ba:	627b      	str	r3, [r7, #36]	; 0x24
 80117bc:	e002      	b.n	80117c4 <dir_register+0x2c>
 80117be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c0:	3301      	adds	r3, #1
 80117c2:	627b      	str	r3, [r7, #36]	; 0x24
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	691a      	ldr	r2, [r3, #16]
 80117c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ca:	005b      	lsls	r3, r3, #1
 80117cc:	4413      	add	r3, r2
 80117ce:	881b      	ldrh	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d1f4      	bne.n	80117be <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80117da:	f107 030c 	add.w	r3, r7, #12
 80117de:	220c      	movs	r2, #12
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7fe fc91 	bl	8010108 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80117e6:	7dfb      	ldrb	r3, [r7, #23]
 80117e8:	f003 0301 	and.w	r3, r3, #1
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d032      	beq.n	8011856 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2240      	movs	r2, #64	; 0x40
 80117f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80117f8:	2301      	movs	r3, #1
 80117fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80117fc:	e016      	b.n	801182c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	691a      	ldr	r2, [r3, #16]
 8011808:	f107 010c 	add.w	r1, r7, #12
 801180c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801180e:	f7ff fdad 	bl	801136c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7ff ff00 	bl	8011618 <dir_find>
 8011818:	4603      	mov	r3, r0
 801181a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801181e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011822:	2b00      	cmp	r3, #0
 8011824:	d106      	bne.n	8011834 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011828:	3301      	adds	r3, #1
 801182a:	62bb      	str	r3, [r7, #40]	; 0x28
 801182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182e:	2b63      	cmp	r3, #99	; 0x63
 8011830:	d9e5      	bls.n	80117fe <dir_register+0x66>
 8011832:	e000      	b.n	8011836 <dir_register+0x9e>
			if (res != FR_OK) break;
 8011834:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011838:	2b64      	cmp	r3, #100	; 0x64
 801183a:	d101      	bne.n	8011840 <dir_register+0xa8>
 801183c:	2307      	movs	r3, #7
 801183e:	e09c      	b.n	801197a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011844:	2b04      	cmp	r3, #4
 8011846:	d002      	beq.n	801184e <dir_register+0xb6>
 8011848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801184c:	e095      	b.n	801197a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801184e:	7dfa      	ldrb	r2, [r7, #23]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011856:	7dfb      	ldrb	r3, [r7, #23]
 8011858:	f003 0302 	and.w	r3, r3, #2
 801185c:	2b00      	cmp	r3, #0
 801185e:	d007      	beq.n	8011870 <dir_register+0xd8>
 8011860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011862:	330c      	adds	r3, #12
 8011864:	4a47      	ldr	r2, [pc, #284]	; (8011984 <dir_register+0x1ec>)
 8011866:	fba2 2303 	umull	r2, r3, r2, r3
 801186a:	089b      	lsrs	r3, r3, #2
 801186c:	3301      	adds	r3, #1
 801186e:	e000      	b.n	8011872 <dir_register+0xda>
 8011870:	2301      	movs	r3, #1
 8011872:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011874:	6a39      	ldr	r1, [r7, #32]
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7ff fbb5 	bl	8010fe6 <dir_alloc>
 801187c:	4603      	mov	r3, r0
 801187e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011886:	2b00      	cmp	r3, #0
 8011888:	d148      	bne.n	801191c <dir_register+0x184>
 801188a:	6a3b      	ldr	r3, [r7, #32]
 801188c:	3b01      	subs	r3, #1
 801188e:	623b      	str	r3, [r7, #32]
 8011890:	6a3b      	ldr	r3, [r7, #32]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d042      	beq.n	801191c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	695a      	ldr	r2, [r3, #20]
 801189a:	6a3b      	ldr	r3, [r7, #32]
 801189c:	015b      	lsls	r3, r3, #5
 801189e:	1ad3      	subs	r3, r2, r3
 80118a0:	4619      	mov	r1, r3
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f7ff fa40 	bl	8010d28 <dir_sdi>
 80118a8:	4603      	mov	r3, r0
 80118aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80118ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d132      	bne.n	801191c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	3324      	adds	r3, #36	; 0x24
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7ff fde4 	bl	8011488 <sum_sfn>
 80118c0:	4603      	mov	r3, r0
 80118c2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	69db      	ldr	r3, [r3, #28]
 80118c8:	4619      	mov	r1, r3
 80118ca:	69f8      	ldr	r0, [r7, #28]
 80118cc:	f7fe fe4a 	bl	8010564 <move_window>
 80118d0:	4603      	mov	r3, r0
 80118d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80118d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d11d      	bne.n	801191a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80118de:	69fb      	ldr	r3, [r7, #28]
 80118e0:	6918      	ldr	r0, [r3, #16]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6a19      	ldr	r1, [r3, #32]
 80118e6:	6a3b      	ldr	r3, [r7, #32]
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	7efb      	ldrb	r3, [r7, #27]
 80118ec:	f7ff fcd6 	bl	801129c <put_lfn>
				fs->wflag = 1;
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	2201      	movs	r2, #1
 80118f4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80118f6:	2100      	movs	r1, #0
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f7ff fa9e 	bl	8010e3a <dir_next>
 80118fe:	4603      	mov	r3, r0
 8011900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8011904:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011908:	2b00      	cmp	r3, #0
 801190a:	d107      	bne.n	801191c <dir_register+0x184>
 801190c:	6a3b      	ldr	r3, [r7, #32]
 801190e:	3b01      	subs	r3, #1
 8011910:	623b      	str	r3, [r7, #32]
 8011912:	6a3b      	ldr	r3, [r7, #32]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1d5      	bne.n	80118c4 <dir_register+0x12c>
 8011918:	e000      	b.n	801191c <dir_register+0x184>
				if (res != FR_OK) break;
 801191a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801191c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011920:	2b00      	cmp	r3, #0
 8011922:	d128      	bne.n	8011976 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	69db      	ldr	r3, [r3, #28]
 8011928:	4619      	mov	r1, r3
 801192a:	69f8      	ldr	r0, [r7, #28]
 801192c:	f7fe fe1a 	bl	8010564 <move_window>
 8011930:	4603      	mov	r3, r0
 8011932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8011936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801193a:	2b00      	cmp	r3, #0
 801193c:	d11b      	bne.n	8011976 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6a1b      	ldr	r3, [r3, #32]
 8011942:	2220      	movs	r2, #32
 8011944:	2100      	movs	r1, #0
 8011946:	4618      	mov	r0, r3
 8011948:	f7fe fbff 	bl	801014a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	6a18      	ldr	r0, [r3, #32]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	3324      	adds	r3, #36	; 0x24
 8011954:	220b      	movs	r2, #11
 8011956:	4619      	mov	r1, r3
 8011958:	f7fe fbd6 	bl	8010108 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6a1b      	ldr	r3, [r3, #32]
 8011966:	330c      	adds	r3, #12
 8011968:	f002 0218 	and.w	r2, r2, #24
 801196c:	b2d2      	uxtb	r2, r2
 801196e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	2201      	movs	r2, #1
 8011974:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801197a:	4618      	mov	r0, r3
 801197c:	3730      	adds	r7, #48	; 0x30
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	4ec4ec4f 	.word	0x4ec4ec4f

08011988 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b088      	sub	sp, #32
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	2200      	movs	r2, #0
 801199c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	69db      	ldr	r3, [r3, #28]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	f000 80c9 	beq.w	8011b3a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119b0:	d032      	beq.n	8011a18 <get_fileinfo+0x90>
			i = j = 0;
 80119b2:	2300      	movs	r3, #0
 80119b4:	61bb      	str	r3, [r7, #24]
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80119ba:	e01b      	b.n	80119f4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80119bc:	89fb      	ldrh	r3, [r7, #14]
 80119be:	2100      	movs	r1, #0
 80119c0:	4618      	mov	r0, r3
 80119c2:	f001 ff29 	bl	8013818 <ff_convert>
 80119c6:	4603      	mov	r3, r0
 80119c8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80119ca:	89fb      	ldrh	r3, [r7, #14]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d102      	bne.n	80119d6 <get_fileinfo+0x4e>
 80119d0:	2300      	movs	r3, #0
 80119d2:	61fb      	str	r3, [r7, #28]
 80119d4:	e01a      	b.n	8011a0c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80119d6:	69fb      	ldr	r3, [r7, #28]
 80119d8:	2bfe      	cmp	r3, #254	; 0xfe
 80119da:	d902      	bls.n	80119e2 <get_fileinfo+0x5a>
 80119dc:	2300      	movs	r3, #0
 80119de:	61fb      	str	r3, [r7, #28]
 80119e0:	e014      	b.n	8011a0c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80119e2:	69fb      	ldr	r3, [r7, #28]
 80119e4:	1c5a      	adds	r2, r3, #1
 80119e6:	61fa      	str	r2, [r7, #28]
 80119e8:	89fa      	ldrh	r2, [r7, #14]
 80119ea:	b2d1      	uxtb	r1, r2
 80119ec:	683a      	ldr	r2, [r7, #0]
 80119ee:	4413      	add	r3, r2
 80119f0:	460a      	mov	r2, r1
 80119f2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	691a      	ldr	r2, [r3, #16]
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	1c59      	adds	r1, r3, #1
 80119fc:	61b9      	str	r1, [r7, #24]
 80119fe:	005b      	lsls	r3, r3, #1
 8011a00:	4413      	add	r3, r2
 8011a02:	881b      	ldrh	r3, [r3, #0]
 8011a04:	81fb      	strh	r3, [r7, #14]
 8011a06:	89fb      	ldrh	r3, [r7, #14]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d1d7      	bne.n	80119bc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8011a0c:	683a      	ldr	r2, [r7, #0]
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	4413      	add	r3, r2
 8011a12:	3316      	adds	r3, #22
 8011a14:	2200      	movs	r2, #0
 8011a16:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	61bb      	str	r3, [r7, #24]
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8011a20:	683a      	ldr	r2, [r7, #0]
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	4413      	add	r3, r2
 8011a26:	3316      	adds	r3, #22
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8011a2c:	e04c      	b.n	8011ac8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6a1a      	ldr	r2, [r3, #32]
 8011a32:	69fb      	ldr	r3, [r7, #28]
 8011a34:	1c59      	adds	r1, r3, #1
 8011a36:	61f9      	str	r1, [r7, #28]
 8011a38:	4413      	add	r3, r2
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8011a3e:	7dfb      	ldrb	r3, [r7, #23]
 8011a40:	2b20      	cmp	r3, #32
 8011a42:	d100      	bne.n	8011a46 <get_fileinfo+0xbe>
 8011a44:	e040      	b.n	8011ac8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011a46:	7dfb      	ldrb	r3, [r7, #23]
 8011a48:	2b05      	cmp	r3, #5
 8011a4a:	d101      	bne.n	8011a50 <get_fileinfo+0xc8>
 8011a4c:	23e5      	movs	r3, #229	; 0xe5
 8011a4e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	2b09      	cmp	r3, #9
 8011a54:	d10f      	bne.n	8011a76 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8011a56:	89bb      	ldrh	r3, [r7, #12]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d105      	bne.n	8011a68 <get_fileinfo+0xe0>
 8011a5c:	683a      	ldr	r2, [r7, #0]
 8011a5e:	69bb      	ldr	r3, [r7, #24]
 8011a60:	4413      	add	r3, r2
 8011a62:	3316      	adds	r3, #22
 8011a64:	222e      	movs	r2, #46	; 0x2e
 8011a66:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	1c5a      	adds	r2, r3, #1
 8011a6c:	61ba      	str	r2, [r7, #24]
 8011a6e:	683a      	ldr	r2, [r7, #0]
 8011a70:	4413      	add	r3, r2
 8011a72:	222e      	movs	r2, #46	; 0x2e
 8011a74:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8011a76:	683a      	ldr	r2, [r7, #0]
 8011a78:	69bb      	ldr	r3, [r7, #24]
 8011a7a:	4413      	add	r3, r2
 8011a7c:	3309      	adds	r3, #9
 8011a7e:	7dfa      	ldrb	r2, [r7, #23]
 8011a80:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8011a82:	89bb      	ldrh	r3, [r7, #12]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d11c      	bne.n	8011ac2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8011a88:	7dfb      	ldrb	r3, [r7, #23]
 8011a8a:	2b40      	cmp	r3, #64	; 0x40
 8011a8c:	d913      	bls.n	8011ab6 <get_fileinfo+0x12e>
 8011a8e:	7dfb      	ldrb	r3, [r7, #23]
 8011a90:	2b5a      	cmp	r3, #90	; 0x5a
 8011a92:	d810      	bhi.n	8011ab6 <get_fileinfo+0x12e>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6a1b      	ldr	r3, [r3, #32]
 8011a98:	330c      	adds	r3, #12
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	2b08      	cmp	r3, #8
 8011aa2:	d901      	bls.n	8011aa8 <get_fileinfo+0x120>
 8011aa4:	2310      	movs	r3, #16
 8011aa6:	e000      	b.n	8011aaa <get_fileinfo+0x122>
 8011aa8:	2308      	movs	r3, #8
 8011aaa:	4013      	ands	r3, r2
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d002      	beq.n	8011ab6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8011ab0:	7dfb      	ldrb	r3, [r7, #23]
 8011ab2:	3320      	adds	r3, #32
 8011ab4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8011ab6:	683a      	ldr	r2, [r7, #0]
 8011ab8:	69bb      	ldr	r3, [r7, #24]
 8011aba:	4413      	add	r3, r2
 8011abc:	3316      	adds	r3, #22
 8011abe:	7dfa      	ldrb	r2, [r7, #23]
 8011ac0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8011ac8:	69fb      	ldr	r3, [r7, #28]
 8011aca:	2b0a      	cmp	r3, #10
 8011acc:	d9af      	bls.n	8011a2e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8011ace:	89bb      	ldrh	r3, [r7, #12]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d10d      	bne.n	8011af0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8011ad4:	683a      	ldr	r2, [r7, #0]
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	4413      	add	r3, r2
 8011ada:	3316      	adds	r3, #22
 8011adc:	2200      	movs	r2, #0
 8011ade:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6a1b      	ldr	r3, [r3, #32]
 8011ae4:	330c      	adds	r3, #12
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d101      	bne.n	8011af0 <get_fileinfo+0x168>
 8011aec:	2300      	movs	r3, #0
 8011aee:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8011af0:	683a      	ldr	r2, [r7, #0]
 8011af2:	69bb      	ldr	r3, [r7, #24]
 8011af4:	4413      	add	r3, r2
 8011af6:	3309      	adds	r3, #9
 8011af8:	2200      	movs	r2, #0
 8011afa:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6a1b      	ldr	r3, [r3, #32]
 8011b00:	7ada      	ldrb	r2, [r3, #11]
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6a1b      	ldr	r3, [r3, #32]
 8011b0a:	331c      	adds	r3, #28
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7fe fa91 	bl	8010034 <ld_dword>
 8011b12:	4602      	mov	r2, r0
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6a1b      	ldr	r3, [r3, #32]
 8011b1c:	3316      	adds	r3, #22
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7fe fa88 	bl	8010034 <ld_dword>
 8011b24:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	b29a      	uxth	r2, r3
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	80da      	strh	r2, [r3, #6]
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	0c1b      	lsrs	r3, r3, #16
 8011b32:	b29a      	uxth	r2, r3
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	809a      	strh	r2, [r3, #4]
 8011b38:	e000      	b.n	8011b3c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011b3a:	bf00      	nop
}
 8011b3c:	3720      	adds	r7, #32
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
	...

08011b44 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b08a      	sub	sp, #40	; 0x28
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	613b      	str	r3, [r7, #16]
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	691b      	ldr	r3, [r3, #16]
 8011b5a:	60fb      	str	r3, [r7, #12]
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	617b      	str	r3, [r7, #20]
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	1c5a      	adds	r2, r3, #1
 8011b68:	61ba      	str	r2, [r7, #24]
 8011b6a:	693a      	ldr	r2, [r7, #16]
 8011b6c:	4413      	add	r3, r2
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8011b72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b74:	2b1f      	cmp	r3, #31
 8011b76:	d940      	bls.n	8011bfa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8011b78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b7a:	2b2f      	cmp	r3, #47	; 0x2f
 8011b7c:	d006      	beq.n	8011b8c <create_name+0x48>
 8011b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b80:	2b5c      	cmp	r3, #92	; 0x5c
 8011b82:	d110      	bne.n	8011ba6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011b84:	e002      	b.n	8011b8c <create_name+0x48>
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	61bb      	str	r3, [r7, #24]
 8011b8c:	693a      	ldr	r2, [r7, #16]
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	4413      	add	r3, r2
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	2b2f      	cmp	r3, #47	; 0x2f
 8011b96:	d0f6      	beq.n	8011b86 <create_name+0x42>
 8011b98:	693a      	ldr	r2, [r7, #16]
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	4413      	add	r3, r2
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	2b5c      	cmp	r3, #92	; 0x5c
 8011ba2:	d0f0      	beq.n	8011b86 <create_name+0x42>
			break;
 8011ba4:	e02a      	b.n	8011bfc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	2bfe      	cmp	r3, #254	; 0xfe
 8011baa:	d901      	bls.n	8011bb0 <create_name+0x6c>
 8011bac:	2306      	movs	r3, #6
 8011bae:	e17d      	b.n	8011eac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8011bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8011bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bb8:	2101      	movs	r1, #1
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f001 fe2c 	bl	8013818 <ff_convert>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d101      	bne.n	8011bce <create_name+0x8a>
 8011bca:	2306      	movs	r3, #6
 8011bcc:	e16e      	b.n	8011eac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8011bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8011bd2:	d809      	bhi.n	8011be8 <create_name+0xa4>
 8011bd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	488d      	ldr	r0, [pc, #564]	; (8011e10 <create_name+0x2cc>)
 8011bda:	f7fe faf8 	bl	80101ce <chk_chr>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d001      	beq.n	8011be8 <create_name+0xa4>
 8011be4:	2306      	movs	r3, #6
 8011be6:	e161      	b.n	8011eac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	1c5a      	adds	r2, r3, #1
 8011bec:	617a      	str	r2, [r7, #20]
 8011bee:	005b      	lsls	r3, r3, #1
 8011bf0:	68fa      	ldr	r2, [r7, #12]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011bf6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8011bf8:	e7b4      	b.n	8011b64 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8011bfa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8011bfc:	693a      	ldr	r2, [r7, #16]
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	441a      	add	r2, r3
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c08:	2b1f      	cmp	r3, #31
 8011c0a:	d801      	bhi.n	8011c10 <create_name+0xcc>
 8011c0c:	2304      	movs	r3, #4
 8011c0e:	e000      	b.n	8011c12 <create_name+0xce>
 8011c10:	2300      	movs	r3, #0
 8011c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011c16:	e011      	b.n	8011c3c <create_name+0xf8>
		w = lfn[di - 1];
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011c1e:	3b01      	subs	r3, #1
 8011c20:	005b      	lsls	r3, r3, #1
 8011c22:	68fa      	ldr	r2, [r7, #12]
 8011c24:	4413      	add	r3, r2
 8011c26:	881b      	ldrh	r3, [r3, #0]
 8011c28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8011c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c2c:	2b20      	cmp	r3, #32
 8011c2e:	d002      	beq.n	8011c36 <create_name+0xf2>
 8011c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c32:	2b2e      	cmp	r3, #46	; 0x2e
 8011c34:	d106      	bne.n	8011c44 <create_name+0x100>
		di--;
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	3b01      	subs	r3, #1
 8011c3a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d1ea      	bne.n	8011c18 <create_name+0xd4>
 8011c42:	e000      	b.n	8011c46 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8011c44:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	005b      	lsls	r3, r3, #1
 8011c4a:	68fa      	ldr	r2, [r7, #12]
 8011c4c:	4413      	add	r3, r2
 8011c4e:	2200      	movs	r2, #0
 8011c50:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d101      	bne.n	8011c5c <create_name+0x118>
 8011c58:	2306      	movs	r3, #6
 8011c5a:	e127      	b.n	8011eac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	3324      	adds	r3, #36	; 0x24
 8011c60:	220b      	movs	r2, #11
 8011c62:	2120      	movs	r1, #32
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7fe fa70 	bl	801014a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	61bb      	str	r3, [r7, #24]
 8011c6e:	e002      	b.n	8011c76 <create_name+0x132>
 8011c70:	69bb      	ldr	r3, [r7, #24]
 8011c72:	3301      	adds	r3, #1
 8011c74:	61bb      	str	r3, [r7, #24]
 8011c76:	69bb      	ldr	r3, [r7, #24]
 8011c78:	005b      	lsls	r3, r3, #1
 8011c7a:	68fa      	ldr	r2, [r7, #12]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	881b      	ldrh	r3, [r3, #0]
 8011c80:	2b20      	cmp	r3, #32
 8011c82:	d0f5      	beq.n	8011c70 <create_name+0x12c>
 8011c84:	69bb      	ldr	r3, [r7, #24]
 8011c86:	005b      	lsls	r3, r3, #1
 8011c88:	68fa      	ldr	r2, [r7, #12]
 8011c8a:	4413      	add	r3, r2
 8011c8c:	881b      	ldrh	r3, [r3, #0]
 8011c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8011c90:	d0ee      	beq.n	8011c70 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8011c92:	69bb      	ldr	r3, [r7, #24]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d009      	beq.n	8011cac <create_name+0x168>
 8011c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c9c:	f043 0303 	orr.w	r3, r3, #3
 8011ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011ca4:	e002      	b.n	8011cac <create_name+0x168>
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	3b01      	subs	r3, #1
 8011caa:	617b      	str	r3, [r7, #20]
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d009      	beq.n	8011cc6 <create_name+0x182>
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011cb8:	3b01      	subs	r3, #1
 8011cba:	005b      	lsls	r3, r3, #1
 8011cbc:	68fa      	ldr	r2, [r7, #12]
 8011cbe:	4413      	add	r3, r2
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8011cc4:	d1ef      	bne.n	8011ca6 <create_name+0x162>

	i = b = 0; ni = 8;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011ccc:	2300      	movs	r3, #0
 8011cce:	623b      	str	r3, [r7, #32]
 8011cd0:	2308      	movs	r3, #8
 8011cd2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8011cd4:	69bb      	ldr	r3, [r7, #24]
 8011cd6:	1c5a      	adds	r2, r3, #1
 8011cd8:	61ba      	str	r2, [r7, #24]
 8011cda:	005b      	lsls	r3, r3, #1
 8011cdc:	68fa      	ldr	r2, [r7, #12]
 8011cde:	4413      	add	r3, r2
 8011ce0:	881b      	ldrh	r3, [r3, #0]
 8011ce2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8011ce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	f000 8090 	beq.w	8011e0c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8011cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011cee:	2b20      	cmp	r3, #32
 8011cf0:	d006      	beq.n	8011d00 <create_name+0x1bc>
 8011cf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8011cf6:	d10a      	bne.n	8011d0e <create_name+0x1ca>
 8011cf8:	69ba      	ldr	r2, [r7, #24]
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d006      	beq.n	8011d0e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8011d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d04:	f043 0303 	orr.w	r3, r3, #3
 8011d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011d0c:	e07d      	b.n	8011e0a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8011d0e:	6a3a      	ldr	r2, [r7, #32]
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d203      	bcs.n	8011d1e <create_name+0x1da>
 8011d16:	69ba      	ldr	r2, [r7, #24]
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d123      	bne.n	8011d66 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8011d1e:	69fb      	ldr	r3, [r7, #28]
 8011d20:	2b0b      	cmp	r3, #11
 8011d22:	d106      	bne.n	8011d32 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8011d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d28:	f043 0303 	orr.w	r3, r3, #3
 8011d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011d30:	e075      	b.n	8011e1e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8011d32:	69ba      	ldr	r2, [r7, #24]
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d005      	beq.n	8011d46 <create_name+0x202>
 8011d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d3e:	f043 0303 	orr.w	r3, r3, #3
 8011d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8011d46:	69ba      	ldr	r2, [r7, #24]
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d866      	bhi.n	8011e1c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	61bb      	str	r3, [r7, #24]
 8011d52:	2308      	movs	r3, #8
 8011d54:	623b      	str	r3, [r7, #32]
 8011d56:	230b      	movs	r3, #11
 8011d58:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8011d5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d5e:	009b      	lsls	r3, r3, #2
 8011d60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011d64:	e051      	b.n	8011e0a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8011d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d68:	2b7f      	cmp	r3, #127	; 0x7f
 8011d6a:	d914      	bls.n	8011d96 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8011d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d6e:	2100      	movs	r1, #0
 8011d70:	4618      	mov	r0, r3
 8011d72:	f001 fd51 	bl	8013818 <ff_convert>
 8011d76:	4603      	mov	r3, r0
 8011d78:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8011d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d004      	beq.n	8011d8a <create_name+0x246>
 8011d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d82:	3b80      	subs	r3, #128	; 0x80
 8011d84:	4a23      	ldr	r2, [pc, #140]	; (8011e14 <create_name+0x2d0>)
 8011d86:	5cd3      	ldrb	r3, [r2, r3]
 8011d88:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8011d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d8e:	f043 0302 	orr.w	r3, r3, #2
 8011d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8011d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d007      	beq.n	8011dac <create_name+0x268>
 8011d9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d9e:	4619      	mov	r1, r3
 8011da0:	481d      	ldr	r0, [pc, #116]	; (8011e18 <create_name+0x2d4>)
 8011da2:	f7fe fa14 	bl	80101ce <chk_chr>
 8011da6:	4603      	mov	r3, r0
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d008      	beq.n	8011dbe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8011dac:	235f      	movs	r3, #95	; 0x5f
 8011dae:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011db4:	f043 0303 	orr.w	r3, r3, #3
 8011db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011dbc:	e01b      	b.n	8011df6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8011dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dc0:	2b40      	cmp	r3, #64	; 0x40
 8011dc2:	d909      	bls.n	8011dd8 <create_name+0x294>
 8011dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dc6:	2b5a      	cmp	r3, #90	; 0x5a
 8011dc8:	d806      	bhi.n	8011dd8 <create_name+0x294>
					b |= 2;
 8011dca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011dce:	f043 0302 	orr.w	r3, r3, #2
 8011dd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011dd6:	e00e      	b.n	8011df6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dda:	2b60      	cmp	r3, #96	; 0x60
 8011ddc:	d90b      	bls.n	8011df6 <create_name+0x2b2>
 8011dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011de0:	2b7a      	cmp	r3, #122	; 0x7a
 8011de2:	d808      	bhi.n	8011df6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8011de4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011de8:	f043 0301 	orr.w	r3, r3, #1
 8011dec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011df2:	3b20      	subs	r3, #32
 8011df4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8011df6:	6a3b      	ldr	r3, [r7, #32]
 8011df8:	1c5a      	adds	r2, r3, #1
 8011dfa:	623a      	str	r2, [r7, #32]
 8011dfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011dfe:	b2d1      	uxtb	r1, r2
 8011e00:	687a      	ldr	r2, [r7, #4]
 8011e02:	4413      	add	r3, r2
 8011e04:	460a      	mov	r2, r1
 8011e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8011e0a:	e763      	b.n	8011cd4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8011e0c:	bf00      	nop
 8011e0e:	e006      	b.n	8011e1e <create_name+0x2da>
 8011e10:	0801ae58 	.word	0x0801ae58
 8011e14:	0804d990 	.word	0x0804d990
 8011e18:	0801ae64 	.word	0x0801ae64
			if (si > di) break;			/* No extension */
 8011e1c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011e24:	2be5      	cmp	r3, #229	; 0xe5
 8011e26:	d103      	bne.n	8011e30 <create_name+0x2ec>
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2205      	movs	r2, #5
 8011e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8011e30:	69fb      	ldr	r3, [r7, #28]
 8011e32:	2b08      	cmp	r3, #8
 8011e34:	d104      	bne.n	8011e40 <create_name+0x2fc>
 8011e36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e3a:	009b      	lsls	r3, r3, #2
 8011e3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011e40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e44:	f003 030c 	and.w	r3, r3, #12
 8011e48:	2b0c      	cmp	r3, #12
 8011e4a:	d005      	beq.n	8011e58 <create_name+0x314>
 8011e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e50:	f003 0303 	and.w	r3, r3, #3
 8011e54:	2b03      	cmp	r3, #3
 8011e56:	d105      	bne.n	8011e64 <create_name+0x320>
 8011e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e5c:	f043 0302 	orr.w	r3, r3, #2
 8011e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e68:	f003 0302 	and.w	r3, r3, #2
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d117      	bne.n	8011ea0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8011e70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e74:	f003 0303 	and.w	r3, r3, #3
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	d105      	bne.n	8011e88 <create_name+0x344>
 8011e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e80:	f043 0310 	orr.w	r3, r3, #16
 8011e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8011e88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e8c:	f003 030c 	and.w	r3, r3, #12
 8011e90:	2b04      	cmp	r3, #4
 8011e92:	d105      	bne.n	8011ea0 <create_name+0x35c>
 8011e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e98:	f043 0308 	orr.w	r3, r3, #8
 8011e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011ea6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8011eaa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3728      	adds	r7, #40	; 0x28
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b086      	sub	sp, #24
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011ec8:	e002      	b.n	8011ed0 <follow_path+0x1c>
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	603b      	str	r3, [r7, #0]
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8011ed6:	d0f8      	beq.n	8011eca <follow_path+0x16>
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	2b5c      	cmp	r3, #92	; 0x5c
 8011ede:	d0f4      	beq.n	8011eca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	2b1f      	cmp	r3, #31
 8011eec:	d80a      	bhi.n	8011f04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2280      	movs	r2, #128	; 0x80
 8011ef2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011ef6:	2100      	movs	r1, #0
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7fe ff15 	bl	8010d28 <dir_sdi>
 8011efe:	4603      	mov	r3, r0
 8011f00:	75fb      	strb	r3, [r7, #23]
 8011f02:	e048      	b.n	8011f96 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011f04:	463b      	mov	r3, r7
 8011f06:	4619      	mov	r1, r3
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f7ff fe1b 	bl	8011b44 <create_name>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011f12:	7dfb      	ldrb	r3, [r7, #23]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d139      	bne.n	8011f8c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f7ff fb7d 	bl	8011618 <dir_find>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011f28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011f2a:	7dfb      	ldrb	r3, [r7, #23]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d00a      	beq.n	8011f46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011f30:	7dfb      	ldrb	r3, [r7, #23]
 8011f32:	2b04      	cmp	r3, #4
 8011f34:	d12c      	bne.n	8011f90 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011f36:	7afb      	ldrb	r3, [r7, #11]
 8011f38:	f003 0304 	and.w	r3, r3, #4
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d127      	bne.n	8011f90 <follow_path+0xdc>
 8011f40:	2305      	movs	r3, #5
 8011f42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011f44:	e024      	b.n	8011f90 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011f46:	7afb      	ldrb	r3, [r7, #11]
 8011f48:	f003 0304 	and.w	r3, r3, #4
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d121      	bne.n	8011f94 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	799b      	ldrb	r3, [r3, #6]
 8011f54:	f003 0310 	and.w	r3, r3, #16
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d102      	bne.n	8011f62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011f5c:	2305      	movs	r3, #5
 8011f5e:	75fb      	strb	r3, [r7, #23]
 8011f60:	e019      	b.n	8011f96 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	695b      	ldr	r3, [r3, #20]
 8011f6c:	68fa      	ldr	r2, [r7, #12]
 8011f6e:	8992      	ldrh	r2, [r2, #12]
 8011f70:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f74:	fb00 f202 	mul.w	r2, r0, r2
 8011f78:	1a9b      	subs	r3, r3, r2
 8011f7a:	440b      	add	r3, r1
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	68f8      	ldr	r0, [r7, #12]
 8011f80:	f7ff f878 	bl	8011074 <ld_clust>
 8011f84:	4602      	mov	r2, r0
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011f8a:	e7bb      	b.n	8011f04 <follow_path+0x50>
			if (res != FR_OK) break;
 8011f8c:	bf00      	nop
 8011f8e:	e002      	b.n	8011f96 <follow_path+0xe2>
				break;
 8011f90:	bf00      	nop
 8011f92:	e000      	b.n	8011f96 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011f94:	bf00      	nop
			}
		}
	}

	return res;
 8011f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3718      	adds	r7, #24
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b087      	sub	sp, #28
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8011fac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d031      	beq.n	801201a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	617b      	str	r3, [r7, #20]
 8011fbc:	e002      	b.n	8011fc4 <get_ldnumber+0x24>
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	617b      	str	r3, [r7, #20]
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	2b1f      	cmp	r3, #31
 8011fca:	d903      	bls.n	8011fd4 <get_ldnumber+0x34>
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	781b      	ldrb	r3, [r3, #0]
 8011fd0:	2b3a      	cmp	r3, #58	; 0x3a
 8011fd2:	d1f4      	bne.n	8011fbe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	2b3a      	cmp	r3, #58	; 0x3a
 8011fda:	d11c      	bne.n	8012016 <get_ldnumber+0x76>
			tp = *path;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	1c5a      	adds	r2, r3, #1
 8011fe6:	60fa      	str	r2, [r7, #12]
 8011fe8:	781b      	ldrb	r3, [r3, #0]
 8011fea:	3b30      	subs	r3, #48	; 0x30
 8011fec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	2b09      	cmp	r3, #9
 8011ff2:	d80e      	bhi.n	8012012 <get_ldnumber+0x72>
 8011ff4:	68fa      	ldr	r2, [r7, #12]
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d10a      	bne.n	8012012 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d107      	bne.n	8012012 <get_ldnumber+0x72>
					vol = (int)i;
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	3301      	adds	r3, #1
 801200a:	617b      	str	r3, [r7, #20]
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	697a      	ldr	r2, [r7, #20]
 8012010:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	e002      	b.n	801201c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012016:	2300      	movs	r3, #0
 8012018:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801201a:	693b      	ldr	r3, [r7, #16]
}
 801201c:	4618      	mov	r0, r3
 801201e:	371c      	adds	r7, #28
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr

08012028 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b082      	sub	sp, #8
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	70da      	strb	r2, [r3, #3]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f04f 32ff 	mov.w	r2, #4294967295
 801203e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012040:	6839      	ldr	r1, [r7, #0]
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f7fe fa8e 	bl	8010564 <move_window>
 8012048:	4603      	mov	r3, r0
 801204a:	2b00      	cmp	r3, #0
 801204c:	d001      	beq.n	8012052 <check_fs+0x2a>
 801204e:	2304      	movs	r3, #4
 8012050:	e038      	b.n	80120c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	3338      	adds	r3, #56	; 0x38
 8012056:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801205a:	4618      	mov	r0, r3
 801205c:	f7fd ffd2 	bl	8010004 <ld_word>
 8012060:	4603      	mov	r3, r0
 8012062:	461a      	mov	r2, r3
 8012064:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012068:	429a      	cmp	r2, r3
 801206a:	d001      	beq.n	8012070 <check_fs+0x48>
 801206c:	2303      	movs	r3, #3
 801206e:	e029      	b.n	80120c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012076:	2be9      	cmp	r3, #233	; 0xe9
 8012078:	d009      	beq.n	801208e <check_fs+0x66>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012080:	2beb      	cmp	r3, #235	; 0xeb
 8012082:	d11e      	bne.n	80120c2 <check_fs+0x9a>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801208a:	2b90      	cmp	r3, #144	; 0x90
 801208c:	d119      	bne.n	80120c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	3338      	adds	r3, #56	; 0x38
 8012092:	3336      	adds	r3, #54	; 0x36
 8012094:	4618      	mov	r0, r3
 8012096:	f7fd ffcd 	bl	8010034 <ld_dword>
 801209a:	4603      	mov	r3, r0
 801209c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80120a0:	4a0a      	ldr	r2, [pc, #40]	; (80120cc <check_fs+0xa4>)
 80120a2:	4293      	cmp	r3, r2
 80120a4:	d101      	bne.n	80120aa <check_fs+0x82>
 80120a6:	2300      	movs	r3, #0
 80120a8:	e00c      	b.n	80120c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	3338      	adds	r3, #56	; 0x38
 80120ae:	3352      	adds	r3, #82	; 0x52
 80120b0:	4618      	mov	r0, r3
 80120b2:	f7fd ffbf 	bl	8010034 <ld_dword>
 80120b6:	4603      	mov	r3, r0
 80120b8:	4a05      	ldr	r2, [pc, #20]	; (80120d0 <check_fs+0xa8>)
 80120ba:	4293      	cmp	r3, r2
 80120bc:	d101      	bne.n	80120c2 <check_fs+0x9a>
 80120be:	2300      	movs	r3, #0
 80120c0:	e000      	b.n	80120c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80120c2:	2302      	movs	r3, #2
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3708      	adds	r7, #8
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}
 80120cc:	00544146 	.word	0x00544146
 80120d0:	33544146 	.word	0x33544146

080120d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b096      	sub	sp, #88	; 0x58
 80120d8:	af00      	add	r7, sp, #0
 80120da:	60f8      	str	r0, [r7, #12]
 80120dc:	60b9      	str	r1, [r7, #8]
 80120de:	4613      	mov	r3, r2
 80120e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	2200      	movs	r2, #0
 80120e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80120e8:	68f8      	ldr	r0, [r7, #12]
 80120ea:	f7ff ff59 	bl	8011fa0 <get_ldnumber>
 80120ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80120f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	da01      	bge.n	80120fa <find_volume+0x26>
 80120f6:	230b      	movs	r3, #11
 80120f8:	e262      	b.n	80125c0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80120fa:	4a9f      	ldr	r2, [pc, #636]	; (8012378 <find_volume+0x2a4>)
 80120fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012102:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012106:	2b00      	cmp	r3, #0
 8012108:	d101      	bne.n	801210e <find_volume+0x3a>
 801210a:	230c      	movs	r3, #12
 801210c:	e258      	b.n	80125c0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012112:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012114:	79fb      	ldrb	r3, [r7, #7]
 8012116:	f023 0301 	bic.w	r3, r3, #1
 801211a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d01a      	beq.n	801215a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012126:	785b      	ldrb	r3, [r3, #1]
 8012128:	4618      	mov	r0, r3
 801212a:	f7fd fecd 	bl	800fec8 <disk_status>
 801212e:	4603      	mov	r3, r0
 8012130:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012134:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012138:	f003 0301 	and.w	r3, r3, #1
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10c      	bne.n	801215a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012140:	79fb      	ldrb	r3, [r7, #7]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d007      	beq.n	8012156 <find_volume+0x82>
 8012146:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801214a:	f003 0304 	and.w	r3, r3, #4
 801214e:	2b00      	cmp	r3, #0
 8012150:	d001      	beq.n	8012156 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012152:	230a      	movs	r3, #10
 8012154:	e234      	b.n	80125c0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8012156:	2300      	movs	r3, #0
 8012158:	e232      	b.n	80125c0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215c:	2200      	movs	r2, #0
 801215e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012162:	b2da      	uxtb	r2, r3
 8012164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012166:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801216a:	785b      	ldrb	r3, [r3, #1]
 801216c:	4618      	mov	r0, r3
 801216e:	f7fd fec5 	bl	800fefc <disk_initialize>
 8012172:	4603      	mov	r3, r0
 8012174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801217c:	f003 0301 	and.w	r3, r3, #1
 8012180:	2b00      	cmp	r3, #0
 8012182:	d001      	beq.n	8012188 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012184:	2303      	movs	r3, #3
 8012186:	e21b      	b.n	80125c0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012188:	79fb      	ldrb	r3, [r7, #7]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d007      	beq.n	801219e <find_volume+0xca>
 801218e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012192:	f003 0304 	and.w	r3, r3, #4
 8012196:	2b00      	cmp	r3, #0
 8012198:	d001      	beq.n	801219e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801219a:	230a      	movs	r3, #10
 801219c:	e210      	b.n	80125c0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a0:	7858      	ldrb	r0, [r3, #1]
 80121a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a4:	330c      	adds	r3, #12
 80121a6:	461a      	mov	r2, r3
 80121a8:	2102      	movs	r1, #2
 80121aa:	f7fd ff0d 	bl	800ffc8 <disk_ioctl>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d001      	beq.n	80121b8 <find_volume+0xe4>
 80121b4:	2301      	movs	r3, #1
 80121b6:	e203      	b.n	80125c0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80121b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ba:	899b      	ldrh	r3, [r3, #12]
 80121bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121c0:	d80d      	bhi.n	80121de <find_volume+0x10a>
 80121c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c4:	899b      	ldrh	r3, [r3, #12]
 80121c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80121ca:	d308      	bcc.n	80121de <find_volume+0x10a>
 80121cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ce:	899b      	ldrh	r3, [r3, #12]
 80121d0:	461a      	mov	r2, r3
 80121d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121d4:	899b      	ldrh	r3, [r3, #12]
 80121d6:	3b01      	subs	r3, #1
 80121d8:	4013      	ands	r3, r2
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d001      	beq.n	80121e2 <find_volume+0x10e>
 80121de:	2301      	movs	r3, #1
 80121e0:	e1ee      	b.n	80125c0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80121e2:	2300      	movs	r3, #0
 80121e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80121e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80121e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80121ea:	f7ff ff1d 	bl	8012028 <check_fs>
 80121ee:	4603      	mov	r3, r0
 80121f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80121f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121f8:	2b02      	cmp	r3, #2
 80121fa:	d149      	bne.n	8012290 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80121fc:	2300      	movs	r3, #0
 80121fe:	643b      	str	r3, [r7, #64]	; 0x40
 8012200:	e01e      	b.n	8012240 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012204:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801220a:	011b      	lsls	r3, r3, #4
 801220c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012210:	4413      	add	r3, r2
 8012212:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012216:	3304      	adds	r3, #4
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d006      	beq.n	801222c <find_volume+0x158>
 801221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012220:	3308      	adds	r3, #8
 8012222:	4618      	mov	r0, r3
 8012224:	f7fd ff06 	bl	8010034 <ld_dword>
 8012228:	4602      	mov	r2, r0
 801222a:	e000      	b.n	801222e <find_volume+0x15a>
 801222c:	2200      	movs	r2, #0
 801222e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	3358      	adds	r3, #88	; 0x58
 8012234:	443b      	add	r3, r7
 8012236:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801223a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801223c:	3301      	adds	r3, #1
 801223e:	643b      	str	r3, [r7, #64]	; 0x40
 8012240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012242:	2b03      	cmp	r3, #3
 8012244:	d9dd      	bls.n	8012202 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012246:	2300      	movs	r3, #0
 8012248:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801224a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801224c:	2b00      	cmp	r3, #0
 801224e:	d002      	beq.n	8012256 <find_volume+0x182>
 8012250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012252:	3b01      	subs	r3, #1
 8012254:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012258:	009b      	lsls	r3, r3, #2
 801225a:	3358      	adds	r3, #88	; 0x58
 801225c:	443b      	add	r3, r7
 801225e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012262:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012266:	2b00      	cmp	r3, #0
 8012268:	d005      	beq.n	8012276 <find_volume+0x1a2>
 801226a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801226c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801226e:	f7ff fedb 	bl	8012028 <check_fs>
 8012272:	4603      	mov	r3, r0
 8012274:	e000      	b.n	8012278 <find_volume+0x1a4>
 8012276:	2303      	movs	r3, #3
 8012278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801227c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012280:	2b01      	cmp	r3, #1
 8012282:	d905      	bls.n	8012290 <find_volume+0x1bc>
 8012284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012286:	3301      	adds	r3, #1
 8012288:	643b      	str	r3, [r7, #64]	; 0x40
 801228a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801228c:	2b03      	cmp	r3, #3
 801228e:	d9e2      	bls.n	8012256 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012294:	2b04      	cmp	r3, #4
 8012296:	d101      	bne.n	801229c <find_volume+0x1c8>
 8012298:	2301      	movs	r3, #1
 801229a:	e191      	b.n	80125c0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801229c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122a0:	2b01      	cmp	r3, #1
 80122a2:	d901      	bls.n	80122a8 <find_volume+0x1d4>
 80122a4:	230d      	movs	r3, #13
 80122a6:	e18b      	b.n	80125c0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80122a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122aa:	3338      	adds	r3, #56	; 0x38
 80122ac:	330b      	adds	r3, #11
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7fd fea8 	bl	8010004 <ld_word>
 80122b4:	4603      	mov	r3, r0
 80122b6:	461a      	mov	r2, r3
 80122b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ba:	899b      	ldrh	r3, [r3, #12]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d001      	beq.n	80122c4 <find_volume+0x1f0>
 80122c0:	230d      	movs	r3, #13
 80122c2:	e17d      	b.n	80125c0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80122c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c6:	3338      	adds	r3, #56	; 0x38
 80122c8:	3316      	adds	r3, #22
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7fd fe9a 	bl	8010004 <ld_word>
 80122d0:	4603      	mov	r3, r0
 80122d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80122d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d106      	bne.n	80122e8 <find_volume+0x214>
 80122da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122dc:	3338      	adds	r3, #56	; 0x38
 80122de:	3324      	adds	r3, #36	; 0x24
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7fd fea7 	bl	8010034 <ld_dword>
 80122e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80122e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80122ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80122ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80122f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80122f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fa:	789b      	ldrb	r3, [r3, #2]
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	d005      	beq.n	801230c <find_volume+0x238>
 8012300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012302:	789b      	ldrb	r3, [r3, #2]
 8012304:	2b02      	cmp	r3, #2
 8012306:	d001      	beq.n	801230c <find_volume+0x238>
 8012308:	230d      	movs	r3, #13
 801230a:	e159      	b.n	80125c0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230e:	789b      	ldrb	r3, [r3, #2]
 8012310:	461a      	mov	r2, r3
 8012312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012314:	fb02 f303 	mul.w	r3, r2, r3
 8012318:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801231c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012320:	b29a      	uxth	r2, r3
 8012322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012324:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012328:	895b      	ldrh	r3, [r3, #10]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d008      	beq.n	8012340 <find_volume+0x26c>
 801232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012330:	895b      	ldrh	r3, [r3, #10]
 8012332:	461a      	mov	r2, r3
 8012334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012336:	895b      	ldrh	r3, [r3, #10]
 8012338:	3b01      	subs	r3, #1
 801233a:	4013      	ands	r3, r2
 801233c:	2b00      	cmp	r3, #0
 801233e:	d001      	beq.n	8012344 <find_volume+0x270>
 8012340:	230d      	movs	r3, #13
 8012342:	e13d      	b.n	80125c0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012346:	3338      	adds	r3, #56	; 0x38
 8012348:	3311      	adds	r3, #17
 801234a:	4618      	mov	r0, r3
 801234c:	f7fd fe5a 	bl	8010004 <ld_word>
 8012350:	4603      	mov	r3, r0
 8012352:	461a      	mov	r2, r3
 8012354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012356:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801235a:	891b      	ldrh	r3, [r3, #8]
 801235c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801235e:	8992      	ldrh	r2, [r2, #12]
 8012360:	0952      	lsrs	r2, r2, #5
 8012362:	b292      	uxth	r2, r2
 8012364:	fbb3 f1f2 	udiv	r1, r3, r2
 8012368:	fb01 f202 	mul.w	r2, r1, r2
 801236c:	1a9b      	subs	r3, r3, r2
 801236e:	b29b      	uxth	r3, r3
 8012370:	2b00      	cmp	r3, #0
 8012372:	d003      	beq.n	801237c <find_volume+0x2a8>
 8012374:	230d      	movs	r3, #13
 8012376:	e123      	b.n	80125c0 <find_volume+0x4ec>
 8012378:	2001a870 	.word	0x2001a870

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801237e:	3338      	adds	r3, #56	; 0x38
 8012380:	3313      	adds	r3, #19
 8012382:	4618      	mov	r0, r3
 8012384:	f7fd fe3e 	bl	8010004 <ld_word>
 8012388:	4603      	mov	r3, r0
 801238a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801238c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801238e:	2b00      	cmp	r3, #0
 8012390:	d106      	bne.n	80123a0 <find_volume+0x2cc>
 8012392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012394:	3338      	adds	r3, #56	; 0x38
 8012396:	3320      	adds	r3, #32
 8012398:	4618      	mov	r0, r3
 801239a:	f7fd fe4b 	bl	8010034 <ld_dword>
 801239e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80123a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a2:	3338      	adds	r3, #56	; 0x38
 80123a4:	330e      	adds	r3, #14
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fd fe2c 	bl	8010004 <ld_word>
 80123ac:	4603      	mov	r3, r0
 80123ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80123b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d101      	bne.n	80123ba <find_volume+0x2e6>
 80123b6:	230d      	movs	r3, #13
 80123b8:	e102      	b.n	80125c0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80123ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80123bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123be:	4413      	add	r3, r2
 80123c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123c2:	8911      	ldrh	r1, [r2, #8]
 80123c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123c6:	8992      	ldrh	r2, [r2, #12]
 80123c8:	0952      	lsrs	r2, r2, #5
 80123ca:	b292      	uxth	r2, r2
 80123cc:	fbb1 f2f2 	udiv	r2, r1, r2
 80123d0:	b292      	uxth	r2, r2
 80123d2:	4413      	add	r3, r2
 80123d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80123d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80123d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123da:	429a      	cmp	r2, r3
 80123dc:	d201      	bcs.n	80123e2 <find_volume+0x30e>
 80123de:	230d      	movs	r3, #13
 80123e0:	e0ee      	b.n	80125c0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80123e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80123e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e6:	1ad3      	subs	r3, r2, r3
 80123e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123ea:	8952      	ldrh	r2, [r2, #10]
 80123ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80123f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80123f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d101      	bne.n	80123fc <find_volume+0x328>
 80123f8:	230d      	movs	r3, #13
 80123fa:	e0e1      	b.n	80125c0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80123fc:	2303      	movs	r3, #3
 80123fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012404:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012408:	4293      	cmp	r3, r2
 801240a:	d802      	bhi.n	8012412 <find_volume+0x33e>
 801240c:	2302      	movs	r3, #2
 801240e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012414:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012418:	4293      	cmp	r3, r2
 801241a:	d802      	bhi.n	8012422 <find_volume+0x34e>
 801241c:	2301      	movs	r3, #1
 801241e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012424:	1c9a      	adds	r2, r3, #2
 8012426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012428:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801242e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012430:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012434:	441a      	add	r2, r3
 8012436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012438:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801243a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243e:	441a      	add	r2, r3
 8012440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012442:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012444:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012448:	2b03      	cmp	r3, #3
 801244a:	d11e      	bne.n	801248a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801244e:	3338      	adds	r3, #56	; 0x38
 8012450:	332a      	adds	r3, #42	; 0x2a
 8012452:	4618      	mov	r0, r3
 8012454:	f7fd fdd6 	bl	8010004 <ld_word>
 8012458:	4603      	mov	r3, r0
 801245a:	2b00      	cmp	r3, #0
 801245c:	d001      	beq.n	8012462 <find_volume+0x38e>
 801245e:	230d      	movs	r3, #13
 8012460:	e0ae      	b.n	80125c0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012464:	891b      	ldrh	r3, [r3, #8]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d001      	beq.n	801246e <find_volume+0x39a>
 801246a:	230d      	movs	r3, #13
 801246c:	e0a8      	b.n	80125c0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012470:	3338      	adds	r3, #56	; 0x38
 8012472:	332c      	adds	r3, #44	; 0x2c
 8012474:	4618      	mov	r0, r3
 8012476:	f7fd fddd 	bl	8010034 <ld_dword>
 801247a:	4602      	mov	r2, r0
 801247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012482:	69db      	ldr	r3, [r3, #28]
 8012484:	009b      	lsls	r3, r3, #2
 8012486:	647b      	str	r3, [r7, #68]	; 0x44
 8012488:	e01f      	b.n	80124ca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801248a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248c:	891b      	ldrh	r3, [r3, #8]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d101      	bne.n	8012496 <find_volume+0x3c2>
 8012492:	230d      	movs	r3, #13
 8012494:	e094      	b.n	80125c0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801249a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801249c:	441a      	add	r2, r3
 801249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80124a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124a6:	2b02      	cmp	r3, #2
 80124a8:	d103      	bne.n	80124b2 <find_volume+0x3de>
 80124aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ac:	69db      	ldr	r3, [r3, #28]
 80124ae:	005b      	lsls	r3, r3, #1
 80124b0:	e00a      	b.n	80124c8 <find_volume+0x3f4>
 80124b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b4:	69da      	ldr	r2, [r3, #28]
 80124b6:	4613      	mov	r3, r2
 80124b8:	005b      	lsls	r3, r3, #1
 80124ba:	4413      	add	r3, r2
 80124bc:	085a      	lsrs	r2, r3, #1
 80124be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c0:	69db      	ldr	r3, [r3, #28]
 80124c2:	f003 0301 	and.w	r3, r3, #1
 80124c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80124c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80124ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124cc:	6a1a      	ldr	r2, [r3, #32]
 80124ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d0:	899b      	ldrh	r3, [r3, #12]
 80124d2:	4619      	mov	r1, r3
 80124d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124d6:	440b      	add	r3, r1
 80124d8:	3b01      	subs	r3, #1
 80124da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80124dc:	8989      	ldrh	r1, [r1, #12]
 80124de:	fbb3 f3f1 	udiv	r3, r3, r1
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d201      	bcs.n	80124ea <find_volume+0x416>
 80124e6:	230d      	movs	r3, #13
 80124e8:	e06a      	b.n	80125c0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80124ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ec:	f04f 32ff 	mov.w	r2, #4294967295
 80124f0:	619a      	str	r2, [r3, #24]
 80124f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f4:	699a      	ldr	r2, [r3, #24]
 80124f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80124fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fc:	2280      	movs	r2, #128	; 0x80
 80124fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012504:	2b03      	cmp	r3, #3
 8012506:	d149      	bne.n	801259c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801250a:	3338      	adds	r3, #56	; 0x38
 801250c:	3330      	adds	r3, #48	; 0x30
 801250e:	4618      	mov	r0, r3
 8012510:	f7fd fd78 	bl	8010004 <ld_word>
 8012514:	4603      	mov	r3, r0
 8012516:	2b01      	cmp	r3, #1
 8012518:	d140      	bne.n	801259c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801251a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801251c:	3301      	adds	r3, #1
 801251e:	4619      	mov	r1, r3
 8012520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012522:	f7fe f81f 	bl	8010564 <move_window>
 8012526:	4603      	mov	r3, r0
 8012528:	2b00      	cmp	r3, #0
 801252a:	d137      	bne.n	801259c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252e:	2200      	movs	r2, #0
 8012530:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012534:	3338      	adds	r3, #56	; 0x38
 8012536:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801253a:	4618      	mov	r0, r3
 801253c:	f7fd fd62 	bl	8010004 <ld_word>
 8012540:	4603      	mov	r3, r0
 8012542:	461a      	mov	r2, r3
 8012544:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012548:	429a      	cmp	r2, r3
 801254a:	d127      	bne.n	801259c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254e:	3338      	adds	r3, #56	; 0x38
 8012550:	4618      	mov	r0, r3
 8012552:	f7fd fd6f 	bl	8010034 <ld_dword>
 8012556:	4603      	mov	r3, r0
 8012558:	4a1b      	ldr	r2, [pc, #108]	; (80125c8 <find_volume+0x4f4>)
 801255a:	4293      	cmp	r3, r2
 801255c:	d11e      	bne.n	801259c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801255e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012560:	3338      	adds	r3, #56	; 0x38
 8012562:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012566:	4618      	mov	r0, r3
 8012568:	f7fd fd64 	bl	8010034 <ld_dword>
 801256c:	4603      	mov	r3, r0
 801256e:	4a17      	ldr	r2, [pc, #92]	; (80125cc <find_volume+0x4f8>)
 8012570:	4293      	cmp	r3, r2
 8012572:	d113      	bne.n	801259c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012576:	3338      	adds	r3, #56	; 0x38
 8012578:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801257c:	4618      	mov	r0, r3
 801257e:	f7fd fd59 	bl	8010034 <ld_dword>
 8012582:	4602      	mov	r2, r0
 8012584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012586:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801258a:	3338      	adds	r3, #56	; 0x38
 801258c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012590:	4618      	mov	r0, r3
 8012592:	f7fd fd4f 	bl	8010034 <ld_dword>
 8012596:	4602      	mov	r2, r0
 8012598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801259a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801259c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801259e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80125a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80125a4:	4b0a      	ldr	r3, [pc, #40]	; (80125d0 <find_volume+0x4fc>)
 80125a6:	881b      	ldrh	r3, [r3, #0]
 80125a8:	3301      	adds	r3, #1
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	4b08      	ldr	r3, [pc, #32]	; (80125d0 <find_volume+0x4fc>)
 80125ae:	801a      	strh	r2, [r3, #0]
 80125b0:	4b07      	ldr	r3, [pc, #28]	; (80125d0 <find_volume+0x4fc>)
 80125b2:	881a      	ldrh	r2, [r3, #0]
 80125b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80125b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125ba:	f7fd ff6b 	bl	8010494 <clear_lock>
#endif
	return FR_OK;
 80125be:	2300      	movs	r3, #0
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3758      	adds	r7, #88	; 0x58
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	41615252 	.word	0x41615252
 80125cc:	61417272 	.word	0x61417272
 80125d0:	2001a874 	.word	0x2001a874

080125d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b084      	sub	sp, #16
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80125de:	2309      	movs	r3, #9
 80125e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d01c      	beq.n	8012622 <validate+0x4e>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d018      	beq.n	8012622 <validate+0x4e>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d013      	beq.n	8012622 <validate+0x4e>
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	889a      	ldrh	r2, [r3, #4]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	88db      	ldrh	r3, [r3, #6]
 8012604:	429a      	cmp	r2, r3
 8012606:	d10c      	bne.n	8012622 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	785b      	ldrb	r3, [r3, #1]
 801260e:	4618      	mov	r0, r3
 8012610:	f7fd fc5a 	bl	800fec8 <disk_status>
 8012614:	4603      	mov	r3, r0
 8012616:	f003 0301 	and.w	r3, r3, #1
 801261a:	2b00      	cmp	r3, #0
 801261c:	d101      	bne.n	8012622 <validate+0x4e>
			res = FR_OK;
 801261e:	2300      	movs	r3, #0
 8012620:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012622:	7bfb      	ldrb	r3, [r7, #15]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d102      	bne.n	801262e <validate+0x5a>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	e000      	b.n	8012630 <validate+0x5c>
 801262e:	2300      	movs	r3, #0
 8012630:	683a      	ldr	r2, [r7, #0]
 8012632:	6013      	str	r3, [r2, #0]
	return res;
 8012634:	7bfb      	ldrb	r3, [r7, #15]
}
 8012636:	4618      	mov	r0, r3
 8012638:	3710      	adds	r7, #16
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
	...

08012640 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b088      	sub	sp, #32
 8012644:	af00      	add	r7, sp, #0
 8012646:	60f8      	str	r0, [r7, #12]
 8012648:	60b9      	str	r1, [r7, #8]
 801264a:	4613      	mov	r3, r2
 801264c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012652:	f107 0310 	add.w	r3, r7, #16
 8012656:	4618      	mov	r0, r3
 8012658:	f7ff fca2 	bl	8011fa0 <get_ldnumber>
 801265c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	2b00      	cmp	r3, #0
 8012662:	da01      	bge.n	8012668 <f_mount+0x28>
 8012664:	230b      	movs	r3, #11
 8012666:	e02b      	b.n	80126c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012668:	4a17      	ldr	r2, [pc, #92]	; (80126c8 <f_mount+0x88>)
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012670:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d005      	beq.n	8012684 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012678:	69b8      	ldr	r0, [r7, #24]
 801267a:	f7fd ff0b 	bl	8010494 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801267e:	69bb      	ldr	r3, [r7, #24]
 8012680:	2200      	movs	r2, #0
 8012682:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d002      	beq.n	8012690 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2200      	movs	r2, #0
 801268e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	490d      	ldr	r1, [pc, #52]	; (80126c8 <f_mount+0x88>)
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d002      	beq.n	80126a6 <f_mount+0x66>
 80126a0:	79fb      	ldrb	r3, [r7, #7]
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	d001      	beq.n	80126aa <f_mount+0x6a>
 80126a6:	2300      	movs	r3, #0
 80126a8:	e00a      	b.n	80126c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80126aa:	f107 010c 	add.w	r1, r7, #12
 80126ae:	f107 0308 	add.w	r3, r7, #8
 80126b2:	2200      	movs	r2, #0
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7ff fd0d 	bl	80120d4 <find_volume>
 80126ba:	4603      	mov	r3, r0
 80126bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80126be:	7dfb      	ldrb	r3, [r7, #23]
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3720      	adds	r7, #32
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	2001a870 	.word	0x2001a870

080126cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80126d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80126dc:	6018      	str	r0, [r3, #0]
 80126de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80126e2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80126e6:	6019      	str	r1, [r3, #0]
 80126e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80126ec:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80126f0:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80126f2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80126f6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d101      	bne.n	8012704 <f_open+0x38>
 8012700:	2309      	movs	r3, #9
 8012702:	e2a6      	b.n	8012c52 <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012704:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012708:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801270c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8012710:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8012714:	7812      	ldrb	r2, [r2, #0]
 8012716:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801271a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 801271c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012720:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8012724:	781a      	ldrb	r2, [r3, #0]
 8012726:	f507 7105 	add.w	r1, r7, #532	; 0x214
 801272a:	f107 0308 	add.w	r3, r7, #8
 801272e:	4618      	mov	r0, r3
 8012730:	f7ff fcd0 	bl	80120d4 <find_volume>
 8012734:	4603      	mov	r3, r0
 8012736:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 801273a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801273e:	2b00      	cmp	r3, #0
 8012740:	f040 827a 	bne.w	8012c38 <f_open+0x56c>
		dj.obj.fs = fs;
 8012744:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012748:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 801274c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012750:	f107 0214 	add.w	r2, r7, #20
 8012754:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8012756:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801275a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801275e:	681a      	ldr	r2, [r3, #0]
 8012760:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012764:	4611      	mov	r1, r2
 8012766:	4618      	mov	r0, r3
 8012768:	f7ff fba4 	bl	8011eb4 <follow_path>
 801276c:	4603      	mov	r3, r0
 801276e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012772:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012776:	2b00      	cmp	r3, #0
 8012778:	d11e      	bne.n	80127b8 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801277a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 801277e:	b25b      	sxtb	r3, r3
 8012780:	2b00      	cmp	r3, #0
 8012782:	da03      	bge.n	801278c <f_open+0xc0>
				res = FR_INVALID_NAME;
 8012784:	2306      	movs	r3, #6
 8012786:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801278a:	e015      	b.n	80127b8 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801278c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012790:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	f023 0301 	bic.w	r3, r3, #1
 801279a:	2b00      	cmp	r3, #0
 801279c:	bf14      	ite	ne
 801279e:	2301      	movne	r3, #1
 80127a0:	2300      	moveq	r3, #0
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	461a      	mov	r2, r3
 80127a6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80127aa:	4611      	mov	r1, r2
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7fd fd29 	bl	8010204 <chk_lock>
 80127b2:	4603      	mov	r3, r0
 80127b4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80127b8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80127bc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80127c0:	781b      	ldrb	r3, [r3, #0]
 80127c2:	f003 031c 	and.w	r3, r3, #28
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	f000 80a7 	beq.w	801291a <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 80127cc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d01f      	beq.n	8012814 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80127d4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80127d8:	2b04      	cmp	r3, #4
 80127da:	d10e      	bne.n	80127fa <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80127dc:	f7fd fd6e 	bl	80102bc <enq_lock>
 80127e0:	4603      	mov	r3, r0
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d006      	beq.n	80127f4 <f_open+0x128>
 80127e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fe ffd4 	bl	8011798 <dir_register>
 80127f0:	4603      	mov	r3, r0
 80127f2:	e000      	b.n	80127f6 <f_open+0x12a>
 80127f4:	2312      	movs	r3, #18
 80127f6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80127fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80127fe:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8012802:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8012806:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 801280a:	7812      	ldrb	r2, [r2, #0]
 801280c:	f042 0208 	orr.w	r2, r2, #8
 8012810:	701a      	strb	r2, [r3, #0]
 8012812:	e015      	b.n	8012840 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012814:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8012818:	f003 0311 	and.w	r3, r3, #17
 801281c:	2b00      	cmp	r3, #0
 801281e:	d003      	beq.n	8012828 <f_open+0x15c>
					res = FR_DENIED;
 8012820:	2307      	movs	r3, #7
 8012822:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8012826:	e00b      	b.n	8012840 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012828:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801282c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	f003 0304 	and.w	r3, r3, #4
 8012836:	2b00      	cmp	r3, #0
 8012838:	d002      	beq.n	8012840 <f_open+0x174>
 801283a:	2308      	movs	r3, #8
 801283c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012840:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012844:	2b00      	cmp	r3, #0
 8012846:	f040 8088 	bne.w	801295a <f_open+0x28e>
 801284a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801284e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	f003 0308 	and.w	r3, r3, #8
 8012858:	2b00      	cmp	r3, #0
 801285a:	d07e      	beq.n	801295a <f_open+0x28e>
				dw = GET_FATTIME();
 801285c:	f7fc ff90 	bl	800f780 <get_fattime>
 8012860:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012864:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012868:	330e      	adds	r3, #14
 801286a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801286e:	4618      	mov	r0, r3
 8012870:	f7fd fc1e 	bl	80100b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012874:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012878:	3316      	adds	r3, #22
 801287a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801287e:	4618      	mov	r0, r3
 8012880:	f7fd fc16 	bl	80100b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012884:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012888:	330b      	adds	r3, #11
 801288a:	2220      	movs	r2, #32
 801288c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801288e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012892:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8012896:	4611      	mov	r1, r2
 8012898:	4618      	mov	r0, r3
 801289a:	f7fe fbeb 	bl	8011074 <ld_clust>
 801289e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80128a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80128a6:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80128aa:	2200      	movs	r2, #0
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7fe fc00 	bl	80110b2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80128b2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80128b6:	331c      	adds	r3, #28
 80128b8:	2100      	movs	r1, #0
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7fd fbf8 	bl	80100b0 <st_dword>
					fs->wflag = 1;
 80128c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80128c4:	2201      	movs	r2, #1
 80128c6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80128c8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d044      	beq.n	801295a <f_open+0x28e>
						dw = fs->winsect;
 80128d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80128d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128d6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80128da:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80128de:	2200      	movs	r2, #0
 80128e0:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7fe f8ea 	bl	8010abe <remove_chain>
 80128ea:	4603      	mov	r3, r0
 80128ec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80128f0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d130      	bne.n	801295a <f_open+0x28e>
							res = move_window(fs, dw);
 80128f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80128fc:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8012900:	4618      	mov	r0, r3
 8012902:	f7fd fe2f 	bl	8010564 <move_window>
 8012906:	4603      	mov	r3, r0
 8012908:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801290c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012910:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8012914:	3a01      	subs	r2, #1
 8012916:	615a      	str	r2, [r3, #20]
 8012918:	e01f      	b.n	801295a <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801291a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801291e:	2b00      	cmp	r3, #0
 8012920:	d11b      	bne.n	801295a <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012922:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8012926:	f003 0310 	and.w	r3, r3, #16
 801292a:	2b00      	cmp	r3, #0
 801292c:	d003      	beq.n	8012936 <f_open+0x26a>
					res = FR_NO_FILE;
 801292e:	2304      	movs	r3, #4
 8012930:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8012934:	e011      	b.n	801295a <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012936:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801293a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	f003 0302 	and.w	r3, r3, #2
 8012944:	2b00      	cmp	r3, #0
 8012946:	d008      	beq.n	801295a <f_open+0x28e>
 8012948:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801294c:	f003 0301 	and.w	r3, r3, #1
 8012950:	2b00      	cmp	r3, #0
 8012952:	d002      	beq.n	801295a <f_open+0x28e>
						res = FR_DENIED;
 8012954:	2307      	movs	r3, #7
 8012956:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 801295a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801295e:	2b00      	cmp	r3, #0
 8012960:	d14a      	bne.n	80129f8 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012962:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012966:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	f003 0308 	and.w	r3, r3, #8
 8012970:	2b00      	cmp	r3, #0
 8012972:	d00b      	beq.n	801298c <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8012974:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012978:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801297c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8012980:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8012984:	7812      	ldrb	r2, [r2, #0]
 8012986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801298a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801298c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012992:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012996:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801299e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80129a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80129a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80129ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80129b2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	f023 0301 	bic.w	r3, r3, #1
 80129bc:	2b00      	cmp	r3, #0
 80129be:	bf14      	ite	ne
 80129c0:	2301      	movne	r3, #1
 80129c2:	2300      	moveq	r3, #0
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	461a      	mov	r2, r3
 80129c8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80129cc:	4611      	mov	r1, r2
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7fd fc96 	bl	8010300 <inc_lock>
 80129d4:	4602      	mov	r2, r0
 80129d6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80129da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80129e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80129e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	691b      	ldr	r3, [r3, #16]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d102      	bne.n	80129f8 <f_open+0x32c>
 80129f2:	2302      	movs	r3, #2
 80129f4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80129f8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	f040 811b 	bne.w	8012c38 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012a02:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012a06:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8012a0a:	4611      	mov	r1, r2
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7fe fb31 	bl	8011074 <ld_clust>
 8012a12:	4602      	mov	r2, r0
 8012a14:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012a18:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012a20:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012a24:	331c      	adds	r3, #28
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fd fb04 	bl	8010034 <ld_dword>
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012a32:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012a3a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012a3e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	2200      	movs	r2, #0
 8012a46:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012a48:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8012a4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012a50:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012a58:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012a5c:	88da      	ldrh	r2, [r3, #6]
 8012a5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012a62:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012a6a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012a6e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8012a78:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8012a7c:	7812      	ldrb	r2, [r2, #0]
 8012a7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012a80:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012a84:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012a8e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012a92:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012a9c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012aa0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012aaa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012aae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	3330      	adds	r3, #48	; 0x30
 8012ab6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012aba:	2100      	movs	r1, #0
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7fd fb44 	bl	801014a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012ac2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012ac6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	f003 0320 	and.w	r3, r3, #32
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f000 80b1 	beq.w	8012c38 <f_open+0x56c>
 8012ad6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012ada:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	68db      	ldr	r3, [r3, #12]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	f000 80a8 	beq.w	8012c38 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012ae8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012aec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	68da      	ldr	r2, [r3, #12]
 8012af4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012af8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012b00:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012b04:	895b      	ldrh	r3, [r3, #10]
 8012b06:	461a      	mov	r2, r3
 8012b08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012b0c:	899b      	ldrh	r3, [r3, #12]
 8012b0e:	fb02 f303 	mul.w	r3, r2, r3
 8012b12:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012b16:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012b1a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	689b      	ldr	r3, [r3, #8]
 8012b22:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012b26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012b2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	68db      	ldr	r3, [r3, #12]
 8012b32:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8012b36:	e021      	b.n	8012b7c <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8012b38:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012b3c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7fd fdc9 	bl	80106de <get_fat>
 8012b4c:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8012b50:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8012b54:	2b01      	cmp	r3, #1
 8012b56:	d802      	bhi.n	8012b5e <f_open+0x492>
 8012b58:	2302      	movs	r3, #2
 8012b5a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012b5e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8012b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b66:	d102      	bne.n	8012b6e <f_open+0x4a2>
 8012b68:	2301      	movs	r3, #1
 8012b6a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012b6e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8012b72:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8012b7c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d105      	bne.n	8012b90 <f_open+0x4c4>
 8012b84:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8012b88:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d8d3      	bhi.n	8012b38 <f_open+0x46c>
				}
				fp->clust = clst;
 8012b90:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012b94:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8012b9e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012ba0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d147      	bne.n	8012c38 <f_open+0x56c>
 8012ba8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012bac:	899b      	ldrh	r3, [r3, #12]
 8012bae:	461a      	mov	r2, r3
 8012bb0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8012bb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012bb8:	fb01 f202 	mul.w	r2, r1, r2
 8012bbc:	1a9b      	subs	r3, r3, r2
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d03a      	beq.n	8012c38 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012bc2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012bc6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7fd fd68 	bl	80106a0 <clust2sect>
 8012bd0:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8012bd4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d103      	bne.n	8012be4 <f_open+0x518>
						res = FR_INT_ERR;
 8012bdc:	2302      	movs	r3, #2
 8012bde:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8012be2:	e029      	b.n	8012c38 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012be4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012be8:	899b      	ldrh	r3, [r3, #12]
 8012bea:	461a      	mov	r2, r3
 8012bec:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8012bf0:	fbb3 f2f2 	udiv	r2, r3, r2
 8012bf4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012bf8:	441a      	add	r2, r3
 8012bfa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012bfe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012c06:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012c0a:	7858      	ldrb	r0, [r3, #1]
 8012c0c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012c10:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c1a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012c1e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	6a1a      	ldr	r2, [r3, #32]
 8012c26:	2301      	movs	r3, #1
 8012c28:	f7fd f98e 	bl	800ff48 <disk_read>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d002      	beq.n	8012c38 <f_open+0x56c>
 8012c32:	2301      	movs	r3, #1
 8012c34:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012c38:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d006      	beq.n	8012c4e <f_open+0x582>
 8012c40:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012c44:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012c4e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b08e      	sub	sp, #56	; 0x38
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	607a      	str	r2, [r7, #4]
 8012c68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	2200      	movs	r2, #0
 8012c72:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	f107 0214 	add.w	r2, r7, #20
 8012c7a:	4611      	mov	r1, r2
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7ff fca9 	bl	80125d4 <validate>
 8012c82:	4603      	mov	r3, r0
 8012c84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012c88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d107      	bne.n	8012ca0 <f_read+0x44>
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	7d5b      	ldrb	r3, [r3, #21]
 8012c94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012c98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d002      	beq.n	8012ca6 <f_read+0x4a>
 8012ca0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ca4:	e135      	b.n	8012f12 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	7d1b      	ldrb	r3, [r3, #20]
 8012caa:	f003 0301 	and.w	r3, r3, #1
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d101      	bne.n	8012cb6 <f_read+0x5a>
 8012cb2:	2307      	movs	r3, #7
 8012cb4:	e12d      	b.n	8012f12 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	68da      	ldr	r2, [r3, #12]
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	699b      	ldr	r3, [r3, #24]
 8012cbe:	1ad3      	subs	r3, r2, r3
 8012cc0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012cc2:	687a      	ldr	r2, [r7, #4]
 8012cc4:	6a3b      	ldr	r3, [r7, #32]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	f240 811e 	bls.w	8012f08 <f_read+0x2ac>
 8012ccc:	6a3b      	ldr	r3, [r7, #32]
 8012cce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012cd0:	e11a      	b.n	8012f08 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	699b      	ldr	r3, [r3, #24]
 8012cd6:	697a      	ldr	r2, [r7, #20]
 8012cd8:	8992      	ldrh	r2, [r2, #12]
 8012cda:	fbb3 f1f2 	udiv	r1, r3, r2
 8012cde:	fb01 f202 	mul.w	r2, r1, r2
 8012ce2:	1a9b      	subs	r3, r3, r2
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	f040 80d5 	bne.w	8012e94 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	699b      	ldr	r3, [r3, #24]
 8012cee:	697a      	ldr	r2, [r7, #20]
 8012cf0:	8992      	ldrh	r2, [r2, #12]
 8012cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8012cf6:	697a      	ldr	r2, [r7, #20]
 8012cf8:	8952      	ldrh	r2, [r2, #10]
 8012cfa:	3a01      	subs	r2, #1
 8012cfc:	4013      	ands	r3, r2
 8012cfe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d12f      	bne.n	8012d66 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	699b      	ldr	r3, [r3, #24]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d103      	bne.n	8012d16 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	689b      	ldr	r3, [r3, #8]
 8012d12:	633b      	str	r3, [r7, #48]	; 0x30
 8012d14:	e013      	b.n	8012d3e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d007      	beq.n	8012d2e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	699b      	ldr	r3, [r3, #24]
 8012d22:	4619      	mov	r1, r3
 8012d24:	68f8      	ldr	r0, [r7, #12]
 8012d26:	f7fd ffc7 	bl	8010cb8 <clmt_clust>
 8012d2a:	6338      	str	r0, [r7, #48]	; 0x30
 8012d2c:	e007      	b.n	8012d3e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012d2e:	68fa      	ldr	r2, [r7, #12]
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	69db      	ldr	r3, [r3, #28]
 8012d34:	4619      	mov	r1, r3
 8012d36:	4610      	mov	r0, r2
 8012d38:	f7fd fcd1 	bl	80106de <get_fat>
 8012d3c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d804      	bhi.n	8012d4e <f_read+0xf2>
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	2202      	movs	r2, #2
 8012d48:	755a      	strb	r2, [r3, #21]
 8012d4a:	2302      	movs	r3, #2
 8012d4c:	e0e1      	b.n	8012f12 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d54:	d104      	bne.n	8012d60 <f_read+0x104>
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2201      	movs	r2, #1
 8012d5a:	755a      	strb	r2, [r3, #21]
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	e0d8      	b.n	8012f12 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d64:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012d66:	697a      	ldr	r2, [r7, #20]
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	69db      	ldr	r3, [r3, #28]
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	4610      	mov	r0, r2
 8012d70:	f7fd fc96 	bl	80106a0 <clust2sect>
 8012d74:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012d76:	69bb      	ldr	r3, [r7, #24]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d104      	bne.n	8012d86 <f_read+0x12a>
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	2202      	movs	r2, #2
 8012d80:	755a      	strb	r2, [r3, #21]
 8012d82:	2302      	movs	r3, #2
 8012d84:	e0c5      	b.n	8012f12 <f_read+0x2b6>
			sect += csect;
 8012d86:	69ba      	ldr	r2, [r7, #24]
 8012d88:	69fb      	ldr	r3, [r7, #28]
 8012d8a:	4413      	add	r3, r2
 8012d8c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	899b      	ldrh	r3, [r3, #12]
 8012d92:	461a      	mov	r2, r3
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d9a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d041      	beq.n	8012e26 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012da2:	69fa      	ldr	r2, [r7, #28]
 8012da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da6:	4413      	add	r3, r2
 8012da8:	697a      	ldr	r2, [r7, #20]
 8012daa:	8952      	ldrh	r2, [r2, #10]
 8012dac:	4293      	cmp	r3, r2
 8012dae:	d905      	bls.n	8012dbc <f_read+0x160>
					cc = fs->csize - csect;
 8012db0:	697b      	ldr	r3, [r7, #20]
 8012db2:	895b      	ldrh	r3, [r3, #10]
 8012db4:	461a      	mov	r2, r3
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	1ad3      	subs	r3, r2, r3
 8012dba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	7858      	ldrb	r0, [r3, #1]
 8012dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dc2:	69ba      	ldr	r2, [r7, #24]
 8012dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012dc6:	f7fd f8bf 	bl	800ff48 <disk_read>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d004      	beq.n	8012dda <f_read+0x17e>
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2201      	movs	r2, #1
 8012dd4:	755a      	strb	r2, [r3, #21]
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	e09b      	b.n	8012f12 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	7d1b      	ldrb	r3, [r3, #20]
 8012dde:	b25b      	sxtb	r3, r3
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	da18      	bge.n	8012e16 <f_read+0x1ba>
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	6a1a      	ldr	r2, [r3, #32]
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	1ad3      	subs	r3, r2, r3
 8012dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d911      	bls.n	8012e16 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	6a1a      	ldr	r2, [r3, #32]
 8012df6:	69bb      	ldr	r3, [r7, #24]
 8012df8:	1ad3      	subs	r3, r2, r3
 8012dfa:	697a      	ldr	r2, [r7, #20]
 8012dfc:	8992      	ldrh	r2, [r2, #12]
 8012dfe:	fb02 f303 	mul.w	r3, r2, r3
 8012e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e04:	18d0      	adds	r0, r2, r3
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e0c:	697b      	ldr	r3, [r7, #20]
 8012e0e:	899b      	ldrh	r3, [r3, #12]
 8012e10:	461a      	mov	r2, r3
 8012e12:	f7fd f979 	bl	8010108 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	899b      	ldrh	r3, [r3, #12]
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e1e:	fb02 f303 	mul.w	r3, r2, r3
 8012e22:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012e24:	e05c      	b.n	8012ee0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	6a1b      	ldr	r3, [r3, #32]
 8012e2a:	69ba      	ldr	r2, [r7, #24]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d02e      	beq.n	8012e8e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	7d1b      	ldrb	r3, [r3, #20]
 8012e34:	b25b      	sxtb	r3, r3
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	da18      	bge.n	8012e6c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	7858      	ldrb	r0, [r3, #1]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	6a1a      	ldr	r2, [r3, #32]
 8012e48:	2301      	movs	r3, #1
 8012e4a:	f7fd f89d 	bl	800ff88 <disk_write>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d004      	beq.n	8012e5e <f_read+0x202>
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	2201      	movs	r2, #1
 8012e58:	755a      	strb	r2, [r3, #21]
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	e059      	b.n	8012f12 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	7d1b      	ldrb	r3, [r3, #20]
 8012e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e66:	b2da      	uxtb	r2, r3
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	7858      	ldrb	r0, [r3, #1]
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e76:	2301      	movs	r3, #1
 8012e78:	69ba      	ldr	r2, [r7, #24]
 8012e7a:	f7fd f865 	bl	800ff48 <disk_read>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d004      	beq.n	8012e8e <f_read+0x232>
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2201      	movs	r2, #1
 8012e88:	755a      	strb	r2, [r3, #21]
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	e041      	b.n	8012f12 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	69ba      	ldr	r2, [r7, #24]
 8012e92:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	899b      	ldrh	r3, [r3, #12]
 8012e98:	4618      	mov	r0, r3
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	699b      	ldr	r3, [r3, #24]
 8012e9e:	697a      	ldr	r2, [r7, #20]
 8012ea0:	8992      	ldrh	r2, [r2, #12]
 8012ea2:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ea6:	fb01 f202 	mul.w	r2, r1, r2
 8012eaa:	1a9b      	subs	r3, r3, r2
 8012eac:	1ac3      	subs	r3, r0, r3
 8012eae:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d901      	bls.n	8012ebc <f_read+0x260>
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	699b      	ldr	r3, [r3, #24]
 8012ec6:	697a      	ldr	r2, [r7, #20]
 8012ec8:	8992      	ldrh	r2, [r2, #12]
 8012eca:	fbb3 f0f2 	udiv	r0, r3, r2
 8012ece:	fb00 f202 	mul.w	r2, r0, r2
 8012ed2:	1a9b      	subs	r3, r3, r2
 8012ed4:	440b      	add	r3, r1
 8012ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ed8:	4619      	mov	r1, r3
 8012eda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012edc:	f7fd f914 	bl	8010108 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee4:	4413      	add	r3, r2
 8012ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	699a      	ldr	r2, [r3, #24]
 8012eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eee:	441a      	add	r2, r3
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	619a      	str	r2, [r3, #24]
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	681a      	ldr	r2, [r3, #0]
 8012ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012efa:	441a      	add	r2, r3
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	601a      	str	r2, [r3, #0]
 8012f00:	687a      	ldr	r2, [r7, #4]
 8012f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f04:	1ad3      	subs	r3, r2, r3
 8012f06:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	f47f aee1 	bne.w	8012cd2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012f10:	2300      	movs	r3, #0
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3738      	adds	r7, #56	; 0x38
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}

08012f1a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012f1a:	b580      	push	{r7, lr}
 8012f1c:	b086      	sub	sp, #24
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f107 0208 	add.w	r2, r7, #8
 8012f28:	4611      	mov	r1, r2
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7ff fb52 	bl	80125d4 <validate>
 8012f30:	4603      	mov	r3, r0
 8012f32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012f34:	7dfb      	ldrb	r3, [r7, #23]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d168      	bne.n	801300c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	7d1b      	ldrb	r3, [r3, #20]
 8012f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d062      	beq.n	801300c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	7d1b      	ldrb	r3, [r3, #20]
 8012f4a:	b25b      	sxtb	r3, r3
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	da15      	bge.n	8012f7c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	7858      	ldrb	r0, [r3, #1]
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	6a1a      	ldr	r2, [r3, #32]
 8012f5e:	2301      	movs	r3, #1
 8012f60:	f7fd f812 	bl	800ff88 <disk_write>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d001      	beq.n	8012f6e <f_sync+0x54>
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	e04f      	b.n	801300e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	7d1b      	ldrb	r3, [r3, #20]
 8012f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f76:	b2da      	uxtb	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012f7c:	f7fc fc00 	bl	800f780 <get_fattime>
 8012f80:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012f82:	68ba      	ldr	r2, [r7, #8]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f88:	4619      	mov	r1, r3
 8012f8a:	4610      	mov	r0, r2
 8012f8c:	f7fd faea 	bl	8010564 <move_window>
 8012f90:	4603      	mov	r3, r0
 8012f92:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012f94:	7dfb      	ldrb	r3, [r7, #23]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d138      	bne.n	801300c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f9e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	330b      	adds	r3, #11
 8012fa4:	781a      	ldrb	r2, [r3, #0]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	330b      	adds	r3, #11
 8012faa:	f042 0220 	orr.w	r2, r2, #32
 8012fae:	b2d2      	uxtb	r2, r2
 8012fb0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6818      	ldr	r0, [r3, #0]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	689b      	ldr	r3, [r3, #8]
 8012fba:	461a      	mov	r2, r3
 8012fbc:	68f9      	ldr	r1, [r7, #12]
 8012fbe:	f7fe f878 	bl	80110b2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	f103 021c 	add.w	r2, r3, #28
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	68db      	ldr	r3, [r3, #12]
 8012fcc:	4619      	mov	r1, r3
 8012fce:	4610      	mov	r0, r2
 8012fd0:	f7fd f86e 	bl	80100b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	3316      	adds	r3, #22
 8012fd8:	6939      	ldr	r1, [r7, #16]
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7fd f868 	bl	80100b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	3312      	adds	r3, #18
 8012fe4:	2100      	movs	r1, #0
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7fd f847 	bl	801007a <st_word>
					fs->wflag = 1;
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	2201      	movs	r2, #1
 8012ff0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7fd fae3 	bl	80105c0 <sync_fs>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	7d1b      	ldrb	r3, [r3, #20]
 8013002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013006:	b2da      	uxtb	r2, r3
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801300c:	7dfb      	ldrb	r3, [r7, #23]
}
 801300e:	4618      	mov	r0, r3
 8013010:	3718      	adds	r7, #24
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}

08013016 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013016:	b580      	push	{r7, lr}
 8013018:	b084      	sub	sp, #16
 801301a:	af00      	add	r7, sp, #0
 801301c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f7ff ff7b 	bl	8012f1a <f_sync>
 8013024:	4603      	mov	r3, r0
 8013026:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013028:	7bfb      	ldrb	r3, [r7, #15]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d118      	bne.n	8013060 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f107 0208 	add.w	r2, r7, #8
 8013034:	4611      	mov	r1, r2
 8013036:	4618      	mov	r0, r3
 8013038:	f7ff facc 	bl	80125d4 <validate>
 801303c:	4603      	mov	r3, r0
 801303e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013040:	7bfb      	ldrb	r3, [r7, #15]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d10c      	bne.n	8013060 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	691b      	ldr	r3, [r3, #16]
 801304a:	4618      	mov	r0, r3
 801304c:	f7fd f9e6 	bl	801041c <dec_lock>
 8013050:	4603      	mov	r3, r0
 8013052:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013054:	7bfb      	ldrb	r3, [r7, #15]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d102      	bne.n	8013060 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2200      	movs	r2, #0
 801305e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013060:	7bfb      	ldrb	r3, [r7, #15]
}
 8013062:	4618      	mov	r0, r3
 8013064:	3710      	adds	r7, #16
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}

0801306a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801306a:	b580      	push	{r7, lr}
 801306c:	b090      	sub	sp, #64	; 0x40
 801306e:	af00      	add	r7, sp, #0
 8013070:	6078      	str	r0, [r7, #4]
 8013072:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f107 0208 	add.w	r2, r7, #8
 801307a:	4611      	mov	r1, r2
 801307c:	4618      	mov	r0, r3
 801307e:	f7ff faa9 	bl	80125d4 <validate>
 8013082:	4603      	mov	r3, r0
 8013084:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013088:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801308c:	2b00      	cmp	r3, #0
 801308e:	d103      	bne.n	8013098 <f_lseek+0x2e>
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	7d5b      	ldrb	r3, [r3, #21]
 8013094:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013098:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801309c:	2b00      	cmp	r3, #0
 801309e:	d002      	beq.n	80130a6 <f_lseek+0x3c>
 80130a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80130a4:	e201      	b.n	80134aa <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	f000 80d9 	beq.w	8013262 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130b6:	d15a      	bne.n	801316e <f_lseek+0x104>
			tbl = fp->cltbl;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130bc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80130be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c0:	1d1a      	adds	r2, r3, #4
 80130c2:	627a      	str	r2, [r7, #36]	; 0x24
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	617b      	str	r3, [r7, #20]
 80130c8:	2302      	movs	r3, #2
 80130ca:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	689b      	ldr	r3, [r3, #8]
 80130d0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80130d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d03a      	beq.n	801314e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80130d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130da:	613b      	str	r3, [r7, #16]
 80130dc:	2300      	movs	r3, #0
 80130de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80130e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e2:	3302      	adds	r3, #2
 80130e4:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80130e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e8:	60fb      	str	r3, [r7, #12]
 80130ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ec:	3301      	adds	r3, #1
 80130ee:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7fd faf2 	bl	80106de <get_fat>
 80130fa:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80130fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d804      	bhi.n	801310c <f_lseek+0xa2>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2202      	movs	r2, #2
 8013106:	755a      	strb	r2, [r3, #21]
 8013108:	2302      	movs	r3, #2
 801310a:	e1ce      	b.n	80134aa <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013112:	d104      	bne.n	801311e <f_lseek+0xb4>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2201      	movs	r2, #1
 8013118:	755a      	strb	r2, [r3, #21]
 801311a:	2301      	movs	r3, #1
 801311c:	e1c5      	b.n	80134aa <f_lseek+0x440>
					} while (cl == pcl + 1);
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	3301      	adds	r3, #1
 8013122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013124:	429a      	cmp	r2, r3
 8013126:	d0de      	beq.n	80130e6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	429a      	cmp	r2, r3
 801312e:	d809      	bhi.n	8013144 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	1d1a      	adds	r2, r3, #4
 8013134:	627a      	str	r2, [r7, #36]	; 0x24
 8013136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013138:	601a      	str	r2, [r3, #0]
 801313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313c:	1d1a      	adds	r2, r3, #4
 801313e:	627a      	str	r2, [r7, #36]	; 0x24
 8013140:	693a      	ldr	r2, [r7, #16]
 8013142:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	69db      	ldr	r3, [r3, #28]
 8013148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801314a:	429a      	cmp	r2, r3
 801314c:	d3c4      	bcc.n	80130d8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013154:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	429a      	cmp	r2, r3
 801315c:	d803      	bhi.n	8013166 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013160:	2200      	movs	r2, #0
 8013162:	601a      	str	r2, [r3, #0]
 8013164:	e19f      	b.n	80134a6 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013166:	2311      	movs	r3, #17
 8013168:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801316c:	e19b      	b.n	80134a6 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	68db      	ldr	r3, [r3, #12]
 8013172:	683a      	ldr	r2, [r7, #0]
 8013174:	429a      	cmp	r2, r3
 8013176:	d902      	bls.n	801317e <f_lseek+0x114>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	68db      	ldr	r3, [r3, #12]
 801317c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	683a      	ldr	r2, [r7, #0]
 8013182:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	2b00      	cmp	r3, #0
 8013188:	f000 818d 	beq.w	80134a6 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	3b01      	subs	r3, #1
 8013190:	4619      	mov	r1, r3
 8013192:	6878      	ldr	r0, [r7, #4]
 8013194:	f7fd fd90 	bl	8010cb8 <clmt_clust>
 8013198:	4602      	mov	r2, r0
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801319e:	68ba      	ldr	r2, [r7, #8]
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	69db      	ldr	r3, [r3, #28]
 80131a4:	4619      	mov	r1, r3
 80131a6:	4610      	mov	r0, r2
 80131a8:	f7fd fa7a 	bl	80106a0 <clust2sect>
 80131ac:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80131ae:	69bb      	ldr	r3, [r7, #24]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d104      	bne.n	80131be <f_lseek+0x154>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2202      	movs	r2, #2
 80131b8:	755a      	strb	r2, [r3, #21]
 80131ba:	2302      	movs	r3, #2
 80131bc:	e175      	b.n	80134aa <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	3b01      	subs	r3, #1
 80131c2:	68ba      	ldr	r2, [r7, #8]
 80131c4:	8992      	ldrh	r2, [r2, #12]
 80131c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80131ca:	68ba      	ldr	r2, [r7, #8]
 80131cc:	8952      	ldrh	r2, [r2, #10]
 80131ce:	3a01      	subs	r2, #1
 80131d0:	4013      	ands	r3, r2
 80131d2:	69ba      	ldr	r2, [r7, #24]
 80131d4:	4413      	add	r3, r2
 80131d6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	699b      	ldr	r3, [r3, #24]
 80131dc:	68ba      	ldr	r2, [r7, #8]
 80131de:	8992      	ldrh	r2, [r2, #12]
 80131e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80131e4:	fb01 f202 	mul.w	r2, r1, r2
 80131e8:	1a9b      	subs	r3, r3, r2
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	f000 815b 	beq.w	80134a6 <f_lseek+0x43c>
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	6a1b      	ldr	r3, [r3, #32]
 80131f4:	69ba      	ldr	r2, [r7, #24]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	f000 8155 	beq.w	80134a6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	7d1b      	ldrb	r3, [r3, #20]
 8013200:	b25b      	sxtb	r3, r3
 8013202:	2b00      	cmp	r3, #0
 8013204:	da18      	bge.n	8013238 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	7858      	ldrb	r0, [r3, #1]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	6a1a      	ldr	r2, [r3, #32]
 8013214:	2301      	movs	r3, #1
 8013216:	f7fc feb7 	bl	800ff88 <disk_write>
 801321a:	4603      	mov	r3, r0
 801321c:	2b00      	cmp	r3, #0
 801321e:	d004      	beq.n	801322a <f_lseek+0x1c0>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2201      	movs	r2, #1
 8013224:	755a      	strb	r2, [r3, #21]
 8013226:	2301      	movs	r3, #1
 8013228:	e13f      	b.n	80134aa <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	7d1b      	ldrb	r3, [r3, #20]
 801322e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013232:	b2da      	uxtb	r2, r3
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	7858      	ldrb	r0, [r3, #1]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013242:	2301      	movs	r3, #1
 8013244:	69ba      	ldr	r2, [r7, #24]
 8013246:	f7fc fe7f 	bl	800ff48 <disk_read>
 801324a:	4603      	mov	r3, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	d004      	beq.n	801325a <f_lseek+0x1f0>
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2201      	movs	r2, #1
 8013254:	755a      	strb	r2, [r3, #21]
 8013256:	2301      	movs	r3, #1
 8013258:	e127      	b.n	80134aa <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	69ba      	ldr	r2, [r7, #24]
 801325e:	621a      	str	r2, [r3, #32]
 8013260:	e121      	b.n	80134a6 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	68db      	ldr	r3, [r3, #12]
 8013266:	683a      	ldr	r2, [r7, #0]
 8013268:	429a      	cmp	r2, r3
 801326a:	d908      	bls.n	801327e <f_lseek+0x214>
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	7d1b      	ldrb	r3, [r3, #20]
 8013270:	f003 0302 	and.w	r3, r3, #2
 8013274:	2b00      	cmp	r3, #0
 8013276:	d102      	bne.n	801327e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	699b      	ldr	r3, [r3, #24]
 8013282:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013284:	2300      	movs	r3, #0
 8013286:	637b      	str	r3, [r7, #52]	; 0x34
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801328c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	f000 80b5 	beq.w	8013400 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	895b      	ldrh	r3, [r3, #10]
 801329a:	461a      	mov	r2, r3
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	899b      	ldrh	r3, [r3, #12]
 80132a0:	fb02 f303 	mul.w	r3, r2, r3
 80132a4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80132a6:	6a3b      	ldr	r3, [r7, #32]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d01b      	beq.n	80132e4 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	1e5a      	subs	r2, r3, #1
 80132b0:	69fb      	ldr	r3, [r7, #28]
 80132b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80132b6:	6a3b      	ldr	r3, [r7, #32]
 80132b8:	1e59      	subs	r1, r3, #1
 80132ba:	69fb      	ldr	r3, [r7, #28]
 80132bc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d30f      	bcc.n	80132e4 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80132c4:	6a3b      	ldr	r3, [r7, #32]
 80132c6:	1e5a      	subs	r2, r3, #1
 80132c8:	69fb      	ldr	r3, [r7, #28]
 80132ca:	425b      	negs	r3, r3
 80132cc:	401a      	ands	r2, r3
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	699b      	ldr	r3, [r3, #24]
 80132d6:	683a      	ldr	r2, [r7, #0]
 80132d8:	1ad3      	subs	r3, r2, r3
 80132da:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	69db      	ldr	r3, [r3, #28]
 80132e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80132e2:	e022      	b.n	801332a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	689b      	ldr	r3, [r3, #8]
 80132e8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80132ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d119      	bne.n	8013324 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2100      	movs	r1, #0
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7fd fc47 	bl	8010b88 <create_chain>
 80132fa:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80132fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132fe:	2b01      	cmp	r3, #1
 8013300:	d104      	bne.n	801330c <f_lseek+0x2a2>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2202      	movs	r2, #2
 8013306:	755a      	strb	r2, [r3, #21]
 8013308:	2302      	movs	r3, #2
 801330a:	e0ce      	b.n	80134aa <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013312:	d104      	bne.n	801331e <f_lseek+0x2b4>
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2201      	movs	r2, #1
 8013318:	755a      	strb	r2, [r3, #21]
 801331a:	2301      	movs	r3, #1
 801331c:	e0c5      	b.n	80134aa <f_lseek+0x440>
					fp->obj.sclust = clst;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013322:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013328:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801332c:	2b00      	cmp	r3, #0
 801332e:	d067      	beq.n	8013400 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013330:	e03a      	b.n	80133a8 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013332:	683a      	ldr	r2, [r7, #0]
 8013334:	69fb      	ldr	r3, [r7, #28]
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	603b      	str	r3, [r7, #0]
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	699a      	ldr	r2, [r3, #24]
 801333e:	69fb      	ldr	r3, [r7, #28]
 8013340:	441a      	add	r2, r3
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	7d1b      	ldrb	r3, [r3, #20]
 801334a:	f003 0302 	and.w	r3, r3, #2
 801334e:	2b00      	cmp	r3, #0
 8013350:	d00b      	beq.n	801336a <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013356:	4618      	mov	r0, r3
 8013358:	f7fd fc16 	bl	8010b88 <create_chain>
 801335c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013360:	2b00      	cmp	r3, #0
 8013362:	d108      	bne.n	8013376 <f_lseek+0x30c>
							ofs = 0; break;
 8013364:	2300      	movs	r3, #0
 8013366:	603b      	str	r3, [r7, #0]
 8013368:	e022      	b.n	80133b0 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801336e:	4618      	mov	r0, r3
 8013370:	f7fd f9b5 	bl	80106de <get_fat>
 8013374:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801337c:	d104      	bne.n	8013388 <f_lseek+0x31e>
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2201      	movs	r2, #1
 8013382:	755a      	strb	r2, [r3, #21]
 8013384:	2301      	movs	r3, #1
 8013386:	e090      	b.n	80134aa <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801338a:	2b01      	cmp	r3, #1
 801338c:	d904      	bls.n	8013398 <f_lseek+0x32e>
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	69db      	ldr	r3, [r3, #28]
 8013392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013394:	429a      	cmp	r2, r3
 8013396:	d304      	bcc.n	80133a2 <f_lseek+0x338>
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2202      	movs	r2, #2
 801339c:	755a      	strb	r2, [r3, #21]
 801339e:	2302      	movs	r3, #2
 80133a0:	e083      	b.n	80134aa <f_lseek+0x440>
					fp->clust = clst;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80133a6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80133a8:	683a      	ldr	r2, [r7, #0]
 80133aa:	69fb      	ldr	r3, [r7, #28]
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d8c0      	bhi.n	8013332 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	699a      	ldr	r2, [r3, #24]
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	441a      	add	r2, r3
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	899b      	ldrh	r3, [r3, #12]
 80133c0:	461a      	mov	r2, r3
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80133c8:	fb01 f202 	mul.w	r2, r1, r2
 80133cc:	1a9b      	subs	r3, r3, r2
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d016      	beq.n	8013400 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7fd f962 	bl	80106a0 <clust2sect>
 80133dc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80133de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d104      	bne.n	80133ee <f_lseek+0x384>
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2202      	movs	r2, #2
 80133e8:	755a      	strb	r2, [r3, #21]
 80133ea:	2302      	movs	r3, #2
 80133ec:	e05d      	b.n	80134aa <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	899b      	ldrh	r3, [r3, #12]
 80133f2:	461a      	mov	r2, r3
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80133fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133fc:	4413      	add	r3, r2
 80133fe:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	699a      	ldr	r2, [r3, #24]
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	429a      	cmp	r2, r3
 801340a:	d90a      	bls.n	8013422 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	699a      	ldr	r2, [r3, #24]
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	7d1b      	ldrb	r3, [r3, #20]
 8013418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801341c:	b2da      	uxtb	r2, r3
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	699b      	ldr	r3, [r3, #24]
 8013426:	68ba      	ldr	r2, [r7, #8]
 8013428:	8992      	ldrh	r2, [r2, #12]
 801342a:	fbb3 f1f2 	udiv	r1, r3, r2
 801342e:	fb01 f202 	mul.w	r2, r1, r2
 8013432:	1a9b      	subs	r3, r3, r2
 8013434:	2b00      	cmp	r3, #0
 8013436:	d036      	beq.n	80134a6 <f_lseek+0x43c>
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6a1b      	ldr	r3, [r3, #32]
 801343c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801343e:	429a      	cmp	r2, r3
 8013440:	d031      	beq.n	80134a6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	7d1b      	ldrb	r3, [r3, #20]
 8013446:	b25b      	sxtb	r3, r3
 8013448:	2b00      	cmp	r3, #0
 801344a:	da18      	bge.n	801347e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	7858      	ldrb	r0, [r3, #1]
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6a1a      	ldr	r2, [r3, #32]
 801345a:	2301      	movs	r3, #1
 801345c:	f7fc fd94 	bl	800ff88 <disk_write>
 8013460:	4603      	mov	r3, r0
 8013462:	2b00      	cmp	r3, #0
 8013464:	d004      	beq.n	8013470 <f_lseek+0x406>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2201      	movs	r2, #1
 801346a:	755a      	strb	r2, [r3, #21]
 801346c:	2301      	movs	r3, #1
 801346e:	e01c      	b.n	80134aa <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	7d1b      	ldrb	r3, [r3, #20]
 8013474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013478:	b2da      	uxtb	r2, r3
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	7858      	ldrb	r0, [r3, #1]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013488:	2301      	movs	r3, #1
 801348a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801348c:	f7fc fd5c 	bl	800ff48 <disk_read>
 8013490:	4603      	mov	r3, r0
 8013492:	2b00      	cmp	r3, #0
 8013494:	d004      	beq.n	80134a0 <f_lseek+0x436>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	2201      	movs	r2, #1
 801349a:	755a      	strb	r2, [r3, #21]
 801349c:	2301      	movs	r3, #1
 801349e:	e004      	b.n	80134aa <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134a4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80134a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3740      	adds	r7, #64	; 0x40
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}

080134b2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80134b2:	b580      	push	{r7, lr}
 80134b4:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80134be:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80134c2:	6018      	str	r0, [r3, #0]
 80134c4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80134c8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80134cc:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80134ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80134d2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d101      	bne.n	80134e0 <f_opendir+0x2e>
 80134dc:	2309      	movs	r3, #9
 80134de:	e0a0      	b.n	8013622 <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 80134e0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80134e4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 80134ee:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80134f2:	463b      	mov	r3, r7
 80134f4:	2200      	movs	r2, #0
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7fe fdec 	bl	80120d4 <find_volume>
 80134fc:	4603      	mov	r3, r0
 80134fe:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 8013502:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8013506:	2b00      	cmp	r3, #0
 8013508:	f040 8081 	bne.w	801360e <f_opendir+0x15c>
		obj->fs = fs;
 801350c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8013510:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013514:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8013516:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801351a:	f107 020c 	add.w	r2, r7, #12
 801351e:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013520:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013524:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8013528:	681a      	ldr	r2, [r3, #0]
 801352a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801352e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8013532:	4611      	mov	r1, r2
 8013534:	6818      	ldr	r0, [r3, #0]
 8013536:	f7fe fcbd 	bl	8011eb4 <follow_path>
 801353a:	4603      	mov	r3, r0
 801353c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 8013540:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8013544:	2b00      	cmp	r3, #0
 8013546:	d15b      	bne.n	8013600 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013548:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801354c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013556:	b25b      	sxtb	r3, r3
 8013558:	2b00      	cmp	r3, #0
 801355a:	db1a      	blt.n	8013592 <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801355c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013560:	799b      	ldrb	r3, [r3, #6]
 8013562:	f003 0310 	and.w	r3, r3, #16
 8013566:	2b00      	cmp	r3, #0
 8013568:	d010      	beq.n	801358c <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801356a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801356e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013572:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	6a1b      	ldr	r3, [r3, #32]
 801357a:	4619      	mov	r1, r3
 801357c:	4610      	mov	r0, r2
 801357e:	f7fd fd79 	bl	8011074 <ld_clust>
 8013582:	4602      	mov	r2, r0
 8013584:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013588:	609a      	str	r2, [r3, #8]
 801358a:	e002      	b.n	8013592 <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801358c:	2305      	movs	r3, #5
 801358e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 8013592:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8013596:	2b00      	cmp	r3, #0
 8013598:	d132      	bne.n	8013600 <f_opendir+0x14e>
				obj->id = fs->id;
 801359a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801359e:	88da      	ldrh	r2, [r3, #6]
 80135a0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135a4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80135a6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80135aa:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80135ae:	2100      	movs	r1, #0
 80135b0:	6818      	ldr	r0, [r3, #0]
 80135b2:	f7fd fbb9 	bl	8010d28 <dir_sdi>
 80135b6:	4603      	mov	r3, r0
 80135b8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80135bc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d11d      	bne.n	8013600 <f_opendir+0x14e>
					if (obj->sclust) {
 80135c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135c8:	689b      	ldr	r3, [r3, #8]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d014      	beq.n	80135f8 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80135ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80135d2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80135d6:	2100      	movs	r1, #0
 80135d8:	6818      	ldr	r0, [r3, #0]
 80135da:	f7fc fe91 	bl	8010300 <inc_lock>
 80135de:	4602      	mov	r2, r0
 80135e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135e4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80135e6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135ea:	691b      	ldr	r3, [r3, #16]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d107      	bne.n	8013600 <f_opendir+0x14e>
 80135f0:	2312      	movs	r3, #18
 80135f2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 80135f6:	e003      	b.n	8013600 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80135f8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135fc:	2200      	movs	r2, #0
 80135fe:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013600:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8013604:	2b04      	cmp	r3, #4
 8013606:	d102      	bne.n	801360e <f_opendir+0x15c>
 8013608:	2305      	movs	r3, #5
 801360a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801360e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8013612:	2b00      	cmp	r3, #0
 8013614:	d003      	beq.n	801361e <f_opendir+0x16c>
 8013616:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801361a:	2200      	movs	r2, #0
 801361c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801361e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8013622:	4618      	mov	r0, r3
 8013624:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}

0801362c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b084      	sub	sp, #16
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f107 0208 	add.w	r2, r7, #8
 801363a:	4611      	mov	r1, r2
 801363c:	4618      	mov	r0, r3
 801363e:	f7fe ffc9 	bl	80125d4 <validate>
 8013642:	4603      	mov	r3, r0
 8013644:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013646:	7bfb      	ldrb	r3, [r7, #15]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d110      	bne.n	801366e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	691b      	ldr	r3, [r3, #16]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d006      	beq.n	8013662 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	691b      	ldr	r3, [r3, #16]
 8013658:	4618      	mov	r0, r3
 801365a:	f7fc fedf 	bl	801041c <dec_lock>
 801365e:	4603      	mov	r3, r0
 8013660:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8013662:	7bfb      	ldrb	r3, [r7, #15]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d102      	bne.n	801366e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2200      	movs	r2, #0
 801366c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801366e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013670:	4618      	mov	r0, r3
 8013672:	3710      	adds	r7, #16
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 801367e:	af00      	add	r7, sp, #0
 8013680:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8013684:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013688:	6018      	str	r0, [r3, #0]
 801368a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801368e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8013692:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8013694:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8013698:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80136a2:	4611      	mov	r1, r2
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7fe ff95 	bl	80125d4 <validate>
 80136aa:	4603      	mov	r3, r0
 80136ac:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 80136b0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d14b      	bne.n	8013750 <f_readdir+0xd8>
		if (!fno) {
 80136b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80136bc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d10b      	bne.n	80136de <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80136c6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80136ca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80136ce:	2100      	movs	r1, #0
 80136d0:	6818      	ldr	r0, [r3, #0]
 80136d2:	f7fd fb29 	bl	8010d28 <dir_sdi>
 80136d6:	4603      	mov	r3, r0
 80136d8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80136dc:	e038      	b.n	8013750 <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 80136de:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80136e2:	f107 0208 	add.w	r2, r7, #8
 80136e6:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 80136e8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80136ec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80136f0:	2100      	movs	r1, #0
 80136f2:	6818      	ldr	r0, [r3, #0]
 80136f4:	f7fd fee9 	bl	80114ca <dir_read>
 80136f8:	4603      	mov	r3, r0
 80136fa:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80136fe:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8013702:	2b04      	cmp	r3, #4
 8013704:	d102      	bne.n	801370c <f_readdir+0x94>
 8013706:	2300      	movs	r3, #0
 8013708:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 801370c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8013710:	2b00      	cmp	r3, #0
 8013712:	d11d      	bne.n	8013750 <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013714:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8013718:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 801371c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8013720:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013724:	6811      	ldr	r1, [r2, #0]
 8013726:	6818      	ldr	r0, [r3, #0]
 8013728:	f7fe f92e 	bl	8011988 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801372c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8013730:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013734:	2100      	movs	r1, #0
 8013736:	6818      	ldr	r0, [r3, #0]
 8013738:	f7fd fb7f 	bl	8010e3a <dir_next>
 801373c:	4603      	mov	r3, r0
 801373e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8013742:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8013746:	2b04      	cmp	r3, #4
 8013748:	d102      	bne.n	8013750 <f_readdir+0xd8>
 801374a:	2300      	movs	r3, #0
 801374c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8013750:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8013754:	4618      	mov	r0, r3
 8013756:	f507 7704 	add.w	r7, r7, #528	; 0x210
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}
	...

08013760 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013760:	b480      	push	{r7}
 8013762:	b087      	sub	sp, #28
 8013764:	af00      	add	r7, sp, #0
 8013766:	60f8      	str	r0, [r7, #12]
 8013768:	60b9      	str	r1, [r7, #8]
 801376a:	4613      	mov	r3, r2
 801376c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801376e:	2301      	movs	r3, #1
 8013770:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013772:	2300      	movs	r3, #0
 8013774:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013776:	4b1f      	ldr	r3, [pc, #124]	; (80137f4 <FATFS_LinkDriverEx+0x94>)
 8013778:	7a5b      	ldrb	r3, [r3, #9]
 801377a:	b2db      	uxtb	r3, r3
 801377c:	2b00      	cmp	r3, #0
 801377e:	d131      	bne.n	80137e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013780:	4b1c      	ldr	r3, [pc, #112]	; (80137f4 <FATFS_LinkDriverEx+0x94>)
 8013782:	7a5b      	ldrb	r3, [r3, #9]
 8013784:	b2db      	uxtb	r3, r3
 8013786:	461a      	mov	r2, r3
 8013788:	4b1a      	ldr	r3, [pc, #104]	; (80137f4 <FATFS_LinkDriverEx+0x94>)
 801378a:	2100      	movs	r1, #0
 801378c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801378e:	4b19      	ldr	r3, [pc, #100]	; (80137f4 <FATFS_LinkDriverEx+0x94>)
 8013790:	7a5b      	ldrb	r3, [r3, #9]
 8013792:	b2db      	uxtb	r3, r3
 8013794:	4a17      	ldr	r2, [pc, #92]	; (80137f4 <FATFS_LinkDriverEx+0x94>)
 8013796:	009b      	lsls	r3, r3, #2
 8013798:	4413      	add	r3, r2
 801379a:	68fa      	ldr	r2, [r7, #12]
 801379c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801379e:	4b15      	ldr	r3, [pc, #84]	; (80137f4 <FATFS_LinkDriverEx+0x94>)
 80137a0:	7a5b      	ldrb	r3, [r3, #9]
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	461a      	mov	r2, r3
 80137a6:	4b13      	ldr	r3, [pc, #76]	; (80137f4 <FATFS_LinkDriverEx+0x94>)
 80137a8:	4413      	add	r3, r2
 80137aa:	79fa      	ldrb	r2, [r7, #7]
 80137ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80137ae:	4b11      	ldr	r3, [pc, #68]	; (80137f4 <FATFS_LinkDriverEx+0x94>)
 80137b0:	7a5b      	ldrb	r3, [r3, #9]
 80137b2:	b2db      	uxtb	r3, r3
 80137b4:	1c5a      	adds	r2, r3, #1
 80137b6:	b2d1      	uxtb	r1, r2
 80137b8:	4a0e      	ldr	r2, [pc, #56]	; (80137f4 <FATFS_LinkDriverEx+0x94>)
 80137ba:	7251      	strb	r1, [r2, #9]
 80137bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80137be:	7dbb      	ldrb	r3, [r7, #22]
 80137c0:	3330      	adds	r3, #48	; 0x30
 80137c2:	b2da      	uxtb	r2, r3
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	3301      	adds	r3, #1
 80137cc:	223a      	movs	r2, #58	; 0x3a
 80137ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	3302      	adds	r3, #2
 80137d4:	222f      	movs	r2, #47	; 0x2f
 80137d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	3303      	adds	r3, #3
 80137dc:	2200      	movs	r2, #0
 80137de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80137e0:	2300      	movs	r3, #0
 80137e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80137e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	371c      	adds	r7, #28
 80137ea:	46bd      	mov	sp, r7
 80137ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f0:	4770      	bx	lr
 80137f2:	bf00      	nop
 80137f4:	2001a898 	.word	0x2001a898

080137f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013802:	2200      	movs	r2, #0
 8013804:	6839      	ldr	r1, [r7, #0]
 8013806:	6878      	ldr	r0, [r7, #4]
 8013808:	f7ff ffaa 	bl	8013760 <FATFS_LinkDriverEx>
 801380c:	4603      	mov	r3, r0
}
 801380e:	4618      	mov	r0, r3
 8013810:	3708      	adds	r7, #8
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
	...

08013818 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8013818:	b480      	push	{r7}
 801381a:	b085      	sub	sp, #20
 801381c:	af00      	add	r7, sp, #0
 801381e:	4603      	mov	r3, r0
 8013820:	6039      	str	r1, [r7, #0]
 8013822:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8013824:	88fb      	ldrh	r3, [r7, #6]
 8013826:	2b7f      	cmp	r3, #127	; 0x7f
 8013828:	d802      	bhi.n	8013830 <ff_convert+0x18>
		c = chr;
 801382a:	88fb      	ldrh	r3, [r7, #6]
 801382c:	81fb      	strh	r3, [r7, #14]
 801382e:	e025      	b.n	801387c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d00b      	beq.n	801384e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013836:	88fb      	ldrh	r3, [r7, #6]
 8013838:	2bff      	cmp	r3, #255	; 0xff
 801383a:	d805      	bhi.n	8013848 <ff_convert+0x30>
 801383c:	88fb      	ldrh	r3, [r7, #6]
 801383e:	3b80      	subs	r3, #128	; 0x80
 8013840:	4a12      	ldr	r2, [pc, #72]	; (801388c <ff_convert+0x74>)
 8013842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013846:	e000      	b.n	801384a <ff_convert+0x32>
 8013848:	2300      	movs	r3, #0
 801384a:	81fb      	strh	r3, [r7, #14]
 801384c:	e016      	b.n	801387c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801384e:	2300      	movs	r3, #0
 8013850:	81fb      	strh	r3, [r7, #14]
 8013852:	e009      	b.n	8013868 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8013854:	89fb      	ldrh	r3, [r7, #14]
 8013856:	4a0d      	ldr	r2, [pc, #52]	; (801388c <ff_convert+0x74>)
 8013858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801385c:	88fa      	ldrh	r2, [r7, #6]
 801385e:	429a      	cmp	r2, r3
 8013860:	d006      	beq.n	8013870 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8013862:	89fb      	ldrh	r3, [r7, #14]
 8013864:	3301      	adds	r3, #1
 8013866:	81fb      	strh	r3, [r7, #14]
 8013868:	89fb      	ldrh	r3, [r7, #14]
 801386a:	2b7f      	cmp	r3, #127	; 0x7f
 801386c:	d9f2      	bls.n	8013854 <ff_convert+0x3c>
 801386e:	e000      	b.n	8013872 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8013870:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8013872:	89fb      	ldrh	r3, [r7, #14]
 8013874:	3380      	adds	r3, #128	; 0x80
 8013876:	b29b      	uxth	r3, r3
 8013878:	b2db      	uxtb	r3, r3
 801387a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801387c:	89fb      	ldrh	r3, [r7, #14]
}
 801387e:	4618      	mov	r0, r3
 8013880:	3714      	adds	r7, #20
 8013882:	46bd      	mov	sp, r7
 8013884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013888:	4770      	bx	lr
 801388a:	bf00      	nop
 801388c:	0804da20 	.word	0x0804da20

08013890 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8013890:	b480      	push	{r7}
 8013892:	b087      	sub	sp, #28
 8013894:	af00      	add	r7, sp, #0
 8013896:	4603      	mov	r3, r0
 8013898:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801389a:	88fb      	ldrh	r3, [r7, #6]
 801389c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80138a0:	d201      	bcs.n	80138a6 <ff_wtoupper+0x16>
 80138a2:	4b3e      	ldr	r3, [pc, #248]	; (801399c <ff_wtoupper+0x10c>)
 80138a4:	e000      	b.n	80138a8 <ff_wtoupper+0x18>
 80138a6:	4b3e      	ldr	r3, [pc, #248]	; (80139a0 <ff_wtoupper+0x110>)
 80138a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	1c9a      	adds	r2, r3, #2
 80138ae:	617a      	str	r2, [r7, #20]
 80138b0:	881b      	ldrh	r3, [r3, #0]
 80138b2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80138b4:	8a7b      	ldrh	r3, [r7, #18]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d068      	beq.n	801398c <ff_wtoupper+0xfc>
 80138ba:	88fa      	ldrh	r2, [r7, #6]
 80138bc:	8a7b      	ldrh	r3, [r7, #18]
 80138be:	429a      	cmp	r2, r3
 80138c0:	d364      	bcc.n	801398c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	1c9a      	adds	r2, r3, #2
 80138c6:	617a      	str	r2, [r7, #20]
 80138c8:	881b      	ldrh	r3, [r3, #0]
 80138ca:	823b      	strh	r3, [r7, #16]
 80138cc:	8a3b      	ldrh	r3, [r7, #16]
 80138ce:	0a1b      	lsrs	r3, r3, #8
 80138d0:	81fb      	strh	r3, [r7, #14]
 80138d2:	8a3b      	ldrh	r3, [r7, #16]
 80138d4:	b2db      	uxtb	r3, r3
 80138d6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80138d8:	88fa      	ldrh	r2, [r7, #6]
 80138da:	8a79      	ldrh	r1, [r7, #18]
 80138dc:	8a3b      	ldrh	r3, [r7, #16]
 80138de:	440b      	add	r3, r1
 80138e0:	429a      	cmp	r2, r3
 80138e2:	da49      	bge.n	8013978 <ff_wtoupper+0xe8>
			switch (cmd) {
 80138e4:	89fb      	ldrh	r3, [r7, #14]
 80138e6:	2b08      	cmp	r3, #8
 80138e8:	d84f      	bhi.n	801398a <ff_wtoupper+0xfa>
 80138ea:	a201      	add	r2, pc, #4	; (adr r2, 80138f0 <ff_wtoupper+0x60>)
 80138ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138f0:	08013915 	.word	0x08013915
 80138f4:	08013927 	.word	0x08013927
 80138f8:	0801393d 	.word	0x0801393d
 80138fc:	08013945 	.word	0x08013945
 8013900:	0801394d 	.word	0x0801394d
 8013904:	08013955 	.word	0x08013955
 8013908:	0801395d 	.word	0x0801395d
 801390c:	08013965 	.word	0x08013965
 8013910:	0801396d 	.word	0x0801396d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8013914:	88fa      	ldrh	r2, [r7, #6]
 8013916:	8a7b      	ldrh	r3, [r7, #18]
 8013918:	1ad3      	subs	r3, r2, r3
 801391a:	005b      	lsls	r3, r3, #1
 801391c:	697a      	ldr	r2, [r7, #20]
 801391e:	4413      	add	r3, r2
 8013920:	881b      	ldrh	r3, [r3, #0]
 8013922:	80fb      	strh	r3, [r7, #6]
 8013924:	e027      	b.n	8013976 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8013926:	88fa      	ldrh	r2, [r7, #6]
 8013928:	8a7b      	ldrh	r3, [r7, #18]
 801392a:	1ad3      	subs	r3, r2, r3
 801392c:	b29b      	uxth	r3, r3
 801392e:	f003 0301 	and.w	r3, r3, #1
 8013932:	b29b      	uxth	r3, r3
 8013934:	88fa      	ldrh	r2, [r7, #6]
 8013936:	1ad3      	subs	r3, r2, r3
 8013938:	80fb      	strh	r3, [r7, #6]
 801393a:	e01c      	b.n	8013976 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801393c:	88fb      	ldrh	r3, [r7, #6]
 801393e:	3b10      	subs	r3, #16
 8013940:	80fb      	strh	r3, [r7, #6]
 8013942:	e018      	b.n	8013976 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8013944:	88fb      	ldrh	r3, [r7, #6]
 8013946:	3b20      	subs	r3, #32
 8013948:	80fb      	strh	r3, [r7, #6]
 801394a:	e014      	b.n	8013976 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801394c:	88fb      	ldrh	r3, [r7, #6]
 801394e:	3b30      	subs	r3, #48	; 0x30
 8013950:	80fb      	strh	r3, [r7, #6]
 8013952:	e010      	b.n	8013976 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8013954:	88fb      	ldrh	r3, [r7, #6]
 8013956:	3b1a      	subs	r3, #26
 8013958:	80fb      	strh	r3, [r7, #6]
 801395a:	e00c      	b.n	8013976 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801395c:	88fb      	ldrh	r3, [r7, #6]
 801395e:	3308      	adds	r3, #8
 8013960:	80fb      	strh	r3, [r7, #6]
 8013962:	e008      	b.n	8013976 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8013964:	88fb      	ldrh	r3, [r7, #6]
 8013966:	3b50      	subs	r3, #80	; 0x50
 8013968:	80fb      	strh	r3, [r7, #6]
 801396a:	e004      	b.n	8013976 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801396c:	88fb      	ldrh	r3, [r7, #6]
 801396e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8013972:	80fb      	strh	r3, [r7, #6]
 8013974:	bf00      	nop
			}
			break;
 8013976:	e008      	b.n	801398a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8013978:	89fb      	ldrh	r3, [r7, #14]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d195      	bne.n	80138aa <ff_wtoupper+0x1a>
 801397e:	8a3b      	ldrh	r3, [r7, #16]
 8013980:	005b      	lsls	r3, r3, #1
 8013982:	697a      	ldr	r2, [r7, #20]
 8013984:	4413      	add	r3, r2
 8013986:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8013988:	e78f      	b.n	80138aa <ff_wtoupper+0x1a>
			break;
 801398a:	bf00      	nop
	}

	return chr;
 801398c:	88fb      	ldrh	r3, [r7, #6]
}
 801398e:	4618      	mov	r0, r3
 8013990:	371c      	adds	r7, #28
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr
 801399a:	bf00      	nop
 801399c:	0804db20 	.word	0x0804db20
 80139a0:	0804dd14 	.word	0x0804dd14

080139a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80139a4:	b480      	push	{r7}
 80139a6:	b085      	sub	sp, #20
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	4603      	mov	r3, r0
 80139ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80139ae:	2300      	movs	r3, #0
 80139b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80139b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80139b6:	2b84      	cmp	r3, #132	; 0x84
 80139b8:	d005      	beq.n	80139c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80139ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	4413      	add	r3, r2
 80139c2:	3303      	adds	r3, #3
 80139c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80139c6:	68fb      	ldr	r3, [r7, #12]
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3714      	adds	r7, #20
 80139cc:	46bd      	mov	sp, r7
 80139ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d2:	4770      	bx	lr

080139d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80139d4:	b480      	push	{r7}
 80139d6:	b083      	sub	sp, #12
 80139d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80139da:	f3ef 8305 	mrs	r3, IPSR
 80139de:	607b      	str	r3, [r7, #4]
  return(result);
 80139e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	bf14      	ite	ne
 80139e6:	2301      	movne	r3, #1
 80139e8:	2300      	moveq	r3, #0
 80139ea:	b2db      	uxtb	r3, r3
}
 80139ec:	4618      	mov	r0, r3
 80139ee:	370c      	adds	r7, #12
 80139f0:	46bd      	mov	sp, r7
 80139f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f6:	4770      	bx	lr

080139f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80139fc:	f001 fa4a 	bl	8014e94 <vTaskStartScheduler>
  
  return osOK;
 8013a00:	2300      	movs	r3, #0
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	bd80      	pop	{r7, pc}

08013a06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013a06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a08:	b089      	sub	sp, #36	; 0x24
 8013a0a:	af04      	add	r7, sp, #16
 8013a0c:	6078      	str	r0, [r7, #4]
 8013a0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	695b      	ldr	r3, [r3, #20]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d020      	beq.n	8013a5a <osThreadCreate+0x54>
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	699b      	ldr	r3, [r3, #24]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d01c      	beq.n	8013a5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	685c      	ldr	r4, [r3, #4]
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	681d      	ldr	r5, [r3, #0]
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	691e      	ldr	r6, [r3, #16]
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7ff ffb6 	bl	80139a4 <makeFreeRtosPriority>
 8013a38:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	695b      	ldr	r3, [r3, #20]
 8013a3e:	687a      	ldr	r2, [r7, #4]
 8013a40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013a42:	9202      	str	r2, [sp, #8]
 8013a44:	9301      	str	r3, [sp, #4]
 8013a46:	9100      	str	r1, [sp, #0]
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	4632      	mov	r2, r6
 8013a4c:	4629      	mov	r1, r5
 8013a4e:	4620      	mov	r0, r4
 8013a50:	f000 ffaa 	bl	80149a8 <xTaskCreateStatic>
 8013a54:	4603      	mov	r3, r0
 8013a56:	60fb      	str	r3, [r7, #12]
 8013a58:	e01c      	b.n	8013a94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	685c      	ldr	r4, [r3, #4]
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013a66:	b29e      	uxth	r6, r3
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7ff ff98 	bl	80139a4 <makeFreeRtosPriority>
 8013a74:	4602      	mov	r2, r0
 8013a76:	f107 030c 	add.w	r3, r7, #12
 8013a7a:	9301      	str	r3, [sp, #4]
 8013a7c:	9200      	str	r2, [sp, #0]
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	4632      	mov	r2, r6
 8013a82:	4629      	mov	r1, r5
 8013a84:	4620      	mov	r0, r4
 8013a86:	f000 ffec 	bl	8014a62 <xTaskCreate>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	d001      	beq.n	8013a94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013a90:	2300      	movs	r3, #0
 8013a92:	e000      	b.n	8013a96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013a94:	68fb      	ldr	r3, [r7, #12]
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3714      	adds	r7, #20
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013a9e <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
 8013aa6:	460b      	mov	r3, r1
 8013aa8:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 8013aaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7ff ff78 	bl	80139a4 <makeFreeRtosPriority>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	4619      	mov	r1, r3
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f001 f93f 	bl	8014d3c <vTaskPrioritySet>
  return osOK;
 8013abe:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3708      	adds	r7, #8
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d001      	beq.n	8013ade <osDelay+0x16>
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	e000      	b.n	8013ae0 <osDelay+0x18>
 8013ade:	2301      	movs	r3, #1
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f001 f8f7 	bl	8014cd4 <vTaskDelay>
  
  return osOK;
 8013ae6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3710      	adds	r7, #16
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}

08013af0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b086      	sub	sp, #24
 8013af4:	af02      	add	r7, sp, #8
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	685b      	ldr	r3, [r3, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d016      	beq.n	8013b30 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d10a      	bne.n	8013b1e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	2203      	movs	r2, #3
 8013b0e:	9200      	str	r2, [sp, #0]
 8013b10:	2200      	movs	r2, #0
 8013b12:	2100      	movs	r1, #0
 8013b14:	2001      	movs	r0, #1
 8013b16:	f000 f9cb 	bl	8013eb0 <xQueueGenericCreateStatic>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	e023      	b.n	8013b66 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8013b1e:	6838      	ldr	r0, [r7, #0]
 8013b20:	6839      	ldr	r1, [r7, #0]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	685b      	ldr	r3, [r3, #4]
 8013b26:	461a      	mov	r2, r3
 8013b28:	f000 fa93 	bl	8014052 <xQueueCreateCountingSemaphoreStatic>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	e01a      	b.n	8013b66 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	2b01      	cmp	r3, #1
 8013b34:	d110      	bne.n	8013b58 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8013b36:	2203      	movs	r2, #3
 8013b38:	2100      	movs	r1, #0
 8013b3a:	2001      	movs	r0, #1
 8013b3c:	f000 fa30 	bl	8013fa0 <xQueueGenericCreate>
 8013b40:	60f8      	str	r0, [r7, #12]
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d005      	beq.n	8013b54 <osSemaphoreCreate+0x64>
 8013b48:	2300      	movs	r3, #0
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	2100      	movs	r1, #0
 8013b4e:	68f8      	ldr	r0, [r7, #12]
 8013b50:	f000 faea 	bl	8014128 <xQueueGenericSend>
      return sema;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	e006      	b.n	8013b66 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	683a      	ldr	r2, [r7, #0]
 8013b5c:	4611      	mov	r1, r2
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f000 faae 	bl	80140c0 <xQueueCreateCountingSemaphore>
 8013b64:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8013b66:	4618      	mov	r0, r3
 8013b68:	3710      	adds	r7, #16
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}
	...

08013b70 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b084      	sub	sp, #16
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d101      	bne.n	8013b88 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8013b84:	2380      	movs	r3, #128	; 0x80
 8013b86:	e03a      	b.n	8013bfe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8013b88:	2300      	movs	r3, #0
 8013b8a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b92:	d103      	bne.n	8013b9c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8013b94:	f04f 33ff 	mov.w	r3, #4294967295
 8013b98:	60fb      	str	r3, [r7, #12]
 8013b9a:	e009      	b.n	8013bb0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d006      	beq.n	8013bb0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8013ba2:	683b      	ldr	r3, [r7, #0]
 8013ba4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d101      	bne.n	8013bb0 <osSemaphoreWait+0x40>
      ticks = 1;
 8013bac:	2301      	movs	r3, #1
 8013bae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8013bb0:	f7ff ff10 	bl	80139d4 <inHandlerMode>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d017      	beq.n	8013bea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013bba:	f107 0308 	add.w	r3, r7, #8
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	2100      	movs	r1, #0
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f000 fd48 	bl	8014658 <xQueueReceiveFromISR>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	2b01      	cmp	r3, #1
 8013bcc:	d001      	beq.n	8013bd2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8013bce:	23ff      	movs	r3, #255	; 0xff
 8013bd0:	e015      	b.n	8013bfe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d011      	beq.n	8013bfc <osSemaphoreWait+0x8c>
 8013bd8:	4b0b      	ldr	r3, [pc, #44]	; (8013c08 <osSemaphoreWait+0x98>)
 8013bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bde:	601a      	str	r2, [r3, #0]
 8013be0:	f3bf 8f4f 	dsb	sy
 8013be4:	f3bf 8f6f 	isb	sy
 8013be8:	e008      	b.n	8013bfc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8013bea:	68f9      	ldr	r1, [r7, #12]
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f000 fc27 	bl	8014440 <xQueueSemaphoreTake>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	2b01      	cmp	r3, #1
 8013bf6:	d001      	beq.n	8013bfc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8013bf8:	23ff      	movs	r3, #255	; 0xff
 8013bfa:	e000      	b.n	8013bfe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8013bfc:	2300      	movs	r3, #0
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3710      	adds	r7, #16
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
 8013c06:	bf00      	nop
 8013c08:	e000ed04 	.word	0xe000ed04

08013c0c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8013c14:	2300      	movs	r3, #0
 8013c16:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8013c1c:	f7ff feda 	bl	80139d4 <inHandlerMode>
 8013c20:	4603      	mov	r3, r0
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d016      	beq.n	8013c54 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013c26:	f107 0308 	add.w	r3, r7, #8
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f000 fb79 	bl	8014324 <xQueueGiveFromISR>
 8013c32:	4603      	mov	r3, r0
 8013c34:	2b01      	cmp	r3, #1
 8013c36:	d001      	beq.n	8013c3c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8013c38:	23ff      	movs	r3, #255	; 0xff
 8013c3a:	e017      	b.n	8013c6c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d013      	beq.n	8013c6a <osSemaphoreRelease+0x5e>
 8013c42:	4b0c      	ldr	r3, [pc, #48]	; (8013c74 <osSemaphoreRelease+0x68>)
 8013c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c48:	601a      	str	r2, [r3, #0]
 8013c4a:	f3bf 8f4f 	dsb	sy
 8013c4e:	f3bf 8f6f 	isb	sy
 8013c52:	e00a      	b.n	8013c6a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8013c54:	2300      	movs	r3, #0
 8013c56:	2200      	movs	r2, #0
 8013c58:	2100      	movs	r1, #0
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f000 fa64 	bl	8014128 <xQueueGenericSend>
 8013c60:	4603      	mov	r3, r0
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d001      	beq.n	8013c6a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8013c66:	23ff      	movs	r3, #255	; 0xff
 8013c68:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3710      	adds	r7, #16
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	e000ed04 	.word	0xe000ed04

08013c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013c78:	b480      	push	{r7}
 8013c7a:	b083      	sub	sp, #12
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f103 0208 	add.w	r2, r3, #8
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8013c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f103 0208 	add.w	r2, r3, #8
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f103 0208 	add.w	r2, r3, #8
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013cac:	bf00      	nop
 8013cae:	370c      	adds	r7, #12
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb6:	4770      	bx	lr

08013cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013cc6:	bf00      	nop
 8013cc8:	370c      	adds	r7, #12
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd0:	4770      	bx	lr

08013cd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013cd2:	b480      	push	{r7}
 8013cd4:	b085      	sub	sp, #20
 8013cd6:	af00      	add	r7, sp, #0
 8013cd8:	6078      	str	r0, [r7, #4]
 8013cda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	685b      	ldr	r3, [r3, #4]
 8013ce0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	68fa      	ldr	r2, [r7, #12]
 8013ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	689a      	ldr	r2, [r3, #8]
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	689b      	ldr	r3, [r3, #8]
 8013cf4:	683a      	ldr	r2, [r7, #0]
 8013cf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	683a      	ldr	r2, [r7, #0]
 8013cfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013cfe:	683b      	ldr	r3, [r7, #0]
 8013d00:	687a      	ldr	r2, [r7, #4]
 8013d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	1c5a      	adds	r2, r3, #1
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	601a      	str	r2, [r3, #0]
}
 8013d0e:	bf00      	nop
 8013d10:	3714      	adds	r7, #20
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr

08013d1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013d1a:	b480      	push	{r7}
 8013d1c:	b085      	sub	sp, #20
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
 8013d22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d30:	d103      	bne.n	8013d3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	691b      	ldr	r3, [r3, #16]
 8013d36:	60fb      	str	r3, [r7, #12]
 8013d38:	e00c      	b.n	8013d54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	3308      	adds	r3, #8
 8013d3e:	60fb      	str	r3, [r7, #12]
 8013d40:	e002      	b.n	8013d48 <vListInsert+0x2e>
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	60fb      	str	r3, [r7, #12]
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	685b      	ldr	r3, [r3, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	68ba      	ldr	r2, [r7, #8]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d2f6      	bcs.n	8013d42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	685a      	ldr	r2, [r3, #4]
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	685b      	ldr	r3, [r3, #4]
 8013d60:	683a      	ldr	r2, [r7, #0]
 8013d62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	68fa      	ldr	r2, [r7, #12]
 8013d68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	683a      	ldr	r2, [r7, #0]
 8013d6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	1c5a      	adds	r2, r3, #1
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	601a      	str	r2, [r3, #0]
}
 8013d80:	bf00      	nop
 8013d82:	3714      	adds	r7, #20
 8013d84:	46bd      	mov	sp, r7
 8013d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8a:	4770      	bx	lr

08013d8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013d8c:	b480      	push	{r7}
 8013d8e:	b085      	sub	sp, #20
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	691b      	ldr	r3, [r3, #16]
 8013d98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	685b      	ldr	r3, [r3, #4]
 8013d9e:	687a      	ldr	r2, [r7, #4]
 8013da0:	6892      	ldr	r2, [r2, #8]
 8013da2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	689b      	ldr	r3, [r3, #8]
 8013da8:	687a      	ldr	r2, [r7, #4]
 8013daa:	6852      	ldr	r2, [r2, #4]
 8013dac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	685b      	ldr	r3, [r3, #4]
 8013db2:	687a      	ldr	r2, [r7, #4]
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d103      	bne.n	8013dc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	689a      	ldr	r2, [r3, #8]
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	1e5a      	subs	r2, r3, #1
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	681b      	ldr	r3, [r3, #0]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3714      	adds	r7, #20
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dde:	4770      	bx	lr

08013de0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d10a      	bne.n	8013e0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df8:	f383 8811 	msr	BASEPRI, r3
 8013dfc:	f3bf 8f6f 	isb	sy
 8013e00:	f3bf 8f4f 	dsb	sy
 8013e04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013e06:	bf00      	nop
 8013e08:	e7fe      	b.n	8013e08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013e0a:	f001 ff9b 	bl	8015d44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	681a      	ldr	r2, [r3, #0]
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e16:	68f9      	ldr	r1, [r7, #12]
 8013e18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013e1a:	fb01 f303 	mul.w	r3, r1, r3
 8013e1e:	441a      	add	r2, r3
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	2200      	movs	r2, #0
 8013e28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	681a      	ldr	r2, [r3, #0]
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	681a      	ldr	r2, [r3, #0]
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e3a:	3b01      	subs	r3, #1
 8013e3c:	68f9      	ldr	r1, [r7, #12]
 8013e3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013e40:	fb01 f303 	mul.w	r3, r1, r3
 8013e44:	441a      	add	r2, r3
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	22ff      	movs	r2, #255	; 0xff
 8013e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	22ff      	movs	r2, #255	; 0xff
 8013e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d114      	bne.n	8013e8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	691b      	ldr	r3, [r3, #16]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d01a      	beq.n	8013e9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	3310      	adds	r3, #16
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f001 fa53 	bl	8015318 <xTaskRemoveFromEventList>
 8013e72:	4603      	mov	r3, r0
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d012      	beq.n	8013e9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013e78:	4b0c      	ldr	r3, [pc, #48]	; (8013eac <xQueueGenericReset+0xcc>)
 8013e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e7e:	601a      	str	r2, [r3, #0]
 8013e80:	f3bf 8f4f 	dsb	sy
 8013e84:	f3bf 8f6f 	isb	sy
 8013e88:	e009      	b.n	8013e9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	3310      	adds	r3, #16
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7ff fef2 	bl	8013c78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	3324      	adds	r3, #36	; 0x24
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7ff feed 	bl	8013c78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013e9e:	f001 ff81 	bl	8015da4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013ea2:	2301      	movs	r3, #1
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3710      	adds	r7, #16
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	e000ed04 	.word	0xe000ed04

08013eb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b08e      	sub	sp, #56	; 0x38
 8013eb4:	af02      	add	r7, sp, #8
 8013eb6:	60f8      	str	r0, [r7, #12]
 8013eb8:	60b9      	str	r1, [r7, #8]
 8013eba:	607a      	str	r2, [r7, #4]
 8013ebc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d10a      	bne.n	8013eda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec8:	f383 8811 	msr	BASEPRI, r3
 8013ecc:	f3bf 8f6f 	isb	sy
 8013ed0:	f3bf 8f4f 	dsb	sy
 8013ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013ed6:	bf00      	nop
 8013ed8:	e7fe      	b.n	8013ed8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013eda:	683b      	ldr	r3, [r7, #0]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d10a      	bne.n	8013ef6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ee4:	f383 8811 	msr	BASEPRI, r3
 8013ee8:	f3bf 8f6f 	isb	sy
 8013eec:	f3bf 8f4f 	dsb	sy
 8013ef0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013ef2:	bf00      	nop
 8013ef4:	e7fe      	b.n	8013ef4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d002      	beq.n	8013f02 <xQueueGenericCreateStatic+0x52>
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d001      	beq.n	8013f06 <xQueueGenericCreateStatic+0x56>
 8013f02:	2301      	movs	r3, #1
 8013f04:	e000      	b.n	8013f08 <xQueueGenericCreateStatic+0x58>
 8013f06:	2300      	movs	r3, #0
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d10a      	bne.n	8013f22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f10:	f383 8811 	msr	BASEPRI, r3
 8013f14:	f3bf 8f6f 	isb	sy
 8013f18:	f3bf 8f4f 	dsb	sy
 8013f1c:	623b      	str	r3, [r7, #32]
}
 8013f1e:	bf00      	nop
 8013f20:	e7fe      	b.n	8013f20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d102      	bne.n	8013f2e <xQueueGenericCreateStatic+0x7e>
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d101      	bne.n	8013f32 <xQueueGenericCreateStatic+0x82>
 8013f2e:	2301      	movs	r3, #1
 8013f30:	e000      	b.n	8013f34 <xQueueGenericCreateStatic+0x84>
 8013f32:	2300      	movs	r3, #0
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d10a      	bne.n	8013f4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3c:	f383 8811 	msr	BASEPRI, r3
 8013f40:	f3bf 8f6f 	isb	sy
 8013f44:	f3bf 8f4f 	dsb	sy
 8013f48:	61fb      	str	r3, [r7, #28]
}
 8013f4a:	bf00      	nop
 8013f4c:	e7fe      	b.n	8013f4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013f4e:	2348      	movs	r3, #72	; 0x48
 8013f50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	2b48      	cmp	r3, #72	; 0x48
 8013f56:	d00a      	beq.n	8013f6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f5c:	f383 8811 	msr	BASEPRI, r3
 8013f60:	f3bf 8f6f 	isb	sy
 8013f64:	f3bf 8f4f 	dsb	sy
 8013f68:	61bb      	str	r3, [r7, #24]
}
 8013f6a:	bf00      	nop
 8013f6c:	e7fe      	b.n	8013f6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013f6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d00d      	beq.n	8013f96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013f82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f88:	9300      	str	r3, [sp, #0]
 8013f8a:	4613      	mov	r3, r2
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	68b9      	ldr	r1, [r7, #8]
 8013f90:	68f8      	ldr	r0, [r7, #12]
 8013f92:	f000 f83f 	bl	8014014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3730      	adds	r7, #48	; 0x30
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b08a      	sub	sp, #40	; 0x28
 8013fa4:	af02      	add	r7, sp, #8
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	4613      	mov	r3, r2
 8013fac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d10a      	bne.n	8013fca <xQueueGenericCreate+0x2a>
	__asm volatile
 8013fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb8:	f383 8811 	msr	BASEPRI, r3
 8013fbc:	f3bf 8f6f 	isb	sy
 8013fc0:	f3bf 8f4f 	dsb	sy
 8013fc4:	613b      	str	r3, [r7, #16]
}
 8013fc6:	bf00      	nop
 8013fc8:	e7fe      	b.n	8013fc8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	68ba      	ldr	r2, [r7, #8]
 8013fce:	fb02 f303 	mul.w	r3, r2, r3
 8013fd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013fd4:	69fb      	ldr	r3, [r7, #28]
 8013fd6:	3348      	adds	r3, #72	; 0x48
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f001 ffd5 	bl	8015f88 <pvPortMalloc>
 8013fde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d011      	beq.n	801400a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013fe6:	69bb      	ldr	r3, [r7, #24]
 8013fe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	3348      	adds	r3, #72	; 0x48
 8013fee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013ff0:	69bb      	ldr	r3, [r7, #24]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013ff8:	79fa      	ldrb	r2, [r7, #7]
 8013ffa:	69bb      	ldr	r3, [r7, #24]
 8013ffc:	9300      	str	r3, [sp, #0]
 8013ffe:	4613      	mov	r3, r2
 8014000:	697a      	ldr	r2, [r7, #20]
 8014002:	68b9      	ldr	r1, [r7, #8]
 8014004:	68f8      	ldr	r0, [r7, #12]
 8014006:	f000 f805 	bl	8014014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801400a:	69bb      	ldr	r3, [r7, #24]
	}
 801400c:	4618      	mov	r0, r3
 801400e:	3720      	adds	r7, #32
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}

08014014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b084      	sub	sp, #16
 8014018:	af00      	add	r7, sp, #0
 801401a:	60f8      	str	r0, [r7, #12]
 801401c:	60b9      	str	r1, [r7, #8]
 801401e:	607a      	str	r2, [r7, #4]
 8014020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d103      	bne.n	8014030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	69ba      	ldr	r2, [r7, #24]
 801402c:	601a      	str	r2, [r3, #0]
 801402e:	e002      	b.n	8014036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014030:	69bb      	ldr	r3, [r7, #24]
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014036:	69bb      	ldr	r3, [r7, #24]
 8014038:	68fa      	ldr	r2, [r7, #12]
 801403a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801403c:	69bb      	ldr	r3, [r7, #24]
 801403e:	68ba      	ldr	r2, [r7, #8]
 8014040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014042:	2101      	movs	r1, #1
 8014044:	69b8      	ldr	r0, [r7, #24]
 8014046:	f7ff fecb 	bl	8013de0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801404a:	bf00      	nop
 801404c:	3710      	adds	r7, #16
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}

08014052 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8014052:	b580      	push	{r7, lr}
 8014054:	b08a      	sub	sp, #40	; 0x28
 8014056:	af02      	add	r7, sp, #8
 8014058:	60f8      	str	r0, [r7, #12]
 801405a:	60b9      	str	r1, [r7, #8]
 801405c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d10a      	bne.n	801407a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8014064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014068:	f383 8811 	msr	BASEPRI, r3
 801406c:	f3bf 8f6f 	isb	sy
 8014070:	f3bf 8f4f 	dsb	sy
 8014074:	61bb      	str	r3, [r7, #24]
}
 8014076:	bf00      	nop
 8014078:	e7fe      	b.n	8014078 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801407a:	68ba      	ldr	r2, [r7, #8]
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	429a      	cmp	r2, r3
 8014080:	d90a      	bls.n	8014098 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8014082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014086:	f383 8811 	msr	BASEPRI, r3
 801408a:	f3bf 8f6f 	isb	sy
 801408e:	f3bf 8f4f 	dsb	sy
 8014092:	617b      	str	r3, [r7, #20]
}
 8014094:	bf00      	nop
 8014096:	e7fe      	b.n	8014096 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014098:	2302      	movs	r3, #2
 801409a:	9300      	str	r3, [sp, #0]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2200      	movs	r2, #0
 80140a0:	2100      	movs	r1, #0
 80140a2:	68f8      	ldr	r0, [r7, #12]
 80140a4:	f7ff ff04 	bl	8013eb0 <xQueueGenericCreateStatic>
 80140a8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80140aa:	69fb      	ldr	r3, [r7, #28]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d002      	beq.n	80140b6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80140b0:	69fb      	ldr	r3, [r7, #28]
 80140b2:	68ba      	ldr	r2, [r7, #8]
 80140b4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80140b6:	69fb      	ldr	r3, [r7, #28]
	}
 80140b8:	4618      	mov	r0, r3
 80140ba:	3720      	adds	r7, #32
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}

080140c0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b086      	sub	sp, #24
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d10a      	bne.n	80140e6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80140d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d4:	f383 8811 	msr	BASEPRI, r3
 80140d8:	f3bf 8f6f 	isb	sy
 80140dc:	f3bf 8f4f 	dsb	sy
 80140e0:	613b      	str	r3, [r7, #16]
}
 80140e2:	bf00      	nop
 80140e4:	e7fe      	b.n	80140e4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80140e6:	683a      	ldr	r2, [r7, #0]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	429a      	cmp	r2, r3
 80140ec:	d90a      	bls.n	8014104 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80140ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140f2:	f383 8811 	msr	BASEPRI, r3
 80140f6:	f3bf 8f6f 	isb	sy
 80140fa:	f3bf 8f4f 	dsb	sy
 80140fe:	60fb      	str	r3, [r7, #12]
}
 8014100:	bf00      	nop
 8014102:	e7fe      	b.n	8014102 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014104:	2202      	movs	r2, #2
 8014106:	2100      	movs	r1, #0
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f7ff ff49 	bl	8013fa0 <xQueueGenericCreate>
 801410e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8014110:	697b      	ldr	r3, [r7, #20]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d002      	beq.n	801411c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	683a      	ldr	r2, [r7, #0]
 801411a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801411c:	697b      	ldr	r3, [r7, #20]
	}
 801411e:	4618      	mov	r0, r3
 8014120:	3718      	adds	r7, #24
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}
	...

08014128 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b08e      	sub	sp, #56	; 0x38
 801412c:	af00      	add	r7, sp, #0
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	607a      	str	r2, [r7, #4]
 8014134:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014136:	2300      	movs	r3, #0
 8014138:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014140:	2b00      	cmp	r3, #0
 8014142:	d10a      	bne.n	801415a <xQueueGenericSend+0x32>
	__asm volatile
 8014144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014148:	f383 8811 	msr	BASEPRI, r3
 801414c:	f3bf 8f6f 	isb	sy
 8014150:	f3bf 8f4f 	dsb	sy
 8014154:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014156:	bf00      	nop
 8014158:	e7fe      	b.n	8014158 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d103      	bne.n	8014168 <xQueueGenericSend+0x40>
 8014160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014164:	2b00      	cmp	r3, #0
 8014166:	d101      	bne.n	801416c <xQueueGenericSend+0x44>
 8014168:	2301      	movs	r3, #1
 801416a:	e000      	b.n	801416e <xQueueGenericSend+0x46>
 801416c:	2300      	movs	r3, #0
 801416e:	2b00      	cmp	r3, #0
 8014170:	d10a      	bne.n	8014188 <xQueueGenericSend+0x60>
	__asm volatile
 8014172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014176:	f383 8811 	msr	BASEPRI, r3
 801417a:	f3bf 8f6f 	isb	sy
 801417e:	f3bf 8f4f 	dsb	sy
 8014182:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014184:	bf00      	nop
 8014186:	e7fe      	b.n	8014186 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	2b02      	cmp	r3, #2
 801418c:	d103      	bne.n	8014196 <xQueueGenericSend+0x6e>
 801418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014192:	2b01      	cmp	r3, #1
 8014194:	d101      	bne.n	801419a <xQueueGenericSend+0x72>
 8014196:	2301      	movs	r3, #1
 8014198:	e000      	b.n	801419c <xQueueGenericSend+0x74>
 801419a:	2300      	movs	r3, #0
 801419c:	2b00      	cmp	r3, #0
 801419e:	d10a      	bne.n	80141b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80141a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a4:	f383 8811 	msr	BASEPRI, r3
 80141a8:	f3bf 8f6f 	isb	sy
 80141ac:	f3bf 8f4f 	dsb	sy
 80141b0:	623b      	str	r3, [r7, #32]
}
 80141b2:	bf00      	nop
 80141b4:	e7fe      	b.n	80141b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80141b6:	f001 fa6b 	bl	8015690 <xTaskGetSchedulerState>
 80141ba:	4603      	mov	r3, r0
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d102      	bne.n	80141c6 <xQueueGenericSend+0x9e>
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d101      	bne.n	80141ca <xQueueGenericSend+0xa2>
 80141c6:	2301      	movs	r3, #1
 80141c8:	e000      	b.n	80141cc <xQueueGenericSend+0xa4>
 80141ca:	2300      	movs	r3, #0
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d10a      	bne.n	80141e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80141d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141d4:	f383 8811 	msr	BASEPRI, r3
 80141d8:	f3bf 8f6f 	isb	sy
 80141dc:	f3bf 8f4f 	dsb	sy
 80141e0:	61fb      	str	r3, [r7, #28]
}
 80141e2:	bf00      	nop
 80141e4:	e7fe      	b.n	80141e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80141e6:	f001 fdad 	bl	8015d44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80141ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80141ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141f2:	429a      	cmp	r2, r3
 80141f4:	d302      	bcc.n	80141fc <xQueueGenericSend+0xd4>
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	2b02      	cmp	r3, #2
 80141fa:	d129      	bne.n	8014250 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80141fc:	683a      	ldr	r2, [r7, #0]
 80141fe:	68b9      	ldr	r1, [r7, #8]
 8014200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014202:	f000 fac1 	bl	8014788 <prvCopyDataToQueue>
 8014206:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801420c:	2b00      	cmp	r3, #0
 801420e:	d010      	beq.n	8014232 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014212:	3324      	adds	r3, #36	; 0x24
 8014214:	4618      	mov	r0, r3
 8014216:	f001 f87f 	bl	8015318 <xTaskRemoveFromEventList>
 801421a:	4603      	mov	r3, r0
 801421c:	2b00      	cmp	r3, #0
 801421e:	d013      	beq.n	8014248 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014220:	4b3f      	ldr	r3, [pc, #252]	; (8014320 <xQueueGenericSend+0x1f8>)
 8014222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014226:	601a      	str	r2, [r3, #0]
 8014228:	f3bf 8f4f 	dsb	sy
 801422c:	f3bf 8f6f 	isb	sy
 8014230:	e00a      	b.n	8014248 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014234:	2b00      	cmp	r3, #0
 8014236:	d007      	beq.n	8014248 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014238:	4b39      	ldr	r3, [pc, #228]	; (8014320 <xQueueGenericSend+0x1f8>)
 801423a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801423e:	601a      	str	r2, [r3, #0]
 8014240:	f3bf 8f4f 	dsb	sy
 8014244:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014248:	f001 fdac 	bl	8015da4 <vPortExitCritical>
				return pdPASS;
 801424c:	2301      	movs	r3, #1
 801424e:	e063      	b.n	8014318 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d103      	bne.n	801425e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014256:	f001 fda5 	bl	8015da4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801425a:	2300      	movs	r3, #0
 801425c:	e05c      	b.n	8014318 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014260:	2b00      	cmp	r3, #0
 8014262:	d106      	bne.n	8014272 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014264:	f107 0314 	add.w	r3, r7, #20
 8014268:	4618      	mov	r0, r3
 801426a:	f001 f8b7 	bl	80153dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801426e:	2301      	movs	r3, #1
 8014270:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014272:	f001 fd97 	bl	8015da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014276:	f000 fe6d 	bl	8014f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801427a:	f001 fd63 	bl	8015d44 <vPortEnterCritical>
 801427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014284:	b25b      	sxtb	r3, r3
 8014286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801428a:	d103      	bne.n	8014294 <xQueueGenericSend+0x16c>
 801428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801428e:	2200      	movs	r2, #0
 8014290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801429a:	b25b      	sxtb	r3, r3
 801429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142a0:	d103      	bne.n	80142aa <xQueueGenericSend+0x182>
 80142a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a4:	2200      	movs	r2, #0
 80142a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80142aa:	f001 fd7b 	bl	8015da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80142ae:	1d3a      	adds	r2, r7, #4
 80142b0:	f107 0314 	add.w	r3, r7, #20
 80142b4:	4611      	mov	r1, r2
 80142b6:	4618      	mov	r0, r3
 80142b8:	f001 f8a6 	bl	8015408 <xTaskCheckForTimeOut>
 80142bc:	4603      	mov	r3, r0
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d124      	bne.n	801430c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80142c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142c4:	f000 fb58 	bl	8014978 <prvIsQueueFull>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d018      	beq.n	8014300 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80142ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d0:	3310      	adds	r3, #16
 80142d2:	687a      	ldr	r2, [r7, #4]
 80142d4:	4611      	mov	r1, r2
 80142d6:	4618      	mov	r0, r3
 80142d8:	f000 fffa 	bl	80152d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80142dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142de:	f000 fae3 	bl	80148a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80142e2:	f000 fe45 	bl	8014f70 <xTaskResumeAll>
 80142e6:	4603      	mov	r3, r0
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	f47f af7c 	bne.w	80141e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80142ee:	4b0c      	ldr	r3, [pc, #48]	; (8014320 <xQueueGenericSend+0x1f8>)
 80142f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142f4:	601a      	str	r2, [r3, #0]
 80142f6:	f3bf 8f4f 	dsb	sy
 80142fa:	f3bf 8f6f 	isb	sy
 80142fe:	e772      	b.n	80141e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014302:	f000 fad1 	bl	80148a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014306:	f000 fe33 	bl	8014f70 <xTaskResumeAll>
 801430a:	e76c      	b.n	80141e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801430c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801430e:	f000 facb 	bl	80148a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014312:	f000 fe2d 	bl	8014f70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014316:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014318:	4618      	mov	r0, r3
 801431a:	3738      	adds	r7, #56	; 0x38
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}
 8014320:	e000ed04 	.word	0xe000ed04

08014324 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b08e      	sub	sp, #56	; 0x38
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
 801432c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014334:	2b00      	cmp	r3, #0
 8014336:	d10a      	bne.n	801434e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8014338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801433c:	f383 8811 	msr	BASEPRI, r3
 8014340:	f3bf 8f6f 	isb	sy
 8014344:	f3bf 8f4f 	dsb	sy
 8014348:	623b      	str	r3, [r7, #32]
}
 801434a:	bf00      	nop
 801434c:	e7fe      	b.n	801434c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014352:	2b00      	cmp	r3, #0
 8014354:	d00a      	beq.n	801436c <xQueueGiveFromISR+0x48>
	__asm volatile
 8014356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801435a:	f383 8811 	msr	BASEPRI, r3
 801435e:	f3bf 8f6f 	isb	sy
 8014362:	f3bf 8f4f 	dsb	sy
 8014366:	61fb      	str	r3, [r7, #28]
}
 8014368:	bf00      	nop
 801436a:	e7fe      	b.n	801436a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d103      	bne.n	801437c <xQueueGiveFromISR+0x58>
 8014374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014376:	689b      	ldr	r3, [r3, #8]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d101      	bne.n	8014380 <xQueueGiveFromISR+0x5c>
 801437c:	2301      	movs	r3, #1
 801437e:	e000      	b.n	8014382 <xQueueGiveFromISR+0x5e>
 8014380:	2300      	movs	r3, #0
 8014382:	2b00      	cmp	r3, #0
 8014384:	d10a      	bne.n	801439c <xQueueGiveFromISR+0x78>
	__asm volatile
 8014386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801438a:	f383 8811 	msr	BASEPRI, r3
 801438e:	f3bf 8f6f 	isb	sy
 8014392:	f3bf 8f4f 	dsb	sy
 8014396:	61bb      	str	r3, [r7, #24]
}
 8014398:	bf00      	nop
 801439a:	e7fe      	b.n	801439a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801439c:	f001 fdb4 	bl	8015f08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80143a0:	f3ef 8211 	mrs	r2, BASEPRI
 80143a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143a8:	f383 8811 	msr	BASEPRI, r3
 80143ac:	f3bf 8f6f 	isb	sy
 80143b0:	f3bf 8f4f 	dsb	sy
 80143b4:	617a      	str	r2, [r7, #20]
 80143b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80143b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80143ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80143bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80143c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d22b      	bcs.n	8014424 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80143cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80143d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80143d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d8:	1c5a      	adds	r2, r3, #1
 80143da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80143de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80143e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143e6:	d112      	bne.n	801440e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80143e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d016      	beq.n	801441e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80143f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f2:	3324      	adds	r3, #36	; 0x24
 80143f4:	4618      	mov	r0, r3
 80143f6:	f000 ff8f 	bl	8015318 <xTaskRemoveFromEventList>
 80143fa:	4603      	mov	r3, r0
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d00e      	beq.n	801441e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d00b      	beq.n	801441e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	2201      	movs	r2, #1
 801440a:	601a      	str	r2, [r3, #0]
 801440c:	e007      	b.n	801441e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801440e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014412:	3301      	adds	r3, #1
 8014414:	b2db      	uxtb	r3, r3
 8014416:	b25a      	sxtb	r2, r3
 8014418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801441a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801441e:	2301      	movs	r3, #1
 8014420:	637b      	str	r3, [r7, #52]	; 0x34
 8014422:	e001      	b.n	8014428 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014424:	2300      	movs	r3, #0
 8014426:	637b      	str	r3, [r7, #52]	; 0x34
 8014428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801442a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014432:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014436:	4618      	mov	r0, r3
 8014438:	3738      	adds	r7, #56	; 0x38
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
	...

08014440 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b08e      	sub	sp, #56	; 0x38
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801444a:	2300      	movs	r3, #0
 801444c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014452:	2300      	movs	r3, #0
 8014454:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014458:	2b00      	cmp	r3, #0
 801445a:	d10a      	bne.n	8014472 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014460:	f383 8811 	msr	BASEPRI, r3
 8014464:	f3bf 8f6f 	isb	sy
 8014468:	f3bf 8f4f 	dsb	sy
 801446c:	623b      	str	r3, [r7, #32]
}
 801446e:	bf00      	nop
 8014470:	e7fe      	b.n	8014470 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014476:	2b00      	cmp	r3, #0
 8014478:	d00a      	beq.n	8014490 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801447e:	f383 8811 	msr	BASEPRI, r3
 8014482:	f3bf 8f6f 	isb	sy
 8014486:	f3bf 8f4f 	dsb	sy
 801448a:	61fb      	str	r3, [r7, #28]
}
 801448c:	bf00      	nop
 801448e:	e7fe      	b.n	801448e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014490:	f001 f8fe 	bl	8015690 <xTaskGetSchedulerState>
 8014494:	4603      	mov	r3, r0
 8014496:	2b00      	cmp	r3, #0
 8014498:	d102      	bne.n	80144a0 <xQueueSemaphoreTake+0x60>
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d101      	bne.n	80144a4 <xQueueSemaphoreTake+0x64>
 80144a0:	2301      	movs	r3, #1
 80144a2:	e000      	b.n	80144a6 <xQueueSemaphoreTake+0x66>
 80144a4:	2300      	movs	r3, #0
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d10a      	bne.n	80144c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80144aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ae:	f383 8811 	msr	BASEPRI, r3
 80144b2:	f3bf 8f6f 	isb	sy
 80144b6:	f3bf 8f4f 	dsb	sy
 80144ba:	61bb      	str	r3, [r7, #24]
}
 80144bc:	bf00      	nop
 80144be:	e7fe      	b.n	80144be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80144c0:	f001 fc40 	bl	8015d44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80144c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80144ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d024      	beq.n	801451a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80144d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144d2:	1e5a      	subs	r2, r3, #1
 80144d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80144d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d104      	bne.n	80144ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80144e0:	f001 fa88 	bl	80159f4 <pvTaskIncrementMutexHeldCount>
 80144e4:	4602      	mov	r2, r0
 80144e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80144ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ec:	691b      	ldr	r3, [r3, #16]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d00f      	beq.n	8014512 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80144f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144f4:	3310      	adds	r3, #16
 80144f6:	4618      	mov	r0, r3
 80144f8:	f000 ff0e 	bl	8015318 <xTaskRemoveFromEventList>
 80144fc:	4603      	mov	r3, r0
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d007      	beq.n	8014512 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014502:	4b54      	ldr	r3, [pc, #336]	; (8014654 <xQueueSemaphoreTake+0x214>)
 8014504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014508:	601a      	str	r2, [r3, #0]
 801450a:	f3bf 8f4f 	dsb	sy
 801450e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014512:	f001 fc47 	bl	8015da4 <vPortExitCritical>
				return pdPASS;
 8014516:	2301      	movs	r3, #1
 8014518:	e097      	b.n	801464a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d111      	bne.n	8014544 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014522:	2b00      	cmp	r3, #0
 8014524:	d00a      	beq.n	801453c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8014526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801452a:	f383 8811 	msr	BASEPRI, r3
 801452e:	f3bf 8f6f 	isb	sy
 8014532:	f3bf 8f4f 	dsb	sy
 8014536:	617b      	str	r3, [r7, #20]
}
 8014538:	bf00      	nop
 801453a:	e7fe      	b.n	801453a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801453c:	f001 fc32 	bl	8015da4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014540:	2300      	movs	r3, #0
 8014542:	e082      	b.n	801464a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014546:	2b00      	cmp	r3, #0
 8014548:	d106      	bne.n	8014558 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801454a:	f107 030c 	add.w	r3, r7, #12
 801454e:	4618      	mov	r0, r3
 8014550:	f000 ff44 	bl	80153dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014554:	2301      	movs	r3, #1
 8014556:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014558:	f001 fc24 	bl	8015da4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801455c:	f000 fcfa 	bl	8014f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014560:	f001 fbf0 	bl	8015d44 <vPortEnterCritical>
 8014564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014566:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801456a:	b25b      	sxtb	r3, r3
 801456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014570:	d103      	bne.n	801457a <xQueueSemaphoreTake+0x13a>
 8014572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014574:	2200      	movs	r2, #0
 8014576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801457c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014580:	b25b      	sxtb	r3, r3
 8014582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014586:	d103      	bne.n	8014590 <xQueueSemaphoreTake+0x150>
 8014588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801458a:	2200      	movs	r2, #0
 801458c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014590:	f001 fc08 	bl	8015da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014594:	463a      	mov	r2, r7
 8014596:	f107 030c 	add.w	r3, r7, #12
 801459a:	4611      	mov	r1, r2
 801459c:	4618      	mov	r0, r3
 801459e:	f000 ff33 	bl	8015408 <xTaskCheckForTimeOut>
 80145a2:	4603      	mov	r3, r0
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d132      	bne.n	801460e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145aa:	f000 f9cf 	bl	801494c <prvIsQueueEmpty>
 80145ae:	4603      	mov	r3, r0
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d026      	beq.n	8014602 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80145b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d109      	bne.n	80145d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80145bc:	f001 fbc2 	bl	8015d44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80145c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145c2:	689b      	ldr	r3, [r3, #8]
 80145c4:	4618      	mov	r0, r3
 80145c6:	f001 f881 	bl	80156cc <xTaskPriorityInherit>
 80145ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80145cc:	f001 fbea 	bl	8015da4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80145d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d2:	3324      	adds	r3, #36	; 0x24
 80145d4:	683a      	ldr	r2, [r7, #0]
 80145d6:	4611      	mov	r1, r2
 80145d8:	4618      	mov	r0, r3
 80145da:	f000 fe79 	bl	80152d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80145de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145e0:	f000 f962 	bl	80148a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80145e4:	f000 fcc4 	bl	8014f70 <xTaskResumeAll>
 80145e8:	4603      	mov	r3, r0
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	f47f af68 	bne.w	80144c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80145f0:	4b18      	ldr	r3, [pc, #96]	; (8014654 <xQueueSemaphoreTake+0x214>)
 80145f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145f6:	601a      	str	r2, [r3, #0]
 80145f8:	f3bf 8f4f 	dsb	sy
 80145fc:	f3bf 8f6f 	isb	sy
 8014600:	e75e      	b.n	80144c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014604:	f000 f950 	bl	80148a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014608:	f000 fcb2 	bl	8014f70 <xTaskResumeAll>
 801460c:	e758      	b.n	80144c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801460e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014610:	f000 f94a 	bl	80148a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014614:	f000 fcac 	bl	8014f70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801461a:	f000 f997 	bl	801494c <prvIsQueueEmpty>
 801461e:	4603      	mov	r3, r0
 8014620:	2b00      	cmp	r3, #0
 8014622:	f43f af4d 	beq.w	80144c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014628:	2b00      	cmp	r3, #0
 801462a:	d00d      	beq.n	8014648 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801462c:	f001 fb8a 	bl	8015d44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014632:	f000 f891 	bl	8014758 <prvGetDisinheritPriorityAfterTimeout>
 8014636:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801463a:	689b      	ldr	r3, [r3, #8]
 801463c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801463e:	4618      	mov	r0, r3
 8014640:	f001 f946 	bl	80158d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014644:	f001 fbae 	bl	8015da4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014648:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801464a:	4618      	mov	r0, r3
 801464c:	3738      	adds	r7, #56	; 0x38
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}
 8014652:	bf00      	nop
 8014654:	e000ed04 	.word	0xe000ed04

08014658 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b08e      	sub	sp, #56	; 0x38
 801465c:	af00      	add	r7, sp, #0
 801465e:	60f8      	str	r0, [r7, #12]
 8014660:	60b9      	str	r1, [r7, #8]
 8014662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801466a:	2b00      	cmp	r3, #0
 801466c:	d10a      	bne.n	8014684 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014672:	f383 8811 	msr	BASEPRI, r3
 8014676:	f3bf 8f6f 	isb	sy
 801467a:	f3bf 8f4f 	dsb	sy
 801467e:	623b      	str	r3, [r7, #32]
}
 8014680:	bf00      	nop
 8014682:	e7fe      	b.n	8014682 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d103      	bne.n	8014692 <xQueueReceiveFromISR+0x3a>
 801468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801468e:	2b00      	cmp	r3, #0
 8014690:	d101      	bne.n	8014696 <xQueueReceiveFromISR+0x3e>
 8014692:	2301      	movs	r3, #1
 8014694:	e000      	b.n	8014698 <xQueueReceiveFromISR+0x40>
 8014696:	2300      	movs	r3, #0
 8014698:	2b00      	cmp	r3, #0
 801469a:	d10a      	bne.n	80146b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a0:	f383 8811 	msr	BASEPRI, r3
 80146a4:	f3bf 8f6f 	isb	sy
 80146a8:	f3bf 8f4f 	dsb	sy
 80146ac:	61fb      	str	r3, [r7, #28]
}
 80146ae:	bf00      	nop
 80146b0:	e7fe      	b.n	80146b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80146b2:	f001 fc29 	bl	8015f08 <vPortValidateInterruptPriority>
	__asm volatile
 80146b6:	f3ef 8211 	mrs	r2, BASEPRI
 80146ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146be:	f383 8811 	msr	BASEPRI, r3
 80146c2:	f3bf 8f6f 	isb	sy
 80146c6:	f3bf 8f4f 	dsb	sy
 80146ca:	61ba      	str	r2, [r7, #24]
 80146cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80146ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80146d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80146d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80146d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d02f      	beq.n	801473e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80146de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80146e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80146e8:	68b9      	ldr	r1, [r7, #8]
 80146ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146ec:	f000 f8b6 	bl	801485c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80146f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f2:	1e5a      	subs	r2, r3, #1
 80146f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80146f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80146fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014700:	d112      	bne.n	8014728 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014704:	691b      	ldr	r3, [r3, #16]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d016      	beq.n	8014738 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801470c:	3310      	adds	r3, #16
 801470e:	4618      	mov	r0, r3
 8014710:	f000 fe02 	bl	8015318 <xTaskRemoveFromEventList>
 8014714:	4603      	mov	r3, r0
 8014716:	2b00      	cmp	r3, #0
 8014718:	d00e      	beq.n	8014738 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d00b      	beq.n	8014738 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2201      	movs	r2, #1
 8014724:	601a      	str	r2, [r3, #0]
 8014726:	e007      	b.n	8014738 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801472c:	3301      	adds	r3, #1
 801472e:	b2db      	uxtb	r3, r3
 8014730:	b25a      	sxtb	r2, r3
 8014732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014738:	2301      	movs	r3, #1
 801473a:	637b      	str	r3, [r7, #52]	; 0x34
 801473c:	e001      	b.n	8014742 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801473e:	2300      	movs	r3, #0
 8014740:	637b      	str	r3, [r7, #52]	; 0x34
 8014742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014744:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	f383 8811 	msr	BASEPRI, r3
}
 801474c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801474e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014750:	4618      	mov	r0, r3
 8014752:	3738      	adds	r7, #56	; 0x38
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}

08014758 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014758:	b480      	push	{r7}
 801475a:	b085      	sub	sp, #20
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014764:	2b00      	cmp	r3, #0
 8014766:	d006      	beq.n	8014776 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	f1c3 0307 	rsb	r3, r3, #7
 8014772:	60fb      	str	r3, [r7, #12]
 8014774:	e001      	b.n	801477a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014776:	2300      	movs	r3, #0
 8014778:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801477a:	68fb      	ldr	r3, [r7, #12]
	}
 801477c:	4618      	mov	r0, r3
 801477e:	3714      	adds	r7, #20
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr

08014788 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b086      	sub	sp, #24
 801478c:	af00      	add	r7, sp, #0
 801478e:	60f8      	str	r0, [r7, #12]
 8014790:	60b9      	str	r1, [r7, #8]
 8014792:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014794:	2300      	movs	r3, #0
 8014796:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801479c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d10d      	bne.n	80147c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d14d      	bne.n	801484a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	689b      	ldr	r3, [r3, #8]
 80147b2:	4618      	mov	r0, r3
 80147b4:	f001 f800 	bl	80157b8 <xTaskPriorityDisinherit>
 80147b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2200      	movs	r2, #0
 80147be:	609a      	str	r2, [r3, #8]
 80147c0:	e043      	b.n	801484a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d119      	bne.n	80147fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	6858      	ldr	r0, [r3, #4]
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147d0:	461a      	mov	r2, r3
 80147d2:	68b9      	ldr	r1, [r7, #8]
 80147d4:	f002 fe98 	bl	8017508 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	685a      	ldr	r2, [r3, #4]
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147e0:	441a      	add	r2, r3
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	685a      	ldr	r2, [r3, #4]
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	689b      	ldr	r3, [r3, #8]
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d32b      	bcc.n	801484a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	681a      	ldr	r2, [r3, #0]
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	605a      	str	r2, [r3, #4]
 80147fa:	e026      	b.n	801484a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	68d8      	ldr	r0, [r3, #12]
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014804:	461a      	mov	r2, r3
 8014806:	68b9      	ldr	r1, [r7, #8]
 8014808:	f002 fe7e 	bl	8017508 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	68da      	ldr	r2, [r3, #12]
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014814:	425b      	negs	r3, r3
 8014816:	441a      	add	r2, r3
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	68da      	ldr	r2, [r3, #12]
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	429a      	cmp	r2, r3
 8014826:	d207      	bcs.n	8014838 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	689a      	ldr	r2, [r3, #8]
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014830:	425b      	negs	r3, r3
 8014832:	441a      	add	r2, r3
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2b02      	cmp	r3, #2
 801483c:	d105      	bne.n	801484a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d002      	beq.n	801484a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	3b01      	subs	r3, #1
 8014848:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	1c5a      	adds	r2, r3, #1
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014852:	697b      	ldr	r3, [r7, #20]
}
 8014854:	4618      	mov	r0, r3
 8014856:	3718      	adds	r7, #24
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}

0801485c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b082      	sub	sp, #8
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801486a:	2b00      	cmp	r3, #0
 801486c:	d018      	beq.n	80148a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	68da      	ldr	r2, [r3, #12]
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014876:	441a      	add	r2, r3
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	68da      	ldr	r2, [r3, #12]
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	689b      	ldr	r3, [r3, #8]
 8014884:	429a      	cmp	r2, r3
 8014886:	d303      	bcc.n	8014890 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	681a      	ldr	r2, [r3, #0]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	68d9      	ldr	r1, [r3, #12]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014898:	461a      	mov	r2, r3
 801489a:	6838      	ldr	r0, [r7, #0]
 801489c:	f002 fe34 	bl	8017508 <memcpy>
	}
}
 80148a0:	bf00      	nop
 80148a2:	3708      	adds	r7, #8
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}

080148a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80148b0:	f001 fa48 	bl	8015d44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148bc:	e011      	b.n	80148e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d012      	beq.n	80148ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	3324      	adds	r3, #36	; 0x24
 80148ca:	4618      	mov	r0, r3
 80148cc:	f000 fd24 	bl	8015318 <xTaskRemoveFromEventList>
 80148d0:	4603      	mov	r3, r0
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d001      	beq.n	80148da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80148d6:	f000 fdf9 	bl	80154cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80148da:	7bfb      	ldrb	r3, [r7, #15]
 80148dc:	3b01      	subs	r3, #1
 80148de:	b2db      	uxtb	r3, r3
 80148e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	dce9      	bgt.n	80148be <prvUnlockQueue+0x16>
 80148ea:	e000      	b.n	80148ee <prvUnlockQueue+0x46>
					break;
 80148ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	22ff      	movs	r2, #255	; 0xff
 80148f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80148f6:	f001 fa55 	bl	8015da4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80148fa:	f001 fa23 	bl	8015d44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014904:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014906:	e011      	b.n	801492c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	691b      	ldr	r3, [r3, #16]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d012      	beq.n	8014936 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	3310      	adds	r3, #16
 8014914:	4618      	mov	r0, r3
 8014916:	f000 fcff 	bl	8015318 <xTaskRemoveFromEventList>
 801491a:	4603      	mov	r3, r0
 801491c:	2b00      	cmp	r3, #0
 801491e:	d001      	beq.n	8014924 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014920:	f000 fdd4 	bl	80154cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014924:	7bbb      	ldrb	r3, [r7, #14]
 8014926:	3b01      	subs	r3, #1
 8014928:	b2db      	uxtb	r3, r3
 801492a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801492c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014930:	2b00      	cmp	r3, #0
 8014932:	dce9      	bgt.n	8014908 <prvUnlockQueue+0x60>
 8014934:	e000      	b.n	8014938 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014936:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	22ff      	movs	r2, #255	; 0xff
 801493c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014940:	f001 fa30 	bl	8015da4 <vPortExitCritical>
}
 8014944:	bf00      	nop
 8014946:	3710      	adds	r7, #16
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b084      	sub	sp, #16
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014954:	f001 f9f6 	bl	8015d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801495c:	2b00      	cmp	r3, #0
 801495e:	d102      	bne.n	8014966 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014960:	2301      	movs	r3, #1
 8014962:	60fb      	str	r3, [r7, #12]
 8014964:	e001      	b.n	801496a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014966:	2300      	movs	r3, #0
 8014968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801496a:	f001 fa1b 	bl	8015da4 <vPortExitCritical>

	return xReturn;
 801496e:	68fb      	ldr	r3, [r7, #12]
}
 8014970:	4618      	mov	r0, r3
 8014972:	3710      	adds	r7, #16
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}

08014978 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b084      	sub	sp, #16
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014980:	f001 f9e0 	bl	8015d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801498c:	429a      	cmp	r2, r3
 801498e:	d102      	bne.n	8014996 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014990:	2301      	movs	r3, #1
 8014992:	60fb      	str	r3, [r7, #12]
 8014994:	e001      	b.n	801499a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014996:	2300      	movs	r3, #0
 8014998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801499a:	f001 fa03 	bl	8015da4 <vPortExitCritical>

	return xReturn;
 801499e:	68fb      	ldr	r3, [r7, #12]
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3710      	adds	r7, #16
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b08e      	sub	sp, #56	; 0x38
 80149ac:	af04      	add	r7, sp, #16
 80149ae:	60f8      	str	r0, [r7, #12]
 80149b0:	60b9      	str	r1, [r7, #8]
 80149b2:	607a      	str	r2, [r7, #4]
 80149b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80149b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d10a      	bne.n	80149d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80149bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149c0:	f383 8811 	msr	BASEPRI, r3
 80149c4:	f3bf 8f6f 	isb	sy
 80149c8:	f3bf 8f4f 	dsb	sy
 80149cc:	623b      	str	r3, [r7, #32]
}
 80149ce:	bf00      	nop
 80149d0:	e7fe      	b.n	80149d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80149d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d10a      	bne.n	80149ee <xTaskCreateStatic+0x46>
	__asm volatile
 80149d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149dc:	f383 8811 	msr	BASEPRI, r3
 80149e0:	f3bf 8f6f 	isb	sy
 80149e4:	f3bf 8f4f 	dsb	sy
 80149e8:	61fb      	str	r3, [r7, #28]
}
 80149ea:	bf00      	nop
 80149ec:	e7fe      	b.n	80149ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80149ee:	23a8      	movs	r3, #168	; 0xa8
 80149f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80149f2:	693b      	ldr	r3, [r7, #16]
 80149f4:	2ba8      	cmp	r3, #168	; 0xa8
 80149f6:	d00a      	beq.n	8014a0e <xTaskCreateStatic+0x66>
	__asm volatile
 80149f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149fc:	f383 8811 	msr	BASEPRI, r3
 8014a00:	f3bf 8f6f 	isb	sy
 8014a04:	f3bf 8f4f 	dsb	sy
 8014a08:	61bb      	str	r3, [r7, #24]
}
 8014a0a:	bf00      	nop
 8014a0c:	e7fe      	b.n	8014a0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014a0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d01e      	beq.n	8014a54 <xTaskCreateStatic+0xac>
 8014a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d01b      	beq.n	8014a54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a28:	2202      	movs	r2, #2
 8014a2a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014a2e:	2300      	movs	r3, #0
 8014a30:	9303      	str	r3, [sp, #12]
 8014a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a34:	9302      	str	r3, [sp, #8]
 8014a36:	f107 0314 	add.w	r3, r7, #20
 8014a3a:	9301      	str	r3, [sp, #4]
 8014a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a3e:	9300      	str	r3, [sp, #0]
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	687a      	ldr	r2, [r7, #4]
 8014a44:	68b9      	ldr	r1, [r7, #8]
 8014a46:	68f8      	ldr	r0, [r7, #12]
 8014a48:	f000 f850 	bl	8014aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a4e:	f000 f8d7 	bl	8014c00 <prvAddNewTaskToReadyList>
 8014a52:	e001      	b.n	8014a58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014a54:	2300      	movs	r3, #0
 8014a56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014a58:	697b      	ldr	r3, [r7, #20]
	}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3728      	adds	r7, #40	; 0x28
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}

08014a62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014a62:	b580      	push	{r7, lr}
 8014a64:	b08c      	sub	sp, #48	; 0x30
 8014a66:	af04      	add	r7, sp, #16
 8014a68:	60f8      	str	r0, [r7, #12]
 8014a6a:	60b9      	str	r1, [r7, #8]
 8014a6c:	603b      	str	r3, [r7, #0]
 8014a6e:	4613      	mov	r3, r2
 8014a70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014a72:	88fb      	ldrh	r3, [r7, #6]
 8014a74:	009b      	lsls	r3, r3, #2
 8014a76:	4618      	mov	r0, r3
 8014a78:	f001 fa86 	bl	8015f88 <pvPortMalloc>
 8014a7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d00e      	beq.n	8014aa2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014a84:	20a8      	movs	r0, #168	; 0xa8
 8014a86:	f001 fa7f 	bl	8015f88 <pvPortMalloc>
 8014a8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014a8c:	69fb      	ldr	r3, [r7, #28]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d003      	beq.n	8014a9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014a92:	69fb      	ldr	r3, [r7, #28]
 8014a94:	697a      	ldr	r2, [r7, #20]
 8014a96:	631a      	str	r2, [r3, #48]	; 0x30
 8014a98:	e005      	b.n	8014aa6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014a9a:	6978      	ldr	r0, [r7, #20]
 8014a9c:	f001 fb40 	bl	8016120 <vPortFree>
 8014aa0:	e001      	b.n	8014aa6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014aa6:	69fb      	ldr	r3, [r7, #28]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d017      	beq.n	8014adc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014aac:	69fb      	ldr	r3, [r7, #28]
 8014aae:	2200      	movs	r2, #0
 8014ab0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014ab4:	88fa      	ldrh	r2, [r7, #6]
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	9303      	str	r3, [sp, #12]
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	9302      	str	r3, [sp, #8]
 8014abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ac0:	9301      	str	r3, [sp, #4]
 8014ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac4:	9300      	str	r3, [sp, #0]
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	68b9      	ldr	r1, [r7, #8]
 8014aca:	68f8      	ldr	r0, [r7, #12]
 8014acc:	f000 f80e 	bl	8014aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014ad0:	69f8      	ldr	r0, [r7, #28]
 8014ad2:	f000 f895 	bl	8014c00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014ad6:	2301      	movs	r3, #1
 8014ad8:	61bb      	str	r3, [r7, #24]
 8014ada:	e002      	b.n	8014ae2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014adc:	f04f 33ff 	mov.w	r3, #4294967295
 8014ae0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	3720      	adds	r7, #32
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}

08014aec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b088      	sub	sp, #32
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
 8014af8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014b04:	3b01      	subs	r3, #1
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	4413      	add	r3, r2
 8014b0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014b0c:	69bb      	ldr	r3, [r7, #24]
 8014b0e:	f023 0307 	bic.w	r3, r3, #7
 8014b12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014b14:	69bb      	ldr	r3, [r7, #24]
 8014b16:	f003 0307 	and.w	r3, r3, #7
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d00a      	beq.n	8014b34 <prvInitialiseNewTask+0x48>
	__asm volatile
 8014b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b22:	f383 8811 	msr	BASEPRI, r3
 8014b26:	f3bf 8f6f 	isb	sy
 8014b2a:	f3bf 8f4f 	dsb	sy
 8014b2e:	617b      	str	r3, [r7, #20]
}
 8014b30:	bf00      	nop
 8014b32:	e7fe      	b.n	8014b32 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d01f      	beq.n	8014b7a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	61fb      	str	r3, [r7, #28]
 8014b3e:	e012      	b.n	8014b66 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014b40:	68ba      	ldr	r2, [r7, #8]
 8014b42:	69fb      	ldr	r3, [r7, #28]
 8014b44:	4413      	add	r3, r2
 8014b46:	7819      	ldrb	r1, [r3, #0]
 8014b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b4a:	69fb      	ldr	r3, [r7, #28]
 8014b4c:	4413      	add	r3, r2
 8014b4e:	3334      	adds	r3, #52	; 0x34
 8014b50:	460a      	mov	r2, r1
 8014b52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014b54:	68ba      	ldr	r2, [r7, #8]
 8014b56:	69fb      	ldr	r3, [r7, #28]
 8014b58:	4413      	add	r3, r2
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d006      	beq.n	8014b6e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b60:	69fb      	ldr	r3, [r7, #28]
 8014b62:	3301      	adds	r3, #1
 8014b64:	61fb      	str	r3, [r7, #28]
 8014b66:	69fb      	ldr	r3, [r7, #28]
 8014b68:	2b63      	cmp	r3, #99	; 0x63
 8014b6a:	d9e9      	bls.n	8014b40 <prvInitialiseNewTask+0x54>
 8014b6c:	e000      	b.n	8014b70 <prvInitialiseNewTask+0x84>
			{
				break;
 8014b6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b72:	2200      	movs	r2, #0
 8014b74:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8014b78:	e003      	b.n	8014b82 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b84:	2b06      	cmp	r3, #6
 8014b86:	d901      	bls.n	8014b8c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014b88:	2306      	movs	r3, #6
 8014b8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b96:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->uxMutexesHeld = 0;
 8014b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ba4:	3304      	adds	r3, #4
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7ff f886 	bl	8013cb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bae:	3318      	adds	r3, #24
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7ff f881 	bl	8013cb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bbe:	f1c3 0207 	rsb	r2, r3, #7
 8014bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bce:	2200      	movs	r2, #0
 8014bd0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014bdc:	683a      	ldr	r2, [r7, #0]
 8014bde:	68f9      	ldr	r1, [r7, #12]
 8014be0:	69b8      	ldr	r0, [r7, #24]
 8014be2:	f000 ff83 	bl	8015aec <pxPortInitialiseStack>
 8014be6:	4602      	mov	r2, r0
 8014be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d002      	beq.n	8014bf8 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014bf8:	bf00      	nop
 8014bfa:	3720      	adds	r7, #32
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}

08014c00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b082      	sub	sp, #8
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014c08:	f001 f89c 	bl	8015d44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014c0c:	4b2a      	ldr	r3, [pc, #168]	; (8014cb8 <prvAddNewTaskToReadyList+0xb8>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	3301      	adds	r3, #1
 8014c12:	4a29      	ldr	r2, [pc, #164]	; (8014cb8 <prvAddNewTaskToReadyList+0xb8>)
 8014c14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014c16:	4b29      	ldr	r3, [pc, #164]	; (8014cbc <prvAddNewTaskToReadyList+0xbc>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d109      	bne.n	8014c32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014c1e:	4a27      	ldr	r2, [pc, #156]	; (8014cbc <prvAddNewTaskToReadyList+0xbc>)
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014c24:	4b24      	ldr	r3, [pc, #144]	; (8014cb8 <prvAddNewTaskToReadyList+0xb8>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2b01      	cmp	r3, #1
 8014c2a:	d110      	bne.n	8014c4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014c2c:	f000 fc72 	bl	8015514 <prvInitialiseTaskLists>
 8014c30:	e00d      	b.n	8014c4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014c32:	4b23      	ldr	r3, [pc, #140]	; (8014cc0 <prvAddNewTaskToReadyList+0xc0>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d109      	bne.n	8014c4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014c3a:	4b20      	ldr	r3, [pc, #128]	; (8014cbc <prvAddNewTaskToReadyList+0xbc>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c44:	429a      	cmp	r2, r3
 8014c46:	d802      	bhi.n	8014c4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014c48:	4a1c      	ldr	r2, [pc, #112]	; (8014cbc <prvAddNewTaskToReadyList+0xbc>)
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014c4e:	4b1d      	ldr	r3, [pc, #116]	; (8014cc4 <prvAddNewTaskToReadyList+0xc4>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	3301      	adds	r3, #1
 8014c54:	4a1b      	ldr	r2, [pc, #108]	; (8014cc4 <prvAddNewTaskToReadyList+0xc4>)
 8014c56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c5c:	2201      	movs	r2, #1
 8014c5e:	409a      	lsls	r2, r3
 8014c60:	4b19      	ldr	r3, [pc, #100]	; (8014cc8 <prvAddNewTaskToReadyList+0xc8>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	4313      	orrs	r3, r2
 8014c66:	4a18      	ldr	r2, [pc, #96]	; (8014cc8 <prvAddNewTaskToReadyList+0xc8>)
 8014c68:	6013      	str	r3, [r2, #0]
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c6e:	4613      	mov	r3, r2
 8014c70:	009b      	lsls	r3, r3, #2
 8014c72:	4413      	add	r3, r2
 8014c74:	009b      	lsls	r3, r3, #2
 8014c76:	4a15      	ldr	r2, [pc, #84]	; (8014ccc <prvAddNewTaskToReadyList+0xcc>)
 8014c78:	441a      	add	r2, r3
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	3304      	adds	r3, #4
 8014c7e:	4619      	mov	r1, r3
 8014c80:	4610      	mov	r0, r2
 8014c82:	f7ff f826 	bl	8013cd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014c86:	f001 f88d 	bl	8015da4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014c8a:	4b0d      	ldr	r3, [pc, #52]	; (8014cc0 <prvAddNewTaskToReadyList+0xc0>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d00e      	beq.n	8014cb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014c92:	4b0a      	ldr	r3, [pc, #40]	; (8014cbc <prvAddNewTaskToReadyList+0xbc>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	d207      	bcs.n	8014cb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014ca0:	4b0b      	ldr	r3, [pc, #44]	; (8014cd0 <prvAddNewTaskToReadyList+0xd0>)
 8014ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ca6:	601a      	str	r2, [r3, #0]
 8014ca8:	f3bf 8f4f 	dsb	sy
 8014cac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014cb0:	bf00      	nop
 8014cb2:	3708      	adds	r7, #8
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	2001a9a4 	.word	0x2001a9a4
 8014cbc:	2001a8a4 	.word	0x2001a8a4
 8014cc0:	2001a9b0 	.word	0x2001a9b0
 8014cc4:	2001a9c0 	.word	0x2001a9c0
 8014cc8:	2001a9ac 	.word	0x2001a9ac
 8014ccc:	2001a8a8 	.word	0x2001a8a8
 8014cd0:	e000ed04 	.word	0xe000ed04

08014cd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b084      	sub	sp, #16
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014cdc:	2300      	movs	r3, #0
 8014cde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d017      	beq.n	8014d16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014ce6:	4b13      	ldr	r3, [pc, #76]	; (8014d34 <vTaskDelay+0x60>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d00a      	beq.n	8014d04 <vTaskDelay+0x30>
	__asm volatile
 8014cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cf2:	f383 8811 	msr	BASEPRI, r3
 8014cf6:	f3bf 8f6f 	isb	sy
 8014cfa:	f3bf 8f4f 	dsb	sy
 8014cfe:	60bb      	str	r3, [r7, #8]
}
 8014d00:	bf00      	nop
 8014d02:	e7fe      	b.n	8014d02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014d04:	f000 f926 	bl	8014f54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014d08:	2100      	movs	r1, #0
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f000 fe88 	bl	8015a20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014d10:	f000 f92e 	bl	8014f70 <xTaskResumeAll>
 8014d14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d107      	bne.n	8014d2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014d1c:	4b06      	ldr	r3, [pc, #24]	; (8014d38 <vTaskDelay+0x64>)
 8014d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d22:	601a      	str	r2, [r3, #0]
 8014d24:	f3bf 8f4f 	dsb	sy
 8014d28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014d2c:	bf00      	nop
 8014d2e:	3710      	adds	r7, #16
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}
 8014d34:	2001a9cc 	.word	0x2001a9cc
 8014d38:	e000ed04 	.word	0xe000ed04

08014d3c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b088      	sub	sp, #32
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
 8014d44:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8014d46:	2300      	movs	r3, #0
 8014d48:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	2b06      	cmp	r3, #6
 8014d4e:	d90a      	bls.n	8014d66 <vTaskPrioritySet+0x2a>
	__asm volatile
 8014d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d54:	f383 8811 	msr	BASEPRI, r3
 8014d58:	f3bf 8f6f 	isb	sy
 8014d5c:	f3bf 8f4f 	dsb	sy
 8014d60:	60fb      	str	r3, [r7, #12]
}
 8014d62:	bf00      	nop
 8014d64:	e7fe      	b.n	8014d64 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	2b06      	cmp	r3, #6
 8014d6a:	d901      	bls.n	8014d70 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014d6c:	2306      	movs	r3, #6
 8014d6e:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8014d70:	f000 ffe8 	bl	8015d44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d102      	bne.n	8014d80 <vTaskPrioritySet+0x44>
 8014d7a:	4b42      	ldr	r3, [pc, #264]	; (8014e84 <vTaskPrioritySet+0x148>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	e000      	b.n	8014d82 <vTaskPrioritySet+0x46>
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8014d84:	69bb      	ldr	r3, [r7, #24]
 8014d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014d8a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8014d8c:	697a      	ldr	r2, [r7, #20]
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d071      	beq.n	8014e78 <vTaskPrioritySet+0x13c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8014d94:	683a      	ldr	r2, [r7, #0]
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d90d      	bls.n	8014db8 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8014d9c:	4b39      	ldr	r3, [pc, #228]	; (8014e84 <vTaskPrioritySet+0x148>)
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	69ba      	ldr	r2, [r7, #24]
 8014da2:	429a      	cmp	r2, r3
 8014da4:	d00f      	beq.n	8014dc6 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8014da6:	4b37      	ldr	r3, [pc, #220]	; (8014e84 <vTaskPrioritySet+0x148>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dac:	683a      	ldr	r2, [r7, #0]
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d309      	bcc.n	8014dc6 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 8014db2:	2301      	movs	r3, #1
 8014db4:	61fb      	str	r3, [r7, #28]
 8014db6:	e006      	b.n	8014dc6 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8014db8:	4b32      	ldr	r3, [pc, #200]	; (8014e84 <vTaskPrioritySet+0x148>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	69ba      	ldr	r2, [r7, #24]
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	d101      	bne.n	8014dc6 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014dc6:	69bb      	ldr	r3, [r7, #24]
 8014dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dca:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8014dcc:	69bb      	ldr	r3, [r7, #24]
 8014dce:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014dd2:	69bb      	ldr	r3, [r7, #24]
 8014dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d102      	bne.n	8014de0 <vTaskPrioritySet+0xa4>
					{
						pxTCB->uxPriority = uxNewPriority;
 8014dda:	69bb      	ldr	r3, [r7, #24]
 8014ddc:	683a      	ldr	r2, [r7, #0]
 8014dde:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8014de0:	69bb      	ldr	r3, [r7, #24]
 8014de2:	683a      	ldr	r2, [r7, #0]
 8014de4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014de8:	69bb      	ldr	r3, [r7, #24]
 8014dea:	699b      	ldr	r3, [r3, #24]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	db04      	blt.n	8014dfa <vTaskPrioritySet+0xbe>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	f1c3 0207 	rsb	r2, r3, #7
 8014df6:	69bb      	ldr	r3, [r7, #24]
 8014df8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014dfa:	69bb      	ldr	r3, [r7, #24]
 8014dfc:	6959      	ldr	r1, [r3, #20]
 8014dfe:	693a      	ldr	r2, [r7, #16]
 8014e00:	4613      	mov	r3, r2
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	4413      	add	r3, r2
 8014e06:	009b      	lsls	r3, r3, #2
 8014e08:	4a1f      	ldr	r2, [pc, #124]	; (8014e88 <vTaskPrioritySet+0x14c>)
 8014e0a:	4413      	add	r3, r2
 8014e0c:	4299      	cmp	r1, r3
 8014e0e:	d128      	bne.n	8014e62 <vTaskPrioritySet+0x126>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e10:	69bb      	ldr	r3, [r7, #24]
 8014e12:	3304      	adds	r3, #4
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7fe ffb9 	bl	8013d8c <uxListRemove>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d109      	bne.n	8014e34 <vTaskPrioritySet+0xf8>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8014e20:	2201      	movs	r2, #1
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	fa02 f303 	lsl.w	r3, r2, r3
 8014e28:	43da      	mvns	r2, r3
 8014e2a:	4b18      	ldr	r3, [pc, #96]	; (8014e8c <vTaskPrioritySet+0x150>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	4013      	ands	r3, r2
 8014e30:	4a16      	ldr	r2, [pc, #88]	; (8014e8c <vTaskPrioritySet+0x150>)
 8014e32:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8014e34:	69bb      	ldr	r3, [r7, #24]
 8014e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e38:	2201      	movs	r2, #1
 8014e3a:	409a      	lsls	r2, r3
 8014e3c:	4b13      	ldr	r3, [pc, #76]	; (8014e8c <vTaskPrioritySet+0x150>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	4313      	orrs	r3, r2
 8014e42:	4a12      	ldr	r2, [pc, #72]	; (8014e8c <vTaskPrioritySet+0x150>)
 8014e44:	6013      	str	r3, [r2, #0]
 8014e46:	69bb      	ldr	r3, [r7, #24]
 8014e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e4a:	4613      	mov	r3, r2
 8014e4c:	009b      	lsls	r3, r3, #2
 8014e4e:	4413      	add	r3, r2
 8014e50:	009b      	lsls	r3, r3, #2
 8014e52:	4a0d      	ldr	r2, [pc, #52]	; (8014e88 <vTaskPrioritySet+0x14c>)
 8014e54:	441a      	add	r2, r3
 8014e56:	69bb      	ldr	r3, [r7, #24]
 8014e58:	3304      	adds	r3, #4
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	4610      	mov	r0, r2
 8014e5e:	f7fe ff38 	bl	8013cd2 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8014e62:	69fb      	ldr	r3, [r7, #28]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d007      	beq.n	8014e78 <vTaskPrioritySet+0x13c>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8014e68:	4b09      	ldr	r3, [pc, #36]	; (8014e90 <vTaskPrioritySet+0x154>)
 8014e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e6e:	601a      	str	r2, [r3, #0]
 8014e70:	f3bf 8f4f 	dsb	sy
 8014e74:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8014e78:	f000 ff94 	bl	8015da4 <vPortExitCritical>
	}
 8014e7c:	bf00      	nop
 8014e7e:	3720      	adds	r7, #32
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	2001a8a4 	.word	0x2001a8a4
 8014e88:	2001a8a8 	.word	0x2001a8a8
 8014e8c:	2001a9ac 	.word	0x2001a9ac
 8014e90:	e000ed04 	.word	0xe000ed04

08014e94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b08a      	sub	sp, #40	; 0x28
 8014e98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014ea2:	463a      	mov	r2, r7
 8014ea4:	1d39      	adds	r1, r7, #4
 8014ea6:	f107 0308 	add.w	r3, r7, #8
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f7ec f97e 	bl	80011ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014eb0:	6839      	ldr	r1, [r7, #0]
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	68ba      	ldr	r2, [r7, #8]
 8014eb6:	9202      	str	r2, [sp, #8]
 8014eb8:	9301      	str	r3, [sp, #4]
 8014eba:	2300      	movs	r3, #0
 8014ebc:	9300      	str	r3, [sp, #0]
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	460a      	mov	r2, r1
 8014ec2:	491e      	ldr	r1, [pc, #120]	; (8014f3c <vTaskStartScheduler+0xa8>)
 8014ec4:	481e      	ldr	r0, [pc, #120]	; (8014f40 <vTaskStartScheduler+0xac>)
 8014ec6:	f7ff fd6f 	bl	80149a8 <xTaskCreateStatic>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	4a1d      	ldr	r2, [pc, #116]	; (8014f44 <vTaskStartScheduler+0xb0>)
 8014ece:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014ed0:	4b1c      	ldr	r3, [pc, #112]	; (8014f44 <vTaskStartScheduler+0xb0>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d002      	beq.n	8014ede <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014ed8:	2301      	movs	r3, #1
 8014eda:	617b      	str	r3, [r7, #20]
 8014edc:	e001      	b.n	8014ee2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	2b01      	cmp	r3, #1
 8014ee6:	d116      	bne.n	8014f16 <vTaskStartScheduler+0x82>
	__asm volatile
 8014ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eec:	f383 8811 	msr	BASEPRI, r3
 8014ef0:	f3bf 8f6f 	isb	sy
 8014ef4:	f3bf 8f4f 	dsb	sy
 8014ef8:	613b      	str	r3, [r7, #16]
}
 8014efa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014efc:	4b12      	ldr	r3, [pc, #72]	; (8014f48 <vTaskStartScheduler+0xb4>)
 8014efe:	f04f 32ff 	mov.w	r2, #4294967295
 8014f02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014f04:	4b11      	ldr	r3, [pc, #68]	; (8014f4c <vTaskStartScheduler+0xb8>)
 8014f06:	2201      	movs	r2, #1
 8014f08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014f0a:	4b11      	ldr	r3, [pc, #68]	; (8014f50 <vTaskStartScheduler+0xbc>)
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014f10:	f000 fe76 	bl	8015c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014f14:	e00e      	b.n	8014f34 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f1c:	d10a      	bne.n	8014f34 <vTaskStartScheduler+0xa0>
	__asm volatile
 8014f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f22:	f383 8811 	msr	BASEPRI, r3
 8014f26:	f3bf 8f6f 	isb	sy
 8014f2a:	f3bf 8f4f 	dsb	sy
 8014f2e:	60fb      	str	r3, [r7, #12]
}
 8014f30:	bf00      	nop
 8014f32:	e7fe      	b.n	8014f32 <vTaskStartScheduler+0x9e>
}
 8014f34:	bf00      	nop
 8014f36:	3718      	adds	r7, #24
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}
 8014f3c:	0801aea0 	.word	0x0801aea0
 8014f40:	080154e5 	.word	0x080154e5
 8014f44:	2001a9c8 	.word	0x2001a9c8
 8014f48:	2001a9c4 	.word	0x2001a9c4
 8014f4c:	2001a9b0 	.word	0x2001a9b0
 8014f50:	2001a9a8 	.word	0x2001a9a8

08014f54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014f54:	b480      	push	{r7}
 8014f56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014f58:	4b04      	ldr	r3, [pc, #16]	; (8014f6c <vTaskSuspendAll+0x18>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	4a03      	ldr	r2, [pc, #12]	; (8014f6c <vTaskSuspendAll+0x18>)
 8014f60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014f62:	bf00      	nop
 8014f64:	46bd      	mov	sp, r7
 8014f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6a:	4770      	bx	lr
 8014f6c:	2001a9cc 	.word	0x2001a9cc

08014f70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b084      	sub	sp, #16
 8014f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014f76:	2300      	movs	r3, #0
 8014f78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014f7e:	4b41      	ldr	r3, [pc, #260]	; (8015084 <xTaskResumeAll+0x114>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d10a      	bne.n	8014f9c <xTaskResumeAll+0x2c>
	__asm volatile
 8014f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f8a:	f383 8811 	msr	BASEPRI, r3
 8014f8e:	f3bf 8f6f 	isb	sy
 8014f92:	f3bf 8f4f 	dsb	sy
 8014f96:	603b      	str	r3, [r7, #0]
}
 8014f98:	bf00      	nop
 8014f9a:	e7fe      	b.n	8014f9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014f9c:	f000 fed2 	bl	8015d44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014fa0:	4b38      	ldr	r3, [pc, #224]	; (8015084 <xTaskResumeAll+0x114>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	3b01      	subs	r3, #1
 8014fa6:	4a37      	ldr	r2, [pc, #220]	; (8015084 <xTaskResumeAll+0x114>)
 8014fa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014faa:	4b36      	ldr	r3, [pc, #216]	; (8015084 <xTaskResumeAll+0x114>)
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d161      	bne.n	8015076 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014fb2:	4b35      	ldr	r3, [pc, #212]	; (8015088 <xTaskResumeAll+0x118>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d05d      	beq.n	8015076 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014fba:	e02e      	b.n	801501a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fbc:	4b33      	ldr	r3, [pc, #204]	; (801508c <xTaskResumeAll+0x11c>)
 8014fbe:	68db      	ldr	r3, [r3, #12]
 8014fc0:	68db      	ldr	r3, [r3, #12]
 8014fc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	3318      	adds	r3, #24
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f7fe fedf 	bl	8013d8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	3304      	adds	r3, #4
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7fe feda 	bl	8013d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fdc:	2201      	movs	r2, #1
 8014fde:	409a      	lsls	r2, r3
 8014fe0:	4b2b      	ldr	r3, [pc, #172]	; (8015090 <xTaskResumeAll+0x120>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	4313      	orrs	r3, r2
 8014fe6:	4a2a      	ldr	r2, [pc, #168]	; (8015090 <xTaskResumeAll+0x120>)
 8014fe8:	6013      	str	r3, [r2, #0]
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fee:	4613      	mov	r3, r2
 8014ff0:	009b      	lsls	r3, r3, #2
 8014ff2:	4413      	add	r3, r2
 8014ff4:	009b      	lsls	r3, r3, #2
 8014ff6:	4a27      	ldr	r2, [pc, #156]	; (8015094 <xTaskResumeAll+0x124>)
 8014ff8:	441a      	add	r2, r3
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	3304      	adds	r3, #4
 8014ffe:	4619      	mov	r1, r3
 8015000:	4610      	mov	r0, r2
 8015002:	f7fe fe66 	bl	8013cd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801500a:	4b23      	ldr	r3, [pc, #140]	; (8015098 <xTaskResumeAll+0x128>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015010:	429a      	cmp	r2, r3
 8015012:	d302      	bcc.n	801501a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8015014:	4b21      	ldr	r3, [pc, #132]	; (801509c <xTaskResumeAll+0x12c>)
 8015016:	2201      	movs	r2, #1
 8015018:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801501a:	4b1c      	ldr	r3, [pc, #112]	; (801508c <xTaskResumeAll+0x11c>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d1cc      	bne.n	8014fbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d001      	beq.n	801502c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015028:	f000 fb12 	bl	8015650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801502c:	4b1c      	ldr	r3, [pc, #112]	; (80150a0 <xTaskResumeAll+0x130>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d010      	beq.n	801505a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015038:	f000 f836 	bl	80150a8 <xTaskIncrementTick>
 801503c:	4603      	mov	r3, r0
 801503e:	2b00      	cmp	r3, #0
 8015040:	d002      	beq.n	8015048 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8015042:	4b16      	ldr	r3, [pc, #88]	; (801509c <xTaskResumeAll+0x12c>)
 8015044:	2201      	movs	r2, #1
 8015046:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	3b01      	subs	r3, #1
 801504c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d1f1      	bne.n	8015038 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8015054:	4b12      	ldr	r3, [pc, #72]	; (80150a0 <xTaskResumeAll+0x130>)
 8015056:	2200      	movs	r2, #0
 8015058:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801505a:	4b10      	ldr	r3, [pc, #64]	; (801509c <xTaskResumeAll+0x12c>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d009      	beq.n	8015076 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015062:	2301      	movs	r3, #1
 8015064:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015066:	4b0f      	ldr	r3, [pc, #60]	; (80150a4 <xTaskResumeAll+0x134>)
 8015068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801506c:	601a      	str	r2, [r3, #0]
 801506e:	f3bf 8f4f 	dsb	sy
 8015072:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015076:	f000 fe95 	bl	8015da4 <vPortExitCritical>

	return xAlreadyYielded;
 801507a:	68bb      	ldr	r3, [r7, #8]
}
 801507c:	4618      	mov	r0, r3
 801507e:	3710      	adds	r7, #16
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}
 8015084:	2001a9cc 	.word	0x2001a9cc
 8015088:	2001a9a4 	.word	0x2001a9a4
 801508c:	2001a964 	.word	0x2001a964
 8015090:	2001a9ac 	.word	0x2001a9ac
 8015094:	2001a8a8 	.word	0x2001a8a8
 8015098:	2001a8a4 	.word	0x2001a8a4
 801509c:	2001a9b8 	.word	0x2001a9b8
 80150a0:	2001a9b4 	.word	0x2001a9b4
 80150a4:	e000ed04 	.word	0xe000ed04

080150a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b086      	sub	sp, #24
 80150ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80150ae:	2300      	movs	r3, #0
 80150b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150b2:	4b4e      	ldr	r3, [pc, #312]	; (80151ec <xTaskIncrementTick+0x144>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	f040 808e 	bne.w	80151d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80150bc:	4b4c      	ldr	r3, [pc, #304]	; (80151f0 <xTaskIncrementTick+0x148>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	3301      	adds	r3, #1
 80150c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80150c4:	4a4a      	ldr	r2, [pc, #296]	; (80151f0 <xTaskIncrementTick+0x148>)
 80150c6:	693b      	ldr	r3, [r7, #16]
 80150c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d120      	bne.n	8015112 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80150d0:	4b48      	ldr	r3, [pc, #288]	; (80151f4 <xTaskIncrementTick+0x14c>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d00a      	beq.n	80150f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80150da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150de:	f383 8811 	msr	BASEPRI, r3
 80150e2:	f3bf 8f6f 	isb	sy
 80150e6:	f3bf 8f4f 	dsb	sy
 80150ea:	603b      	str	r3, [r7, #0]
}
 80150ec:	bf00      	nop
 80150ee:	e7fe      	b.n	80150ee <xTaskIncrementTick+0x46>
 80150f0:	4b40      	ldr	r3, [pc, #256]	; (80151f4 <xTaskIncrementTick+0x14c>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	60fb      	str	r3, [r7, #12]
 80150f6:	4b40      	ldr	r3, [pc, #256]	; (80151f8 <xTaskIncrementTick+0x150>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	4a3e      	ldr	r2, [pc, #248]	; (80151f4 <xTaskIncrementTick+0x14c>)
 80150fc:	6013      	str	r3, [r2, #0]
 80150fe:	4a3e      	ldr	r2, [pc, #248]	; (80151f8 <xTaskIncrementTick+0x150>)
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	6013      	str	r3, [r2, #0]
 8015104:	4b3d      	ldr	r3, [pc, #244]	; (80151fc <xTaskIncrementTick+0x154>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	3301      	adds	r3, #1
 801510a:	4a3c      	ldr	r2, [pc, #240]	; (80151fc <xTaskIncrementTick+0x154>)
 801510c:	6013      	str	r3, [r2, #0]
 801510e:	f000 fa9f 	bl	8015650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015112:	4b3b      	ldr	r3, [pc, #236]	; (8015200 <xTaskIncrementTick+0x158>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	693a      	ldr	r2, [r7, #16]
 8015118:	429a      	cmp	r2, r3
 801511a:	d348      	bcc.n	80151ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801511c:	4b35      	ldr	r3, [pc, #212]	; (80151f4 <xTaskIncrementTick+0x14c>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d104      	bne.n	8015130 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015126:	4b36      	ldr	r3, [pc, #216]	; (8015200 <xTaskIncrementTick+0x158>)
 8015128:	f04f 32ff 	mov.w	r2, #4294967295
 801512c:	601a      	str	r2, [r3, #0]
					break;
 801512e:	e03e      	b.n	80151ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015130:	4b30      	ldr	r3, [pc, #192]	; (80151f4 <xTaskIncrementTick+0x14c>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	68db      	ldr	r3, [r3, #12]
 8015136:	68db      	ldr	r3, [r3, #12]
 8015138:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015140:	693a      	ldr	r2, [r7, #16]
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	429a      	cmp	r2, r3
 8015146:	d203      	bcs.n	8015150 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015148:	4a2d      	ldr	r2, [pc, #180]	; (8015200 <xTaskIncrementTick+0x158>)
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801514e:	e02e      	b.n	80151ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	3304      	adds	r3, #4
 8015154:	4618      	mov	r0, r3
 8015156:	f7fe fe19 	bl	8013d8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801515a:	68bb      	ldr	r3, [r7, #8]
 801515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801515e:	2b00      	cmp	r3, #0
 8015160:	d004      	beq.n	801516c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	3318      	adds	r3, #24
 8015166:	4618      	mov	r0, r3
 8015168:	f7fe fe10 	bl	8013d8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015170:	2201      	movs	r2, #1
 8015172:	409a      	lsls	r2, r3
 8015174:	4b23      	ldr	r3, [pc, #140]	; (8015204 <xTaskIncrementTick+0x15c>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	4313      	orrs	r3, r2
 801517a:	4a22      	ldr	r2, [pc, #136]	; (8015204 <xTaskIncrementTick+0x15c>)
 801517c:	6013      	str	r3, [r2, #0]
 801517e:	68bb      	ldr	r3, [r7, #8]
 8015180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015182:	4613      	mov	r3, r2
 8015184:	009b      	lsls	r3, r3, #2
 8015186:	4413      	add	r3, r2
 8015188:	009b      	lsls	r3, r3, #2
 801518a:	4a1f      	ldr	r2, [pc, #124]	; (8015208 <xTaskIncrementTick+0x160>)
 801518c:	441a      	add	r2, r3
 801518e:	68bb      	ldr	r3, [r7, #8]
 8015190:	3304      	adds	r3, #4
 8015192:	4619      	mov	r1, r3
 8015194:	4610      	mov	r0, r2
 8015196:	f7fe fd9c 	bl	8013cd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801519e:	4b1b      	ldr	r3, [pc, #108]	; (801520c <xTaskIncrementTick+0x164>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d3b9      	bcc.n	801511c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80151a8:	2301      	movs	r3, #1
 80151aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80151ac:	e7b6      	b.n	801511c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80151ae:	4b17      	ldr	r3, [pc, #92]	; (801520c <xTaskIncrementTick+0x164>)
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151b4:	4914      	ldr	r1, [pc, #80]	; (8015208 <xTaskIncrementTick+0x160>)
 80151b6:	4613      	mov	r3, r2
 80151b8:	009b      	lsls	r3, r3, #2
 80151ba:	4413      	add	r3, r2
 80151bc:	009b      	lsls	r3, r3, #2
 80151be:	440b      	add	r3, r1
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	2b01      	cmp	r3, #1
 80151c4:	d901      	bls.n	80151ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80151c6:	2301      	movs	r3, #1
 80151c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80151ca:	4b11      	ldr	r3, [pc, #68]	; (8015210 <xTaskIncrementTick+0x168>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d007      	beq.n	80151e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80151d2:	2301      	movs	r3, #1
 80151d4:	617b      	str	r3, [r7, #20]
 80151d6:	e004      	b.n	80151e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80151d8:	4b0e      	ldr	r3, [pc, #56]	; (8015214 <xTaskIncrementTick+0x16c>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	3301      	adds	r3, #1
 80151de:	4a0d      	ldr	r2, [pc, #52]	; (8015214 <xTaskIncrementTick+0x16c>)
 80151e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80151e2:	697b      	ldr	r3, [r7, #20]
}
 80151e4:	4618      	mov	r0, r3
 80151e6:	3718      	adds	r7, #24
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}
 80151ec:	2001a9cc 	.word	0x2001a9cc
 80151f0:	2001a9a8 	.word	0x2001a9a8
 80151f4:	2001a95c 	.word	0x2001a95c
 80151f8:	2001a960 	.word	0x2001a960
 80151fc:	2001a9bc 	.word	0x2001a9bc
 8015200:	2001a9c4 	.word	0x2001a9c4
 8015204:	2001a9ac 	.word	0x2001a9ac
 8015208:	2001a8a8 	.word	0x2001a8a8
 801520c:	2001a8a4 	.word	0x2001a8a4
 8015210:	2001a9b8 	.word	0x2001a9b8
 8015214:	2001a9b4 	.word	0x2001a9b4

08015218 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015218:	b480      	push	{r7}
 801521a:	b087      	sub	sp, #28
 801521c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801521e:	4b27      	ldr	r3, [pc, #156]	; (80152bc <vTaskSwitchContext+0xa4>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d003      	beq.n	801522e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015226:	4b26      	ldr	r3, [pc, #152]	; (80152c0 <vTaskSwitchContext+0xa8>)
 8015228:	2201      	movs	r2, #1
 801522a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801522c:	e03f      	b.n	80152ae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 801522e:	4b24      	ldr	r3, [pc, #144]	; (80152c0 <vTaskSwitchContext+0xa8>)
 8015230:	2200      	movs	r2, #0
 8015232:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015234:	4b23      	ldr	r3, [pc, #140]	; (80152c4 <vTaskSwitchContext+0xac>)
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	fab3 f383 	clz	r3, r3
 8015240:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015242:	7afb      	ldrb	r3, [r7, #11]
 8015244:	f1c3 031f 	rsb	r3, r3, #31
 8015248:	617b      	str	r3, [r7, #20]
 801524a:	491f      	ldr	r1, [pc, #124]	; (80152c8 <vTaskSwitchContext+0xb0>)
 801524c:	697a      	ldr	r2, [r7, #20]
 801524e:	4613      	mov	r3, r2
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	4413      	add	r3, r2
 8015254:	009b      	lsls	r3, r3, #2
 8015256:	440b      	add	r3, r1
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d10a      	bne.n	8015274 <vTaskSwitchContext+0x5c>
	__asm volatile
 801525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015262:	f383 8811 	msr	BASEPRI, r3
 8015266:	f3bf 8f6f 	isb	sy
 801526a:	f3bf 8f4f 	dsb	sy
 801526e:	607b      	str	r3, [r7, #4]
}
 8015270:	bf00      	nop
 8015272:	e7fe      	b.n	8015272 <vTaskSwitchContext+0x5a>
 8015274:	697a      	ldr	r2, [r7, #20]
 8015276:	4613      	mov	r3, r2
 8015278:	009b      	lsls	r3, r3, #2
 801527a:	4413      	add	r3, r2
 801527c:	009b      	lsls	r3, r3, #2
 801527e:	4a12      	ldr	r2, [pc, #72]	; (80152c8 <vTaskSwitchContext+0xb0>)
 8015280:	4413      	add	r3, r2
 8015282:	613b      	str	r3, [r7, #16]
 8015284:	693b      	ldr	r3, [r7, #16]
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	685a      	ldr	r2, [r3, #4]
 801528a:	693b      	ldr	r3, [r7, #16]
 801528c:	605a      	str	r2, [r3, #4]
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	685a      	ldr	r2, [r3, #4]
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	3308      	adds	r3, #8
 8015296:	429a      	cmp	r2, r3
 8015298:	d104      	bne.n	80152a4 <vTaskSwitchContext+0x8c>
 801529a:	693b      	ldr	r3, [r7, #16]
 801529c:	685b      	ldr	r3, [r3, #4]
 801529e:	685a      	ldr	r2, [r3, #4]
 80152a0:	693b      	ldr	r3, [r7, #16]
 80152a2:	605a      	str	r2, [r3, #4]
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	68db      	ldr	r3, [r3, #12]
 80152aa:	4a08      	ldr	r2, [pc, #32]	; (80152cc <vTaskSwitchContext+0xb4>)
 80152ac:	6013      	str	r3, [r2, #0]
}
 80152ae:	bf00      	nop
 80152b0:	371c      	adds	r7, #28
 80152b2:	46bd      	mov	sp, r7
 80152b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b8:	4770      	bx	lr
 80152ba:	bf00      	nop
 80152bc:	2001a9cc 	.word	0x2001a9cc
 80152c0:	2001a9b8 	.word	0x2001a9b8
 80152c4:	2001a9ac 	.word	0x2001a9ac
 80152c8:	2001a8a8 	.word	0x2001a8a8
 80152cc:	2001a8a4 	.word	0x2001a8a4

080152d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
 80152d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d10a      	bne.n	80152f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80152e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152e4:	f383 8811 	msr	BASEPRI, r3
 80152e8:	f3bf 8f6f 	isb	sy
 80152ec:	f3bf 8f4f 	dsb	sy
 80152f0:	60fb      	str	r3, [r7, #12]
}
 80152f2:	bf00      	nop
 80152f4:	e7fe      	b.n	80152f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80152f6:	4b07      	ldr	r3, [pc, #28]	; (8015314 <vTaskPlaceOnEventList+0x44>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	3318      	adds	r3, #24
 80152fc:	4619      	mov	r1, r3
 80152fe:	6878      	ldr	r0, [r7, #4]
 8015300:	f7fe fd0b 	bl	8013d1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015304:	2101      	movs	r1, #1
 8015306:	6838      	ldr	r0, [r7, #0]
 8015308:	f000 fb8a 	bl	8015a20 <prvAddCurrentTaskToDelayedList>
}
 801530c:	bf00      	nop
 801530e:	3710      	adds	r7, #16
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	2001a8a4 	.word	0x2001a8a4

08015318 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b086      	sub	sp, #24
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	68db      	ldr	r3, [r3, #12]
 8015324:	68db      	ldr	r3, [r3, #12]
 8015326:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d10a      	bne.n	8015344 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015332:	f383 8811 	msr	BASEPRI, r3
 8015336:	f3bf 8f6f 	isb	sy
 801533a:	f3bf 8f4f 	dsb	sy
 801533e:	60fb      	str	r3, [r7, #12]
}
 8015340:	bf00      	nop
 8015342:	e7fe      	b.n	8015342 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	3318      	adds	r3, #24
 8015348:	4618      	mov	r0, r3
 801534a:	f7fe fd1f 	bl	8013d8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801534e:	4b1d      	ldr	r3, [pc, #116]	; (80153c4 <xTaskRemoveFromEventList+0xac>)
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d11c      	bne.n	8015390 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015356:	693b      	ldr	r3, [r7, #16]
 8015358:	3304      	adds	r3, #4
 801535a:	4618      	mov	r0, r3
 801535c:	f7fe fd16 	bl	8013d8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015360:	693b      	ldr	r3, [r7, #16]
 8015362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015364:	2201      	movs	r2, #1
 8015366:	409a      	lsls	r2, r3
 8015368:	4b17      	ldr	r3, [pc, #92]	; (80153c8 <xTaskRemoveFromEventList+0xb0>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4313      	orrs	r3, r2
 801536e:	4a16      	ldr	r2, [pc, #88]	; (80153c8 <xTaskRemoveFromEventList+0xb0>)
 8015370:	6013      	str	r3, [r2, #0]
 8015372:	693b      	ldr	r3, [r7, #16]
 8015374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015376:	4613      	mov	r3, r2
 8015378:	009b      	lsls	r3, r3, #2
 801537a:	4413      	add	r3, r2
 801537c:	009b      	lsls	r3, r3, #2
 801537e:	4a13      	ldr	r2, [pc, #76]	; (80153cc <xTaskRemoveFromEventList+0xb4>)
 8015380:	441a      	add	r2, r3
 8015382:	693b      	ldr	r3, [r7, #16]
 8015384:	3304      	adds	r3, #4
 8015386:	4619      	mov	r1, r3
 8015388:	4610      	mov	r0, r2
 801538a:	f7fe fca2 	bl	8013cd2 <vListInsertEnd>
 801538e:	e005      	b.n	801539c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015390:	693b      	ldr	r3, [r7, #16]
 8015392:	3318      	adds	r3, #24
 8015394:	4619      	mov	r1, r3
 8015396:	480e      	ldr	r0, [pc, #56]	; (80153d0 <xTaskRemoveFromEventList+0xb8>)
 8015398:	f7fe fc9b 	bl	8013cd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153a0:	4b0c      	ldr	r3, [pc, #48]	; (80153d4 <xTaskRemoveFromEventList+0xbc>)
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d905      	bls.n	80153b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80153aa:	2301      	movs	r3, #1
 80153ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80153ae:	4b0a      	ldr	r3, [pc, #40]	; (80153d8 <xTaskRemoveFromEventList+0xc0>)
 80153b0:	2201      	movs	r2, #1
 80153b2:	601a      	str	r2, [r3, #0]
 80153b4:	e001      	b.n	80153ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80153b6:	2300      	movs	r3, #0
 80153b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80153ba:	697b      	ldr	r3, [r7, #20]
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3718      	adds	r7, #24
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}
 80153c4:	2001a9cc 	.word	0x2001a9cc
 80153c8:	2001a9ac 	.word	0x2001a9ac
 80153cc:	2001a8a8 	.word	0x2001a8a8
 80153d0:	2001a964 	.word	0x2001a964
 80153d4:	2001a8a4 	.word	0x2001a8a4
 80153d8:	2001a9b8 	.word	0x2001a9b8

080153dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80153dc:	b480      	push	{r7}
 80153de:	b083      	sub	sp, #12
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80153e4:	4b06      	ldr	r3, [pc, #24]	; (8015400 <vTaskInternalSetTimeOutState+0x24>)
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80153ec:	4b05      	ldr	r3, [pc, #20]	; (8015404 <vTaskInternalSetTimeOutState+0x28>)
 80153ee:	681a      	ldr	r2, [r3, #0]
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	605a      	str	r2, [r3, #4]
}
 80153f4:	bf00      	nop
 80153f6:	370c      	adds	r7, #12
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr
 8015400:	2001a9bc 	.word	0x2001a9bc
 8015404:	2001a9a8 	.word	0x2001a9a8

08015408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b088      	sub	sp, #32
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d10a      	bne.n	801542e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801541c:	f383 8811 	msr	BASEPRI, r3
 8015420:	f3bf 8f6f 	isb	sy
 8015424:	f3bf 8f4f 	dsb	sy
 8015428:	613b      	str	r3, [r7, #16]
}
 801542a:	bf00      	nop
 801542c:	e7fe      	b.n	801542c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d10a      	bne.n	801544a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015438:	f383 8811 	msr	BASEPRI, r3
 801543c:	f3bf 8f6f 	isb	sy
 8015440:	f3bf 8f4f 	dsb	sy
 8015444:	60fb      	str	r3, [r7, #12]
}
 8015446:	bf00      	nop
 8015448:	e7fe      	b.n	8015448 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801544a:	f000 fc7b 	bl	8015d44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801544e:	4b1d      	ldr	r3, [pc, #116]	; (80154c4 <xTaskCheckForTimeOut+0xbc>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	685b      	ldr	r3, [r3, #4]
 8015458:	69ba      	ldr	r2, [r7, #24]
 801545a:	1ad3      	subs	r3, r2, r3
 801545c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015466:	d102      	bne.n	801546e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015468:	2300      	movs	r3, #0
 801546a:	61fb      	str	r3, [r7, #28]
 801546c:	e023      	b.n	80154b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	681a      	ldr	r2, [r3, #0]
 8015472:	4b15      	ldr	r3, [pc, #84]	; (80154c8 <xTaskCheckForTimeOut+0xc0>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	429a      	cmp	r2, r3
 8015478:	d007      	beq.n	801548a <xTaskCheckForTimeOut+0x82>
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	69ba      	ldr	r2, [r7, #24]
 8015480:	429a      	cmp	r2, r3
 8015482:	d302      	bcc.n	801548a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015484:	2301      	movs	r3, #1
 8015486:	61fb      	str	r3, [r7, #28]
 8015488:	e015      	b.n	80154b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	697a      	ldr	r2, [r7, #20]
 8015490:	429a      	cmp	r2, r3
 8015492:	d20b      	bcs.n	80154ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	681a      	ldr	r2, [r3, #0]
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	1ad2      	subs	r2, r2, r3
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7ff ff9b 	bl	80153dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80154a6:	2300      	movs	r3, #0
 80154a8:	61fb      	str	r3, [r7, #28]
 80154aa:	e004      	b.n	80154b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	2200      	movs	r2, #0
 80154b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80154b2:	2301      	movs	r3, #1
 80154b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80154b6:	f000 fc75 	bl	8015da4 <vPortExitCritical>

	return xReturn;
 80154ba:	69fb      	ldr	r3, [r7, #28]
}
 80154bc:	4618      	mov	r0, r3
 80154be:	3720      	adds	r7, #32
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}
 80154c4:	2001a9a8 	.word	0x2001a9a8
 80154c8:	2001a9bc 	.word	0x2001a9bc

080154cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80154cc:	b480      	push	{r7}
 80154ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80154d0:	4b03      	ldr	r3, [pc, #12]	; (80154e0 <vTaskMissedYield+0x14>)
 80154d2:	2201      	movs	r2, #1
 80154d4:	601a      	str	r2, [r3, #0]
}
 80154d6:	bf00      	nop
 80154d8:	46bd      	mov	sp, r7
 80154da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154de:	4770      	bx	lr
 80154e0:	2001a9b8 	.word	0x2001a9b8

080154e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b082      	sub	sp, #8
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80154ec:	f000 f852 	bl	8015594 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80154f0:	4b06      	ldr	r3, [pc, #24]	; (801550c <prvIdleTask+0x28>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	2b01      	cmp	r3, #1
 80154f6:	d9f9      	bls.n	80154ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80154f8:	4b05      	ldr	r3, [pc, #20]	; (8015510 <prvIdleTask+0x2c>)
 80154fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154fe:	601a      	str	r2, [r3, #0]
 8015500:	f3bf 8f4f 	dsb	sy
 8015504:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015508:	e7f0      	b.n	80154ec <prvIdleTask+0x8>
 801550a:	bf00      	nop
 801550c:	2001a8a8 	.word	0x2001a8a8
 8015510:	e000ed04 	.word	0xe000ed04

08015514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b082      	sub	sp, #8
 8015518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801551a:	2300      	movs	r3, #0
 801551c:	607b      	str	r3, [r7, #4]
 801551e:	e00c      	b.n	801553a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015520:	687a      	ldr	r2, [r7, #4]
 8015522:	4613      	mov	r3, r2
 8015524:	009b      	lsls	r3, r3, #2
 8015526:	4413      	add	r3, r2
 8015528:	009b      	lsls	r3, r3, #2
 801552a:	4a12      	ldr	r2, [pc, #72]	; (8015574 <prvInitialiseTaskLists+0x60>)
 801552c:	4413      	add	r3, r2
 801552e:	4618      	mov	r0, r3
 8015530:	f7fe fba2 	bl	8013c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	3301      	adds	r3, #1
 8015538:	607b      	str	r3, [r7, #4]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2b06      	cmp	r3, #6
 801553e:	d9ef      	bls.n	8015520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015540:	480d      	ldr	r0, [pc, #52]	; (8015578 <prvInitialiseTaskLists+0x64>)
 8015542:	f7fe fb99 	bl	8013c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015546:	480d      	ldr	r0, [pc, #52]	; (801557c <prvInitialiseTaskLists+0x68>)
 8015548:	f7fe fb96 	bl	8013c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801554c:	480c      	ldr	r0, [pc, #48]	; (8015580 <prvInitialiseTaskLists+0x6c>)
 801554e:	f7fe fb93 	bl	8013c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015552:	480c      	ldr	r0, [pc, #48]	; (8015584 <prvInitialiseTaskLists+0x70>)
 8015554:	f7fe fb90 	bl	8013c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015558:	480b      	ldr	r0, [pc, #44]	; (8015588 <prvInitialiseTaskLists+0x74>)
 801555a:	f7fe fb8d 	bl	8013c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801555e:	4b0b      	ldr	r3, [pc, #44]	; (801558c <prvInitialiseTaskLists+0x78>)
 8015560:	4a05      	ldr	r2, [pc, #20]	; (8015578 <prvInitialiseTaskLists+0x64>)
 8015562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015564:	4b0a      	ldr	r3, [pc, #40]	; (8015590 <prvInitialiseTaskLists+0x7c>)
 8015566:	4a05      	ldr	r2, [pc, #20]	; (801557c <prvInitialiseTaskLists+0x68>)
 8015568:	601a      	str	r2, [r3, #0]
}
 801556a:	bf00      	nop
 801556c:	3708      	adds	r7, #8
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}
 8015572:	bf00      	nop
 8015574:	2001a8a8 	.word	0x2001a8a8
 8015578:	2001a934 	.word	0x2001a934
 801557c:	2001a948 	.word	0x2001a948
 8015580:	2001a964 	.word	0x2001a964
 8015584:	2001a978 	.word	0x2001a978
 8015588:	2001a990 	.word	0x2001a990
 801558c:	2001a95c 	.word	0x2001a95c
 8015590:	2001a960 	.word	0x2001a960

08015594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b082      	sub	sp, #8
 8015598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801559a:	e019      	b.n	80155d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801559c:	f000 fbd2 	bl	8015d44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155a0:	4b10      	ldr	r3, [pc, #64]	; (80155e4 <prvCheckTasksWaitingTermination+0x50>)
 80155a2:	68db      	ldr	r3, [r3, #12]
 80155a4:	68db      	ldr	r3, [r3, #12]
 80155a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	3304      	adds	r3, #4
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7fe fbed 	bl	8013d8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80155b2:	4b0d      	ldr	r3, [pc, #52]	; (80155e8 <prvCheckTasksWaitingTermination+0x54>)
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	3b01      	subs	r3, #1
 80155b8:	4a0b      	ldr	r2, [pc, #44]	; (80155e8 <prvCheckTasksWaitingTermination+0x54>)
 80155ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80155bc:	4b0b      	ldr	r3, [pc, #44]	; (80155ec <prvCheckTasksWaitingTermination+0x58>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	3b01      	subs	r3, #1
 80155c2:	4a0a      	ldr	r2, [pc, #40]	; (80155ec <prvCheckTasksWaitingTermination+0x58>)
 80155c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80155c6:	f000 fbed 	bl	8015da4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80155ca:	6878      	ldr	r0, [r7, #4]
 80155cc:	f000 f810 	bl	80155f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80155d0:	4b06      	ldr	r3, [pc, #24]	; (80155ec <prvCheckTasksWaitingTermination+0x58>)
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d1e1      	bne.n	801559c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80155d8:	bf00      	nop
 80155da:	bf00      	nop
 80155dc:	3708      	adds	r7, #8
 80155de:	46bd      	mov	sp, r7
 80155e0:	bd80      	pop	{r7, pc}
 80155e2:	bf00      	nop
 80155e4:	2001a978 	.word	0x2001a978
 80155e8:	2001a9a4 	.word	0x2001a9a4
 80155ec:	2001a98c 	.word	0x2001a98c

080155f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d108      	bne.n	8015614 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015606:	4618      	mov	r0, r3
 8015608:	f000 fd8a 	bl	8016120 <vPortFree>
				vPortFree( pxTCB );
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	f000 fd87 	bl	8016120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015612:	e018      	b.n	8015646 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801561a:	2b01      	cmp	r3, #1
 801561c:	d103      	bne.n	8015626 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801561e:	6878      	ldr	r0, [r7, #4]
 8015620:	f000 fd7e 	bl	8016120 <vPortFree>
	}
 8015624:	e00f      	b.n	8015646 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801562c:	2b02      	cmp	r3, #2
 801562e:	d00a      	beq.n	8015646 <prvDeleteTCB+0x56>
	__asm volatile
 8015630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015634:	f383 8811 	msr	BASEPRI, r3
 8015638:	f3bf 8f6f 	isb	sy
 801563c:	f3bf 8f4f 	dsb	sy
 8015640:	60fb      	str	r3, [r7, #12]
}
 8015642:	bf00      	nop
 8015644:	e7fe      	b.n	8015644 <prvDeleteTCB+0x54>
	}
 8015646:	bf00      	nop
 8015648:	3710      	adds	r7, #16
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}
	...

08015650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015650:	b480      	push	{r7}
 8015652:	b083      	sub	sp, #12
 8015654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015656:	4b0c      	ldr	r3, [pc, #48]	; (8015688 <prvResetNextTaskUnblockTime+0x38>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d104      	bne.n	801566a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015660:	4b0a      	ldr	r3, [pc, #40]	; (801568c <prvResetNextTaskUnblockTime+0x3c>)
 8015662:	f04f 32ff 	mov.w	r2, #4294967295
 8015666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015668:	e008      	b.n	801567c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801566a:	4b07      	ldr	r3, [pc, #28]	; (8015688 <prvResetNextTaskUnblockTime+0x38>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	68db      	ldr	r3, [r3, #12]
 8015670:	68db      	ldr	r3, [r3, #12]
 8015672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	685b      	ldr	r3, [r3, #4]
 8015678:	4a04      	ldr	r2, [pc, #16]	; (801568c <prvResetNextTaskUnblockTime+0x3c>)
 801567a:	6013      	str	r3, [r2, #0]
}
 801567c:	bf00      	nop
 801567e:	370c      	adds	r7, #12
 8015680:	46bd      	mov	sp, r7
 8015682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015686:	4770      	bx	lr
 8015688:	2001a95c 	.word	0x2001a95c
 801568c:	2001a9c4 	.word	0x2001a9c4

08015690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015690:	b480      	push	{r7}
 8015692:	b083      	sub	sp, #12
 8015694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015696:	4b0b      	ldr	r3, [pc, #44]	; (80156c4 <xTaskGetSchedulerState+0x34>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d102      	bne.n	80156a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801569e:	2301      	movs	r3, #1
 80156a0:	607b      	str	r3, [r7, #4]
 80156a2:	e008      	b.n	80156b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80156a4:	4b08      	ldr	r3, [pc, #32]	; (80156c8 <xTaskGetSchedulerState+0x38>)
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d102      	bne.n	80156b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80156ac:	2302      	movs	r3, #2
 80156ae:	607b      	str	r3, [r7, #4]
 80156b0:	e001      	b.n	80156b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80156b2:	2300      	movs	r3, #0
 80156b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80156b6:	687b      	ldr	r3, [r7, #4]
	}
 80156b8:	4618      	mov	r0, r3
 80156ba:	370c      	adds	r7, #12
 80156bc:	46bd      	mov	sp, r7
 80156be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c2:	4770      	bx	lr
 80156c4:	2001a9b0 	.word	0x2001a9b0
 80156c8:	2001a9cc 	.word	0x2001a9cc

080156cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b084      	sub	sp, #16
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80156d8:	2300      	movs	r3, #0
 80156da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d05f      	beq.n	80157a2 <xTaskPriorityInherit+0xd6>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156e6:	4b31      	ldr	r3, [pc, #196]	; (80157ac <xTaskPriorityInherit+0xe0>)
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d24e      	bcs.n	801578e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	699b      	ldr	r3, [r3, #24]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	db06      	blt.n	8015706 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156f8:	4b2c      	ldr	r3, [pc, #176]	; (80157ac <xTaskPriorityInherit+0xe0>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156fe:	f1c3 0207 	rsb	r2, r3, #7
 8015702:	68bb      	ldr	r3, [r7, #8]
 8015704:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015706:	68bb      	ldr	r3, [r7, #8]
 8015708:	6959      	ldr	r1, [r3, #20]
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801570e:	4613      	mov	r3, r2
 8015710:	009b      	lsls	r3, r3, #2
 8015712:	4413      	add	r3, r2
 8015714:	009b      	lsls	r3, r3, #2
 8015716:	4a26      	ldr	r2, [pc, #152]	; (80157b0 <xTaskPriorityInherit+0xe4>)
 8015718:	4413      	add	r3, r2
 801571a:	4299      	cmp	r1, r3
 801571c:	d12f      	bne.n	801577e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	3304      	adds	r3, #4
 8015722:	4618      	mov	r0, r3
 8015724:	f7fe fb32 	bl	8013d8c <uxListRemove>
 8015728:	4603      	mov	r3, r0
 801572a:	2b00      	cmp	r3, #0
 801572c:	d10a      	bne.n	8015744 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801572e:	68bb      	ldr	r3, [r7, #8]
 8015730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015732:	2201      	movs	r2, #1
 8015734:	fa02 f303 	lsl.w	r3, r2, r3
 8015738:	43da      	mvns	r2, r3
 801573a:	4b1e      	ldr	r3, [pc, #120]	; (80157b4 <xTaskPriorityInherit+0xe8>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	4013      	ands	r3, r2
 8015740:	4a1c      	ldr	r2, [pc, #112]	; (80157b4 <xTaskPriorityInherit+0xe8>)
 8015742:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015744:	4b19      	ldr	r3, [pc, #100]	; (80157ac <xTaskPriorityInherit+0xe0>)
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015752:	2201      	movs	r2, #1
 8015754:	409a      	lsls	r2, r3
 8015756:	4b17      	ldr	r3, [pc, #92]	; (80157b4 <xTaskPriorityInherit+0xe8>)
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	4313      	orrs	r3, r2
 801575c:	4a15      	ldr	r2, [pc, #84]	; (80157b4 <xTaskPriorityInherit+0xe8>)
 801575e:	6013      	str	r3, [r2, #0]
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015764:	4613      	mov	r3, r2
 8015766:	009b      	lsls	r3, r3, #2
 8015768:	4413      	add	r3, r2
 801576a:	009b      	lsls	r3, r3, #2
 801576c:	4a10      	ldr	r2, [pc, #64]	; (80157b0 <xTaskPriorityInherit+0xe4>)
 801576e:	441a      	add	r2, r3
 8015770:	68bb      	ldr	r3, [r7, #8]
 8015772:	3304      	adds	r3, #4
 8015774:	4619      	mov	r1, r3
 8015776:	4610      	mov	r0, r2
 8015778:	f7fe faab 	bl	8013cd2 <vListInsertEnd>
 801577c:	e004      	b.n	8015788 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801577e:	4b0b      	ldr	r3, [pc, #44]	; (80157ac <xTaskPriorityInherit+0xe0>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015784:	68bb      	ldr	r3, [r7, #8]
 8015786:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015788:	2301      	movs	r3, #1
 801578a:	60fb      	str	r3, [r7, #12]
 801578c:	e009      	b.n	80157a2 <xTaskPriorityInherit+0xd6>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8015794:	4b05      	ldr	r3, [pc, #20]	; (80157ac <xTaskPriorityInherit+0xe0>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801579a:	429a      	cmp	r2, r3
 801579c:	d201      	bcs.n	80157a2 <xTaskPriorityInherit+0xd6>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801579e:	2301      	movs	r3, #1
 80157a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80157a2:	68fb      	ldr	r3, [r7, #12]
	}
 80157a4:	4618      	mov	r0, r3
 80157a6:	3710      	adds	r7, #16
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	2001a8a4 	.word	0x2001a8a4
 80157b0:	2001a8a8 	.word	0x2001a8a8
 80157b4:	2001a9ac 	.word	0x2001a9ac

080157b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b086      	sub	sp, #24
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80157c4:	2300      	movs	r3, #0
 80157c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d074      	beq.n	80158b8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80157ce:	4b3d      	ldr	r3, [pc, #244]	; (80158c4 <xTaskPriorityDisinherit+0x10c>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	693a      	ldr	r2, [r7, #16]
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d00a      	beq.n	80157ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80157d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157dc:	f383 8811 	msr	BASEPRI, r3
 80157e0:	f3bf 8f6f 	isb	sy
 80157e4:	f3bf 8f4f 	dsb	sy
 80157e8:	60fb      	str	r3, [r7, #12]
}
 80157ea:	bf00      	nop
 80157ec:	e7fe      	b.n	80157ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80157ee:	693b      	ldr	r3, [r7, #16]
 80157f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d10a      	bne.n	801580e <xTaskPriorityDisinherit+0x56>
	__asm volatile
 80157f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157fc:	f383 8811 	msr	BASEPRI, r3
 8015800:	f3bf 8f6f 	isb	sy
 8015804:	f3bf 8f4f 	dsb	sy
 8015808:	60bb      	str	r3, [r7, #8]
}
 801580a:	bf00      	nop
 801580c:	e7fe      	b.n	801580c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801580e:	693b      	ldr	r3, [r7, #16]
 8015810:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015814:	1e5a      	subs	r2, r3, #1
 8015816:	693b      	ldr	r3, [r7, #16]
 8015818:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801581c:	693b      	ldr	r3, [r7, #16]
 801581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015820:	693b      	ldr	r3, [r7, #16]
 8015822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015826:	429a      	cmp	r2, r3
 8015828:	d046      	beq.n	80158b8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801582a:	693b      	ldr	r3, [r7, #16]
 801582c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015830:	2b00      	cmp	r3, #0
 8015832:	d141      	bne.n	80158b8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015834:	693b      	ldr	r3, [r7, #16]
 8015836:	3304      	adds	r3, #4
 8015838:	4618      	mov	r0, r3
 801583a:	f7fe faa7 	bl	8013d8c <uxListRemove>
 801583e:	4603      	mov	r3, r0
 8015840:	2b00      	cmp	r3, #0
 8015842:	d115      	bne.n	8015870 <xTaskPriorityDisinherit+0xb8>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015844:	693b      	ldr	r3, [r7, #16]
 8015846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015848:	491f      	ldr	r1, [pc, #124]	; (80158c8 <xTaskPriorityDisinherit+0x110>)
 801584a:	4613      	mov	r3, r2
 801584c:	009b      	lsls	r3, r3, #2
 801584e:	4413      	add	r3, r2
 8015850:	009b      	lsls	r3, r3, #2
 8015852:	440b      	add	r3, r1
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d10a      	bne.n	8015870 <xTaskPriorityDisinherit+0xb8>
 801585a:	693b      	ldr	r3, [r7, #16]
 801585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801585e:	2201      	movs	r2, #1
 8015860:	fa02 f303 	lsl.w	r3, r2, r3
 8015864:	43da      	mvns	r2, r3
 8015866:	4b19      	ldr	r3, [pc, #100]	; (80158cc <xTaskPriorityDisinherit+0x114>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	4013      	ands	r3, r2
 801586c:	4a17      	ldr	r2, [pc, #92]	; (80158cc <xTaskPriorityDisinherit+0x114>)
 801586e:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015870:	693b      	ldr	r3, [r7, #16]
 8015872:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8015876:	693b      	ldr	r3, [r7, #16]
 8015878:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801587a:	693b      	ldr	r3, [r7, #16]
 801587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801587e:	f1c3 0207 	rsb	r2, r3, #7
 8015882:	693b      	ldr	r3, [r7, #16]
 8015884:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015886:	693b      	ldr	r3, [r7, #16]
 8015888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801588a:	2201      	movs	r2, #1
 801588c:	409a      	lsls	r2, r3
 801588e:	4b0f      	ldr	r3, [pc, #60]	; (80158cc <xTaskPriorityDisinherit+0x114>)
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	4313      	orrs	r3, r2
 8015894:	4a0d      	ldr	r2, [pc, #52]	; (80158cc <xTaskPriorityDisinherit+0x114>)
 8015896:	6013      	str	r3, [r2, #0]
 8015898:	693b      	ldr	r3, [r7, #16]
 801589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801589c:	4613      	mov	r3, r2
 801589e:	009b      	lsls	r3, r3, #2
 80158a0:	4413      	add	r3, r2
 80158a2:	009b      	lsls	r3, r3, #2
 80158a4:	4a08      	ldr	r2, [pc, #32]	; (80158c8 <xTaskPriorityDisinherit+0x110>)
 80158a6:	441a      	add	r2, r3
 80158a8:	693b      	ldr	r3, [r7, #16]
 80158aa:	3304      	adds	r3, #4
 80158ac:	4619      	mov	r1, r3
 80158ae:	4610      	mov	r0, r2
 80158b0:	f7fe fa0f 	bl	8013cd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80158b4:	2301      	movs	r3, #1
 80158b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80158b8:	697b      	ldr	r3, [r7, #20]
	}
 80158ba:	4618      	mov	r0, r3
 80158bc:	3718      	adds	r7, #24
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}
 80158c2:	bf00      	nop
 80158c4:	2001a8a4 	.word	0x2001a8a4
 80158c8:	2001a8a8 	.word	0x2001a8a8
 80158cc:	2001a9ac 	.word	0x2001a9ac

080158d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b088      	sub	sp, #32
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
 80158d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80158de:	2301      	movs	r3, #1
 80158e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d07b      	beq.n	80159e0 <vTaskPriorityDisinheritAfterTimeout+0x110>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80158e8:	69bb      	ldr	r3, [r7, #24]
 80158ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d10a      	bne.n	8015908 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80158f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158f6:	f383 8811 	msr	BASEPRI, r3
 80158fa:	f3bf 8f6f 	isb	sy
 80158fe:	f3bf 8f4f 	dsb	sy
 8015902:	60fb      	str	r3, [r7, #12]
}
 8015904:	bf00      	nop
 8015906:	e7fe      	b.n	8015906 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015908:	69bb      	ldr	r3, [r7, #24]
 801590a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801590e:	683a      	ldr	r2, [r7, #0]
 8015910:	429a      	cmp	r2, r3
 8015912:	d902      	bls.n	801591a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	61fb      	str	r3, [r7, #28]
 8015918:	e003      	b.n	8015922 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801591a:	69bb      	ldr	r3, [r7, #24]
 801591c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015920:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015926:	69fa      	ldr	r2, [r7, #28]
 8015928:	429a      	cmp	r2, r3
 801592a:	d059      	beq.n	80159e0 <vTaskPriorityDisinheritAfterTimeout+0x110>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801592c:	69bb      	ldr	r3, [r7, #24]
 801592e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015932:	697a      	ldr	r2, [r7, #20]
 8015934:	429a      	cmp	r2, r3
 8015936:	d153      	bne.n	80159e0 <vTaskPriorityDisinheritAfterTimeout+0x110>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015938:	4b2b      	ldr	r3, [pc, #172]	; (80159e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	69ba      	ldr	r2, [r7, #24]
 801593e:	429a      	cmp	r2, r3
 8015940:	d10a      	bne.n	8015958 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8015942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015946:	f383 8811 	msr	BASEPRI, r3
 801594a:	f3bf 8f6f 	isb	sy
 801594e:	f3bf 8f4f 	dsb	sy
 8015952:	60bb      	str	r3, [r7, #8]
}
 8015954:	bf00      	nop
 8015956:	e7fe      	b.n	8015956 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015958:	69bb      	ldr	r3, [r7, #24]
 801595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801595c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	69fa      	ldr	r2, [r7, #28]
 8015962:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015964:	69bb      	ldr	r3, [r7, #24]
 8015966:	699b      	ldr	r3, [r3, #24]
 8015968:	2b00      	cmp	r3, #0
 801596a:	db04      	blt.n	8015976 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801596c:	69fb      	ldr	r3, [r7, #28]
 801596e:	f1c3 0207 	rsb	r2, r3, #7
 8015972:	69bb      	ldr	r3, [r7, #24]
 8015974:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015976:	69bb      	ldr	r3, [r7, #24]
 8015978:	6959      	ldr	r1, [r3, #20]
 801597a:	693a      	ldr	r2, [r7, #16]
 801597c:	4613      	mov	r3, r2
 801597e:	009b      	lsls	r3, r3, #2
 8015980:	4413      	add	r3, r2
 8015982:	009b      	lsls	r3, r3, #2
 8015984:	4a19      	ldr	r2, [pc, #100]	; (80159ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015986:	4413      	add	r3, r2
 8015988:	4299      	cmp	r1, r3
 801598a:	d129      	bne.n	80159e0 <vTaskPriorityDisinheritAfterTimeout+0x110>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801598c:	69bb      	ldr	r3, [r7, #24]
 801598e:	3304      	adds	r3, #4
 8015990:	4618      	mov	r0, r3
 8015992:	f7fe f9fb 	bl	8013d8c <uxListRemove>
 8015996:	4603      	mov	r3, r0
 8015998:	2b00      	cmp	r3, #0
 801599a:	d10a      	bne.n	80159b2 <vTaskPriorityDisinheritAfterTimeout+0xe2>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801599c:	69bb      	ldr	r3, [r7, #24]
 801599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159a0:	2201      	movs	r2, #1
 80159a2:	fa02 f303 	lsl.w	r3, r2, r3
 80159a6:	43da      	mvns	r2, r3
 80159a8:	4b11      	ldr	r3, [pc, #68]	; (80159f0 <vTaskPriorityDisinheritAfterTimeout+0x120>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	4013      	ands	r3, r2
 80159ae:	4a10      	ldr	r2, [pc, #64]	; (80159f0 <vTaskPriorityDisinheritAfterTimeout+0x120>)
 80159b0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80159b2:	69bb      	ldr	r3, [r7, #24]
 80159b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159b6:	2201      	movs	r2, #1
 80159b8:	409a      	lsls	r2, r3
 80159ba:	4b0d      	ldr	r3, [pc, #52]	; (80159f0 <vTaskPriorityDisinheritAfterTimeout+0x120>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	4313      	orrs	r3, r2
 80159c0:	4a0b      	ldr	r2, [pc, #44]	; (80159f0 <vTaskPriorityDisinheritAfterTimeout+0x120>)
 80159c2:	6013      	str	r3, [r2, #0]
 80159c4:	69bb      	ldr	r3, [r7, #24]
 80159c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159c8:	4613      	mov	r3, r2
 80159ca:	009b      	lsls	r3, r3, #2
 80159cc:	4413      	add	r3, r2
 80159ce:	009b      	lsls	r3, r3, #2
 80159d0:	4a06      	ldr	r2, [pc, #24]	; (80159ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80159d2:	441a      	add	r2, r3
 80159d4:	69bb      	ldr	r3, [r7, #24]
 80159d6:	3304      	adds	r3, #4
 80159d8:	4619      	mov	r1, r3
 80159da:	4610      	mov	r0, r2
 80159dc:	f7fe f979 	bl	8013cd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80159e0:	bf00      	nop
 80159e2:	3720      	adds	r7, #32
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}
 80159e8:	2001a8a4 	.word	0x2001a8a4
 80159ec:	2001a8a8 	.word	0x2001a8a8
 80159f0:	2001a9ac 	.word	0x2001a9ac

080159f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80159f4:	b480      	push	{r7}
 80159f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80159f8:	4b08      	ldr	r3, [pc, #32]	; (8015a1c <pvTaskIncrementMutexHeldCount+0x28>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d006      	beq.n	8015a0e <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015a00:	4b06      	ldr	r3, [pc, #24]	; (8015a1c <pvTaskIncrementMutexHeldCount+0x28>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8015a08:	3201      	adds	r2, #1
 8015a0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		}

		return pxCurrentTCB;
 8015a0e:	4b03      	ldr	r3, [pc, #12]	; (8015a1c <pvTaskIncrementMutexHeldCount+0x28>)
 8015a10:	681b      	ldr	r3, [r3, #0]
	}
 8015a12:	4618      	mov	r0, r3
 8015a14:	46bd      	mov	sp, r7
 8015a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1a:	4770      	bx	lr
 8015a1c:	2001a8a4 	.word	0x2001a8a4

08015a20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b084      	sub	sp, #16
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
 8015a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015a2a:	4b29      	ldr	r3, [pc, #164]	; (8015ad0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015a30:	4b28      	ldr	r3, [pc, #160]	; (8015ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	3304      	adds	r3, #4
 8015a36:	4618      	mov	r0, r3
 8015a38:	f7fe f9a8 	bl	8013d8c <uxListRemove>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d10b      	bne.n	8015a5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015a42:	4b24      	ldr	r3, [pc, #144]	; (8015ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a48:	2201      	movs	r2, #1
 8015a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8015a4e:	43da      	mvns	r2, r3
 8015a50:	4b21      	ldr	r3, [pc, #132]	; (8015ad8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	4013      	ands	r3, r2
 8015a56:	4a20      	ldr	r2, [pc, #128]	; (8015ad8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015a58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a60:	d10a      	bne.n	8015a78 <prvAddCurrentTaskToDelayedList+0x58>
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d007      	beq.n	8015a78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a68:	4b1a      	ldr	r3, [pc, #104]	; (8015ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	3304      	adds	r3, #4
 8015a6e:	4619      	mov	r1, r3
 8015a70:	481a      	ldr	r0, [pc, #104]	; (8015adc <prvAddCurrentTaskToDelayedList+0xbc>)
 8015a72:	f7fe f92e 	bl	8013cd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015a76:	e026      	b.n	8015ac6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015a78:	68fa      	ldr	r2, [r7, #12]
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	4413      	add	r3, r2
 8015a7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015a80:	4b14      	ldr	r3, [pc, #80]	; (8015ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	68ba      	ldr	r2, [r7, #8]
 8015a86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015a88:	68ba      	ldr	r2, [r7, #8]
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d209      	bcs.n	8015aa4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a90:	4b13      	ldr	r3, [pc, #76]	; (8015ae0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015a92:	681a      	ldr	r2, [r3, #0]
 8015a94:	4b0f      	ldr	r3, [pc, #60]	; (8015ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	3304      	adds	r3, #4
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	4610      	mov	r0, r2
 8015a9e:	f7fe f93c 	bl	8013d1a <vListInsert>
}
 8015aa2:	e010      	b.n	8015ac6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015aa4:	4b0f      	ldr	r3, [pc, #60]	; (8015ae4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015aa6:	681a      	ldr	r2, [r3, #0]
 8015aa8:	4b0a      	ldr	r3, [pc, #40]	; (8015ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	3304      	adds	r3, #4
 8015aae:	4619      	mov	r1, r3
 8015ab0:	4610      	mov	r0, r2
 8015ab2:	f7fe f932 	bl	8013d1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015ab6:	4b0c      	ldr	r3, [pc, #48]	; (8015ae8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	68ba      	ldr	r2, [r7, #8]
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d202      	bcs.n	8015ac6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015ac0:	4a09      	ldr	r2, [pc, #36]	; (8015ae8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015ac2:	68bb      	ldr	r3, [r7, #8]
 8015ac4:	6013      	str	r3, [r2, #0]
}
 8015ac6:	bf00      	nop
 8015ac8:	3710      	adds	r7, #16
 8015aca:	46bd      	mov	sp, r7
 8015acc:	bd80      	pop	{r7, pc}
 8015ace:	bf00      	nop
 8015ad0:	2001a9a8 	.word	0x2001a9a8
 8015ad4:	2001a8a4 	.word	0x2001a8a4
 8015ad8:	2001a9ac 	.word	0x2001a9ac
 8015adc:	2001a990 	.word	0x2001a990
 8015ae0:	2001a960 	.word	0x2001a960
 8015ae4:	2001a95c 	.word	0x2001a95c
 8015ae8:	2001a9c4 	.word	0x2001a9c4

08015aec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015aec:	b480      	push	{r7}
 8015aee:	b085      	sub	sp, #20
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	60f8      	str	r0, [r7, #12]
 8015af4:	60b9      	str	r1, [r7, #8]
 8015af6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	3b04      	subs	r3, #4
 8015afc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	3b04      	subs	r3, #4
 8015b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	f023 0201 	bic.w	r2, r3, #1
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	3b04      	subs	r3, #4
 8015b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015b1c:	4a0c      	ldr	r2, [pc, #48]	; (8015b50 <pxPortInitialiseStack+0x64>)
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	3b14      	subs	r3, #20
 8015b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015b28:	687a      	ldr	r2, [r7, #4]
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	3b04      	subs	r3, #4
 8015b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	f06f 0202 	mvn.w	r2, #2
 8015b3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	3b20      	subs	r3, #32
 8015b40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015b42:	68fb      	ldr	r3, [r7, #12]
}
 8015b44:	4618      	mov	r0, r3
 8015b46:	3714      	adds	r7, #20
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b4e:	4770      	bx	lr
 8015b50:	08015b55 	.word	0x08015b55

08015b54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015b54:	b480      	push	{r7}
 8015b56:	b085      	sub	sp, #20
 8015b58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015b5e:	4b12      	ldr	r3, [pc, #72]	; (8015ba8 <prvTaskExitError+0x54>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b66:	d00a      	beq.n	8015b7e <prvTaskExitError+0x2a>
	__asm volatile
 8015b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b6c:	f383 8811 	msr	BASEPRI, r3
 8015b70:	f3bf 8f6f 	isb	sy
 8015b74:	f3bf 8f4f 	dsb	sy
 8015b78:	60fb      	str	r3, [r7, #12]
}
 8015b7a:	bf00      	nop
 8015b7c:	e7fe      	b.n	8015b7c <prvTaskExitError+0x28>
	__asm volatile
 8015b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b82:	f383 8811 	msr	BASEPRI, r3
 8015b86:	f3bf 8f6f 	isb	sy
 8015b8a:	f3bf 8f4f 	dsb	sy
 8015b8e:	60bb      	str	r3, [r7, #8]
}
 8015b90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015b92:	bf00      	nop
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d0fc      	beq.n	8015b94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015b9a:	bf00      	nop
 8015b9c:	bf00      	nop
 8015b9e:	3714      	adds	r7, #20
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba6:	4770      	bx	lr
 8015ba8:	200008c0 	.word	0x200008c0
 8015bac:	00000000 	.word	0x00000000

08015bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015bb0:	4b07      	ldr	r3, [pc, #28]	; (8015bd0 <pxCurrentTCBConst2>)
 8015bb2:	6819      	ldr	r1, [r3, #0]
 8015bb4:	6808      	ldr	r0, [r1, #0]
 8015bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bba:	f380 8809 	msr	PSP, r0
 8015bbe:	f3bf 8f6f 	isb	sy
 8015bc2:	f04f 0000 	mov.w	r0, #0
 8015bc6:	f380 8811 	msr	BASEPRI, r0
 8015bca:	4770      	bx	lr
 8015bcc:	f3af 8000 	nop.w

08015bd0 <pxCurrentTCBConst2>:
 8015bd0:	2001a8a4 	.word	0x2001a8a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015bd4:	bf00      	nop
 8015bd6:	bf00      	nop

08015bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015bd8:	4808      	ldr	r0, [pc, #32]	; (8015bfc <prvPortStartFirstTask+0x24>)
 8015bda:	6800      	ldr	r0, [r0, #0]
 8015bdc:	6800      	ldr	r0, [r0, #0]
 8015bde:	f380 8808 	msr	MSP, r0
 8015be2:	f04f 0000 	mov.w	r0, #0
 8015be6:	f380 8814 	msr	CONTROL, r0
 8015bea:	b662      	cpsie	i
 8015bec:	b661      	cpsie	f
 8015bee:	f3bf 8f4f 	dsb	sy
 8015bf2:	f3bf 8f6f 	isb	sy
 8015bf6:	df00      	svc	0
 8015bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015bfa:	bf00      	nop
 8015bfc:	e000ed08 	.word	0xe000ed08

08015c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b086      	sub	sp, #24
 8015c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015c06:	4b46      	ldr	r3, [pc, #280]	; (8015d20 <xPortStartScheduler+0x120>)
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4a46      	ldr	r2, [pc, #280]	; (8015d24 <xPortStartScheduler+0x124>)
 8015c0c:	4293      	cmp	r3, r2
 8015c0e:	d10a      	bne.n	8015c26 <xPortStartScheduler+0x26>
	__asm volatile
 8015c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c14:	f383 8811 	msr	BASEPRI, r3
 8015c18:	f3bf 8f6f 	isb	sy
 8015c1c:	f3bf 8f4f 	dsb	sy
 8015c20:	613b      	str	r3, [r7, #16]
}
 8015c22:	bf00      	nop
 8015c24:	e7fe      	b.n	8015c24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015c26:	4b3e      	ldr	r3, [pc, #248]	; (8015d20 <xPortStartScheduler+0x120>)
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	4a3f      	ldr	r2, [pc, #252]	; (8015d28 <xPortStartScheduler+0x128>)
 8015c2c:	4293      	cmp	r3, r2
 8015c2e:	d10a      	bne.n	8015c46 <xPortStartScheduler+0x46>
	__asm volatile
 8015c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c34:	f383 8811 	msr	BASEPRI, r3
 8015c38:	f3bf 8f6f 	isb	sy
 8015c3c:	f3bf 8f4f 	dsb	sy
 8015c40:	60fb      	str	r3, [r7, #12]
}
 8015c42:	bf00      	nop
 8015c44:	e7fe      	b.n	8015c44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015c46:	4b39      	ldr	r3, [pc, #228]	; (8015d2c <xPortStartScheduler+0x12c>)
 8015c48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	781b      	ldrb	r3, [r3, #0]
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015c52:	697b      	ldr	r3, [r7, #20]
 8015c54:	22ff      	movs	r2, #255	; 0xff
 8015c56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015c60:	78fb      	ldrb	r3, [r7, #3]
 8015c62:	b2db      	uxtb	r3, r3
 8015c64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015c68:	b2da      	uxtb	r2, r3
 8015c6a:	4b31      	ldr	r3, [pc, #196]	; (8015d30 <xPortStartScheduler+0x130>)
 8015c6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015c6e:	4b31      	ldr	r3, [pc, #196]	; (8015d34 <xPortStartScheduler+0x134>)
 8015c70:	2207      	movs	r2, #7
 8015c72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015c74:	e009      	b.n	8015c8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015c76:	4b2f      	ldr	r3, [pc, #188]	; (8015d34 <xPortStartScheduler+0x134>)
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	3b01      	subs	r3, #1
 8015c7c:	4a2d      	ldr	r2, [pc, #180]	; (8015d34 <xPortStartScheduler+0x134>)
 8015c7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015c80:	78fb      	ldrb	r3, [r7, #3]
 8015c82:	b2db      	uxtb	r3, r3
 8015c84:	005b      	lsls	r3, r3, #1
 8015c86:	b2db      	uxtb	r3, r3
 8015c88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015c8a:	78fb      	ldrb	r3, [r7, #3]
 8015c8c:	b2db      	uxtb	r3, r3
 8015c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015c92:	2b80      	cmp	r3, #128	; 0x80
 8015c94:	d0ef      	beq.n	8015c76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015c96:	4b27      	ldr	r3, [pc, #156]	; (8015d34 <xPortStartScheduler+0x134>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	f1c3 0307 	rsb	r3, r3, #7
 8015c9e:	2b04      	cmp	r3, #4
 8015ca0:	d00a      	beq.n	8015cb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ca6:	f383 8811 	msr	BASEPRI, r3
 8015caa:	f3bf 8f6f 	isb	sy
 8015cae:	f3bf 8f4f 	dsb	sy
 8015cb2:	60bb      	str	r3, [r7, #8]
}
 8015cb4:	bf00      	nop
 8015cb6:	e7fe      	b.n	8015cb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015cb8:	4b1e      	ldr	r3, [pc, #120]	; (8015d34 <xPortStartScheduler+0x134>)
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	021b      	lsls	r3, r3, #8
 8015cbe:	4a1d      	ldr	r2, [pc, #116]	; (8015d34 <xPortStartScheduler+0x134>)
 8015cc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015cc2:	4b1c      	ldr	r3, [pc, #112]	; (8015d34 <xPortStartScheduler+0x134>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015cca:	4a1a      	ldr	r2, [pc, #104]	; (8015d34 <xPortStartScheduler+0x134>)
 8015ccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	b2da      	uxtb	r2, r3
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015cd6:	4b18      	ldr	r3, [pc, #96]	; (8015d38 <xPortStartScheduler+0x138>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	4a17      	ldr	r2, [pc, #92]	; (8015d38 <xPortStartScheduler+0x138>)
 8015cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015ce2:	4b15      	ldr	r3, [pc, #84]	; (8015d38 <xPortStartScheduler+0x138>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	4a14      	ldr	r2, [pc, #80]	; (8015d38 <xPortStartScheduler+0x138>)
 8015ce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015cec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015cee:	f000 f8dd 	bl	8015eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015cf2:	4b12      	ldr	r3, [pc, #72]	; (8015d3c <xPortStartScheduler+0x13c>)
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015cf8:	f000 f8fc 	bl	8015ef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015cfc:	4b10      	ldr	r3, [pc, #64]	; (8015d40 <xPortStartScheduler+0x140>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	4a0f      	ldr	r2, [pc, #60]	; (8015d40 <xPortStartScheduler+0x140>)
 8015d02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015d06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015d08:	f7ff ff66 	bl	8015bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015d0c:	f7ff fa84 	bl	8015218 <vTaskSwitchContext>
	prvTaskExitError();
 8015d10:	f7ff ff20 	bl	8015b54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015d14:	2300      	movs	r3, #0
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	3718      	adds	r7, #24
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}
 8015d1e:	bf00      	nop
 8015d20:	e000ed00 	.word	0xe000ed00
 8015d24:	410fc271 	.word	0x410fc271
 8015d28:	410fc270 	.word	0x410fc270
 8015d2c:	e000e400 	.word	0xe000e400
 8015d30:	2001a9d0 	.word	0x2001a9d0
 8015d34:	2001a9d4 	.word	0x2001a9d4
 8015d38:	e000ed20 	.word	0xe000ed20
 8015d3c:	200008c0 	.word	0x200008c0
 8015d40:	e000ef34 	.word	0xe000ef34

08015d44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015d44:	b480      	push	{r7}
 8015d46:	b083      	sub	sp, #12
 8015d48:	af00      	add	r7, sp, #0
	__asm volatile
 8015d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d4e:	f383 8811 	msr	BASEPRI, r3
 8015d52:	f3bf 8f6f 	isb	sy
 8015d56:	f3bf 8f4f 	dsb	sy
 8015d5a:	607b      	str	r3, [r7, #4]
}
 8015d5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015d5e:	4b0f      	ldr	r3, [pc, #60]	; (8015d9c <vPortEnterCritical+0x58>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	3301      	adds	r3, #1
 8015d64:	4a0d      	ldr	r2, [pc, #52]	; (8015d9c <vPortEnterCritical+0x58>)
 8015d66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015d68:	4b0c      	ldr	r3, [pc, #48]	; (8015d9c <vPortEnterCritical+0x58>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	2b01      	cmp	r3, #1
 8015d6e:	d10f      	bne.n	8015d90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015d70:	4b0b      	ldr	r3, [pc, #44]	; (8015da0 <vPortEnterCritical+0x5c>)
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	b2db      	uxtb	r3, r3
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d00a      	beq.n	8015d90 <vPortEnterCritical+0x4c>
	__asm volatile
 8015d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d7e:	f383 8811 	msr	BASEPRI, r3
 8015d82:	f3bf 8f6f 	isb	sy
 8015d86:	f3bf 8f4f 	dsb	sy
 8015d8a:	603b      	str	r3, [r7, #0]
}
 8015d8c:	bf00      	nop
 8015d8e:	e7fe      	b.n	8015d8e <vPortEnterCritical+0x4a>
	}
}
 8015d90:	bf00      	nop
 8015d92:	370c      	adds	r7, #12
 8015d94:	46bd      	mov	sp, r7
 8015d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9a:	4770      	bx	lr
 8015d9c:	200008c0 	.word	0x200008c0
 8015da0:	e000ed04 	.word	0xe000ed04

08015da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015da4:	b480      	push	{r7}
 8015da6:	b083      	sub	sp, #12
 8015da8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015daa:	4b12      	ldr	r3, [pc, #72]	; (8015df4 <vPortExitCritical+0x50>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d10a      	bne.n	8015dc8 <vPortExitCritical+0x24>
	__asm volatile
 8015db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015db6:	f383 8811 	msr	BASEPRI, r3
 8015dba:	f3bf 8f6f 	isb	sy
 8015dbe:	f3bf 8f4f 	dsb	sy
 8015dc2:	607b      	str	r3, [r7, #4]
}
 8015dc4:	bf00      	nop
 8015dc6:	e7fe      	b.n	8015dc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015dc8:	4b0a      	ldr	r3, [pc, #40]	; (8015df4 <vPortExitCritical+0x50>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	3b01      	subs	r3, #1
 8015dce:	4a09      	ldr	r2, [pc, #36]	; (8015df4 <vPortExitCritical+0x50>)
 8015dd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015dd2:	4b08      	ldr	r3, [pc, #32]	; (8015df4 <vPortExitCritical+0x50>)
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d105      	bne.n	8015de6 <vPortExitCritical+0x42>
 8015dda:	2300      	movs	r3, #0
 8015ddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015dde:	683b      	ldr	r3, [r7, #0]
 8015de0:	f383 8811 	msr	BASEPRI, r3
}
 8015de4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015de6:	bf00      	nop
 8015de8:	370c      	adds	r7, #12
 8015dea:	46bd      	mov	sp, r7
 8015dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df0:	4770      	bx	lr
 8015df2:	bf00      	nop
 8015df4:	200008c0 	.word	0x200008c0
	...

08015e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015e00:	f3ef 8009 	mrs	r0, PSP
 8015e04:	f3bf 8f6f 	isb	sy
 8015e08:	4b15      	ldr	r3, [pc, #84]	; (8015e60 <pxCurrentTCBConst>)
 8015e0a:	681a      	ldr	r2, [r3, #0]
 8015e0c:	f01e 0f10 	tst.w	lr, #16
 8015e10:	bf08      	it	eq
 8015e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e1a:	6010      	str	r0, [r2, #0]
 8015e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015e24:	f380 8811 	msr	BASEPRI, r0
 8015e28:	f3bf 8f4f 	dsb	sy
 8015e2c:	f3bf 8f6f 	isb	sy
 8015e30:	f7ff f9f2 	bl	8015218 <vTaskSwitchContext>
 8015e34:	f04f 0000 	mov.w	r0, #0
 8015e38:	f380 8811 	msr	BASEPRI, r0
 8015e3c:	bc09      	pop	{r0, r3}
 8015e3e:	6819      	ldr	r1, [r3, #0]
 8015e40:	6808      	ldr	r0, [r1, #0]
 8015e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e46:	f01e 0f10 	tst.w	lr, #16
 8015e4a:	bf08      	it	eq
 8015e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015e50:	f380 8809 	msr	PSP, r0
 8015e54:	f3bf 8f6f 	isb	sy
 8015e58:	4770      	bx	lr
 8015e5a:	bf00      	nop
 8015e5c:	f3af 8000 	nop.w

08015e60 <pxCurrentTCBConst>:
 8015e60:	2001a8a4 	.word	0x2001a8a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015e64:	bf00      	nop
 8015e66:	bf00      	nop

08015e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8015e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e72:	f383 8811 	msr	BASEPRI, r3
 8015e76:	f3bf 8f6f 	isb	sy
 8015e7a:	f3bf 8f4f 	dsb	sy
 8015e7e:	607b      	str	r3, [r7, #4]
}
 8015e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015e82:	f7ff f911 	bl	80150a8 <xTaskIncrementTick>
 8015e86:	4603      	mov	r3, r0
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d003      	beq.n	8015e94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015e8c:	4b06      	ldr	r3, [pc, #24]	; (8015ea8 <SysTick_Handler+0x40>)
 8015e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e92:	601a      	str	r2, [r3, #0]
 8015e94:	2300      	movs	r3, #0
 8015e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	f383 8811 	msr	BASEPRI, r3
}
 8015e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015ea0:	bf00      	nop
 8015ea2:	3708      	adds	r7, #8
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	bd80      	pop	{r7, pc}
 8015ea8:	e000ed04 	.word	0xe000ed04

08015eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015eac:	b480      	push	{r7}
 8015eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015eb0:	4b0b      	ldr	r3, [pc, #44]	; (8015ee0 <vPortSetupTimerInterrupt+0x34>)
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015eb6:	4b0b      	ldr	r3, [pc, #44]	; (8015ee4 <vPortSetupTimerInterrupt+0x38>)
 8015eb8:	2200      	movs	r2, #0
 8015eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015ebc:	4b0a      	ldr	r3, [pc, #40]	; (8015ee8 <vPortSetupTimerInterrupt+0x3c>)
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	4a0a      	ldr	r2, [pc, #40]	; (8015eec <vPortSetupTimerInterrupt+0x40>)
 8015ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8015ec6:	099b      	lsrs	r3, r3, #6
 8015ec8:	4a09      	ldr	r2, [pc, #36]	; (8015ef0 <vPortSetupTimerInterrupt+0x44>)
 8015eca:	3b01      	subs	r3, #1
 8015ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015ece:	4b04      	ldr	r3, [pc, #16]	; (8015ee0 <vPortSetupTimerInterrupt+0x34>)
 8015ed0:	2207      	movs	r2, #7
 8015ed2:	601a      	str	r2, [r3, #0]
}
 8015ed4:	bf00      	nop
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015edc:	4770      	bx	lr
 8015ede:	bf00      	nop
 8015ee0:	e000e010 	.word	0xe000e010
 8015ee4:	e000e018 	.word	0xe000e018
 8015ee8:	20000000 	.word	0x20000000
 8015eec:	10624dd3 	.word	0x10624dd3
 8015ef0:	e000e014 	.word	0xe000e014

08015ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015f04 <vPortEnableVFP+0x10>
 8015ef8:	6801      	ldr	r1, [r0, #0]
 8015efa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015efe:	6001      	str	r1, [r0, #0]
 8015f00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015f02:	bf00      	nop
 8015f04:	e000ed88 	.word	0xe000ed88

08015f08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015f08:	b480      	push	{r7}
 8015f0a:	b085      	sub	sp, #20
 8015f0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015f0e:	f3ef 8305 	mrs	r3, IPSR
 8015f12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	2b0f      	cmp	r3, #15
 8015f18:	d914      	bls.n	8015f44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015f1a:	4a17      	ldr	r2, [pc, #92]	; (8015f78 <vPortValidateInterruptPriority+0x70>)
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	4413      	add	r3, r2
 8015f20:	781b      	ldrb	r3, [r3, #0]
 8015f22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015f24:	4b15      	ldr	r3, [pc, #84]	; (8015f7c <vPortValidateInterruptPriority+0x74>)
 8015f26:	781b      	ldrb	r3, [r3, #0]
 8015f28:	7afa      	ldrb	r2, [r7, #11]
 8015f2a:	429a      	cmp	r2, r3
 8015f2c:	d20a      	bcs.n	8015f44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f32:	f383 8811 	msr	BASEPRI, r3
 8015f36:	f3bf 8f6f 	isb	sy
 8015f3a:	f3bf 8f4f 	dsb	sy
 8015f3e:	607b      	str	r3, [r7, #4]
}
 8015f40:	bf00      	nop
 8015f42:	e7fe      	b.n	8015f42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015f44:	4b0e      	ldr	r3, [pc, #56]	; (8015f80 <vPortValidateInterruptPriority+0x78>)
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015f4c:	4b0d      	ldr	r3, [pc, #52]	; (8015f84 <vPortValidateInterruptPriority+0x7c>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d90a      	bls.n	8015f6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f58:	f383 8811 	msr	BASEPRI, r3
 8015f5c:	f3bf 8f6f 	isb	sy
 8015f60:	f3bf 8f4f 	dsb	sy
 8015f64:	603b      	str	r3, [r7, #0]
}
 8015f66:	bf00      	nop
 8015f68:	e7fe      	b.n	8015f68 <vPortValidateInterruptPriority+0x60>
	}
 8015f6a:	bf00      	nop
 8015f6c:	3714      	adds	r7, #20
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f74:	4770      	bx	lr
 8015f76:	bf00      	nop
 8015f78:	e000e3f0 	.word	0xe000e3f0
 8015f7c:	2001a9d0 	.word	0x2001a9d0
 8015f80:	e000ed0c 	.word	0xe000ed0c
 8015f84:	2001a9d4 	.word	0x2001a9d4

08015f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b08a      	sub	sp, #40	; 0x28
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015f90:	2300      	movs	r3, #0
 8015f92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015f94:	f7fe ffde 	bl	8014f54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015f98:	4b5b      	ldr	r3, [pc, #364]	; (8016108 <pvPortMalloc+0x180>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d101      	bne.n	8015fa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015fa0:	f000 f920 	bl	80161e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015fa4:	4b59      	ldr	r3, [pc, #356]	; (801610c <pvPortMalloc+0x184>)
 8015fa6:	681a      	ldr	r2, [r3, #0]
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	4013      	ands	r3, r2
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	f040 8093 	bne.w	80160d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d01d      	beq.n	8015ff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015fb8:	2208      	movs	r2, #8
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	4413      	add	r3, r2
 8015fbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	f003 0307 	and.w	r3, r3, #7
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d014      	beq.n	8015ff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	f023 0307 	bic.w	r3, r3, #7
 8015fd0:	3308      	adds	r3, #8
 8015fd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f003 0307 	and.w	r3, r3, #7
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d00a      	beq.n	8015ff4 <pvPortMalloc+0x6c>
	__asm volatile
 8015fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe2:	f383 8811 	msr	BASEPRI, r3
 8015fe6:	f3bf 8f6f 	isb	sy
 8015fea:	f3bf 8f4f 	dsb	sy
 8015fee:	617b      	str	r3, [r7, #20]
}
 8015ff0:	bf00      	nop
 8015ff2:	e7fe      	b.n	8015ff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d06e      	beq.n	80160d8 <pvPortMalloc+0x150>
 8015ffa:	4b45      	ldr	r3, [pc, #276]	; (8016110 <pvPortMalloc+0x188>)
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	687a      	ldr	r2, [r7, #4]
 8016000:	429a      	cmp	r2, r3
 8016002:	d869      	bhi.n	80160d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016004:	4b43      	ldr	r3, [pc, #268]	; (8016114 <pvPortMalloc+0x18c>)
 8016006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016008:	4b42      	ldr	r3, [pc, #264]	; (8016114 <pvPortMalloc+0x18c>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801600e:	e004      	b.n	801601a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	687a      	ldr	r2, [r7, #4]
 8016020:	429a      	cmp	r2, r3
 8016022:	d903      	bls.n	801602c <pvPortMalloc+0xa4>
 8016024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d1f1      	bne.n	8016010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801602c:	4b36      	ldr	r3, [pc, #216]	; (8016108 <pvPortMalloc+0x180>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016032:	429a      	cmp	r2, r3
 8016034:	d050      	beq.n	80160d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016036:	6a3b      	ldr	r3, [r7, #32]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	2208      	movs	r2, #8
 801603c:	4413      	add	r3, r2
 801603e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016042:	681a      	ldr	r2, [r3, #0]
 8016044:	6a3b      	ldr	r3, [r7, #32]
 8016046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801604a:	685a      	ldr	r2, [r3, #4]
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	1ad2      	subs	r2, r2, r3
 8016050:	2308      	movs	r3, #8
 8016052:	005b      	lsls	r3, r3, #1
 8016054:	429a      	cmp	r2, r3
 8016056:	d91f      	bls.n	8016098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	4413      	add	r3, r2
 801605e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016060:	69bb      	ldr	r3, [r7, #24]
 8016062:	f003 0307 	and.w	r3, r3, #7
 8016066:	2b00      	cmp	r3, #0
 8016068:	d00a      	beq.n	8016080 <pvPortMalloc+0xf8>
	__asm volatile
 801606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801606e:	f383 8811 	msr	BASEPRI, r3
 8016072:	f3bf 8f6f 	isb	sy
 8016076:	f3bf 8f4f 	dsb	sy
 801607a:	613b      	str	r3, [r7, #16]
}
 801607c:	bf00      	nop
 801607e:	e7fe      	b.n	801607e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016082:	685a      	ldr	r2, [r3, #4]
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	1ad2      	subs	r2, r2, r3
 8016088:	69bb      	ldr	r3, [r7, #24]
 801608a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801608e:	687a      	ldr	r2, [r7, #4]
 8016090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016092:	69b8      	ldr	r0, [r7, #24]
 8016094:	f000 f908 	bl	80162a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016098:	4b1d      	ldr	r3, [pc, #116]	; (8016110 <pvPortMalloc+0x188>)
 801609a:	681a      	ldr	r2, [r3, #0]
 801609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	1ad3      	subs	r3, r2, r3
 80160a2:	4a1b      	ldr	r2, [pc, #108]	; (8016110 <pvPortMalloc+0x188>)
 80160a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80160a6:	4b1a      	ldr	r3, [pc, #104]	; (8016110 <pvPortMalloc+0x188>)
 80160a8:	681a      	ldr	r2, [r3, #0]
 80160aa:	4b1b      	ldr	r3, [pc, #108]	; (8016118 <pvPortMalloc+0x190>)
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d203      	bcs.n	80160ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80160b2:	4b17      	ldr	r3, [pc, #92]	; (8016110 <pvPortMalloc+0x188>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	4a18      	ldr	r2, [pc, #96]	; (8016118 <pvPortMalloc+0x190>)
 80160b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80160ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160bc:	685a      	ldr	r2, [r3, #4]
 80160be:	4b13      	ldr	r3, [pc, #76]	; (801610c <pvPortMalloc+0x184>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	431a      	orrs	r2, r3
 80160c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80160c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ca:	2200      	movs	r2, #0
 80160cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80160ce:	4b13      	ldr	r3, [pc, #76]	; (801611c <pvPortMalloc+0x194>)
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	3301      	adds	r3, #1
 80160d4:	4a11      	ldr	r2, [pc, #68]	; (801611c <pvPortMalloc+0x194>)
 80160d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80160d8:	f7fe ff4a 	bl	8014f70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80160dc:	69fb      	ldr	r3, [r7, #28]
 80160de:	f003 0307 	and.w	r3, r3, #7
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d00a      	beq.n	80160fc <pvPortMalloc+0x174>
	__asm volatile
 80160e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ea:	f383 8811 	msr	BASEPRI, r3
 80160ee:	f3bf 8f6f 	isb	sy
 80160f2:	f3bf 8f4f 	dsb	sy
 80160f6:	60fb      	str	r3, [r7, #12]
}
 80160f8:	bf00      	nop
 80160fa:	e7fe      	b.n	80160fa <pvPortMalloc+0x172>
	return pvReturn;
 80160fc:	69fb      	ldr	r3, [r7, #28]
}
 80160fe:	4618      	mov	r0, r3
 8016100:	3728      	adds	r7, #40	; 0x28
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}
 8016106:	bf00      	nop
 8016108:	2001f800 	.word	0x2001f800
 801610c:	2001f814 	.word	0x2001f814
 8016110:	2001f804 	.word	0x2001f804
 8016114:	2001f7f8 	.word	0x2001f7f8
 8016118:	2001f808 	.word	0x2001f808
 801611c:	2001f80c 	.word	0x2001f80c

08016120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b086      	sub	sp, #24
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d04d      	beq.n	80161ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016132:	2308      	movs	r3, #8
 8016134:	425b      	negs	r3, r3
 8016136:	697a      	ldr	r2, [r7, #20]
 8016138:	4413      	add	r3, r2
 801613a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801613c:	697b      	ldr	r3, [r7, #20]
 801613e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016140:	693b      	ldr	r3, [r7, #16]
 8016142:	685a      	ldr	r2, [r3, #4]
 8016144:	4b24      	ldr	r3, [pc, #144]	; (80161d8 <vPortFree+0xb8>)
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	4013      	ands	r3, r2
 801614a:	2b00      	cmp	r3, #0
 801614c:	d10a      	bne.n	8016164 <vPortFree+0x44>
	__asm volatile
 801614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016152:	f383 8811 	msr	BASEPRI, r3
 8016156:	f3bf 8f6f 	isb	sy
 801615a:	f3bf 8f4f 	dsb	sy
 801615e:	60fb      	str	r3, [r7, #12]
}
 8016160:	bf00      	nop
 8016162:	e7fe      	b.n	8016162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016164:	693b      	ldr	r3, [r7, #16]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d00a      	beq.n	8016182 <vPortFree+0x62>
	__asm volatile
 801616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016170:	f383 8811 	msr	BASEPRI, r3
 8016174:	f3bf 8f6f 	isb	sy
 8016178:	f3bf 8f4f 	dsb	sy
 801617c:	60bb      	str	r3, [r7, #8]
}
 801617e:	bf00      	nop
 8016180:	e7fe      	b.n	8016180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016182:	693b      	ldr	r3, [r7, #16]
 8016184:	685a      	ldr	r2, [r3, #4]
 8016186:	4b14      	ldr	r3, [pc, #80]	; (80161d8 <vPortFree+0xb8>)
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	4013      	ands	r3, r2
 801618c:	2b00      	cmp	r3, #0
 801618e:	d01e      	beq.n	80161ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d11a      	bne.n	80161ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016198:	693b      	ldr	r3, [r7, #16]
 801619a:	685a      	ldr	r2, [r3, #4]
 801619c:	4b0e      	ldr	r3, [pc, #56]	; (80161d8 <vPortFree+0xb8>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	43db      	mvns	r3, r3
 80161a2:	401a      	ands	r2, r3
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80161a8:	f7fe fed4 	bl	8014f54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	685a      	ldr	r2, [r3, #4]
 80161b0:	4b0a      	ldr	r3, [pc, #40]	; (80161dc <vPortFree+0xbc>)
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	4413      	add	r3, r2
 80161b6:	4a09      	ldr	r2, [pc, #36]	; (80161dc <vPortFree+0xbc>)
 80161b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80161ba:	6938      	ldr	r0, [r7, #16]
 80161bc:	f000 f874 	bl	80162a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80161c0:	4b07      	ldr	r3, [pc, #28]	; (80161e0 <vPortFree+0xc0>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	3301      	adds	r3, #1
 80161c6:	4a06      	ldr	r2, [pc, #24]	; (80161e0 <vPortFree+0xc0>)
 80161c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80161ca:	f7fe fed1 	bl	8014f70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80161ce:	bf00      	nop
 80161d0:	3718      	adds	r7, #24
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}
 80161d6:	bf00      	nop
 80161d8:	2001f814 	.word	0x2001f814
 80161dc:	2001f804 	.word	0x2001f804
 80161e0:	2001f810 	.word	0x2001f810

080161e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80161e4:	b480      	push	{r7}
 80161e6:	b085      	sub	sp, #20
 80161e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80161ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80161ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80161f0:	4b27      	ldr	r3, [pc, #156]	; (8016290 <prvHeapInit+0xac>)
 80161f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	f003 0307 	and.w	r3, r3, #7
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d00c      	beq.n	8016218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	3307      	adds	r3, #7
 8016202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	f023 0307 	bic.w	r3, r3, #7
 801620a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801620c:	68ba      	ldr	r2, [r7, #8]
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	1ad3      	subs	r3, r2, r3
 8016212:	4a1f      	ldr	r2, [pc, #124]	; (8016290 <prvHeapInit+0xac>)
 8016214:	4413      	add	r3, r2
 8016216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801621c:	4a1d      	ldr	r2, [pc, #116]	; (8016294 <prvHeapInit+0xb0>)
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016222:	4b1c      	ldr	r3, [pc, #112]	; (8016294 <prvHeapInit+0xb0>)
 8016224:	2200      	movs	r2, #0
 8016226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	68ba      	ldr	r2, [r7, #8]
 801622c:	4413      	add	r3, r2
 801622e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016230:	2208      	movs	r2, #8
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	1a9b      	subs	r3, r3, r2
 8016236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	f023 0307 	bic.w	r3, r3, #7
 801623e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	4a15      	ldr	r2, [pc, #84]	; (8016298 <prvHeapInit+0xb4>)
 8016244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016246:	4b14      	ldr	r3, [pc, #80]	; (8016298 <prvHeapInit+0xb4>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	2200      	movs	r2, #0
 801624c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801624e:	4b12      	ldr	r3, [pc, #72]	; (8016298 <prvHeapInit+0xb4>)
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	2200      	movs	r2, #0
 8016254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801625a:	683b      	ldr	r3, [r7, #0]
 801625c:	68fa      	ldr	r2, [r7, #12]
 801625e:	1ad2      	subs	r2, r2, r3
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016264:	4b0c      	ldr	r3, [pc, #48]	; (8016298 <prvHeapInit+0xb4>)
 8016266:	681a      	ldr	r2, [r3, #0]
 8016268:	683b      	ldr	r3, [r7, #0]
 801626a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801626c:	683b      	ldr	r3, [r7, #0]
 801626e:	685b      	ldr	r3, [r3, #4]
 8016270:	4a0a      	ldr	r2, [pc, #40]	; (801629c <prvHeapInit+0xb8>)
 8016272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016274:	683b      	ldr	r3, [r7, #0]
 8016276:	685b      	ldr	r3, [r3, #4]
 8016278:	4a09      	ldr	r2, [pc, #36]	; (80162a0 <prvHeapInit+0xbc>)
 801627a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801627c:	4b09      	ldr	r3, [pc, #36]	; (80162a4 <prvHeapInit+0xc0>)
 801627e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016282:	601a      	str	r2, [r3, #0]
}
 8016284:	bf00      	nop
 8016286:	3714      	adds	r7, #20
 8016288:	46bd      	mov	sp, r7
 801628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628e:	4770      	bx	lr
 8016290:	2001a9d8 	.word	0x2001a9d8
 8016294:	2001f7f8 	.word	0x2001f7f8
 8016298:	2001f800 	.word	0x2001f800
 801629c:	2001f808 	.word	0x2001f808
 80162a0:	2001f804 	.word	0x2001f804
 80162a4:	2001f814 	.word	0x2001f814

080162a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80162a8:	b480      	push	{r7}
 80162aa:	b085      	sub	sp, #20
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80162b0:	4b28      	ldr	r3, [pc, #160]	; (8016354 <prvInsertBlockIntoFreeList+0xac>)
 80162b2:	60fb      	str	r3, [r7, #12]
 80162b4:	e002      	b.n	80162bc <prvInsertBlockIntoFreeList+0x14>
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	60fb      	str	r3, [r7, #12]
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	687a      	ldr	r2, [r7, #4]
 80162c2:	429a      	cmp	r2, r3
 80162c4:	d8f7      	bhi.n	80162b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	68ba      	ldr	r2, [r7, #8]
 80162d0:	4413      	add	r3, r2
 80162d2:	687a      	ldr	r2, [r7, #4]
 80162d4:	429a      	cmp	r2, r3
 80162d6:	d108      	bne.n	80162ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	685a      	ldr	r2, [r3, #4]
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	685b      	ldr	r3, [r3, #4]
 80162e0:	441a      	add	r2, r3
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	685b      	ldr	r3, [r3, #4]
 80162f2:	68ba      	ldr	r2, [r7, #8]
 80162f4:	441a      	add	r2, r3
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	429a      	cmp	r2, r3
 80162fc:	d118      	bne.n	8016330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	681a      	ldr	r2, [r3, #0]
 8016302:	4b15      	ldr	r3, [pc, #84]	; (8016358 <prvInsertBlockIntoFreeList+0xb0>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	429a      	cmp	r2, r3
 8016308:	d00d      	beq.n	8016326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	685a      	ldr	r2, [r3, #4]
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	441a      	add	r2, r3
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	681a      	ldr	r2, [r3, #0]
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	601a      	str	r2, [r3, #0]
 8016324:	e008      	b.n	8016338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016326:	4b0c      	ldr	r3, [pc, #48]	; (8016358 <prvInsertBlockIntoFreeList+0xb0>)
 8016328:	681a      	ldr	r2, [r3, #0]
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	601a      	str	r2, [r3, #0]
 801632e:	e003      	b.n	8016338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	681a      	ldr	r2, [r3, #0]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016338:	68fa      	ldr	r2, [r7, #12]
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	429a      	cmp	r2, r3
 801633e:	d002      	beq.n	8016346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	687a      	ldr	r2, [r7, #4]
 8016344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016346:	bf00      	nop
 8016348:	3714      	adds	r7, #20
 801634a:	46bd      	mov	sp, r7
 801634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016350:	4770      	bx	lr
 8016352:	bf00      	nop
 8016354:	2001f7f8 	.word	0x2001f7f8
 8016358:	2001f800 	.word	0x2001f800
 801635c:	00000000 	.word	0x00000000

08016360 <tan>:
 8016360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016362:	ec53 2b10 	vmov	r2, r3, d0
 8016366:	4816      	ldr	r0, [pc, #88]	; (80163c0 <tan+0x60>)
 8016368:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801636c:	4281      	cmp	r1, r0
 801636e:	dc07      	bgt.n	8016380 <tan+0x20>
 8016370:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80163b8 <tan+0x58>
 8016374:	2001      	movs	r0, #1
 8016376:	b005      	add	sp, #20
 8016378:	f85d eb04 	ldr.w	lr, [sp], #4
 801637c:	f000 bd80 	b.w	8016e80 <__kernel_tan>
 8016380:	4810      	ldr	r0, [pc, #64]	; (80163c4 <tan+0x64>)
 8016382:	4281      	cmp	r1, r0
 8016384:	dd09      	ble.n	801639a <tan+0x3a>
 8016386:	ee10 0a10 	vmov	r0, s0
 801638a:	4619      	mov	r1, r3
 801638c:	f7e9 ff84 	bl	8000298 <__aeabi_dsub>
 8016390:	ec41 0b10 	vmov	d0, r0, r1
 8016394:	b005      	add	sp, #20
 8016396:	f85d fb04 	ldr.w	pc, [sp], #4
 801639a:	4668      	mov	r0, sp
 801639c:	f000 f814 	bl	80163c8 <__ieee754_rem_pio2>
 80163a0:	0040      	lsls	r0, r0, #1
 80163a2:	f000 0002 	and.w	r0, r0, #2
 80163a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80163aa:	ed9d 0b00 	vldr	d0, [sp]
 80163ae:	f1c0 0001 	rsb	r0, r0, #1
 80163b2:	f000 fd65 	bl	8016e80 <__kernel_tan>
 80163b6:	e7ed      	b.n	8016394 <tan+0x34>
	...
 80163c0:	3fe921fb 	.word	0x3fe921fb
 80163c4:	7fefffff 	.word	0x7fefffff

080163c8 <__ieee754_rem_pio2>:
 80163c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163cc:	ed2d 8b02 	vpush	{d8}
 80163d0:	ec55 4b10 	vmov	r4, r5, d0
 80163d4:	4bca      	ldr	r3, [pc, #808]	; (8016700 <__ieee754_rem_pio2+0x338>)
 80163d6:	b08b      	sub	sp, #44	; 0x2c
 80163d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80163dc:	4598      	cmp	r8, r3
 80163de:	4682      	mov	sl, r0
 80163e0:	9502      	str	r5, [sp, #8]
 80163e2:	dc08      	bgt.n	80163f6 <__ieee754_rem_pio2+0x2e>
 80163e4:	2200      	movs	r2, #0
 80163e6:	2300      	movs	r3, #0
 80163e8:	ed80 0b00 	vstr	d0, [r0]
 80163ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80163f0:	f04f 0b00 	mov.w	fp, #0
 80163f4:	e028      	b.n	8016448 <__ieee754_rem_pio2+0x80>
 80163f6:	4bc3      	ldr	r3, [pc, #780]	; (8016704 <__ieee754_rem_pio2+0x33c>)
 80163f8:	4598      	cmp	r8, r3
 80163fa:	dc78      	bgt.n	80164ee <__ieee754_rem_pio2+0x126>
 80163fc:	9b02      	ldr	r3, [sp, #8]
 80163fe:	4ec2      	ldr	r6, [pc, #776]	; (8016708 <__ieee754_rem_pio2+0x340>)
 8016400:	2b00      	cmp	r3, #0
 8016402:	ee10 0a10 	vmov	r0, s0
 8016406:	a3b0      	add	r3, pc, #704	; (adr r3, 80166c8 <__ieee754_rem_pio2+0x300>)
 8016408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801640c:	4629      	mov	r1, r5
 801640e:	dd39      	ble.n	8016484 <__ieee754_rem_pio2+0xbc>
 8016410:	f7e9 ff42 	bl	8000298 <__aeabi_dsub>
 8016414:	45b0      	cmp	r8, r6
 8016416:	4604      	mov	r4, r0
 8016418:	460d      	mov	r5, r1
 801641a:	d01b      	beq.n	8016454 <__ieee754_rem_pio2+0x8c>
 801641c:	a3ac      	add	r3, pc, #688	; (adr r3, 80166d0 <__ieee754_rem_pio2+0x308>)
 801641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016422:	f7e9 ff39 	bl	8000298 <__aeabi_dsub>
 8016426:	4602      	mov	r2, r0
 8016428:	460b      	mov	r3, r1
 801642a:	e9ca 2300 	strd	r2, r3, [sl]
 801642e:	4620      	mov	r0, r4
 8016430:	4629      	mov	r1, r5
 8016432:	f7e9 ff31 	bl	8000298 <__aeabi_dsub>
 8016436:	a3a6      	add	r3, pc, #664	; (adr r3, 80166d0 <__ieee754_rem_pio2+0x308>)
 8016438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643c:	f7e9 ff2c 	bl	8000298 <__aeabi_dsub>
 8016440:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016444:	f04f 0b01 	mov.w	fp, #1
 8016448:	4658      	mov	r0, fp
 801644a:	b00b      	add	sp, #44	; 0x2c
 801644c:	ecbd 8b02 	vpop	{d8}
 8016450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016454:	a3a0      	add	r3, pc, #640	; (adr r3, 80166d8 <__ieee754_rem_pio2+0x310>)
 8016456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801645a:	f7e9 ff1d 	bl	8000298 <__aeabi_dsub>
 801645e:	a3a0      	add	r3, pc, #640	; (adr r3, 80166e0 <__ieee754_rem_pio2+0x318>)
 8016460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016464:	4604      	mov	r4, r0
 8016466:	460d      	mov	r5, r1
 8016468:	f7e9 ff16 	bl	8000298 <__aeabi_dsub>
 801646c:	4602      	mov	r2, r0
 801646e:	460b      	mov	r3, r1
 8016470:	e9ca 2300 	strd	r2, r3, [sl]
 8016474:	4620      	mov	r0, r4
 8016476:	4629      	mov	r1, r5
 8016478:	f7e9 ff0e 	bl	8000298 <__aeabi_dsub>
 801647c:	a398      	add	r3, pc, #608	; (adr r3, 80166e0 <__ieee754_rem_pio2+0x318>)
 801647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016482:	e7db      	b.n	801643c <__ieee754_rem_pio2+0x74>
 8016484:	f7e9 ff0a 	bl	800029c <__adddf3>
 8016488:	45b0      	cmp	r8, r6
 801648a:	4604      	mov	r4, r0
 801648c:	460d      	mov	r5, r1
 801648e:	d016      	beq.n	80164be <__ieee754_rem_pio2+0xf6>
 8016490:	a38f      	add	r3, pc, #572	; (adr r3, 80166d0 <__ieee754_rem_pio2+0x308>)
 8016492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016496:	f7e9 ff01 	bl	800029c <__adddf3>
 801649a:	4602      	mov	r2, r0
 801649c:	460b      	mov	r3, r1
 801649e:	e9ca 2300 	strd	r2, r3, [sl]
 80164a2:	4620      	mov	r0, r4
 80164a4:	4629      	mov	r1, r5
 80164a6:	f7e9 fef7 	bl	8000298 <__aeabi_dsub>
 80164aa:	a389      	add	r3, pc, #548	; (adr r3, 80166d0 <__ieee754_rem_pio2+0x308>)
 80164ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b0:	f7e9 fef4 	bl	800029c <__adddf3>
 80164b4:	f04f 3bff 	mov.w	fp, #4294967295
 80164b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80164bc:	e7c4      	b.n	8016448 <__ieee754_rem_pio2+0x80>
 80164be:	a386      	add	r3, pc, #536	; (adr r3, 80166d8 <__ieee754_rem_pio2+0x310>)
 80164c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c4:	f7e9 feea 	bl	800029c <__adddf3>
 80164c8:	a385      	add	r3, pc, #532	; (adr r3, 80166e0 <__ieee754_rem_pio2+0x318>)
 80164ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ce:	4604      	mov	r4, r0
 80164d0:	460d      	mov	r5, r1
 80164d2:	f7e9 fee3 	bl	800029c <__adddf3>
 80164d6:	4602      	mov	r2, r0
 80164d8:	460b      	mov	r3, r1
 80164da:	e9ca 2300 	strd	r2, r3, [sl]
 80164de:	4620      	mov	r0, r4
 80164e0:	4629      	mov	r1, r5
 80164e2:	f7e9 fed9 	bl	8000298 <__aeabi_dsub>
 80164e6:	a37e      	add	r3, pc, #504	; (adr r3, 80166e0 <__ieee754_rem_pio2+0x318>)
 80164e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ec:	e7e0      	b.n	80164b0 <__ieee754_rem_pio2+0xe8>
 80164ee:	4b87      	ldr	r3, [pc, #540]	; (801670c <__ieee754_rem_pio2+0x344>)
 80164f0:	4598      	cmp	r8, r3
 80164f2:	f300 80d9 	bgt.w	80166a8 <__ieee754_rem_pio2+0x2e0>
 80164f6:	f000 fecd 	bl	8017294 <fabs>
 80164fa:	ec55 4b10 	vmov	r4, r5, d0
 80164fe:	ee10 0a10 	vmov	r0, s0
 8016502:	a379      	add	r3, pc, #484	; (adr r3, 80166e8 <__ieee754_rem_pio2+0x320>)
 8016504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016508:	4629      	mov	r1, r5
 801650a:	f7ea f87d 	bl	8000608 <__aeabi_dmul>
 801650e:	4b80      	ldr	r3, [pc, #512]	; (8016710 <__ieee754_rem_pio2+0x348>)
 8016510:	2200      	movs	r2, #0
 8016512:	f7e9 fec3 	bl	800029c <__adddf3>
 8016516:	f7ea fb27 	bl	8000b68 <__aeabi_d2iz>
 801651a:	4683      	mov	fp, r0
 801651c:	f7ea f80a 	bl	8000534 <__aeabi_i2d>
 8016520:	4602      	mov	r2, r0
 8016522:	460b      	mov	r3, r1
 8016524:	ec43 2b18 	vmov	d8, r2, r3
 8016528:	a367      	add	r3, pc, #412	; (adr r3, 80166c8 <__ieee754_rem_pio2+0x300>)
 801652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801652e:	f7ea f86b 	bl	8000608 <__aeabi_dmul>
 8016532:	4602      	mov	r2, r0
 8016534:	460b      	mov	r3, r1
 8016536:	4620      	mov	r0, r4
 8016538:	4629      	mov	r1, r5
 801653a:	f7e9 fead 	bl	8000298 <__aeabi_dsub>
 801653e:	a364      	add	r3, pc, #400	; (adr r3, 80166d0 <__ieee754_rem_pio2+0x308>)
 8016540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016544:	4606      	mov	r6, r0
 8016546:	460f      	mov	r7, r1
 8016548:	ec51 0b18 	vmov	r0, r1, d8
 801654c:	f7ea f85c 	bl	8000608 <__aeabi_dmul>
 8016550:	f1bb 0f1f 	cmp.w	fp, #31
 8016554:	4604      	mov	r4, r0
 8016556:	460d      	mov	r5, r1
 8016558:	dc0d      	bgt.n	8016576 <__ieee754_rem_pio2+0x1ae>
 801655a:	4b6e      	ldr	r3, [pc, #440]	; (8016714 <__ieee754_rem_pio2+0x34c>)
 801655c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8016560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016564:	4543      	cmp	r3, r8
 8016566:	d006      	beq.n	8016576 <__ieee754_rem_pio2+0x1ae>
 8016568:	4622      	mov	r2, r4
 801656a:	462b      	mov	r3, r5
 801656c:	4630      	mov	r0, r6
 801656e:	4639      	mov	r1, r7
 8016570:	f7e9 fe92 	bl	8000298 <__aeabi_dsub>
 8016574:	e00f      	b.n	8016596 <__ieee754_rem_pio2+0x1ce>
 8016576:	462b      	mov	r3, r5
 8016578:	4622      	mov	r2, r4
 801657a:	4630      	mov	r0, r6
 801657c:	4639      	mov	r1, r7
 801657e:	f7e9 fe8b 	bl	8000298 <__aeabi_dsub>
 8016582:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016586:	9303      	str	r3, [sp, #12]
 8016588:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801658c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8016590:	f1b8 0f10 	cmp.w	r8, #16
 8016594:	dc02      	bgt.n	801659c <__ieee754_rem_pio2+0x1d4>
 8016596:	e9ca 0100 	strd	r0, r1, [sl]
 801659a:	e039      	b.n	8016610 <__ieee754_rem_pio2+0x248>
 801659c:	a34e      	add	r3, pc, #312	; (adr r3, 80166d8 <__ieee754_rem_pio2+0x310>)
 801659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a2:	ec51 0b18 	vmov	r0, r1, d8
 80165a6:	f7ea f82f 	bl	8000608 <__aeabi_dmul>
 80165aa:	4604      	mov	r4, r0
 80165ac:	460d      	mov	r5, r1
 80165ae:	4602      	mov	r2, r0
 80165b0:	460b      	mov	r3, r1
 80165b2:	4630      	mov	r0, r6
 80165b4:	4639      	mov	r1, r7
 80165b6:	f7e9 fe6f 	bl	8000298 <__aeabi_dsub>
 80165ba:	4602      	mov	r2, r0
 80165bc:	460b      	mov	r3, r1
 80165be:	4680      	mov	r8, r0
 80165c0:	4689      	mov	r9, r1
 80165c2:	4630      	mov	r0, r6
 80165c4:	4639      	mov	r1, r7
 80165c6:	f7e9 fe67 	bl	8000298 <__aeabi_dsub>
 80165ca:	4622      	mov	r2, r4
 80165cc:	462b      	mov	r3, r5
 80165ce:	f7e9 fe63 	bl	8000298 <__aeabi_dsub>
 80165d2:	a343      	add	r3, pc, #268	; (adr r3, 80166e0 <__ieee754_rem_pio2+0x318>)
 80165d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d8:	4604      	mov	r4, r0
 80165da:	460d      	mov	r5, r1
 80165dc:	ec51 0b18 	vmov	r0, r1, d8
 80165e0:	f7ea f812 	bl	8000608 <__aeabi_dmul>
 80165e4:	4622      	mov	r2, r4
 80165e6:	462b      	mov	r3, r5
 80165e8:	f7e9 fe56 	bl	8000298 <__aeabi_dsub>
 80165ec:	4602      	mov	r2, r0
 80165ee:	460b      	mov	r3, r1
 80165f0:	4604      	mov	r4, r0
 80165f2:	460d      	mov	r5, r1
 80165f4:	4640      	mov	r0, r8
 80165f6:	4649      	mov	r1, r9
 80165f8:	f7e9 fe4e 	bl	8000298 <__aeabi_dsub>
 80165fc:	9a03      	ldr	r2, [sp, #12]
 80165fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016602:	1ad3      	subs	r3, r2, r3
 8016604:	2b31      	cmp	r3, #49	; 0x31
 8016606:	dc24      	bgt.n	8016652 <__ieee754_rem_pio2+0x28a>
 8016608:	e9ca 0100 	strd	r0, r1, [sl]
 801660c:	4646      	mov	r6, r8
 801660e:	464f      	mov	r7, r9
 8016610:	e9da 8900 	ldrd	r8, r9, [sl]
 8016614:	4630      	mov	r0, r6
 8016616:	4642      	mov	r2, r8
 8016618:	464b      	mov	r3, r9
 801661a:	4639      	mov	r1, r7
 801661c:	f7e9 fe3c 	bl	8000298 <__aeabi_dsub>
 8016620:	462b      	mov	r3, r5
 8016622:	4622      	mov	r2, r4
 8016624:	f7e9 fe38 	bl	8000298 <__aeabi_dsub>
 8016628:	9b02      	ldr	r3, [sp, #8]
 801662a:	2b00      	cmp	r3, #0
 801662c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016630:	f6bf af0a 	bge.w	8016448 <__ieee754_rem_pio2+0x80>
 8016634:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016638:	f8ca 3004 	str.w	r3, [sl, #4]
 801663c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016640:	f8ca 8000 	str.w	r8, [sl]
 8016644:	f8ca 0008 	str.w	r0, [sl, #8]
 8016648:	f8ca 300c 	str.w	r3, [sl, #12]
 801664c:	f1cb 0b00 	rsb	fp, fp, #0
 8016650:	e6fa      	b.n	8016448 <__ieee754_rem_pio2+0x80>
 8016652:	a327      	add	r3, pc, #156	; (adr r3, 80166f0 <__ieee754_rem_pio2+0x328>)
 8016654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016658:	ec51 0b18 	vmov	r0, r1, d8
 801665c:	f7e9 ffd4 	bl	8000608 <__aeabi_dmul>
 8016660:	4604      	mov	r4, r0
 8016662:	460d      	mov	r5, r1
 8016664:	4602      	mov	r2, r0
 8016666:	460b      	mov	r3, r1
 8016668:	4640      	mov	r0, r8
 801666a:	4649      	mov	r1, r9
 801666c:	f7e9 fe14 	bl	8000298 <__aeabi_dsub>
 8016670:	4602      	mov	r2, r0
 8016672:	460b      	mov	r3, r1
 8016674:	4606      	mov	r6, r0
 8016676:	460f      	mov	r7, r1
 8016678:	4640      	mov	r0, r8
 801667a:	4649      	mov	r1, r9
 801667c:	f7e9 fe0c 	bl	8000298 <__aeabi_dsub>
 8016680:	4622      	mov	r2, r4
 8016682:	462b      	mov	r3, r5
 8016684:	f7e9 fe08 	bl	8000298 <__aeabi_dsub>
 8016688:	a31b      	add	r3, pc, #108	; (adr r3, 80166f8 <__ieee754_rem_pio2+0x330>)
 801668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801668e:	4604      	mov	r4, r0
 8016690:	460d      	mov	r5, r1
 8016692:	ec51 0b18 	vmov	r0, r1, d8
 8016696:	f7e9 ffb7 	bl	8000608 <__aeabi_dmul>
 801669a:	4622      	mov	r2, r4
 801669c:	462b      	mov	r3, r5
 801669e:	f7e9 fdfb 	bl	8000298 <__aeabi_dsub>
 80166a2:	4604      	mov	r4, r0
 80166a4:	460d      	mov	r5, r1
 80166a6:	e75f      	b.n	8016568 <__ieee754_rem_pio2+0x1a0>
 80166a8:	4b1b      	ldr	r3, [pc, #108]	; (8016718 <__ieee754_rem_pio2+0x350>)
 80166aa:	4598      	cmp	r8, r3
 80166ac:	dd36      	ble.n	801671c <__ieee754_rem_pio2+0x354>
 80166ae:	ee10 2a10 	vmov	r2, s0
 80166b2:	462b      	mov	r3, r5
 80166b4:	4620      	mov	r0, r4
 80166b6:	4629      	mov	r1, r5
 80166b8:	f7e9 fdee 	bl	8000298 <__aeabi_dsub>
 80166bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80166c0:	e9ca 0100 	strd	r0, r1, [sl]
 80166c4:	e694      	b.n	80163f0 <__ieee754_rem_pio2+0x28>
 80166c6:	bf00      	nop
 80166c8:	54400000 	.word	0x54400000
 80166cc:	3ff921fb 	.word	0x3ff921fb
 80166d0:	1a626331 	.word	0x1a626331
 80166d4:	3dd0b461 	.word	0x3dd0b461
 80166d8:	1a600000 	.word	0x1a600000
 80166dc:	3dd0b461 	.word	0x3dd0b461
 80166e0:	2e037073 	.word	0x2e037073
 80166e4:	3ba3198a 	.word	0x3ba3198a
 80166e8:	6dc9c883 	.word	0x6dc9c883
 80166ec:	3fe45f30 	.word	0x3fe45f30
 80166f0:	2e000000 	.word	0x2e000000
 80166f4:	3ba3198a 	.word	0x3ba3198a
 80166f8:	252049c1 	.word	0x252049c1
 80166fc:	397b839a 	.word	0x397b839a
 8016700:	3fe921fb 	.word	0x3fe921fb
 8016704:	4002d97b 	.word	0x4002d97b
 8016708:	3ff921fb 	.word	0x3ff921fb
 801670c:	413921fb 	.word	0x413921fb
 8016710:	3fe00000 	.word	0x3fe00000
 8016714:	0804ddd0 	.word	0x0804ddd0
 8016718:	7fefffff 	.word	0x7fefffff
 801671c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8016720:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8016724:	ee10 0a10 	vmov	r0, s0
 8016728:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801672c:	ee10 6a10 	vmov	r6, s0
 8016730:	460f      	mov	r7, r1
 8016732:	f7ea fa19 	bl	8000b68 <__aeabi_d2iz>
 8016736:	f7e9 fefd 	bl	8000534 <__aeabi_i2d>
 801673a:	4602      	mov	r2, r0
 801673c:	460b      	mov	r3, r1
 801673e:	4630      	mov	r0, r6
 8016740:	4639      	mov	r1, r7
 8016742:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016746:	f7e9 fda7 	bl	8000298 <__aeabi_dsub>
 801674a:	4b23      	ldr	r3, [pc, #140]	; (80167d8 <__ieee754_rem_pio2+0x410>)
 801674c:	2200      	movs	r2, #0
 801674e:	f7e9 ff5b 	bl	8000608 <__aeabi_dmul>
 8016752:	460f      	mov	r7, r1
 8016754:	4606      	mov	r6, r0
 8016756:	f7ea fa07 	bl	8000b68 <__aeabi_d2iz>
 801675a:	f7e9 feeb 	bl	8000534 <__aeabi_i2d>
 801675e:	4602      	mov	r2, r0
 8016760:	460b      	mov	r3, r1
 8016762:	4630      	mov	r0, r6
 8016764:	4639      	mov	r1, r7
 8016766:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801676a:	f7e9 fd95 	bl	8000298 <__aeabi_dsub>
 801676e:	4b1a      	ldr	r3, [pc, #104]	; (80167d8 <__ieee754_rem_pio2+0x410>)
 8016770:	2200      	movs	r2, #0
 8016772:	f7e9 ff49 	bl	8000608 <__aeabi_dmul>
 8016776:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801677a:	ad04      	add	r5, sp, #16
 801677c:	f04f 0803 	mov.w	r8, #3
 8016780:	46a9      	mov	r9, r5
 8016782:	2600      	movs	r6, #0
 8016784:	2700      	movs	r7, #0
 8016786:	4632      	mov	r2, r6
 8016788:	463b      	mov	r3, r7
 801678a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801678e:	46c3      	mov	fp, r8
 8016790:	3d08      	subs	r5, #8
 8016792:	f108 38ff 	add.w	r8, r8, #4294967295
 8016796:	f7ea f99f 	bl	8000ad8 <__aeabi_dcmpeq>
 801679a:	2800      	cmp	r0, #0
 801679c:	d1f3      	bne.n	8016786 <__ieee754_rem_pio2+0x3be>
 801679e:	4b0f      	ldr	r3, [pc, #60]	; (80167dc <__ieee754_rem_pio2+0x414>)
 80167a0:	9301      	str	r3, [sp, #4]
 80167a2:	2302      	movs	r3, #2
 80167a4:	9300      	str	r3, [sp, #0]
 80167a6:	4622      	mov	r2, r4
 80167a8:	465b      	mov	r3, fp
 80167aa:	4651      	mov	r1, sl
 80167ac:	4648      	mov	r0, r9
 80167ae:	f000 f817 	bl	80167e0 <__kernel_rem_pio2>
 80167b2:	9b02      	ldr	r3, [sp, #8]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	4683      	mov	fp, r0
 80167b8:	f6bf ae46 	bge.w	8016448 <__ieee754_rem_pio2+0x80>
 80167bc:	e9da 2100 	ldrd	r2, r1, [sl]
 80167c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80167c4:	e9ca 2300 	strd	r2, r3, [sl]
 80167c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80167cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80167d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80167d4:	e73a      	b.n	801664c <__ieee754_rem_pio2+0x284>
 80167d6:	bf00      	nop
 80167d8:	41700000 	.word	0x41700000
 80167dc:	0804de50 	.word	0x0804de50

080167e0 <__kernel_rem_pio2>:
 80167e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e4:	ed2d 8b02 	vpush	{d8}
 80167e8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80167ec:	f112 0f14 	cmn.w	r2, #20
 80167f0:	9308      	str	r3, [sp, #32]
 80167f2:	9101      	str	r1, [sp, #4]
 80167f4:	4bc4      	ldr	r3, [pc, #784]	; (8016b08 <__kernel_rem_pio2+0x328>)
 80167f6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80167f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80167fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80167fe:	9302      	str	r3, [sp, #8]
 8016800:	9b08      	ldr	r3, [sp, #32]
 8016802:	f103 33ff 	add.w	r3, r3, #4294967295
 8016806:	bfa8      	it	ge
 8016808:	1ed4      	subge	r4, r2, #3
 801680a:	9306      	str	r3, [sp, #24]
 801680c:	bfb2      	itee	lt
 801680e:	2400      	movlt	r4, #0
 8016810:	2318      	movge	r3, #24
 8016812:	fb94 f4f3 	sdivge	r4, r4, r3
 8016816:	f06f 0317 	mvn.w	r3, #23
 801681a:	fb04 3303 	mla	r3, r4, r3, r3
 801681e:	eb03 0a02 	add.w	sl, r3, r2
 8016822:	9b02      	ldr	r3, [sp, #8]
 8016824:	9a06      	ldr	r2, [sp, #24]
 8016826:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8016af8 <__kernel_rem_pio2+0x318>
 801682a:	eb03 0802 	add.w	r8, r3, r2
 801682e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016830:	1aa7      	subs	r7, r4, r2
 8016832:	ae22      	add	r6, sp, #136	; 0x88
 8016834:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016838:	2500      	movs	r5, #0
 801683a:	4545      	cmp	r5, r8
 801683c:	dd13      	ble.n	8016866 <__kernel_rem_pio2+0x86>
 801683e:	9b08      	ldr	r3, [sp, #32]
 8016840:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8016af8 <__kernel_rem_pio2+0x318>
 8016844:	aa22      	add	r2, sp, #136	; 0x88
 8016846:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801684a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801684e:	f04f 0800 	mov.w	r8, #0
 8016852:	9b02      	ldr	r3, [sp, #8]
 8016854:	4598      	cmp	r8, r3
 8016856:	dc2f      	bgt.n	80168b8 <__kernel_rem_pio2+0xd8>
 8016858:	ed8d 8b04 	vstr	d8, [sp, #16]
 801685c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8016860:	462f      	mov	r7, r5
 8016862:	2600      	movs	r6, #0
 8016864:	e01b      	b.n	801689e <__kernel_rem_pio2+0xbe>
 8016866:	42ef      	cmn	r7, r5
 8016868:	d407      	bmi.n	801687a <__kernel_rem_pio2+0x9a>
 801686a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801686e:	f7e9 fe61 	bl	8000534 <__aeabi_i2d>
 8016872:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016876:	3501      	adds	r5, #1
 8016878:	e7df      	b.n	801683a <__kernel_rem_pio2+0x5a>
 801687a:	ec51 0b18 	vmov	r0, r1, d8
 801687e:	e7f8      	b.n	8016872 <__kernel_rem_pio2+0x92>
 8016880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016884:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8016888:	f7e9 febe 	bl	8000608 <__aeabi_dmul>
 801688c:	4602      	mov	r2, r0
 801688e:	460b      	mov	r3, r1
 8016890:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016894:	f7e9 fd02 	bl	800029c <__adddf3>
 8016898:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801689c:	3601      	adds	r6, #1
 801689e:	9b06      	ldr	r3, [sp, #24]
 80168a0:	429e      	cmp	r6, r3
 80168a2:	f1a7 0708 	sub.w	r7, r7, #8
 80168a6:	ddeb      	ble.n	8016880 <__kernel_rem_pio2+0xa0>
 80168a8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80168ac:	f108 0801 	add.w	r8, r8, #1
 80168b0:	ecab 7b02 	vstmia	fp!, {d7}
 80168b4:	3508      	adds	r5, #8
 80168b6:	e7cc      	b.n	8016852 <__kernel_rem_pio2+0x72>
 80168b8:	9b02      	ldr	r3, [sp, #8]
 80168ba:	aa0e      	add	r2, sp, #56	; 0x38
 80168bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80168c0:	930d      	str	r3, [sp, #52]	; 0x34
 80168c2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80168c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80168c8:	9c02      	ldr	r4, [sp, #8]
 80168ca:	930c      	str	r3, [sp, #48]	; 0x30
 80168cc:	00e3      	lsls	r3, r4, #3
 80168ce:	930a      	str	r3, [sp, #40]	; 0x28
 80168d0:	ab9a      	add	r3, sp, #616	; 0x268
 80168d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80168d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80168da:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80168de:	ab72      	add	r3, sp, #456	; 0x1c8
 80168e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80168e4:	46c3      	mov	fp, r8
 80168e6:	46a1      	mov	r9, r4
 80168e8:	f1b9 0f00 	cmp.w	r9, #0
 80168ec:	f1a5 0508 	sub.w	r5, r5, #8
 80168f0:	dc77      	bgt.n	80169e2 <__kernel_rem_pio2+0x202>
 80168f2:	ec47 6b10 	vmov	d0, r6, r7
 80168f6:	4650      	mov	r0, sl
 80168f8:	f000 fd56 	bl	80173a8 <scalbn>
 80168fc:	ec57 6b10 	vmov	r6, r7, d0
 8016900:	2200      	movs	r2, #0
 8016902:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016906:	ee10 0a10 	vmov	r0, s0
 801690a:	4639      	mov	r1, r7
 801690c:	f7e9 fe7c 	bl	8000608 <__aeabi_dmul>
 8016910:	ec41 0b10 	vmov	d0, r0, r1
 8016914:	f000 fcc8 	bl	80172a8 <floor>
 8016918:	4b7c      	ldr	r3, [pc, #496]	; (8016b0c <__kernel_rem_pio2+0x32c>)
 801691a:	ec51 0b10 	vmov	r0, r1, d0
 801691e:	2200      	movs	r2, #0
 8016920:	f7e9 fe72 	bl	8000608 <__aeabi_dmul>
 8016924:	4602      	mov	r2, r0
 8016926:	460b      	mov	r3, r1
 8016928:	4630      	mov	r0, r6
 801692a:	4639      	mov	r1, r7
 801692c:	f7e9 fcb4 	bl	8000298 <__aeabi_dsub>
 8016930:	460f      	mov	r7, r1
 8016932:	4606      	mov	r6, r0
 8016934:	f7ea f918 	bl	8000b68 <__aeabi_d2iz>
 8016938:	9004      	str	r0, [sp, #16]
 801693a:	f7e9 fdfb 	bl	8000534 <__aeabi_i2d>
 801693e:	4602      	mov	r2, r0
 8016940:	460b      	mov	r3, r1
 8016942:	4630      	mov	r0, r6
 8016944:	4639      	mov	r1, r7
 8016946:	f7e9 fca7 	bl	8000298 <__aeabi_dsub>
 801694a:	f1ba 0f00 	cmp.w	sl, #0
 801694e:	4606      	mov	r6, r0
 8016950:	460f      	mov	r7, r1
 8016952:	dd6d      	ble.n	8016a30 <__kernel_rem_pio2+0x250>
 8016954:	1e62      	subs	r2, r4, #1
 8016956:	ab0e      	add	r3, sp, #56	; 0x38
 8016958:	9d04      	ldr	r5, [sp, #16]
 801695a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801695e:	f1ca 0118 	rsb	r1, sl, #24
 8016962:	fa40 f301 	asr.w	r3, r0, r1
 8016966:	441d      	add	r5, r3
 8016968:	408b      	lsls	r3, r1
 801696a:	1ac0      	subs	r0, r0, r3
 801696c:	ab0e      	add	r3, sp, #56	; 0x38
 801696e:	9504      	str	r5, [sp, #16]
 8016970:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8016974:	f1ca 0317 	rsb	r3, sl, #23
 8016978:	fa40 fb03 	asr.w	fp, r0, r3
 801697c:	f1bb 0f00 	cmp.w	fp, #0
 8016980:	dd65      	ble.n	8016a4e <__kernel_rem_pio2+0x26e>
 8016982:	9b04      	ldr	r3, [sp, #16]
 8016984:	2200      	movs	r2, #0
 8016986:	3301      	adds	r3, #1
 8016988:	9304      	str	r3, [sp, #16]
 801698a:	4615      	mov	r5, r2
 801698c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016990:	4294      	cmp	r4, r2
 8016992:	f300 809c 	bgt.w	8016ace <__kernel_rem_pio2+0x2ee>
 8016996:	f1ba 0f00 	cmp.w	sl, #0
 801699a:	dd07      	ble.n	80169ac <__kernel_rem_pio2+0x1cc>
 801699c:	f1ba 0f01 	cmp.w	sl, #1
 80169a0:	f000 80c0 	beq.w	8016b24 <__kernel_rem_pio2+0x344>
 80169a4:	f1ba 0f02 	cmp.w	sl, #2
 80169a8:	f000 80c6 	beq.w	8016b38 <__kernel_rem_pio2+0x358>
 80169ac:	f1bb 0f02 	cmp.w	fp, #2
 80169b0:	d14d      	bne.n	8016a4e <__kernel_rem_pio2+0x26e>
 80169b2:	4632      	mov	r2, r6
 80169b4:	463b      	mov	r3, r7
 80169b6:	4956      	ldr	r1, [pc, #344]	; (8016b10 <__kernel_rem_pio2+0x330>)
 80169b8:	2000      	movs	r0, #0
 80169ba:	f7e9 fc6d 	bl	8000298 <__aeabi_dsub>
 80169be:	4606      	mov	r6, r0
 80169c0:	460f      	mov	r7, r1
 80169c2:	2d00      	cmp	r5, #0
 80169c4:	d043      	beq.n	8016a4e <__kernel_rem_pio2+0x26e>
 80169c6:	4650      	mov	r0, sl
 80169c8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8016b00 <__kernel_rem_pio2+0x320>
 80169cc:	f000 fcec 	bl	80173a8 <scalbn>
 80169d0:	4630      	mov	r0, r6
 80169d2:	4639      	mov	r1, r7
 80169d4:	ec53 2b10 	vmov	r2, r3, d0
 80169d8:	f7e9 fc5e 	bl	8000298 <__aeabi_dsub>
 80169dc:	4606      	mov	r6, r0
 80169de:	460f      	mov	r7, r1
 80169e0:	e035      	b.n	8016a4e <__kernel_rem_pio2+0x26e>
 80169e2:	4b4c      	ldr	r3, [pc, #304]	; (8016b14 <__kernel_rem_pio2+0x334>)
 80169e4:	2200      	movs	r2, #0
 80169e6:	4630      	mov	r0, r6
 80169e8:	4639      	mov	r1, r7
 80169ea:	f7e9 fe0d 	bl	8000608 <__aeabi_dmul>
 80169ee:	f7ea f8bb 	bl	8000b68 <__aeabi_d2iz>
 80169f2:	f7e9 fd9f 	bl	8000534 <__aeabi_i2d>
 80169f6:	4602      	mov	r2, r0
 80169f8:	460b      	mov	r3, r1
 80169fa:	ec43 2b18 	vmov	d8, r2, r3
 80169fe:	4b46      	ldr	r3, [pc, #280]	; (8016b18 <__kernel_rem_pio2+0x338>)
 8016a00:	2200      	movs	r2, #0
 8016a02:	f7e9 fe01 	bl	8000608 <__aeabi_dmul>
 8016a06:	4602      	mov	r2, r0
 8016a08:	460b      	mov	r3, r1
 8016a0a:	4630      	mov	r0, r6
 8016a0c:	4639      	mov	r1, r7
 8016a0e:	f7e9 fc43 	bl	8000298 <__aeabi_dsub>
 8016a12:	f7ea f8a9 	bl	8000b68 <__aeabi_d2iz>
 8016a16:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016a1a:	f84b 0b04 	str.w	r0, [fp], #4
 8016a1e:	ec51 0b18 	vmov	r0, r1, d8
 8016a22:	f7e9 fc3b 	bl	800029c <__adddf3>
 8016a26:	f109 39ff 	add.w	r9, r9, #4294967295
 8016a2a:	4606      	mov	r6, r0
 8016a2c:	460f      	mov	r7, r1
 8016a2e:	e75b      	b.n	80168e8 <__kernel_rem_pio2+0x108>
 8016a30:	d106      	bne.n	8016a40 <__kernel_rem_pio2+0x260>
 8016a32:	1e63      	subs	r3, r4, #1
 8016a34:	aa0e      	add	r2, sp, #56	; 0x38
 8016a36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016a3a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8016a3e:	e79d      	b.n	801697c <__kernel_rem_pio2+0x19c>
 8016a40:	4b36      	ldr	r3, [pc, #216]	; (8016b1c <__kernel_rem_pio2+0x33c>)
 8016a42:	2200      	movs	r2, #0
 8016a44:	f7ea f866 	bl	8000b14 <__aeabi_dcmpge>
 8016a48:	2800      	cmp	r0, #0
 8016a4a:	d13d      	bne.n	8016ac8 <__kernel_rem_pio2+0x2e8>
 8016a4c:	4683      	mov	fp, r0
 8016a4e:	2200      	movs	r2, #0
 8016a50:	2300      	movs	r3, #0
 8016a52:	4630      	mov	r0, r6
 8016a54:	4639      	mov	r1, r7
 8016a56:	f7ea f83f 	bl	8000ad8 <__aeabi_dcmpeq>
 8016a5a:	2800      	cmp	r0, #0
 8016a5c:	f000 80c0 	beq.w	8016be0 <__kernel_rem_pio2+0x400>
 8016a60:	1e65      	subs	r5, r4, #1
 8016a62:	462b      	mov	r3, r5
 8016a64:	2200      	movs	r2, #0
 8016a66:	9902      	ldr	r1, [sp, #8]
 8016a68:	428b      	cmp	r3, r1
 8016a6a:	da6c      	bge.n	8016b46 <__kernel_rem_pio2+0x366>
 8016a6c:	2a00      	cmp	r2, #0
 8016a6e:	f000 8089 	beq.w	8016b84 <__kernel_rem_pio2+0x3a4>
 8016a72:	ab0e      	add	r3, sp, #56	; 0x38
 8016a74:	f1aa 0a18 	sub.w	sl, sl, #24
 8016a78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	f000 80ad 	beq.w	8016bdc <__kernel_rem_pio2+0x3fc>
 8016a82:	4650      	mov	r0, sl
 8016a84:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8016b00 <__kernel_rem_pio2+0x320>
 8016a88:	f000 fc8e 	bl	80173a8 <scalbn>
 8016a8c:	ab9a      	add	r3, sp, #616	; 0x268
 8016a8e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016a92:	ec57 6b10 	vmov	r6, r7, d0
 8016a96:	00ec      	lsls	r4, r5, #3
 8016a98:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8016a9c:	46aa      	mov	sl, r5
 8016a9e:	f1ba 0f00 	cmp.w	sl, #0
 8016aa2:	f280 80d6 	bge.w	8016c52 <__kernel_rem_pio2+0x472>
 8016aa6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8016af8 <__kernel_rem_pio2+0x318>
 8016aaa:	462e      	mov	r6, r5
 8016aac:	2e00      	cmp	r6, #0
 8016aae:	f2c0 8104 	blt.w	8016cba <__kernel_rem_pio2+0x4da>
 8016ab2:	ab72      	add	r3, sp, #456	; 0x1c8
 8016ab4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8016ab8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8016b20 <__kernel_rem_pio2+0x340>
 8016abc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8016ac0:	f04f 0800 	mov.w	r8, #0
 8016ac4:	1baf      	subs	r7, r5, r6
 8016ac6:	e0ea      	b.n	8016c9e <__kernel_rem_pio2+0x4be>
 8016ac8:	f04f 0b02 	mov.w	fp, #2
 8016acc:	e759      	b.n	8016982 <__kernel_rem_pio2+0x1a2>
 8016ace:	f8d8 3000 	ldr.w	r3, [r8]
 8016ad2:	b955      	cbnz	r5, 8016aea <__kernel_rem_pio2+0x30a>
 8016ad4:	b123      	cbz	r3, 8016ae0 <__kernel_rem_pio2+0x300>
 8016ad6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016ada:	f8c8 3000 	str.w	r3, [r8]
 8016ade:	2301      	movs	r3, #1
 8016ae0:	3201      	adds	r2, #1
 8016ae2:	f108 0804 	add.w	r8, r8, #4
 8016ae6:	461d      	mov	r5, r3
 8016ae8:	e752      	b.n	8016990 <__kernel_rem_pio2+0x1b0>
 8016aea:	1acb      	subs	r3, r1, r3
 8016aec:	f8c8 3000 	str.w	r3, [r8]
 8016af0:	462b      	mov	r3, r5
 8016af2:	e7f5      	b.n	8016ae0 <__kernel_rem_pio2+0x300>
 8016af4:	f3af 8000 	nop.w
	...
 8016b04:	3ff00000 	.word	0x3ff00000
 8016b08:	0804df98 	.word	0x0804df98
 8016b0c:	40200000 	.word	0x40200000
 8016b10:	3ff00000 	.word	0x3ff00000
 8016b14:	3e700000 	.word	0x3e700000
 8016b18:	41700000 	.word	0x41700000
 8016b1c:	3fe00000 	.word	0x3fe00000
 8016b20:	0804df58 	.word	0x0804df58
 8016b24:	1e62      	subs	r2, r4, #1
 8016b26:	ab0e      	add	r3, sp, #56	; 0x38
 8016b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016b30:	a90e      	add	r1, sp, #56	; 0x38
 8016b32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016b36:	e739      	b.n	80169ac <__kernel_rem_pio2+0x1cc>
 8016b38:	1e62      	subs	r2, r4, #1
 8016b3a:	ab0e      	add	r3, sp, #56	; 0x38
 8016b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016b44:	e7f4      	b.n	8016b30 <__kernel_rem_pio2+0x350>
 8016b46:	a90e      	add	r1, sp, #56	; 0x38
 8016b48:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016b4c:	3b01      	subs	r3, #1
 8016b4e:	430a      	orrs	r2, r1
 8016b50:	e789      	b.n	8016a66 <__kernel_rem_pio2+0x286>
 8016b52:	3301      	adds	r3, #1
 8016b54:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8016b58:	2900      	cmp	r1, #0
 8016b5a:	d0fa      	beq.n	8016b52 <__kernel_rem_pio2+0x372>
 8016b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b5e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8016b62:	446a      	add	r2, sp
 8016b64:	3a98      	subs	r2, #152	; 0x98
 8016b66:	920a      	str	r2, [sp, #40]	; 0x28
 8016b68:	9a08      	ldr	r2, [sp, #32]
 8016b6a:	18e3      	adds	r3, r4, r3
 8016b6c:	18a5      	adds	r5, r4, r2
 8016b6e:	aa22      	add	r2, sp, #136	; 0x88
 8016b70:	f104 0801 	add.w	r8, r4, #1
 8016b74:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8016b78:	9304      	str	r3, [sp, #16]
 8016b7a:	9b04      	ldr	r3, [sp, #16]
 8016b7c:	4543      	cmp	r3, r8
 8016b7e:	da04      	bge.n	8016b8a <__kernel_rem_pio2+0x3aa>
 8016b80:	461c      	mov	r4, r3
 8016b82:	e6a3      	b.n	80168cc <__kernel_rem_pio2+0xec>
 8016b84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b86:	2301      	movs	r3, #1
 8016b88:	e7e4      	b.n	8016b54 <__kernel_rem_pio2+0x374>
 8016b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b8c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016b90:	f7e9 fcd0 	bl	8000534 <__aeabi_i2d>
 8016b94:	e8e5 0102 	strd	r0, r1, [r5], #8
 8016b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b9a:	46ab      	mov	fp, r5
 8016b9c:	461c      	mov	r4, r3
 8016b9e:	f04f 0900 	mov.w	r9, #0
 8016ba2:	2600      	movs	r6, #0
 8016ba4:	2700      	movs	r7, #0
 8016ba6:	9b06      	ldr	r3, [sp, #24]
 8016ba8:	4599      	cmp	r9, r3
 8016baa:	dd06      	ble.n	8016bba <__kernel_rem_pio2+0x3da>
 8016bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bae:	e8e3 6702 	strd	r6, r7, [r3], #8
 8016bb2:	f108 0801 	add.w	r8, r8, #1
 8016bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8016bb8:	e7df      	b.n	8016b7a <__kernel_rem_pio2+0x39a>
 8016bba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8016bbe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8016bc2:	f7e9 fd21 	bl	8000608 <__aeabi_dmul>
 8016bc6:	4602      	mov	r2, r0
 8016bc8:	460b      	mov	r3, r1
 8016bca:	4630      	mov	r0, r6
 8016bcc:	4639      	mov	r1, r7
 8016bce:	f7e9 fb65 	bl	800029c <__adddf3>
 8016bd2:	f109 0901 	add.w	r9, r9, #1
 8016bd6:	4606      	mov	r6, r0
 8016bd8:	460f      	mov	r7, r1
 8016bda:	e7e4      	b.n	8016ba6 <__kernel_rem_pio2+0x3c6>
 8016bdc:	3d01      	subs	r5, #1
 8016bde:	e748      	b.n	8016a72 <__kernel_rem_pio2+0x292>
 8016be0:	ec47 6b10 	vmov	d0, r6, r7
 8016be4:	f1ca 0000 	rsb	r0, sl, #0
 8016be8:	f000 fbde 	bl	80173a8 <scalbn>
 8016bec:	ec57 6b10 	vmov	r6, r7, d0
 8016bf0:	4ba0      	ldr	r3, [pc, #640]	; (8016e74 <__kernel_rem_pio2+0x694>)
 8016bf2:	ee10 0a10 	vmov	r0, s0
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	4639      	mov	r1, r7
 8016bfa:	f7e9 ff8b 	bl	8000b14 <__aeabi_dcmpge>
 8016bfe:	b1f8      	cbz	r0, 8016c40 <__kernel_rem_pio2+0x460>
 8016c00:	4b9d      	ldr	r3, [pc, #628]	; (8016e78 <__kernel_rem_pio2+0x698>)
 8016c02:	2200      	movs	r2, #0
 8016c04:	4630      	mov	r0, r6
 8016c06:	4639      	mov	r1, r7
 8016c08:	f7e9 fcfe 	bl	8000608 <__aeabi_dmul>
 8016c0c:	f7e9 ffac 	bl	8000b68 <__aeabi_d2iz>
 8016c10:	4680      	mov	r8, r0
 8016c12:	f7e9 fc8f 	bl	8000534 <__aeabi_i2d>
 8016c16:	4b97      	ldr	r3, [pc, #604]	; (8016e74 <__kernel_rem_pio2+0x694>)
 8016c18:	2200      	movs	r2, #0
 8016c1a:	f7e9 fcf5 	bl	8000608 <__aeabi_dmul>
 8016c1e:	460b      	mov	r3, r1
 8016c20:	4602      	mov	r2, r0
 8016c22:	4639      	mov	r1, r7
 8016c24:	4630      	mov	r0, r6
 8016c26:	f7e9 fb37 	bl	8000298 <__aeabi_dsub>
 8016c2a:	f7e9 ff9d 	bl	8000b68 <__aeabi_d2iz>
 8016c2e:	1c65      	adds	r5, r4, #1
 8016c30:	ab0e      	add	r3, sp, #56	; 0x38
 8016c32:	f10a 0a18 	add.w	sl, sl, #24
 8016c36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016c3a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8016c3e:	e720      	b.n	8016a82 <__kernel_rem_pio2+0x2a2>
 8016c40:	4630      	mov	r0, r6
 8016c42:	4639      	mov	r1, r7
 8016c44:	f7e9 ff90 	bl	8000b68 <__aeabi_d2iz>
 8016c48:	ab0e      	add	r3, sp, #56	; 0x38
 8016c4a:	4625      	mov	r5, r4
 8016c4c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016c50:	e717      	b.n	8016a82 <__kernel_rem_pio2+0x2a2>
 8016c52:	ab0e      	add	r3, sp, #56	; 0x38
 8016c54:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8016c58:	f7e9 fc6c 	bl	8000534 <__aeabi_i2d>
 8016c5c:	4632      	mov	r2, r6
 8016c5e:	463b      	mov	r3, r7
 8016c60:	f7e9 fcd2 	bl	8000608 <__aeabi_dmul>
 8016c64:	4b84      	ldr	r3, [pc, #528]	; (8016e78 <__kernel_rem_pio2+0x698>)
 8016c66:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	4630      	mov	r0, r6
 8016c6e:	4639      	mov	r1, r7
 8016c70:	f7e9 fcca 	bl	8000608 <__aeabi_dmul>
 8016c74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016c78:	4606      	mov	r6, r0
 8016c7a:	460f      	mov	r7, r1
 8016c7c:	e70f      	b.n	8016a9e <__kernel_rem_pio2+0x2be>
 8016c7e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8016c82:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8016c86:	f7e9 fcbf 	bl	8000608 <__aeabi_dmul>
 8016c8a:	4602      	mov	r2, r0
 8016c8c:	460b      	mov	r3, r1
 8016c8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016c92:	f7e9 fb03 	bl	800029c <__adddf3>
 8016c96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016c9a:	f108 0801 	add.w	r8, r8, #1
 8016c9e:	9b02      	ldr	r3, [sp, #8]
 8016ca0:	4598      	cmp	r8, r3
 8016ca2:	dc01      	bgt.n	8016ca8 <__kernel_rem_pio2+0x4c8>
 8016ca4:	45b8      	cmp	r8, r7
 8016ca6:	ddea      	ble.n	8016c7e <__kernel_rem_pio2+0x49e>
 8016ca8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8016cac:	ab4a      	add	r3, sp, #296	; 0x128
 8016cae:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8016cb2:	ed87 7b00 	vstr	d7, [r7]
 8016cb6:	3e01      	subs	r6, #1
 8016cb8:	e6f8      	b.n	8016aac <__kernel_rem_pio2+0x2cc>
 8016cba:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8016cbc:	2b02      	cmp	r3, #2
 8016cbe:	dc0b      	bgt.n	8016cd8 <__kernel_rem_pio2+0x4f8>
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	dc35      	bgt.n	8016d30 <__kernel_rem_pio2+0x550>
 8016cc4:	d059      	beq.n	8016d7a <__kernel_rem_pio2+0x59a>
 8016cc6:	9b04      	ldr	r3, [sp, #16]
 8016cc8:	f003 0007 	and.w	r0, r3, #7
 8016ccc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8016cd0:	ecbd 8b02 	vpop	{d8}
 8016cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cd8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8016cda:	2b03      	cmp	r3, #3
 8016cdc:	d1f3      	bne.n	8016cc6 <__kernel_rem_pio2+0x4e6>
 8016cde:	ab4a      	add	r3, sp, #296	; 0x128
 8016ce0:	4423      	add	r3, r4
 8016ce2:	9306      	str	r3, [sp, #24]
 8016ce4:	461c      	mov	r4, r3
 8016ce6:	469a      	mov	sl, r3
 8016ce8:	9502      	str	r5, [sp, #8]
 8016cea:	9b02      	ldr	r3, [sp, #8]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	f1aa 0a08 	sub.w	sl, sl, #8
 8016cf2:	dc6b      	bgt.n	8016dcc <__kernel_rem_pio2+0x5ec>
 8016cf4:	46aa      	mov	sl, r5
 8016cf6:	f1ba 0f01 	cmp.w	sl, #1
 8016cfa:	f1a4 0408 	sub.w	r4, r4, #8
 8016cfe:	f300 8085 	bgt.w	8016e0c <__kernel_rem_pio2+0x62c>
 8016d02:	9c06      	ldr	r4, [sp, #24]
 8016d04:	2000      	movs	r0, #0
 8016d06:	3408      	adds	r4, #8
 8016d08:	2100      	movs	r1, #0
 8016d0a:	2d01      	cmp	r5, #1
 8016d0c:	f300 809d 	bgt.w	8016e4a <__kernel_rem_pio2+0x66a>
 8016d10:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8016d14:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8016d18:	f1bb 0f00 	cmp.w	fp, #0
 8016d1c:	f040 809b 	bne.w	8016e56 <__kernel_rem_pio2+0x676>
 8016d20:	9b01      	ldr	r3, [sp, #4]
 8016d22:	e9c3 5600 	strd	r5, r6, [r3]
 8016d26:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8016d2a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016d2e:	e7ca      	b.n	8016cc6 <__kernel_rem_pio2+0x4e6>
 8016d30:	3408      	adds	r4, #8
 8016d32:	ab4a      	add	r3, sp, #296	; 0x128
 8016d34:	441c      	add	r4, r3
 8016d36:	462e      	mov	r6, r5
 8016d38:	2000      	movs	r0, #0
 8016d3a:	2100      	movs	r1, #0
 8016d3c:	2e00      	cmp	r6, #0
 8016d3e:	da36      	bge.n	8016dae <__kernel_rem_pio2+0x5ce>
 8016d40:	f1bb 0f00 	cmp.w	fp, #0
 8016d44:	d039      	beq.n	8016dba <__kernel_rem_pio2+0x5da>
 8016d46:	4602      	mov	r2, r0
 8016d48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d4c:	9c01      	ldr	r4, [sp, #4]
 8016d4e:	e9c4 2300 	strd	r2, r3, [r4]
 8016d52:	4602      	mov	r2, r0
 8016d54:	460b      	mov	r3, r1
 8016d56:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8016d5a:	f7e9 fa9d 	bl	8000298 <__aeabi_dsub>
 8016d5e:	ae4c      	add	r6, sp, #304	; 0x130
 8016d60:	2401      	movs	r4, #1
 8016d62:	42a5      	cmp	r5, r4
 8016d64:	da2c      	bge.n	8016dc0 <__kernel_rem_pio2+0x5e0>
 8016d66:	f1bb 0f00 	cmp.w	fp, #0
 8016d6a:	d002      	beq.n	8016d72 <__kernel_rem_pio2+0x592>
 8016d6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d70:	4619      	mov	r1, r3
 8016d72:	9b01      	ldr	r3, [sp, #4]
 8016d74:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016d78:	e7a5      	b.n	8016cc6 <__kernel_rem_pio2+0x4e6>
 8016d7a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8016d7e:	eb0d 0403 	add.w	r4, sp, r3
 8016d82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8016d86:	2000      	movs	r0, #0
 8016d88:	2100      	movs	r1, #0
 8016d8a:	2d00      	cmp	r5, #0
 8016d8c:	da09      	bge.n	8016da2 <__kernel_rem_pio2+0x5c2>
 8016d8e:	f1bb 0f00 	cmp.w	fp, #0
 8016d92:	d002      	beq.n	8016d9a <__kernel_rem_pio2+0x5ba>
 8016d94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d98:	4619      	mov	r1, r3
 8016d9a:	9b01      	ldr	r3, [sp, #4]
 8016d9c:	e9c3 0100 	strd	r0, r1, [r3]
 8016da0:	e791      	b.n	8016cc6 <__kernel_rem_pio2+0x4e6>
 8016da2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016da6:	f7e9 fa79 	bl	800029c <__adddf3>
 8016daa:	3d01      	subs	r5, #1
 8016dac:	e7ed      	b.n	8016d8a <__kernel_rem_pio2+0x5aa>
 8016dae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016db2:	f7e9 fa73 	bl	800029c <__adddf3>
 8016db6:	3e01      	subs	r6, #1
 8016db8:	e7c0      	b.n	8016d3c <__kernel_rem_pio2+0x55c>
 8016dba:	4602      	mov	r2, r0
 8016dbc:	460b      	mov	r3, r1
 8016dbe:	e7c5      	b.n	8016d4c <__kernel_rem_pio2+0x56c>
 8016dc0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8016dc4:	f7e9 fa6a 	bl	800029c <__adddf3>
 8016dc8:	3401      	adds	r4, #1
 8016dca:	e7ca      	b.n	8016d62 <__kernel_rem_pio2+0x582>
 8016dcc:	e9da 8900 	ldrd	r8, r9, [sl]
 8016dd0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8016dd4:	9b02      	ldr	r3, [sp, #8]
 8016dd6:	3b01      	subs	r3, #1
 8016dd8:	9302      	str	r3, [sp, #8]
 8016dda:	4632      	mov	r2, r6
 8016ddc:	463b      	mov	r3, r7
 8016dde:	4640      	mov	r0, r8
 8016de0:	4649      	mov	r1, r9
 8016de2:	f7e9 fa5b 	bl	800029c <__adddf3>
 8016de6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016dea:	4602      	mov	r2, r0
 8016dec:	460b      	mov	r3, r1
 8016dee:	4640      	mov	r0, r8
 8016df0:	4649      	mov	r1, r9
 8016df2:	f7e9 fa51 	bl	8000298 <__aeabi_dsub>
 8016df6:	4632      	mov	r2, r6
 8016df8:	463b      	mov	r3, r7
 8016dfa:	f7e9 fa4f 	bl	800029c <__adddf3>
 8016dfe:	ed9d 7b08 	vldr	d7, [sp, #32]
 8016e02:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016e06:	ed8a 7b00 	vstr	d7, [sl]
 8016e0a:	e76e      	b.n	8016cea <__kernel_rem_pio2+0x50a>
 8016e0c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8016e10:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8016e14:	4640      	mov	r0, r8
 8016e16:	4632      	mov	r2, r6
 8016e18:	463b      	mov	r3, r7
 8016e1a:	4649      	mov	r1, r9
 8016e1c:	f7e9 fa3e 	bl	800029c <__adddf3>
 8016e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016e24:	4602      	mov	r2, r0
 8016e26:	460b      	mov	r3, r1
 8016e28:	4640      	mov	r0, r8
 8016e2a:	4649      	mov	r1, r9
 8016e2c:	f7e9 fa34 	bl	8000298 <__aeabi_dsub>
 8016e30:	4632      	mov	r2, r6
 8016e32:	463b      	mov	r3, r7
 8016e34:	f7e9 fa32 	bl	800029c <__adddf3>
 8016e38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016e3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016e40:	ed84 7b00 	vstr	d7, [r4]
 8016e44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e48:	e755      	b.n	8016cf6 <__kernel_rem_pio2+0x516>
 8016e4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016e4e:	f7e9 fa25 	bl	800029c <__adddf3>
 8016e52:	3d01      	subs	r5, #1
 8016e54:	e759      	b.n	8016d0a <__kernel_rem_pio2+0x52a>
 8016e56:	9b01      	ldr	r3, [sp, #4]
 8016e58:	9a01      	ldr	r2, [sp, #4]
 8016e5a:	601d      	str	r5, [r3, #0]
 8016e5c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8016e60:	605c      	str	r4, [r3, #4]
 8016e62:	609f      	str	r7, [r3, #8]
 8016e64:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8016e68:	60d3      	str	r3, [r2, #12]
 8016e6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016e6e:	6110      	str	r0, [r2, #16]
 8016e70:	6153      	str	r3, [r2, #20]
 8016e72:	e728      	b.n	8016cc6 <__kernel_rem_pio2+0x4e6>
 8016e74:	41700000 	.word	0x41700000
 8016e78:	3e700000 	.word	0x3e700000
 8016e7c:	00000000 	.word	0x00000000

08016e80 <__kernel_tan>:
 8016e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e84:	ed2d 8b06 	vpush	{d8-d10}
 8016e88:	ec5b ab10 	vmov	sl, fp, d0
 8016e8c:	4be0      	ldr	r3, [pc, #896]	; (8017210 <__kernel_tan+0x390>)
 8016e8e:	b083      	sub	sp, #12
 8016e90:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8016e94:	429f      	cmp	r7, r3
 8016e96:	ec59 8b11 	vmov	r8, r9, d1
 8016e9a:	4606      	mov	r6, r0
 8016e9c:	f8cd b000 	str.w	fp, [sp]
 8016ea0:	dc61      	bgt.n	8016f66 <__kernel_tan+0xe6>
 8016ea2:	ee10 0a10 	vmov	r0, s0
 8016ea6:	4659      	mov	r1, fp
 8016ea8:	f7e9 fe5e 	bl	8000b68 <__aeabi_d2iz>
 8016eac:	4605      	mov	r5, r0
 8016eae:	2800      	cmp	r0, #0
 8016eb0:	f040 8083 	bne.w	8016fba <__kernel_tan+0x13a>
 8016eb4:	1c73      	adds	r3, r6, #1
 8016eb6:	4652      	mov	r2, sl
 8016eb8:	4313      	orrs	r3, r2
 8016eba:	433b      	orrs	r3, r7
 8016ebc:	d112      	bne.n	8016ee4 <__kernel_tan+0x64>
 8016ebe:	ec4b ab10 	vmov	d0, sl, fp
 8016ec2:	f000 f9e7 	bl	8017294 <fabs>
 8016ec6:	49d3      	ldr	r1, [pc, #844]	; (8017214 <__kernel_tan+0x394>)
 8016ec8:	ec53 2b10 	vmov	r2, r3, d0
 8016ecc:	2000      	movs	r0, #0
 8016ece:	f7e9 fcc5 	bl	800085c <__aeabi_ddiv>
 8016ed2:	4682      	mov	sl, r0
 8016ed4:	468b      	mov	fp, r1
 8016ed6:	ec4b ab10 	vmov	d0, sl, fp
 8016eda:	b003      	add	sp, #12
 8016edc:	ecbd 8b06 	vpop	{d8-d10}
 8016ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ee4:	2e01      	cmp	r6, #1
 8016ee6:	d0f6      	beq.n	8016ed6 <__kernel_tan+0x56>
 8016ee8:	4642      	mov	r2, r8
 8016eea:	464b      	mov	r3, r9
 8016eec:	4650      	mov	r0, sl
 8016eee:	4659      	mov	r1, fp
 8016ef0:	f7e9 f9d4 	bl	800029c <__adddf3>
 8016ef4:	4602      	mov	r2, r0
 8016ef6:	460b      	mov	r3, r1
 8016ef8:	460f      	mov	r7, r1
 8016efa:	2000      	movs	r0, #0
 8016efc:	49c6      	ldr	r1, [pc, #792]	; (8017218 <__kernel_tan+0x398>)
 8016efe:	f7e9 fcad 	bl	800085c <__aeabi_ddiv>
 8016f02:	e9cd 0100 	strd	r0, r1, [sp]
 8016f06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016f0a:	462e      	mov	r6, r5
 8016f0c:	4652      	mov	r2, sl
 8016f0e:	462c      	mov	r4, r5
 8016f10:	4630      	mov	r0, r6
 8016f12:	461d      	mov	r5, r3
 8016f14:	4639      	mov	r1, r7
 8016f16:	465b      	mov	r3, fp
 8016f18:	f7e9 f9be 	bl	8000298 <__aeabi_dsub>
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	460b      	mov	r3, r1
 8016f20:	4640      	mov	r0, r8
 8016f22:	4649      	mov	r1, r9
 8016f24:	f7e9 f9b8 	bl	8000298 <__aeabi_dsub>
 8016f28:	4632      	mov	r2, r6
 8016f2a:	462b      	mov	r3, r5
 8016f2c:	f7e9 fb6c 	bl	8000608 <__aeabi_dmul>
 8016f30:	4632      	mov	r2, r6
 8016f32:	4680      	mov	r8, r0
 8016f34:	4689      	mov	r9, r1
 8016f36:	462b      	mov	r3, r5
 8016f38:	4630      	mov	r0, r6
 8016f3a:	4639      	mov	r1, r7
 8016f3c:	f7e9 fb64 	bl	8000608 <__aeabi_dmul>
 8016f40:	4bb4      	ldr	r3, [pc, #720]	; (8017214 <__kernel_tan+0x394>)
 8016f42:	2200      	movs	r2, #0
 8016f44:	f7e9 f9aa 	bl	800029c <__adddf3>
 8016f48:	4602      	mov	r2, r0
 8016f4a:	460b      	mov	r3, r1
 8016f4c:	4640      	mov	r0, r8
 8016f4e:	4649      	mov	r1, r9
 8016f50:	f7e9 f9a4 	bl	800029c <__adddf3>
 8016f54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016f58:	f7e9 fb56 	bl	8000608 <__aeabi_dmul>
 8016f5c:	4622      	mov	r2, r4
 8016f5e:	462b      	mov	r3, r5
 8016f60:	f7e9 f99c 	bl	800029c <__adddf3>
 8016f64:	e7b5      	b.n	8016ed2 <__kernel_tan+0x52>
 8016f66:	4bad      	ldr	r3, [pc, #692]	; (801721c <__kernel_tan+0x39c>)
 8016f68:	429f      	cmp	r7, r3
 8016f6a:	dd26      	ble.n	8016fba <__kernel_tan+0x13a>
 8016f6c:	9b00      	ldr	r3, [sp, #0]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	da09      	bge.n	8016f86 <__kernel_tan+0x106>
 8016f72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016f76:	469b      	mov	fp, r3
 8016f78:	ee10 aa10 	vmov	sl, s0
 8016f7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016f80:	ee11 8a10 	vmov	r8, s2
 8016f84:	4699      	mov	r9, r3
 8016f86:	4652      	mov	r2, sl
 8016f88:	465b      	mov	r3, fp
 8016f8a:	a183      	add	r1, pc, #524	; (adr r1, 8017198 <__kernel_tan+0x318>)
 8016f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f90:	f7e9 f982 	bl	8000298 <__aeabi_dsub>
 8016f94:	4642      	mov	r2, r8
 8016f96:	464b      	mov	r3, r9
 8016f98:	4604      	mov	r4, r0
 8016f9a:	460d      	mov	r5, r1
 8016f9c:	a180      	add	r1, pc, #512	; (adr r1, 80171a0 <__kernel_tan+0x320>)
 8016f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fa2:	f7e9 f979 	bl	8000298 <__aeabi_dsub>
 8016fa6:	4622      	mov	r2, r4
 8016fa8:	462b      	mov	r3, r5
 8016faa:	f7e9 f977 	bl	800029c <__adddf3>
 8016fae:	f04f 0800 	mov.w	r8, #0
 8016fb2:	4682      	mov	sl, r0
 8016fb4:	468b      	mov	fp, r1
 8016fb6:	f04f 0900 	mov.w	r9, #0
 8016fba:	4652      	mov	r2, sl
 8016fbc:	465b      	mov	r3, fp
 8016fbe:	4650      	mov	r0, sl
 8016fc0:	4659      	mov	r1, fp
 8016fc2:	f7e9 fb21 	bl	8000608 <__aeabi_dmul>
 8016fc6:	4602      	mov	r2, r0
 8016fc8:	460b      	mov	r3, r1
 8016fca:	ec43 2b18 	vmov	d8, r2, r3
 8016fce:	f7e9 fb1b 	bl	8000608 <__aeabi_dmul>
 8016fd2:	ec53 2b18 	vmov	r2, r3, d8
 8016fd6:	4604      	mov	r4, r0
 8016fd8:	460d      	mov	r5, r1
 8016fda:	4650      	mov	r0, sl
 8016fdc:	4659      	mov	r1, fp
 8016fde:	f7e9 fb13 	bl	8000608 <__aeabi_dmul>
 8016fe2:	a371      	add	r3, pc, #452	; (adr r3, 80171a8 <__kernel_tan+0x328>)
 8016fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe8:	ec41 0b19 	vmov	d9, r0, r1
 8016fec:	4620      	mov	r0, r4
 8016fee:	4629      	mov	r1, r5
 8016ff0:	f7e9 fb0a 	bl	8000608 <__aeabi_dmul>
 8016ff4:	a36e      	add	r3, pc, #440	; (adr r3, 80171b0 <__kernel_tan+0x330>)
 8016ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ffa:	f7e9 f94f 	bl	800029c <__adddf3>
 8016ffe:	4622      	mov	r2, r4
 8017000:	462b      	mov	r3, r5
 8017002:	f7e9 fb01 	bl	8000608 <__aeabi_dmul>
 8017006:	a36c      	add	r3, pc, #432	; (adr r3, 80171b8 <__kernel_tan+0x338>)
 8017008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801700c:	f7e9 f946 	bl	800029c <__adddf3>
 8017010:	4622      	mov	r2, r4
 8017012:	462b      	mov	r3, r5
 8017014:	f7e9 faf8 	bl	8000608 <__aeabi_dmul>
 8017018:	a369      	add	r3, pc, #420	; (adr r3, 80171c0 <__kernel_tan+0x340>)
 801701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801701e:	f7e9 f93d 	bl	800029c <__adddf3>
 8017022:	4622      	mov	r2, r4
 8017024:	462b      	mov	r3, r5
 8017026:	f7e9 faef 	bl	8000608 <__aeabi_dmul>
 801702a:	a367      	add	r3, pc, #412	; (adr r3, 80171c8 <__kernel_tan+0x348>)
 801702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017030:	f7e9 f934 	bl	800029c <__adddf3>
 8017034:	4622      	mov	r2, r4
 8017036:	462b      	mov	r3, r5
 8017038:	f7e9 fae6 	bl	8000608 <__aeabi_dmul>
 801703c:	a364      	add	r3, pc, #400	; (adr r3, 80171d0 <__kernel_tan+0x350>)
 801703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017042:	f7e9 f92b 	bl	800029c <__adddf3>
 8017046:	ec53 2b18 	vmov	r2, r3, d8
 801704a:	f7e9 fadd 	bl	8000608 <__aeabi_dmul>
 801704e:	a362      	add	r3, pc, #392	; (adr r3, 80171d8 <__kernel_tan+0x358>)
 8017050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017054:	ec41 0b1a 	vmov	d10, r0, r1
 8017058:	4620      	mov	r0, r4
 801705a:	4629      	mov	r1, r5
 801705c:	f7e9 fad4 	bl	8000608 <__aeabi_dmul>
 8017060:	a35f      	add	r3, pc, #380	; (adr r3, 80171e0 <__kernel_tan+0x360>)
 8017062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017066:	f7e9 f919 	bl	800029c <__adddf3>
 801706a:	4622      	mov	r2, r4
 801706c:	462b      	mov	r3, r5
 801706e:	f7e9 facb 	bl	8000608 <__aeabi_dmul>
 8017072:	a35d      	add	r3, pc, #372	; (adr r3, 80171e8 <__kernel_tan+0x368>)
 8017074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017078:	f7e9 f910 	bl	800029c <__adddf3>
 801707c:	4622      	mov	r2, r4
 801707e:	462b      	mov	r3, r5
 8017080:	f7e9 fac2 	bl	8000608 <__aeabi_dmul>
 8017084:	a35a      	add	r3, pc, #360	; (adr r3, 80171f0 <__kernel_tan+0x370>)
 8017086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801708a:	f7e9 f907 	bl	800029c <__adddf3>
 801708e:	4622      	mov	r2, r4
 8017090:	462b      	mov	r3, r5
 8017092:	f7e9 fab9 	bl	8000608 <__aeabi_dmul>
 8017096:	a358      	add	r3, pc, #352	; (adr r3, 80171f8 <__kernel_tan+0x378>)
 8017098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801709c:	f7e9 f8fe 	bl	800029c <__adddf3>
 80170a0:	4622      	mov	r2, r4
 80170a2:	462b      	mov	r3, r5
 80170a4:	f7e9 fab0 	bl	8000608 <__aeabi_dmul>
 80170a8:	a355      	add	r3, pc, #340	; (adr r3, 8017200 <__kernel_tan+0x380>)
 80170aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ae:	f7e9 f8f5 	bl	800029c <__adddf3>
 80170b2:	4602      	mov	r2, r0
 80170b4:	460b      	mov	r3, r1
 80170b6:	ec51 0b1a 	vmov	r0, r1, d10
 80170ba:	f7e9 f8ef 	bl	800029c <__adddf3>
 80170be:	ec53 2b19 	vmov	r2, r3, d9
 80170c2:	f7e9 faa1 	bl	8000608 <__aeabi_dmul>
 80170c6:	4642      	mov	r2, r8
 80170c8:	464b      	mov	r3, r9
 80170ca:	f7e9 f8e7 	bl	800029c <__adddf3>
 80170ce:	ec53 2b18 	vmov	r2, r3, d8
 80170d2:	f7e9 fa99 	bl	8000608 <__aeabi_dmul>
 80170d6:	4642      	mov	r2, r8
 80170d8:	464b      	mov	r3, r9
 80170da:	f7e9 f8df 	bl	800029c <__adddf3>
 80170de:	a34a      	add	r3, pc, #296	; (adr r3, 8017208 <__kernel_tan+0x388>)
 80170e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170e4:	4604      	mov	r4, r0
 80170e6:	460d      	mov	r5, r1
 80170e8:	ec51 0b19 	vmov	r0, r1, d9
 80170ec:	f7e9 fa8c 	bl	8000608 <__aeabi_dmul>
 80170f0:	4622      	mov	r2, r4
 80170f2:	462b      	mov	r3, r5
 80170f4:	f7e9 f8d2 	bl	800029c <__adddf3>
 80170f8:	460b      	mov	r3, r1
 80170fa:	ec41 0b18 	vmov	d8, r0, r1
 80170fe:	4602      	mov	r2, r0
 8017100:	4659      	mov	r1, fp
 8017102:	4650      	mov	r0, sl
 8017104:	f7e9 f8ca 	bl	800029c <__adddf3>
 8017108:	4b44      	ldr	r3, [pc, #272]	; (801721c <__kernel_tan+0x39c>)
 801710a:	429f      	cmp	r7, r3
 801710c:	4604      	mov	r4, r0
 801710e:	460d      	mov	r5, r1
 8017110:	f340 8086 	ble.w	8017220 <__kernel_tan+0x3a0>
 8017114:	4630      	mov	r0, r6
 8017116:	f7e9 fa0d 	bl	8000534 <__aeabi_i2d>
 801711a:	4622      	mov	r2, r4
 801711c:	4680      	mov	r8, r0
 801711e:	4689      	mov	r9, r1
 8017120:	462b      	mov	r3, r5
 8017122:	4620      	mov	r0, r4
 8017124:	4629      	mov	r1, r5
 8017126:	f7e9 fa6f 	bl	8000608 <__aeabi_dmul>
 801712a:	4642      	mov	r2, r8
 801712c:	4606      	mov	r6, r0
 801712e:	460f      	mov	r7, r1
 8017130:	464b      	mov	r3, r9
 8017132:	4620      	mov	r0, r4
 8017134:	4629      	mov	r1, r5
 8017136:	f7e9 f8b1 	bl	800029c <__adddf3>
 801713a:	4602      	mov	r2, r0
 801713c:	460b      	mov	r3, r1
 801713e:	4630      	mov	r0, r6
 8017140:	4639      	mov	r1, r7
 8017142:	f7e9 fb8b 	bl	800085c <__aeabi_ddiv>
 8017146:	ec53 2b18 	vmov	r2, r3, d8
 801714a:	f7e9 f8a5 	bl	8000298 <__aeabi_dsub>
 801714e:	4602      	mov	r2, r0
 8017150:	460b      	mov	r3, r1
 8017152:	4650      	mov	r0, sl
 8017154:	4659      	mov	r1, fp
 8017156:	f7e9 f89f 	bl	8000298 <__aeabi_dsub>
 801715a:	4602      	mov	r2, r0
 801715c:	460b      	mov	r3, r1
 801715e:	f7e9 f89d 	bl	800029c <__adddf3>
 8017162:	4602      	mov	r2, r0
 8017164:	460b      	mov	r3, r1
 8017166:	4640      	mov	r0, r8
 8017168:	4649      	mov	r1, r9
 801716a:	f7e9 f895 	bl	8000298 <__aeabi_dsub>
 801716e:	9b00      	ldr	r3, [sp, #0]
 8017170:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8017174:	f00a 0a02 	and.w	sl, sl, #2
 8017178:	4604      	mov	r4, r0
 801717a:	f1ca 0001 	rsb	r0, sl, #1
 801717e:	460d      	mov	r5, r1
 8017180:	f7e9 f9d8 	bl	8000534 <__aeabi_i2d>
 8017184:	4602      	mov	r2, r0
 8017186:	460b      	mov	r3, r1
 8017188:	4620      	mov	r0, r4
 801718a:	4629      	mov	r1, r5
 801718c:	f7e9 fa3c 	bl	8000608 <__aeabi_dmul>
 8017190:	e69f      	b.n	8016ed2 <__kernel_tan+0x52>
 8017192:	bf00      	nop
 8017194:	f3af 8000 	nop.w
 8017198:	54442d18 	.word	0x54442d18
 801719c:	3fe921fb 	.word	0x3fe921fb
 80171a0:	33145c07 	.word	0x33145c07
 80171a4:	3c81a626 	.word	0x3c81a626
 80171a8:	74bf7ad4 	.word	0x74bf7ad4
 80171ac:	3efb2a70 	.word	0x3efb2a70
 80171b0:	32f0a7e9 	.word	0x32f0a7e9
 80171b4:	3f12b80f 	.word	0x3f12b80f
 80171b8:	1a8d1068 	.word	0x1a8d1068
 80171bc:	3f3026f7 	.word	0x3f3026f7
 80171c0:	fee08315 	.word	0xfee08315
 80171c4:	3f57dbc8 	.word	0x3f57dbc8
 80171c8:	e96e8493 	.word	0xe96e8493
 80171cc:	3f8226e3 	.word	0x3f8226e3
 80171d0:	1bb341fe 	.word	0x1bb341fe
 80171d4:	3faba1ba 	.word	0x3faba1ba
 80171d8:	db605373 	.word	0xdb605373
 80171dc:	bef375cb 	.word	0xbef375cb
 80171e0:	a03792a6 	.word	0xa03792a6
 80171e4:	3f147e88 	.word	0x3f147e88
 80171e8:	f2f26501 	.word	0xf2f26501
 80171ec:	3f4344d8 	.word	0x3f4344d8
 80171f0:	c9560328 	.word	0xc9560328
 80171f4:	3f6d6d22 	.word	0x3f6d6d22
 80171f8:	8406d637 	.word	0x8406d637
 80171fc:	3f9664f4 	.word	0x3f9664f4
 8017200:	1110fe7a 	.word	0x1110fe7a
 8017204:	3fc11111 	.word	0x3fc11111
 8017208:	55555563 	.word	0x55555563
 801720c:	3fd55555 	.word	0x3fd55555
 8017210:	3e2fffff 	.word	0x3e2fffff
 8017214:	3ff00000 	.word	0x3ff00000
 8017218:	bff00000 	.word	0xbff00000
 801721c:	3fe59427 	.word	0x3fe59427
 8017220:	2e01      	cmp	r6, #1
 8017222:	d02f      	beq.n	8017284 <__kernel_tan+0x404>
 8017224:	460f      	mov	r7, r1
 8017226:	4602      	mov	r2, r0
 8017228:	460b      	mov	r3, r1
 801722a:	4689      	mov	r9, r1
 801722c:	2000      	movs	r0, #0
 801722e:	4917      	ldr	r1, [pc, #92]	; (801728c <__kernel_tan+0x40c>)
 8017230:	f7e9 fb14 	bl	800085c <__aeabi_ddiv>
 8017234:	2600      	movs	r6, #0
 8017236:	e9cd 0100 	strd	r0, r1, [sp]
 801723a:	4652      	mov	r2, sl
 801723c:	465b      	mov	r3, fp
 801723e:	4630      	mov	r0, r6
 8017240:	4639      	mov	r1, r7
 8017242:	f7e9 f829 	bl	8000298 <__aeabi_dsub>
 8017246:	e9dd 4500 	ldrd	r4, r5, [sp]
 801724a:	4602      	mov	r2, r0
 801724c:	460b      	mov	r3, r1
 801724e:	ec51 0b18 	vmov	r0, r1, d8
 8017252:	f7e9 f821 	bl	8000298 <__aeabi_dsub>
 8017256:	4632      	mov	r2, r6
 8017258:	462b      	mov	r3, r5
 801725a:	f7e9 f9d5 	bl	8000608 <__aeabi_dmul>
 801725e:	46b0      	mov	r8, r6
 8017260:	460f      	mov	r7, r1
 8017262:	4642      	mov	r2, r8
 8017264:	462b      	mov	r3, r5
 8017266:	4634      	mov	r4, r6
 8017268:	4649      	mov	r1, r9
 801726a:	4606      	mov	r6, r0
 801726c:	4640      	mov	r0, r8
 801726e:	f7e9 f9cb 	bl	8000608 <__aeabi_dmul>
 8017272:	4b07      	ldr	r3, [pc, #28]	; (8017290 <__kernel_tan+0x410>)
 8017274:	2200      	movs	r2, #0
 8017276:	f7e9 f811 	bl	800029c <__adddf3>
 801727a:	4602      	mov	r2, r0
 801727c:	460b      	mov	r3, r1
 801727e:	4630      	mov	r0, r6
 8017280:	4639      	mov	r1, r7
 8017282:	e665      	b.n	8016f50 <__kernel_tan+0xd0>
 8017284:	4682      	mov	sl, r0
 8017286:	468b      	mov	fp, r1
 8017288:	e625      	b.n	8016ed6 <__kernel_tan+0x56>
 801728a:	bf00      	nop
 801728c:	bff00000 	.word	0xbff00000
 8017290:	3ff00000 	.word	0x3ff00000

08017294 <fabs>:
 8017294:	ec51 0b10 	vmov	r0, r1, d0
 8017298:	ee10 2a10 	vmov	r2, s0
 801729c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80172a0:	ec43 2b10 	vmov	d0, r2, r3
 80172a4:	4770      	bx	lr
	...

080172a8 <floor>:
 80172a8:	ec51 0b10 	vmov	r0, r1, d0
 80172ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80172b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80172b8:	2e13      	cmp	r6, #19
 80172ba:	ee10 5a10 	vmov	r5, s0
 80172be:	ee10 8a10 	vmov	r8, s0
 80172c2:	460c      	mov	r4, r1
 80172c4:	dc32      	bgt.n	801732c <floor+0x84>
 80172c6:	2e00      	cmp	r6, #0
 80172c8:	da14      	bge.n	80172f4 <floor+0x4c>
 80172ca:	a333      	add	r3, pc, #204	; (adr r3, 8017398 <floor+0xf0>)
 80172cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d0:	f7e8 ffe4 	bl	800029c <__adddf3>
 80172d4:	2200      	movs	r2, #0
 80172d6:	2300      	movs	r3, #0
 80172d8:	f7e9 fc26 	bl	8000b28 <__aeabi_dcmpgt>
 80172dc:	b138      	cbz	r0, 80172ee <floor+0x46>
 80172de:	2c00      	cmp	r4, #0
 80172e0:	da57      	bge.n	8017392 <floor+0xea>
 80172e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80172e6:	431d      	orrs	r5, r3
 80172e8:	d001      	beq.n	80172ee <floor+0x46>
 80172ea:	4c2d      	ldr	r4, [pc, #180]	; (80173a0 <floor+0xf8>)
 80172ec:	2500      	movs	r5, #0
 80172ee:	4621      	mov	r1, r4
 80172f0:	4628      	mov	r0, r5
 80172f2:	e025      	b.n	8017340 <floor+0x98>
 80172f4:	4f2b      	ldr	r7, [pc, #172]	; (80173a4 <floor+0xfc>)
 80172f6:	4137      	asrs	r7, r6
 80172f8:	ea01 0307 	and.w	r3, r1, r7
 80172fc:	4303      	orrs	r3, r0
 80172fe:	d01f      	beq.n	8017340 <floor+0x98>
 8017300:	a325      	add	r3, pc, #148	; (adr r3, 8017398 <floor+0xf0>)
 8017302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017306:	f7e8 ffc9 	bl	800029c <__adddf3>
 801730a:	2200      	movs	r2, #0
 801730c:	2300      	movs	r3, #0
 801730e:	f7e9 fc0b 	bl	8000b28 <__aeabi_dcmpgt>
 8017312:	2800      	cmp	r0, #0
 8017314:	d0eb      	beq.n	80172ee <floor+0x46>
 8017316:	2c00      	cmp	r4, #0
 8017318:	bfbe      	ittt	lt
 801731a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801731e:	fa43 f606 	asrlt.w	r6, r3, r6
 8017322:	19a4      	addlt	r4, r4, r6
 8017324:	ea24 0407 	bic.w	r4, r4, r7
 8017328:	2500      	movs	r5, #0
 801732a:	e7e0      	b.n	80172ee <floor+0x46>
 801732c:	2e33      	cmp	r6, #51	; 0x33
 801732e:	dd0b      	ble.n	8017348 <floor+0xa0>
 8017330:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017334:	d104      	bne.n	8017340 <floor+0x98>
 8017336:	ee10 2a10 	vmov	r2, s0
 801733a:	460b      	mov	r3, r1
 801733c:	f7e8 ffae 	bl	800029c <__adddf3>
 8017340:	ec41 0b10 	vmov	d0, r0, r1
 8017344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017348:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801734c:	f04f 33ff 	mov.w	r3, #4294967295
 8017350:	fa23 f707 	lsr.w	r7, r3, r7
 8017354:	4207      	tst	r7, r0
 8017356:	d0f3      	beq.n	8017340 <floor+0x98>
 8017358:	a30f      	add	r3, pc, #60	; (adr r3, 8017398 <floor+0xf0>)
 801735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801735e:	f7e8 ff9d 	bl	800029c <__adddf3>
 8017362:	2200      	movs	r2, #0
 8017364:	2300      	movs	r3, #0
 8017366:	f7e9 fbdf 	bl	8000b28 <__aeabi_dcmpgt>
 801736a:	2800      	cmp	r0, #0
 801736c:	d0bf      	beq.n	80172ee <floor+0x46>
 801736e:	2c00      	cmp	r4, #0
 8017370:	da02      	bge.n	8017378 <floor+0xd0>
 8017372:	2e14      	cmp	r6, #20
 8017374:	d103      	bne.n	801737e <floor+0xd6>
 8017376:	3401      	adds	r4, #1
 8017378:	ea25 0507 	bic.w	r5, r5, r7
 801737c:	e7b7      	b.n	80172ee <floor+0x46>
 801737e:	2301      	movs	r3, #1
 8017380:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017384:	fa03 f606 	lsl.w	r6, r3, r6
 8017388:	4435      	add	r5, r6
 801738a:	4545      	cmp	r5, r8
 801738c:	bf38      	it	cc
 801738e:	18e4      	addcc	r4, r4, r3
 8017390:	e7f2      	b.n	8017378 <floor+0xd0>
 8017392:	2500      	movs	r5, #0
 8017394:	462c      	mov	r4, r5
 8017396:	e7aa      	b.n	80172ee <floor+0x46>
 8017398:	8800759c 	.word	0x8800759c
 801739c:	7e37e43c 	.word	0x7e37e43c
 80173a0:	bff00000 	.word	0xbff00000
 80173a4:	000fffff 	.word	0x000fffff

080173a8 <scalbn>:
 80173a8:	b570      	push	{r4, r5, r6, lr}
 80173aa:	ec55 4b10 	vmov	r4, r5, d0
 80173ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80173b2:	4606      	mov	r6, r0
 80173b4:	462b      	mov	r3, r5
 80173b6:	b99a      	cbnz	r2, 80173e0 <scalbn+0x38>
 80173b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80173bc:	4323      	orrs	r3, r4
 80173be:	d036      	beq.n	801742e <scalbn+0x86>
 80173c0:	4b39      	ldr	r3, [pc, #228]	; (80174a8 <scalbn+0x100>)
 80173c2:	4629      	mov	r1, r5
 80173c4:	ee10 0a10 	vmov	r0, s0
 80173c8:	2200      	movs	r2, #0
 80173ca:	f7e9 f91d 	bl	8000608 <__aeabi_dmul>
 80173ce:	4b37      	ldr	r3, [pc, #220]	; (80174ac <scalbn+0x104>)
 80173d0:	429e      	cmp	r6, r3
 80173d2:	4604      	mov	r4, r0
 80173d4:	460d      	mov	r5, r1
 80173d6:	da10      	bge.n	80173fa <scalbn+0x52>
 80173d8:	a32b      	add	r3, pc, #172	; (adr r3, 8017488 <scalbn+0xe0>)
 80173da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173de:	e03a      	b.n	8017456 <scalbn+0xae>
 80173e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80173e4:	428a      	cmp	r2, r1
 80173e6:	d10c      	bne.n	8017402 <scalbn+0x5a>
 80173e8:	ee10 2a10 	vmov	r2, s0
 80173ec:	4620      	mov	r0, r4
 80173ee:	4629      	mov	r1, r5
 80173f0:	f7e8 ff54 	bl	800029c <__adddf3>
 80173f4:	4604      	mov	r4, r0
 80173f6:	460d      	mov	r5, r1
 80173f8:	e019      	b.n	801742e <scalbn+0x86>
 80173fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80173fe:	460b      	mov	r3, r1
 8017400:	3a36      	subs	r2, #54	; 0x36
 8017402:	4432      	add	r2, r6
 8017404:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017408:	428a      	cmp	r2, r1
 801740a:	dd08      	ble.n	801741e <scalbn+0x76>
 801740c:	2d00      	cmp	r5, #0
 801740e:	a120      	add	r1, pc, #128	; (adr r1, 8017490 <scalbn+0xe8>)
 8017410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017414:	da1c      	bge.n	8017450 <scalbn+0xa8>
 8017416:	a120      	add	r1, pc, #128	; (adr r1, 8017498 <scalbn+0xf0>)
 8017418:	e9d1 0100 	ldrd	r0, r1, [r1]
 801741c:	e018      	b.n	8017450 <scalbn+0xa8>
 801741e:	2a00      	cmp	r2, #0
 8017420:	dd08      	ble.n	8017434 <scalbn+0x8c>
 8017422:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017426:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801742a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801742e:	ec45 4b10 	vmov	d0, r4, r5
 8017432:	bd70      	pop	{r4, r5, r6, pc}
 8017434:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017438:	da19      	bge.n	801746e <scalbn+0xc6>
 801743a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801743e:	429e      	cmp	r6, r3
 8017440:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8017444:	dd0a      	ble.n	801745c <scalbn+0xb4>
 8017446:	a112      	add	r1, pc, #72	; (adr r1, 8017490 <scalbn+0xe8>)
 8017448:	e9d1 0100 	ldrd	r0, r1, [r1]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d1e2      	bne.n	8017416 <scalbn+0x6e>
 8017450:	a30f      	add	r3, pc, #60	; (adr r3, 8017490 <scalbn+0xe8>)
 8017452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017456:	f7e9 f8d7 	bl	8000608 <__aeabi_dmul>
 801745a:	e7cb      	b.n	80173f4 <scalbn+0x4c>
 801745c:	a10a      	add	r1, pc, #40	; (adr r1, 8017488 <scalbn+0xe0>)
 801745e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d0b8      	beq.n	80173d8 <scalbn+0x30>
 8017466:	a10e      	add	r1, pc, #56	; (adr r1, 80174a0 <scalbn+0xf8>)
 8017468:	e9d1 0100 	ldrd	r0, r1, [r1]
 801746c:	e7b4      	b.n	80173d8 <scalbn+0x30>
 801746e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017472:	3236      	adds	r2, #54	; 0x36
 8017474:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017478:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801747c:	4620      	mov	r0, r4
 801747e:	4b0c      	ldr	r3, [pc, #48]	; (80174b0 <scalbn+0x108>)
 8017480:	2200      	movs	r2, #0
 8017482:	e7e8      	b.n	8017456 <scalbn+0xae>
 8017484:	f3af 8000 	nop.w
 8017488:	c2f8f359 	.word	0xc2f8f359
 801748c:	01a56e1f 	.word	0x01a56e1f
 8017490:	8800759c 	.word	0x8800759c
 8017494:	7e37e43c 	.word	0x7e37e43c
 8017498:	8800759c 	.word	0x8800759c
 801749c:	fe37e43c 	.word	0xfe37e43c
 80174a0:	c2f8f359 	.word	0xc2f8f359
 80174a4:	81a56e1f 	.word	0x81a56e1f
 80174a8:	43500000 	.word	0x43500000
 80174ac:	ffff3cb0 	.word	0xffff3cb0
 80174b0:	3c900000 	.word	0x3c900000

080174b4 <__errno>:
 80174b4:	4b01      	ldr	r3, [pc, #4]	; (80174bc <__errno+0x8>)
 80174b6:	6818      	ldr	r0, [r3, #0]
 80174b8:	4770      	bx	lr
 80174ba:	bf00      	nop
 80174bc:	200008c4 	.word	0x200008c4

080174c0 <__libc_init_array>:
 80174c0:	b570      	push	{r4, r5, r6, lr}
 80174c2:	4d0d      	ldr	r5, [pc, #52]	; (80174f8 <__libc_init_array+0x38>)
 80174c4:	4c0d      	ldr	r4, [pc, #52]	; (80174fc <__libc_init_array+0x3c>)
 80174c6:	1b64      	subs	r4, r4, r5
 80174c8:	10a4      	asrs	r4, r4, #2
 80174ca:	2600      	movs	r6, #0
 80174cc:	42a6      	cmp	r6, r4
 80174ce:	d109      	bne.n	80174e4 <__libc_init_array+0x24>
 80174d0:	4d0b      	ldr	r5, [pc, #44]	; (8017500 <__libc_init_array+0x40>)
 80174d2:	4c0c      	ldr	r4, [pc, #48]	; (8017504 <__libc_init_array+0x44>)
 80174d4:	f002 ffaa 	bl	801a42c <_init>
 80174d8:	1b64      	subs	r4, r4, r5
 80174da:	10a4      	asrs	r4, r4, #2
 80174dc:	2600      	movs	r6, #0
 80174de:	42a6      	cmp	r6, r4
 80174e0:	d105      	bne.n	80174ee <__libc_init_array+0x2e>
 80174e2:	bd70      	pop	{r4, r5, r6, pc}
 80174e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80174e8:	4798      	blx	r3
 80174ea:	3601      	adds	r6, #1
 80174ec:	e7ee      	b.n	80174cc <__libc_init_array+0xc>
 80174ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80174f2:	4798      	blx	r3
 80174f4:	3601      	adds	r6, #1
 80174f6:	e7f2      	b.n	80174de <__libc_init_array+0x1e>
 80174f8:	0804e38c 	.word	0x0804e38c
 80174fc:	0804e38c 	.word	0x0804e38c
 8017500:	0804e38c 	.word	0x0804e38c
 8017504:	0804e390 	.word	0x0804e390

08017508 <memcpy>:
 8017508:	440a      	add	r2, r1
 801750a:	4291      	cmp	r1, r2
 801750c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017510:	d100      	bne.n	8017514 <memcpy+0xc>
 8017512:	4770      	bx	lr
 8017514:	b510      	push	{r4, lr}
 8017516:	f811 4b01 	ldrb.w	r4, [r1], #1
 801751a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801751e:	4291      	cmp	r1, r2
 8017520:	d1f9      	bne.n	8017516 <memcpy+0xe>
 8017522:	bd10      	pop	{r4, pc}

08017524 <memset>:
 8017524:	4402      	add	r2, r0
 8017526:	4603      	mov	r3, r0
 8017528:	4293      	cmp	r3, r2
 801752a:	d100      	bne.n	801752e <memset+0xa>
 801752c:	4770      	bx	lr
 801752e:	f803 1b01 	strb.w	r1, [r3], #1
 8017532:	e7f9      	b.n	8017528 <memset+0x4>

08017534 <__cvt>:
 8017534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017538:	ec55 4b10 	vmov	r4, r5, d0
 801753c:	2d00      	cmp	r5, #0
 801753e:	460e      	mov	r6, r1
 8017540:	4619      	mov	r1, r3
 8017542:	462b      	mov	r3, r5
 8017544:	bfbb      	ittet	lt
 8017546:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801754a:	461d      	movlt	r5, r3
 801754c:	2300      	movge	r3, #0
 801754e:	232d      	movlt	r3, #45	; 0x2d
 8017550:	700b      	strb	r3, [r1, #0]
 8017552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017554:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017558:	4691      	mov	r9, r2
 801755a:	f023 0820 	bic.w	r8, r3, #32
 801755e:	bfbc      	itt	lt
 8017560:	4622      	movlt	r2, r4
 8017562:	4614      	movlt	r4, r2
 8017564:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017568:	d005      	beq.n	8017576 <__cvt+0x42>
 801756a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801756e:	d100      	bne.n	8017572 <__cvt+0x3e>
 8017570:	3601      	adds	r6, #1
 8017572:	2102      	movs	r1, #2
 8017574:	e000      	b.n	8017578 <__cvt+0x44>
 8017576:	2103      	movs	r1, #3
 8017578:	ab03      	add	r3, sp, #12
 801757a:	9301      	str	r3, [sp, #4]
 801757c:	ab02      	add	r3, sp, #8
 801757e:	9300      	str	r3, [sp, #0]
 8017580:	ec45 4b10 	vmov	d0, r4, r5
 8017584:	4653      	mov	r3, sl
 8017586:	4632      	mov	r2, r6
 8017588:	f000 fe52 	bl	8018230 <_dtoa_r>
 801758c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017590:	4607      	mov	r7, r0
 8017592:	d102      	bne.n	801759a <__cvt+0x66>
 8017594:	f019 0f01 	tst.w	r9, #1
 8017598:	d022      	beq.n	80175e0 <__cvt+0xac>
 801759a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801759e:	eb07 0906 	add.w	r9, r7, r6
 80175a2:	d110      	bne.n	80175c6 <__cvt+0x92>
 80175a4:	783b      	ldrb	r3, [r7, #0]
 80175a6:	2b30      	cmp	r3, #48	; 0x30
 80175a8:	d10a      	bne.n	80175c0 <__cvt+0x8c>
 80175aa:	2200      	movs	r2, #0
 80175ac:	2300      	movs	r3, #0
 80175ae:	4620      	mov	r0, r4
 80175b0:	4629      	mov	r1, r5
 80175b2:	f7e9 fa91 	bl	8000ad8 <__aeabi_dcmpeq>
 80175b6:	b918      	cbnz	r0, 80175c0 <__cvt+0x8c>
 80175b8:	f1c6 0601 	rsb	r6, r6, #1
 80175bc:	f8ca 6000 	str.w	r6, [sl]
 80175c0:	f8da 3000 	ldr.w	r3, [sl]
 80175c4:	4499      	add	r9, r3
 80175c6:	2200      	movs	r2, #0
 80175c8:	2300      	movs	r3, #0
 80175ca:	4620      	mov	r0, r4
 80175cc:	4629      	mov	r1, r5
 80175ce:	f7e9 fa83 	bl	8000ad8 <__aeabi_dcmpeq>
 80175d2:	b108      	cbz	r0, 80175d8 <__cvt+0xa4>
 80175d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80175d8:	2230      	movs	r2, #48	; 0x30
 80175da:	9b03      	ldr	r3, [sp, #12]
 80175dc:	454b      	cmp	r3, r9
 80175de:	d307      	bcc.n	80175f0 <__cvt+0xbc>
 80175e0:	9b03      	ldr	r3, [sp, #12]
 80175e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80175e4:	1bdb      	subs	r3, r3, r7
 80175e6:	4638      	mov	r0, r7
 80175e8:	6013      	str	r3, [r2, #0]
 80175ea:	b004      	add	sp, #16
 80175ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175f0:	1c59      	adds	r1, r3, #1
 80175f2:	9103      	str	r1, [sp, #12]
 80175f4:	701a      	strb	r2, [r3, #0]
 80175f6:	e7f0      	b.n	80175da <__cvt+0xa6>

080175f8 <__exponent>:
 80175f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80175fa:	4603      	mov	r3, r0
 80175fc:	2900      	cmp	r1, #0
 80175fe:	bfb8      	it	lt
 8017600:	4249      	neglt	r1, r1
 8017602:	f803 2b02 	strb.w	r2, [r3], #2
 8017606:	bfb4      	ite	lt
 8017608:	222d      	movlt	r2, #45	; 0x2d
 801760a:	222b      	movge	r2, #43	; 0x2b
 801760c:	2909      	cmp	r1, #9
 801760e:	7042      	strb	r2, [r0, #1]
 8017610:	dd2a      	ble.n	8017668 <__exponent+0x70>
 8017612:	f10d 0407 	add.w	r4, sp, #7
 8017616:	46a4      	mov	ip, r4
 8017618:	270a      	movs	r7, #10
 801761a:	46a6      	mov	lr, r4
 801761c:	460a      	mov	r2, r1
 801761e:	fb91 f6f7 	sdiv	r6, r1, r7
 8017622:	fb07 1516 	mls	r5, r7, r6, r1
 8017626:	3530      	adds	r5, #48	; 0x30
 8017628:	2a63      	cmp	r2, #99	; 0x63
 801762a:	f104 34ff 	add.w	r4, r4, #4294967295
 801762e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017632:	4631      	mov	r1, r6
 8017634:	dcf1      	bgt.n	801761a <__exponent+0x22>
 8017636:	3130      	adds	r1, #48	; 0x30
 8017638:	f1ae 0502 	sub.w	r5, lr, #2
 801763c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017640:	1c44      	adds	r4, r0, #1
 8017642:	4629      	mov	r1, r5
 8017644:	4561      	cmp	r1, ip
 8017646:	d30a      	bcc.n	801765e <__exponent+0x66>
 8017648:	f10d 0209 	add.w	r2, sp, #9
 801764c:	eba2 020e 	sub.w	r2, r2, lr
 8017650:	4565      	cmp	r5, ip
 8017652:	bf88      	it	hi
 8017654:	2200      	movhi	r2, #0
 8017656:	4413      	add	r3, r2
 8017658:	1a18      	subs	r0, r3, r0
 801765a:	b003      	add	sp, #12
 801765c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801765e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017662:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017666:	e7ed      	b.n	8017644 <__exponent+0x4c>
 8017668:	2330      	movs	r3, #48	; 0x30
 801766a:	3130      	adds	r1, #48	; 0x30
 801766c:	7083      	strb	r3, [r0, #2]
 801766e:	70c1      	strb	r1, [r0, #3]
 8017670:	1d03      	adds	r3, r0, #4
 8017672:	e7f1      	b.n	8017658 <__exponent+0x60>

08017674 <_printf_float>:
 8017674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017678:	ed2d 8b02 	vpush	{d8}
 801767c:	b08d      	sub	sp, #52	; 0x34
 801767e:	460c      	mov	r4, r1
 8017680:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017684:	4616      	mov	r6, r2
 8017686:	461f      	mov	r7, r3
 8017688:	4605      	mov	r5, r0
 801768a:	f001 fd77 	bl	801917c <_localeconv_r>
 801768e:	f8d0 a000 	ldr.w	sl, [r0]
 8017692:	4650      	mov	r0, sl
 8017694:	f7e8 fda4 	bl	80001e0 <strlen>
 8017698:	2300      	movs	r3, #0
 801769a:	930a      	str	r3, [sp, #40]	; 0x28
 801769c:	6823      	ldr	r3, [r4, #0]
 801769e:	9305      	str	r3, [sp, #20]
 80176a0:	f8d8 3000 	ldr.w	r3, [r8]
 80176a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80176a8:	3307      	adds	r3, #7
 80176aa:	f023 0307 	bic.w	r3, r3, #7
 80176ae:	f103 0208 	add.w	r2, r3, #8
 80176b2:	f8c8 2000 	str.w	r2, [r8]
 80176b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80176be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80176c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80176c6:	9307      	str	r3, [sp, #28]
 80176c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80176cc:	ee08 0a10 	vmov	s16, r0
 80176d0:	4b9f      	ldr	r3, [pc, #636]	; (8017950 <_printf_float+0x2dc>)
 80176d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80176d6:	f04f 32ff 	mov.w	r2, #4294967295
 80176da:	f7e9 fa2f 	bl	8000b3c <__aeabi_dcmpun>
 80176de:	bb88      	cbnz	r0, 8017744 <_printf_float+0xd0>
 80176e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80176e4:	4b9a      	ldr	r3, [pc, #616]	; (8017950 <_printf_float+0x2dc>)
 80176e6:	f04f 32ff 	mov.w	r2, #4294967295
 80176ea:	f7e9 fa09 	bl	8000b00 <__aeabi_dcmple>
 80176ee:	bb48      	cbnz	r0, 8017744 <_printf_float+0xd0>
 80176f0:	2200      	movs	r2, #0
 80176f2:	2300      	movs	r3, #0
 80176f4:	4640      	mov	r0, r8
 80176f6:	4649      	mov	r1, r9
 80176f8:	f7e9 f9f8 	bl	8000aec <__aeabi_dcmplt>
 80176fc:	b110      	cbz	r0, 8017704 <_printf_float+0x90>
 80176fe:	232d      	movs	r3, #45	; 0x2d
 8017700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017704:	4b93      	ldr	r3, [pc, #588]	; (8017954 <_printf_float+0x2e0>)
 8017706:	4894      	ldr	r0, [pc, #592]	; (8017958 <_printf_float+0x2e4>)
 8017708:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801770c:	bf94      	ite	ls
 801770e:	4698      	movls	r8, r3
 8017710:	4680      	movhi	r8, r0
 8017712:	2303      	movs	r3, #3
 8017714:	6123      	str	r3, [r4, #16]
 8017716:	9b05      	ldr	r3, [sp, #20]
 8017718:	f023 0204 	bic.w	r2, r3, #4
 801771c:	6022      	str	r2, [r4, #0]
 801771e:	f04f 0900 	mov.w	r9, #0
 8017722:	9700      	str	r7, [sp, #0]
 8017724:	4633      	mov	r3, r6
 8017726:	aa0b      	add	r2, sp, #44	; 0x2c
 8017728:	4621      	mov	r1, r4
 801772a:	4628      	mov	r0, r5
 801772c:	f000 f9d8 	bl	8017ae0 <_printf_common>
 8017730:	3001      	adds	r0, #1
 8017732:	f040 8090 	bne.w	8017856 <_printf_float+0x1e2>
 8017736:	f04f 30ff 	mov.w	r0, #4294967295
 801773a:	b00d      	add	sp, #52	; 0x34
 801773c:	ecbd 8b02 	vpop	{d8}
 8017740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017744:	4642      	mov	r2, r8
 8017746:	464b      	mov	r3, r9
 8017748:	4640      	mov	r0, r8
 801774a:	4649      	mov	r1, r9
 801774c:	f7e9 f9f6 	bl	8000b3c <__aeabi_dcmpun>
 8017750:	b140      	cbz	r0, 8017764 <_printf_float+0xf0>
 8017752:	464b      	mov	r3, r9
 8017754:	2b00      	cmp	r3, #0
 8017756:	bfbc      	itt	lt
 8017758:	232d      	movlt	r3, #45	; 0x2d
 801775a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801775e:	487f      	ldr	r0, [pc, #508]	; (801795c <_printf_float+0x2e8>)
 8017760:	4b7f      	ldr	r3, [pc, #508]	; (8017960 <_printf_float+0x2ec>)
 8017762:	e7d1      	b.n	8017708 <_printf_float+0x94>
 8017764:	6863      	ldr	r3, [r4, #4]
 8017766:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801776a:	9206      	str	r2, [sp, #24]
 801776c:	1c5a      	adds	r2, r3, #1
 801776e:	d13f      	bne.n	80177f0 <_printf_float+0x17c>
 8017770:	2306      	movs	r3, #6
 8017772:	6063      	str	r3, [r4, #4]
 8017774:	9b05      	ldr	r3, [sp, #20]
 8017776:	6861      	ldr	r1, [r4, #4]
 8017778:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801777c:	2300      	movs	r3, #0
 801777e:	9303      	str	r3, [sp, #12]
 8017780:	ab0a      	add	r3, sp, #40	; 0x28
 8017782:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017786:	ab09      	add	r3, sp, #36	; 0x24
 8017788:	ec49 8b10 	vmov	d0, r8, r9
 801778c:	9300      	str	r3, [sp, #0]
 801778e:	6022      	str	r2, [r4, #0]
 8017790:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017794:	4628      	mov	r0, r5
 8017796:	f7ff fecd 	bl	8017534 <__cvt>
 801779a:	9b06      	ldr	r3, [sp, #24]
 801779c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801779e:	2b47      	cmp	r3, #71	; 0x47
 80177a0:	4680      	mov	r8, r0
 80177a2:	d108      	bne.n	80177b6 <_printf_float+0x142>
 80177a4:	1cc8      	adds	r0, r1, #3
 80177a6:	db02      	blt.n	80177ae <_printf_float+0x13a>
 80177a8:	6863      	ldr	r3, [r4, #4]
 80177aa:	4299      	cmp	r1, r3
 80177ac:	dd41      	ble.n	8017832 <_printf_float+0x1be>
 80177ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80177b2:	fa5f fb8b 	uxtb.w	fp, fp
 80177b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80177ba:	d820      	bhi.n	80177fe <_printf_float+0x18a>
 80177bc:	3901      	subs	r1, #1
 80177be:	465a      	mov	r2, fp
 80177c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80177c4:	9109      	str	r1, [sp, #36]	; 0x24
 80177c6:	f7ff ff17 	bl	80175f8 <__exponent>
 80177ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80177cc:	1813      	adds	r3, r2, r0
 80177ce:	2a01      	cmp	r2, #1
 80177d0:	4681      	mov	r9, r0
 80177d2:	6123      	str	r3, [r4, #16]
 80177d4:	dc02      	bgt.n	80177dc <_printf_float+0x168>
 80177d6:	6822      	ldr	r2, [r4, #0]
 80177d8:	07d2      	lsls	r2, r2, #31
 80177da:	d501      	bpl.n	80177e0 <_printf_float+0x16c>
 80177dc:	3301      	adds	r3, #1
 80177de:	6123      	str	r3, [r4, #16]
 80177e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d09c      	beq.n	8017722 <_printf_float+0xae>
 80177e8:	232d      	movs	r3, #45	; 0x2d
 80177ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80177ee:	e798      	b.n	8017722 <_printf_float+0xae>
 80177f0:	9a06      	ldr	r2, [sp, #24]
 80177f2:	2a47      	cmp	r2, #71	; 0x47
 80177f4:	d1be      	bne.n	8017774 <_printf_float+0x100>
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d1bc      	bne.n	8017774 <_printf_float+0x100>
 80177fa:	2301      	movs	r3, #1
 80177fc:	e7b9      	b.n	8017772 <_printf_float+0xfe>
 80177fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017802:	d118      	bne.n	8017836 <_printf_float+0x1c2>
 8017804:	2900      	cmp	r1, #0
 8017806:	6863      	ldr	r3, [r4, #4]
 8017808:	dd0b      	ble.n	8017822 <_printf_float+0x1ae>
 801780a:	6121      	str	r1, [r4, #16]
 801780c:	b913      	cbnz	r3, 8017814 <_printf_float+0x1a0>
 801780e:	6822      	ldr	r2, [r4, #0]
 8017810:	07d0      	lsls	r0, r2, #31
 8017812:	d502      	bpl.n	801781a <_printf_float+0x1a6>
 8017814:	3301      	adds	r3, #1
 8017816:	440b      	add	r3, r1
 8017818:	6123      	str	r3, [r4, #16]
 801781a:	65a1      	str	r1, [r4, #88]	; 0x58
 801781c:	f04f 0900 	mov.w	r9, #0
 8017820:	e7de      	b.n	80177e0 <_printf_float+0x16c>
 8017822:	b913      	cbnz	r3, 801782a <_printf_float+0x1b6>
 8017824:	6822      	ldr	r2, [r4, #0]
 8017826:	07d2      	lsls	r2, r2, #31
 8017828:	d501      	bpl.n	801782e <_printf_float+0x1ba>
 801782a:	3302      	adds	r3, #2
 801782c:	e7f4      	b.n	8017818 <_printf_float+0x1a4>
 801782e:	2301      	movs	r3, #1
 8017830:	e7f2      	b.n	8017818 <_printf_float+0x1a4>
 8017832:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017838:	4299      	cmp	r1, r3
 801783a:	db05      	blt.n	8017848 <_printf_float+0x1d4>
 801783c:	6823      	ldr	r3, [r4, #0]
 801783e:	6121      	str	r1, [r4, #16]
 8017840:	07d8      	lsls	r0, r3, #31
 8017842:	d5ea      	bpl.n	801781a <_printf_float+0x1a6>
 8017844:	1c4b      	adds	r3, r1, #1
 8017846:	e7e7      	b.n	8017818 <_printf_float+0x1a4>
 8017848:	2900      	cmp	r1, #0
 801784a:	bfd4      	ite	le
 801784c:	f1c1 0202 	rsble	r2, r1, #2
 8017850:	2201      	movgt	r2, #1
 8017852:	4413      	add	r3, r2
 8017854:	e7e0      	b.n	8017818 <_printf_float+0x1a4>
 8017856:	6823      	ldr	r3, [r4, #0]
 8017858:	055a      	lsls	r2, r3, #21
 801785a:	d407      	bmi.n	801786c <_printf_float+0x1f8>
 801785c:	6923      	ldr	r3, [r4, #16]
 801785e:	4642      	mov	r2, r8
 8017860:	4631      	mov	r1, r6
 8017862:	4628      	mov	r0, r5
 8017864:	47b8      	blx	r7
 8017866:	3001      	adds	r0, #1
 8017868:	d12c      	bne.n	80178c4 <_printf_float+0x250>
 801786a:	e764      	b.n	8017736 <_printf_float+0xc2>
 801786c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017870:	f240 80e0 	bls.w	8017a34 <_printf_float+0x3c0>
 8017874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017878:	2200      	movs	r2, #0
 801787a:	2300      	movs	r3, #0
 801787c:	f7e9 f92c 	bl	8000ad8 <__aeabi_dcmpeq>
 8017880:	2800      	cmp	r0, #0
 8017882:	d034      	beq.n	80178ee <_printf_float+0x27a>
 8017884:	4a37      	ldr	r2, [pc, #220]	; (8017964 <_printf_float+0x2f0>)
 8017886:	2301      	movs	r3, #1
 8017888:	4631      	mov	r1, r6
 801788a:	4628      	mov	r0, r5
 801788c:	47b8      	blx	r7
 801788e:	3001      	adds	r0, #1
 8017890:	f43f af51 	beq.w	8017736 <_printf_float+0xc2>
 8017894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017898:	429a      	cmp	r2, r3
 801789a:	db02      	blt.n	80178a2 <_printf_float+0x22e>
 801789c:	6823      	ldr	r3, [r4, #0]
 801789e:	07d8      	lsls	r0, r3, #31
 80178a0:	d510      	bpl.n	80178c4 <_printf_float+0x250>
 80178a2:	ee18 3a10 	vmov	r3, s16
 80178a6:	4652      	mov	r2, sl
 80178a8:	4631      	mov	r1, r6
 80178aa:	4628      	mov	r0, r5
 80178ac:	47b8      	blx	r7
 80178ae:	3001      	adds	r0, #1
 80178b0:	f43f af41 	beq.w	8017736 <_printf_float+0xc2>
 80178b4:	f04f 0800 	mov.w	r8, #0
 80178b8:	f104 091a 	add.w	r9, r4, #26
 80178bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178be:	3b01      	subs	r3, #1
 80178c0:	4543      	cmp	r3, r8
 80178c2:	dc09      	bgt.n	80178d8 <_printf_float+0x264>
 80178c4:	6823      	ldr	r3, [r4, #0]
 80178c6:	079b      	lsls	r3, r3, #30
 80178c8:	f100 8105 	bmi.w	8017ad6 <_printf_float+0x462>
 80178cc:	68e0      	ldr	r0, [r4, #12]
 80178ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178d0:	4298      	cmp	r0, r3
 80178d2:	bfb8      	it	lt
 80178d4:	4618      	movlt	r0, r3
 80178d6:	e730      	b.n	801773a <_printf_float+0xc6>
 80178d8:	2301      	movs	r3, #1
 80178da:	464a      	mov	r2, r9
 80178dc:	4631      	mov	r1, r6
 80178de:	4628      	mov	r0, r5
 80178e0:	47b8      	blx	r7
 80178e2:	3001      	adds	r0, #1
 80178e4:	f43f af27 	beq.w	8017736 <_printf_float+0xc2>
 80178e8:	f108 0801 	add.w	r8, r8, #1
 80178ec:	e7e6      	b.n	80178bc <_printf_float+0x248>
 80178ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	dc39      	bgt.n	8017968 <_printf_float+0x2f4>
 80178f4:	4a1b      	ldr	r2, [pc, #108]	; (8017964 <_printf_float+0x2f0>)
 80178f6:	2301      	movs	r3, #1
 80178f8:	4631      	mov	r1, r6
 80178fa:	4628      	mov	r0, r5
 80178fc:	47b8      	blx	r7
 80178fe:	3001      	adds	r0, #1
 8017900:	f43f af19 	beq.w	8017736 <_printf_float+0xc2>
 8017904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017908:	4313      	orrs	r3, r2
 801790a:	d102      	bne.n	8017912 <_printf_float+0x29e>
 801790c:	6823      	ldr	r3, [r4, #0]
 801790e:	07d9      	lsls	r1, r3, #31
 8017910:	d5d8      	bpl.n	80178c4 <_printf_float+0x250>
 8017912:	ee18 3a10 	vmov	r3, s16
 8017916:	4652      	mov	r2, sl
 8017918:	4631      	mov	r1, r6
 801791a:	4628      	mov	r0, r5
 801791c:	47b8      	blx	r7
 801791e:	3001      	adds	r0, #1
 8017920:	f43f af09 	beq.w	8017736 <_printf_float+0xc2>
 8017924:	f04f 0900 	mov.w	r9, #0
 8017928:	f104 0a1a 	add.w	sl, r4, #26
 801792c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801792e:	425b      	negs	r3, r3
 8017930:	454b      	cmp	r3, r9
 8017932:	dc01      	bgt.n	8017938 <_printf_float+0x2c4>
 8017934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017936:	e792      	b.n	801785e <_printf_float+0x1ea>
 8017938:	2301      	movs	r3, #1
 801793a:	4652      	mov	r2, sl
 801793c:	4631      	mov	r1, r6
 801793e:	4628      	mov	r0, r5
 8017940:	47b8      	blx	r7
 8017942:	3001      	adds	r0, #1
 8017944:	f43f aef7 	beq.w	8017736 <_printf_float+0xc2>
 8017948:	f109 0901 	add.w	r9, r9, #1
 801794c:	e7ee      	b.n	801792c <_printf_float+0x2b8>
 801794e:	bf00      	nop
 8017950:	7fefffff 	.word	0x7fefffff
 8017954:	0804dfac 	.word	0x0804dfac
 8017958:	0804dfb0 	.word	0x0804dfb0
 801795c:	0804dfb8 	.word	0x0804dfb8
 8017960:	0804dfb4 	.word	0x0804dfb4
 8017964:	0804dfbc 	.word	0x0804dfbc
 8017968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801796a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801796c:	429a      	cmp	r2, r3
 801796e:	bfa8      	it	ge
 8017970:	461a      	movge	r2, r3
 8017972:	2a00      	cmp	r2, #0
 8017974:	4691      	mov	r9, r2
 8017976:	dc37      	bgt.n	80179e8 <_printf_float+0x374>
 8017978:	f04f 0b00 	mov.w	fp, #0
 801797c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017980:	f104 021a 	add.w	r2, r4, #26
 8017984:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017986:	9305      	str	r3, [sp, #20]
 8017988:	eba3 0309 	sub.w	r3, r3, r9
 801798c:	455b      	cmp	r3, fp
 801798e:	dc33      	bgt.n	80179f8 <_printf_float+0x384>
 8017990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017994:	429a      	cmp	r2, r3
 8017996:	db3b      	blt.n	8017a10 <_printf_float+0x39c>
 8017998:	6823      	ldr	r3, [r4, #0]
 801799a:	07da      	lsls	r2, r3, #31
 801799c:	d438      	bmi.n	8017a10 <_printf_float+0x39c>
 801799e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179a0:	9a05      	ldr	r2, [sp, #20]
 80179a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80179a4:	1a9a      	subs	r2, r3, r2
 80179a6:	eba3 0901 	sub.w	r9, r3, r1
 80179aa:	4591      	cmp	r9, r2
 80179ac:	bfa8      	it	ge
 80179ae:	4691      	movge	r9, r2
 80179b0:	f1b9 0f00 	cmp.w	r9, #0
 80179b4:	dc35      	bgt.n	8017a22 <_printf_float+0x3ae>
 80179b6:	f04f 0800 	mov.w	r8, #0
 80179ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80179be:	f104 0a1a 	add.w	sl, r4, #26
 80179c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80179c6:	1a9b      	subs	r3, r3, r2
 80179c8:	eba3 0309 	sub.w	r3, r3, r9
 80179cc:	4543      	cmp	r3, r8
 80179ce:	f77f af79 	ble.w	80178c4 <_printf_float+0x250>
 80179d2:	2301      	movs	r3, #1
 80179d4:	4652      	mov	r2, sl
 80179d6:	4631      	mov	r1, r6
 80179d8:	4628      	mov	r0, r5
 80179da:	47b8      	blx	r7
 80179dc:	3001      	adds	r0, #1
 80179de:	f43f aeaa 	beq.w	8017736 <_printf_float+0xc2>
 80179e2:	f108 0801 	add.w	r8, r8, #1
 80179e6:	e7ec      	b.n	80179c2 <_printf_float+0x34e>
 80179e8:	4613      	mov	r3, r2
 80179ea:	4631      	mov	r1, r6
 80179ec:	4642      	mov	r2, r8
 80179ee:	4628      	mov	r0, r5
 80179f0:	47b8      	blx	r7
 80179f2:	3001      	adds	r0, #1
 80179f4:	d1c0      	bne.n	8017978 <_printf_float+0x304>
 80179f6:	e69e      	b.n	8017736 <_printf_float+0xc2>
 80179f8:	2301      	movs	r3, #1
 80179fa:	4631      	mov	r1, r6
 80179fc:	4628      	mov	r0, r5
 80179fe:	9205      	str	r2, [sp, #20]
 8017a00:	47b8      	blx	r7
 8017a02:	3001      	adds	r0, #1
 8017a04:	f43f ae97 	beq.w	8017736 <_printf_float+0xc2>
 8017a08:	9a05      	ldr	r2, [sp, #20]
 8017a0a:	f10b 0b01 	add.w	fp, fp, #1
 8017a0e:	e7b9      	b.n	8017984 <_printf_float+0x310>
 8017a10:	ee18 3a10 	vmov	r3, s16
 8017a14:	4652      	mov	r2, sl
 8017a16:	4631      	mov	r1, r6
 8017a18:	4628      	mov	r0, r5
 8017a1a:	47b8      	blx	r7
 8017a1c:	3001      	adds	r0, #1
 8017a1e:	d1be      	bne.n	801799e <_printf_float+0x32a>
 8017a20:	e689      	b.n	8017736 <_printf_float+0xc2>
 8017a22:	9a05      	ldr	r2, [sp, #20]
 8017a24:	464b      	mov	r3, r9
 8017a26:	4442      	add	r2, r8
 8017a28:	4631      	mov	r1, r6
 8017a2a:	4628      	mov	r0, r5
 8017a2c:	47b8      	blx	r7
 8017a2e:	3001      	adds	r0, #1
 8017a30:	d1c1      	bne.n	80179b6 <_printf_float+0x342>
 8017a32:	e680      	b.n	8017736 <_printf_float+0xc2>
 8017a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a36:	2a01      	cmp	r2, #1
 8017a38:	dc01      	bgt.n	8017a3e <_printf_float+0x3ca>
 8017a3a:	07db      	lsls	r3, r3, #31
 8017a3c:	d538      	bpl.n	8017ab0 <_printf_float+0x43c>
 8017a3e:	2301      	movs	r3, #1
 8017a40:	4642      	mov	r2, r8
 8017a42:	4631      	mov	r1, r6
 8017a44:	4628      	mov	r0, r5
 8017a46:	47b8      	blx	r7
 8017a48:	3001      	adds	r0, #1
 8017a4a:	f43f ae74 	beq.w	8017736 <_printf_float+0xc2>
 8017a4e:	ee18 3a10 	vmov	r3, s16
 8017a52:	4652      	mov	r2, sl
 8017a54:	4631      	mov	r1, r6
 8017a56:	4628      	mov	r0, r5
 8017a58:	47b8      	blx	r7
 8017a5a:	3001      	adds	r0, #1
 8017a5c:	f43f ae6b 	beq.w	8017736 <_printf_float+0xc2>
 8017a60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017a64:	2200      	movs	r2, #0
 8017a66:	2300      	movs	r3, #0
 8017a68:	f7e9 f836 	bl	8000ad8 <__aeabi_dcmpeq>
 8017a6c:	b9d8      	cbnz	r0, 8017aa6 <_printf_float+0x432>
 8017a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a70:	f108 0201 	add.w	r2, r8, #1
 8017a74:	3b01      	subs	r3, #1
 8017a76:	4631      	mov	r1, r6
 8017a78:	4628      	mov	r0, r5
 8017a7a:	47b8      	blx	r7
 8017a7c:	3001      	adds	r0, #1
 8017a7e:	d10e      	bne.n	8017a9e <_printf_float+0x42a>
 8017a80:	e659      	b.n	8017736 <_printf_float+0xc2>
 8017a82:	2301      	movs	r3, #1
 8017a84:	4652      	mov	r2, sl
 8017a86:	4631      	mov	r1, r6
 8017a88:	4628      	mov	r0, r5
 8017a8a:	47b8      	blx	r7
 8017a8c:	3001      	adds	r0, #1
 8017a8e:	f43f ae52 	beq.w	8017736 <_printf_float+0xc2>
 8017a92:	f108 0801 	add.w	r8, r8, #1
 8017a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a98:	3b01      	subs	r3, #1
 8017a9a:	4543      	cmp	r3, r8
 8017a9c:	dcf1      	bgt.n	8017a82 <_printf_float+0x40e>
 8017a9e:	464b      	mov	r3, r9
 8017aa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017aa4:	e6dc      	b.n	8017860 <_printf_float+0x1ec>
 8017aa6:	f04f 0800 	mov.w	r8, #0
 8017aaa:	f104 0a1a 	add.w	sl, r4, #26
 8017aae:	e7f2      	b.n	8017a96 <_printf_float+0x422>
 8017ab0:	2301      	movs	r3, #1
 8017ab2:	4642      	mov	r2, r8
 8017ab4:	e7df      	b.n	8017a76 <_printf_float+0x402>
 8017ab6:	2301      	movs	r3, #1
 8017ab8:	464a      	mov	r2, r9
 8017aba:	4631      	mov	r1, r6
 8017abc:	4628      	mov	r0, r5
 8017abe:	47b8      	blx	r7
 8017ac0:	3001      	adds	r0, #1
 8017ac2:	f43f ae38 	beq.w	8017736 <_printf_float+0xc2>
 8017ac6:	f108 0801 	add.w	r8, r8, #1
 8017aca:	68e3      	ldr	r3, [r4, #12]
 8017acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ace:	1a5b      	subs	r3, r3, r1
 8017ad0:	4543      	cmp	r3, r8
 8017ad2:	dcf0      	bgt.n	8017ab6 <_printf_float+0x442>
 8017ad4:	e6fa      	b.n	80178cc <_printf_float+0x258>
 8017ad6:	f04f 0800 	mov.w	r8, #0
 8017ada:	f104 0919 	add.w	r9, r4, #25
 8017ade:	e7f4      	b.n	8017aca <_printf_float+0x456>

08017ae0 <_printf_common>:
 8017ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ae4:	4616      	mov	r6, r2
 8017ae6:	4699      	mov	r9, r3
 8017ae8:	688a      	ldr	r2, [r1, #8]
 8017aea:	690b      	ldr	r3, [r1, #16]
 8017aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017af0:	4293      	cmp	r3, r2
 8017af2:	bfb8      	it	lt
 8017af4:	4613      	movlt	r3, r2
 8017af6:	6033      	str	r3, [r6, #0]
 8017af8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017afc:	4607      	mov	r7, r0
 8017afe:	460c      	mov	r4, r1
 8017b00:	b10a      	cbz	r2, 8017b06 <_printf_common+0x26>
 8017b02:	3301      	adds	r3, #1
 8017b04:	6033      	str	r3, [r6, #0]
 8017b06:	6823      	ldr	r3, [r4, #0]
 8017b08:	0699      	lsls	r1, r3, #26
 8017b0a:	bf42      	ittt	mi
 8017b0c:	6833      	ldrmi	r3, [r6, #0]
 8017b0e:	3302      	addmi	r3, #2
 8017b10:	6033      	strmi	r3, [r6, #0]
 8017b12:	6825      	ldr	r5, [r4, #0]
 8017b14:	f015 0506 	ands.w	r5, r5, #6
 8017b18:	d106      	bne.n	8017b28 <_printf_common+0x48>
 8017b1a:	f104 0a19 	add.w	sl, r4, #25
 8017b1e:	68e3      	ldr	r3, [r4, #12]
 8017b20:	6832      	ldr	r2, [r6, #0]
 8017b22:	1a9b      	subs	r3, r3, r2
 8017b24:	42ab      	cmp	r3, r5
 8017b26:	dc26      	bgt.n	8017b76 <_printf_common+0x96>
 8017b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017b2c:	1e13      	subs	r3, r2, #0
 8017b2e:	6822      	ldr	r2, [r4, #0]
 8017b30:	bf18      	it	ne
 8017b32:	2301      	movne	r3, #1
 8017b34:	0692      	lsls	r2, r2, #26
 8017b36:	d42b      	bmi.n	8017b90 <_printf_common+0xb0>
 8017b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017b3c:	4649      	mov	r1, r9
 8017b3e:	4638      	mov	r0, r7
 8017b40:	47c0      	blx	r8
 8017b42:	3001      	adds	r0, #1
 8017b44:	d01e      	beq.n	8017b84 <_printf_common+0xa4>
 8017b46:	6823      	ldr	r3, [r4, #0]
 8017b48:	68e5      	ldr	r5, [r4, #12]
 8017b4a:	6832      	ldr	r2, [r6, #0]
 8017b4c:	f003 0306 	and.w	r3, r3, #6
 8017b50:	2b04      	cmp	r3, #4
 8017b52:	bf08      	it	eq
 8017b54:	1aad      	subeq	r5, r5, r2
 8017b56:	68a3      	ldr	r3, [r4, #8]
 8017b58:	6922      	ldr	r2, [r4, #16]
 8017b5a:	bf0c      	ite	eq
 8017b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017b60:	2500      	movne	r5, #0
 8017b62:	4293      	cmp	r3, r2
 8017b64:	bfc4      	itt	gt
 8017b66:	1a9b      	subgt	r3, r3, r2
 8017b68:	18ed      	addgt	r5, r5, r3
 8017b6a:	2600      	movs	r6, #0
 8017b6c:	341a      	adds	r4, #26
 8017b6e:	42b5      	cmp	r5, r6
 8017b70:	d11a      	bne.n	8017ba8 <_printf_common+0xc8>
 8017b72:	2000      	movs	r0, #0
 8017b74:	e008      	b.n	8017b88 <_printf_common+0xa8>
 8017b76:	2301      	movs	r3, #1
 8017b78:	4652      	mov	r2, sl
 8017b7a:	4649      	mov	r1, r9
 8017b7c:	4638      	mov	r0, r7
 8017b7e:	47c0      	blx	r8
 8017b80:	3001      	adds	r0, #1
 8017b82:	d103      	bne.n	8017b8c <_printf_common+0xac>
 8017b84:	f04f 30ff 	mov.w	r0, #4294967295
 8017b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b8c:	3501      	adds	r5, #1
 8017b8e:	e7c6      	b.n	8017b1e <_printf_common+0x3e>
 8017b90:	18e1      	adds	r1, r4, r3
 8017b92:	1c5a      	adds	r2, r3, #1
 8017b94:	2030      	movs	r0, #48	; 0x30
 8017b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017b9a:	4422      	add	r2, r4
 8017b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017ba4:	3302      	adds	r3, #2
 8017ba6:	e7c7      	b.n	8017b38 <_printf_common+0x58>
 8017ba8:	2301      	movs	r3, #1
 8017baa:	4622      	mov	r2, r4
 8017bac:	4649      	mov	r1, r9
 8017bae:	4638      	mov	r0, r7
 8017bb0:	47c0      	blx	r8
 8017bb2:	3001      	adds	r0, #1
 8017bb4:	d0e6      	beq.n	8017b84 <_printf_common+0xa4>
 8017bb6:	3601      	adds	r6, #1
 8017bb8:	e7d9      	b.n	8017b6e <_printf_common+0x8e>
	...

08017bbc <_printf_i>:
 8017bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017bc0:	7e0f      	ldrb	r7, [r1, #24]
 8017bc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017bc4:	2f78      	cmp	r7, #120	; 0x78
 8017bc6:	4691      	mov	r9, r2
 8017bc8:	4680      	mov	r8, r0
 8017bca:	460c      	mov	r4, r1
 8017bcc:	469a      	mov	sl, r3
 8017bce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017bd2:	d807      	bhi.n	8017be4 <_printf_i+0x28>
 8017bd4:	2f62      	cmp	r7, #98	; 0x62
 8017bd6:	d80a      	bhi.n	8017bee <_printf_i+0x32>
 8017bd8:	2f00      	cmp	r7, #0
 8017bda:	f000 80d8 	beq.w	8017d8e <_printf_i+0x1d2>
 8017bde:	2f58      	cmp	r7, #88	; 0x58
 8017be0:	f000 80a3 	beq.w	8017d2a <_printf_i+0x16e>
 8017be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017bec:	e03a      	b.n	8017c64 <_printf_i+0xa8>
 8017bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017bf2:	2b15      	cmp	r3, #21
 8017bf4:	d8f6      	bhi.n	8017be4 <_printf_i+0x28>
 8017bf6:	a101      	add	r1, pc, #4	; (adr r1, 8017bfc <_printf_i+0x40>)
 8017bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017bfc:	08017c55 	.word	0x08017c55
 8017c00:	08017c69 	.word	0x08017c69
 8017c04:	08017be5 	.word	0x08017be5
 8017c08:	08017be5 	.word	0x08017be5
 8017c0c:	08017be5 	.word	0x08017be5
 8017c10:	08017be5 	.word	0x08017be5
 8017c14:	08017c69 	.word	0x08017c69
 8017c18:	08017be5 	.word	0x08017be5
 8017c1c:	08017be5 	.word	0x08017be5
 8017c20:	08017be5 	.word	0x08017be5
 8017c24:	08017be5 	.word	0x08017be5
 8017c28:	08017d75 	.word	0x08017d75
 8017c2c:	08017c99 	.word	0x08017c99
 8017c30:	08017d57 	.word	0x08017d57
 8017c34:	08017be5 	.word	0x08017be5
 8017c38:	08017be5 	.word	0x08017be5
 8017c3c:	08017d97 	.word	0x08017d97
 8017c40:	08017be5 	.word	0x08017be5
 8017c44:	08017c99 	.word	0x08017c99
 8017c48:	08017be5 	.word	0x08017be5
 8017c4c:	08017be5 	.word	0x08017be5
 8017c50:	08017d5f 	.word	0x08017d5f
 8017c54:	682b      	ldr	r3, [r5, #0]
 8017c56:	1d1a      	adds	r2, r3, #4
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	602a      	str	r2, [r5, #0]
 8017c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017c64:	2301      	movs	r3, #1
 8017c66:	e0a3      	b.n	8017db0 <_printf_i+0x1f4>
 8017c68:	6820      	ldr	r0, [r4, #0]
 8017c6a:	6829      	ldr	r1, [r5, #0]
 8017c6c:	0606      	lsls	r6, r0, #24
 8017c6e:	f101 0304 	add.w	r3, r1, #4
 8017c72:	d50a      	bpl.n	8017c8a <_printf_i+0xce>
 8017c74:	680e      	ldr	r6, [r1, #0]
 8017c76:	602b      	str	r3, [r5, #0]
 8017c78:	2e00      	cmp	r6, #0
 8017c7a:	da03      	bge.n	8017c84 <_printf_i+0xc8>
 8017c7c:	232d      	movs	r3, #45	; 0x2d
 8017c7e:	4276      	negs	r6, r6
 8017c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c84:	485e      	ldr	r0, [pc, #376]	; (8017e00 <_printf_i+0x244>)
 8017c86:	230a      	movs	r3, #10
 8017c88:	e019      	b.n	8017cbe <_printf_i+0x102>
 8017c8a:	680e      	ldr	r6, [r1, #0]
 8017c8c:	602b      	str	r3, [r5, #0]
 8017c8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017c92:	bf18      	it	ne
 8017c94:	b236      	sxthne	r6, r6
 8017c96:	e7ef      	b.n	8017c78 <_printf_i+0xbc>
 8017c98:	682b      	ldr	r3, [r5, #0]
 8017c9a:	6820      	ldr	r0, [r4, #0]
 8017c9c:	1d19      	adds	r1, r3, #4
 8017c9e:	6029      	str	r1, [r5, #0]
 8017ca0:	0601      	lsls	r1, r0, #24
 8017ca2:	d501      	bpl.n	8017ca8 <_printf_i+0xec>
 8017ca4:	681e      	ldr	r6, [r3, #0]
 8017ca6:	e002      	b.n	8017cae <_printf_i+0xf2>
 8017ca8:	0646      	lsls	r6, r0, #25
 8017caa:	d5fb      	bpl.n	8017ca4 <_printf_i+0xe8>
 8017cac:	881e      	ldrh	r6, [r3, #0]
 8017cae:	4854      	ldr	r0, [pc, #336]	; (8017e00 <_printf_i+0x244>)
 8017cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8017cb2:	bf0c      	ite	eq
 8017cb4:	2308      	moveq	r3, #8
 8017cb6:	230a      	movne	r3, #10
 8017cb8:	2100      	movs	r1, #0
 8017cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017cbe:	6865      	ldr	r5, [r4, #4]
 8017cc0:	60a5      	str	r5, [r4, #8]
 8017cc2:	2d00      	cmp	r5, #0
 8017cc4:	bfa2      	ittt	ge
 8017cc6:	6821      	ldrge	r1, [r4, #0]
 8017cc8:	f021 0104 	bicge.w	r1, r1, #4
 8017ccc:	6021      	strge	r1, [r4, #0]
 8017cce:	b90e      	cbnz	r6, 8017cd4 <_printf_i+0x118>
 8017cd0:	2d00      	cmp	r5, #0
 8017cd2:	d04d      	beq.n	8017d70 <_printf_i+0x1b4>
 8017cd4:	4615      	mov	r5, r2
 8017cd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8017cda:	fb03 6711 	mls	r7, r3, r1, r6
 8017cde:	5dc7      	ldrb	r7, [r0, r7]
 8017ce0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017ce4:	4637      	mov	r7, r6
 8017ce6:	42bb      	cmp	r3, r7
 8017ce8:	460e      	mov	r6, r1
 8017cea:	d9f4      	bls.n	8017cd6 <_printf_i+0x11a>
 8017cec:	2b08      	cmp	r3, #8
 8017cee:	d10b      	bne.n	8017d08 <_printf_i+0x14c>
 8017cf0:	6823      	ldr	r3, [r4, #0]
 8017cf2:	07de      	lsls	r6, r3, #31
 8017cf4:	d508      	bpl.n	8017d08 <_printf_i+0x14c>
 8017cf6:	6923      	ldr	r3, [r4, #16]
 8017cf8:	6861      	ldr	r1, [r4, #4]
 8017cfa:	4299      	cmp	r1, r3
 8017cfc:	bfde      	ittt	le
 8017cfe:	2330      	movle	r3, #48	; 0x30
 8017d00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017d04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017d08:	1b52      	subs	r2, r2, r5
 8017d0a:	6122      	str	r2, [r4, #16]
 8017d0c:	f8cd a000 	str.w	sl, [sp]
 8017d10:	464b      	mov	r3, r9
 8017d12:	aa03      	add	r2, sp, #12
 8017d14:	4621      	mov	r1, r4
 8017d16:	4640      	mov	r0, r8
 8017d18:	f7ff fee2 	bl	8017ae0 <_printf_common>
 8017d1c:	3001      	adds	r0, #1
 8017d1e:	d14c      	bne.n	8017dba <_printf_i+0x1fe>
 8017d20:	f04f 30ff 	mov.w	r0, #4294967295
 8017d24:	b004      	add	sp, #16
 8017d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d2a:	4835      	ldr	r0, [pc, #212]	; (8017e00 <_printf_i+0x244>)
 8017d2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017d30:	6829      	ldr	r1, [r5, #0]
 8017d32:	6823      	ldr	r3, [r4, #0]
 8017d34:	f851 6b04 	ldr.w	r6, [r1], #4
 8017d38:	6029      	str	r1, [r5, #0]
 8017d3a:	061d      	lsls	r5, r3, #24
 8017d3c:	d514      	bpl.n	8017d68 <_printf_i+0x1ac>
 8017d3e:	07df      	lsls	r7, r3, #31
 8017d40:	bf44      	itt	mi
 8017d42:	f043 0320 	orrmi.w	r3, r3, #32
 8017d46:	6023      	strmi	r3, [r4, #0]
 8017d48:	b91e      	cbnz	r6, 8017d52 <_printf_i+0x196>
 8017d4a:	6823      	ldr	r3, [r4, #0]
 8017d4c:	f023 0320 	bic.w	r3, r3, #32
 8017d50:	6023      	str	r3, [r4, #0]
 8017d52:	2310      	movs	r3, #16
 8017d54:	e7b0      	b.n	8017cb8 <_printf_i+0xfc>
 8017d56:	6823      	ldr	r3, [r4, #0]
 8017d58:	f043 0320 	orr.w	r3, r3, #32
 8017d5c:	6023      	str	r3, [r4, #0]
 8017d5e:	2378      	movs	r3, #120	; 0x78
 8017d60:	4828      	ldr	r0, [pc, #160]	; (8017e04 <_printf_i+0x248>)
 8017d62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017d66:	e7e3      	b.n	8017d30 <_printf_i+0x174>
 8017d68:	0659      	lsls	r1, r3, #25
 8017d6a:	bf48      	it	mi
 8017d6c:	b2b6      	uxthmi	r6, r6
 8017d6e:	e7e6      	b.n	8017d3e <_printf_i+0x182>
 8017d70:	4615      	mov	r5, r2
 8017d72:	e7bb      	b.n	8017cec <_printf_i+0x130>
 8017d74:	682b      	ldr	r3, [r5, #0]
 8017d76:	6826      	ldr	r6, [r4, #0]
 8017d78:	6961      	ldr	r1, [r4, #20]
 8017d7a:	1d18      	adds	r0, r3, #4
 8017d7c:	6028      	str	r0, [r5, #0]
 8017d7e:	0635      	lsls	r5, r6, #24
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	d501      	bpl.n	8017d88 <_printf_i+0x1cc>
 8017d84:	6019      	str	r1, [r3, #0]
 8017d86:	e002      	b.n	8017d8e <_printf_i+0x1d2>
 8017d88:	0670      	lsls	r0, r6, #25
 8017d8a:	d5fb      	bpl.n	8017d84 <_printf_i+0x1c8>
 8017d8c:	8019      	strh	r1, [r3, #0]
 8017d8e:	2300      	movs	r3, #0
 8017d90:	6123      	str	r3, [r4, #16]
 8017d92:	4615      	mov	r5, r2
 8017d94:	e7ba      	b.n	8017d0c <_printf_i+0x150>
 8017d96:	682b      	ldr	r3, [r5, #0]
 8017d98:	1d1a      	adds	r2, r3, #4
 8017d9a:	602a      	str	r2, [r5, #0]
 8017d9c:	681d      	ldr	r5, [r3, #0]
 8017d9e:	6862      	ldr	r2, [r4, #4]
 8017da0:	2100      	movs	r1, #0
 8017da2:	4628      	mov	r0, r5
 8017da4:	f7e8 fa24 	bl	80001f0 <memchr>
 8017da8:	b108      	cbz	r0, 8017dae <_printf_i+0x1f2>
 8017daa:	1b40      	subs	r0, r0, r5
 8017dac:	6060      	str	r0, [r4, #4]
 8017dae:	6863      	ldr	r3, [r4, #4]
 8017db0:	6123      	str	r3, [r4, #16]
 8017db2:	2300      	movs	r3, #0
 8017db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017db8:	e7a8      	b.n	8017d0c <_printf_i+0x150>
 8017dba:	6923      	ldr	r3, [r4, #16]
 8017dbc:	462a      	mov	r2, r5
 8017dbe:	4649      	mov	r1, r9
 8017dc0:	4640      	mov	r0, r8
 8017dc2:	47d0      	blx	sl
 8017dc4:	3001      	adds	r0, #1
 8017dc6:	d0ab      	beq.n	8017d20 <_printf_i+0x164>
 8017dc8:	6823      	ldr	r3, [r4, #0]
 8017dca:	079b      	lsls	r3, r3, #30
 8017dcc:	d413      	bmi.n	8017df6 <_printf_i+0x23a>
 8017dce:	68e0      	ldr	r0, [r4, #12]
 8017dd0:	9b03      	ldr	r3, [sp, #12]
 8017dd2:	4298      	cmp	r0, r3
 8017dd4:	bfb8      	it	lt
 8017dd6:	4618      	movlt	r0, r3
 8017dd8:	e7a4      	b.n	8017d24 <_printf_i+0x168>
 8017dda:	2301      	movs	r3, #1
 8017ddc:	4632      	mov	r2, r6
 8017dde:	4649      	mov	r1, r9
 8017de0:	4640      	mov	r0, r8
 8017de2:	47d0      	blx	sl
 8017de4:	3001      	adds	r0, #1
 8017de6:	d09b      	beq.n	8017d20 <_printf_i+0x164>
 8017de8:	3501      	adds	r5, #1
 8017dea:	68e3      	ldr	r3, [r4, #12]
 8017dec:	9903      	ldr	r1, [sp, #12]
 8017dee:	1a5b      	subs	r3, r3, r1
 8017df0:	42ab      	cmp	r3, r5
 8017df2:	dcf2      	bgt.n	8017dda <_printf_i+0x21e>
 8017df4:	e7eb      	b.n	8017dce <_printf_i+0x212>
 8017df6:	2500      	movs	r5, #0
 8017df8:	f104 0619 	add.w	r6, r4, #25
 8017dfc:	e7f5      	b.n	8017dea <_printf_i+0x22e>
 8017dfe:	bf00      	nop
 8017e00:	0804dfbe 	.word	0x0804dfbe
 8017e04:	0804dfcf 	.word	0x0804dfcf

08017e08 <iprintf>:
 8017e08:	b40f      	push	{r0, r1, r2, r3}
 8017e0a:	4b0a      	ldr	r3, [pc, #40]	; (8017e34 <iprintf+0x2c>)
 8017e0c:	b513      	push	{r0, r1, r4, lr}
 8017e0e:	681c      	ldr	r4, [r3, #0]
 8017e10:	b124      	cbz	r4, 8017e1c <iprintf+0x14>
 8017e12:	69a3      	ldr	r3, [r4, #24]
 8017e14:	b913      	cbnz	r3, 8017e1c <iprintf+0x14>
 8017e16:	4620      	mov	r0, r4
 8017e18:	f001 f912 	bl	8019040 <__sinit>
 8017e1c:	ab05      	add	r3, sp, #20
 8017e1e:	9a04      	ldr	r2, [sp, #16]
 8017e20:	68a1      	ldr	r1, [r4, #8]
 8017e22:	9301      	str	r3, [sp, #4]
 8017e24:	4620      	mov	r0, r4
 8017e26:	f002 f81d 	bl	8019e64 <_vfiprintf_r>
 8017e2a:	b002      	add	sp, #8
 8017e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e30:	b004      	add	sp, #16
 8017e32:	4770      	bx	lr
 8017e34:	200008c4 	.word	0x200008c4

08017e38 <_puts_r>:
 8017e38:	b570      	push	{r4, r5, r6, lr}
 8017e3a:	460e      	mov	r6, r1
 8017e3c:	4605      	mov	r5, r0
 8017e3e:	b118      	cbz	r0, 8017e48 <_puts_r+0x10>
 8017e40:	6983      	ldr	r3, [r0, #24]
 8017e42:	b90b      	cbnz	r3, 8017e48 <_puts_r+0x10>
 8017e44:	f001 f8fc 	bl	8019040 <__sinit>
 8017e48:	69ab      	ldr	r3, [r5, #24]
 8017e4a:	68ac      	ldr	r4, [r5, #8]
 8017e4c:	b913      	cbnz	r3, 8017e54 <_puts_r+0x1c>
 8017e4e:	4628      	mov	r0, r5
 8017e50:	f001 f8f6 	bl	8019040 <__sinit>
 8017e54:	4b2c      	ldr	r3, [pc, #176]	; (8017f08 <_puts_r+0xd0>)
 8017e56:	429c      	cmp	r4, r3
 8017e58:	d120      	bne.n	8017e9c <_puts_r+0x64>
 8017e5a:	686c      	ldr	r4, [r5, #4]
 8017e5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017e5e:	07db      	lsls	r3, r3, #31
 8017e60:	d405      	bmi.n	8017e6e <_puts_r+0x36>
 8017e62:	89a3      	ldrh	r3, [r4, #12]
 8017e64:	0598      	lsls	r0, r3, #22
 8017e66:	d402      	bmi.n	8017e6e <_puts_r+0x36>
 8017e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e6a:	f001 f98c 	bl	8019186 <__retarget_lock_acquire_recursive>
 8017e6e:	89a3      	ldrh	r3, [r4, #12]
 8017e70:	0719      	lsls	r1, r3, #28
 8017e72:	d51d      	bpl.n	8017eb0 <_puts_r+0x78>
 8017e74:	6923      	ldr	r3, [r4, #16]
 8017e76:	b1db      	cbz	r3, 8017eb0 <_puts_r+0x78>
 8017e78:	3e01      	subs	r6, #1
 8017e7a:	68a3      	ldr	r3, [r4, #8]
 8017e7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017e80:	3b01      	subs	r3, #1
 8017e82:	60a3      	str	r3, [r4, #8]
 8017e84:	bb39      	cbnz	r1, 8017ed6 <_puts_r+0x9e>
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	da38      	bge.n	8017efc <_puts_r+0xc4>
 8017e8a:	4622      	mov	r2, r4
 8017e8c:	210a      	movs	r1, #10
 8017e8e:	4628      	mov	r0, r5
 8017e90:	f000 f880 	bl	8017f94 <__swbuf_r>
 8017e94:	3001      	adds	r0, #1
 8017e96:	d011      	beq.n	8017ebc <_puts_r+0x84>
 8017e98:	250a      	movs	r5, #10
 8017e9a:	e011      	b.n	8017ec0 <_puts_r+0x88>
 8017e9c:	4b1b      	ldr	r3, [pc, #108]	; (8017f0c <_puts_r+0xd4>)
 8017e9e:	429c      	cmp	r4, r3
 8017ea0:	d101      	bne.n	8017ea6 <_puts_r+0x6e>
 8017ea2:	68ac      	ldr	r4, [r5, #8]
 8017ea4:	e7da      	b.n	8017e5c <_puts_r+0x24>
 8017ea6:	4b1a      	ldr	r3, [pc, #104]	; (8017f10 <_puts_r+0xd8>)
 8017ea8:	429c      	cmp	r4, r3
 8017eaa:	bf08      	it	eq
 8017eac:	68ec      	ldreq	r4, [r5, #12]
 8017eae:	e7d5      	b.n	8017e5c <_puts_r+0x24>
 8017eb0:	4621      	mov	r1, r4
 8017eb2:	4628      	mov	r0, r5
 8017eb4:	f000 f8c0 	bl	8018038 <__swsetup_r>
 8017eb8:	2800      	cmp	r0, #0
 8017eba:	d0dd      	beq.n	8017e78 <_puts_r+0x40>
 8017ebc:	f04f 35ff 	mov.w	r5, #4294967295
 8017ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017ec2:	07da      	lsls	r2, r3, #31
 8017ec4:	d405      	bmi.n	8017ed2 <_puts_r+0x9a>
 8017ec6:	89a3      	ldrh	r3, [r4, #12]
 8017ec8:	059b      	lsls	r3, r3, #22
 8017eca:	d402      	bmi.n	8017ed2 <_puts_r+0x9a>
 8017ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ece:	f001 f95b 	bl	8019188 <__retarget_lock_release_recursive>
 8017ed2:	4628      	mov	r0, r5
 8017ed4:	bd70      	pop	{r4, r5, r6, pc}
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	da04      	bge.n	8017ee4 <_puts_r+0xac>
 8017eda:	69a2      	ldr	r2, [r4, #24]
 8017edc:	429a      	cmp	r2, r3
 8017ede:	dc06      	bgt.n	8017eee <_puts_r+0xb6>
 8017ee0:	290a      	cmp	r1, #10
 8017ee2:	d004      	beq.n	8017eee <_puts_r+0xb6>
 8017ee4:	6823      	ldr	r3, [r4, #0]
 8017ee6:	1c5a      	adds	r2, r3, #1
 8017ee8:	6022      	str	r2, [r4, #0]
 8017eea:	7019      	strb	r1, [r3, #0]
 8017eec:	e7c5      	b.n	8017e7a <_puts_r+0x42>
 8017eee:	4622      	mov	r2, r4
 8017ef0:	4628      	mov	r0, r5
 8017ef2:	f000 f84f 	bl	8017f94 <__swbuf_r>
 8017ef6:	3001      	adds	r0, #1
 8017ef8:	d1bf      	bne.n	8017e7a <_puts_r+0x42>
 8017efa:	e7df      	b.n	8017ebc <_puts_r+0x84>
 8017efc:	6823      	ldr	r3, [r4, #0]
 8017efe:	250a      	movs	r5, #10
 8017f00:	1c5a      	adds	r2, r3, #1
 8017f02:	6022      	str	r2, [r4, #0]
 8017f04:	701d      	strb	r5, [r3, #0]
 8017f06:	e7db      	b.n	8017ec0 <_puts_r+0x88>
 8017f08:	0804e090 	.word	0x0804e090
 8017f0c:	0804e0b0 	.word	0x0804e0b0
 8017f10:	0804e070 	.word	0x0804e070

08017f14 <puts>:
 8017f14:	4b02      	ldr	r3, [pc, #8]	; (8017f20 <puts+0xc>)
 8017f16:	4601      	mov	r1, r0
 8017f18:	6818      	ldr	r0, [r3, #0]
 8017f1a:	f7ff bf8d 	b.w	8017e38 <_puts_r>
 8017f1e:	bf00      	nop
 8017f20:	200008c4 	.word	0x200008c4

08017f24 <siprintf>:
 8017f24:	b40e      	push	{r1, r2, r3}
 8017f26:	b500      	push	{lr}
 8017f28:	b09c      	sub	sp, #112	; 0x70
 8017f2a:	ab1d      	add	r3, sp, #116	; 0x74
 8017f2c:	9002      	str	r0, [sp, #8]
 8017f2e:	9006      	str	r0, [sp, #24]
 8017f30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f34:	4809      	ldr	r0, [pc, #36]	; (8017f5c <siprintf+0x38>)
 8017f36:	9107      	str	r1, [sp, #28]
 8017f38:	9104      	str	r1, [sp, #16]
 8017f3a:	4909      	ldr	r1, [pc, #36]	; (8017f60 <siprintf+0x3c>)
 8017f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f40:	9105      	str	r1, [sp, #20]
 8017f42:	6800      	ldr	r0, [r0, #0]
 8017f44:	9301      	str	r3, [sp, #4]
 8017f46:	a902      	add	r1, sp, #8
 8017f48:	f001 fe62 	bl	8019c10 <_svfiprintf_r>
 8017f4c:	9b02      	ldr	r3, [sp, #8]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	701a      	strb	r2, [r3, #0]
 8017f52:	b01c      	add	sp, #112	; 0x70
 8017f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f58:	b003      	add	sp, #12
 8017f5a:	4770      	bx	lr
 8017f5c:	200008c4 	.word	0x200008c4
 8017f60:	ffff0208 	.word	0xffff0208

08017f64 <strcat>:
 8017f64:	b510      	push	{r4, lr}
 8017f66:	4602      	mov	r2, r0
 8017f68:	7814      	ldrb	r4, [r2, #0]
 8017f6a:	4613      	mov	r3, r2
 8017f6c:	3201      	adds	r2, #1
 8017f6e:	2c00      	cmp	r4, #0
 8017f70:	d1fa      	bne.n	8017f68 <strcat+0x4>
 8017f72:	3b01      	subs	r3, #1
 8017f74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017f78:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017f7c:	2a00      	cmp	r2, #0
 8017f7e:	d1f9      	bne.n	8017f74 <strcat+0x10>
 8017f80:	bd10      	pop	{r4, pc}

08017f82 <strcpy>:
 8017f82:	4603      	mov	r3, r0
 8017f84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017f88:	f803 2b01 	strb.w	r2, [r3], #1
 8017f8c:	2a00      	cmp	r2, #0
 8017f8e:	d1f9      	bne.n	8017f84 <strcpy+0x2>
 8017f90:	4770      	bx	lr
	...

08017f94 <__swbuf_r>:
 8017f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f96:	460e      	mov	r6, r1
 8017f98:	4614      	mov	r4, r2
 8017f9a:	4605      	mov	r5, r0
 8017f9c:	b118      	cbz	r0, 8017fa6 <__swbuf_r+0x12>
 8017f9e:	6983      	ldr	r3, [r0, #24]
 8017fa0:	b90b      	cbnz	r3, 8017fa6 <__swbuf_r+0x12>
 8017fa2:	f001 f84d 	bl	8019040 <__sinit>
 8017fa6:	4b21      	ldr	r3, [pc, #132]	; (801802c <__swbuf_r+0x98>)
 8017fa8:	429c      	cmp	r4, r3
 8017faa:	d12b      	bne.n	8018004 <__swbuf_r+0x70>
 8017fac:	686c      	ldr	r4, [r5, #4]
 8017fae:	69a3      	ldr	r3, [r4, #24]
 8017fb0:	60a3      	str	r3, [r4, #8]
 8017fb2:	89a3      	ldrh	r3, [r4, #12]
 8017fb4:	071a      	lsls	r2, r3, #28
 8017fb6:	d52f      	bpl.n	8018018 <__swbuf_r+0x84>
 8017fb8:	6923      	ldr	r3, [r4, #16]
 8017fba:	b36b      	cbz	r3, 8018018 <__swbuf_r+0x84>
 8017fbc:	6923      	ldr	r3, [r4, #16]
 8017fbe:	6820      	ldr	r0, [r4, #0]
 8017fc0:	1ac0      	subs	r0, r0, r3
 8017fc2:	6963      	ldr	r3, [r4, #20]
 8017fc4:	b2f6      	uxtb	r6, r6
 8017fc6:	4283      	cmp	r3, r0
 8017fc8:	4637      	mov	r7, r6
 8017fca:	dc04      	bgt.n	8017fd6 <__swbuf_r+0x42>
 8017fcc:	4621      	mov	r1, r4
 8017fce:	4628      	mov	r0, r5
 8017fd0:	f000 ffa2 	bl	8018f18 <_fflush_r>
 8017fd4:	bb30      	cbnz	r0, 8018024 <__swbuf_r+0x90>
 8017fd6:	68a3      	ldr	r3, [r4, #8]
 8017fd8:	3b01      	subs	r3, #1
 8017fda:	60a3      	str	r3, [r4, #8]
 8017fdc:	6823      	ldr	r3, [r4, #0]
 8017fde:	1c5a      	adds	r2, r3, #1
 8017fe0:	6022      	str	r2, [r4, #0]
 8017fe2:	701e      	strb	r6, [r3, #0]
 8017fe4:	6963      	ldr	r3, [r4, #20]
 8017fe6:	3001      	adds	r0, #1
 8017fe8:	4283      	cmp	r3, r0
 8017fea:	d004      	beq.n	8017ff6 <__swbuf_r+0x62>
 8017fec:	89a3      	ldrh	r3, [r4, #12]
 8017fee:	07db      	lsls	r3, r3, #31
 8017ff0:	d506      	bpl.n	8018000 <__swbuf_r+0x6c>
 8017ff2:	2e0a      	cmp	r6, #10
 8017ff4:	d104      	bne.n	8018000 <__swbuf_r+0x6c>
 8017ff6:	4621      	mov	r1, r4
 8017ff8:	4628      	mov	r0, r5
 8017ffa:	f000 ff8d 	bl	8018f18 <_fflush_r>
 8017ffe:	b988      	cbnz	r0, 8018024 <__swbuf_r+0x90>
 8018000:	4638      	mov	r0, r7
 8018002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018004:	4b0a      	ldr	r3, [pc, #40]	; (8018030 <__swbuf_r+0x9c>)
 8018006:	429c      	cmp	r4, r3
 8018008:	d101      	bne.n	801800e <__swbuf_r+0x7a>
 801800a:	68ac      	ldr	r4, [r5, #8]
 801800c:	e7cf      	b.n	8017fae <__swbuf_r+0x1a>
 801800e:	4b09      	ldr	r3, [pc, #36]	; (8018034 <__swbuf_r+0xa0>)
 8018010:	429c      	cmp	r4, r3
 8018012:	bf08      	it	eq
 8018014:	68ec      	ldreq	r4, [r5, #12]
 8018016:	e7ca      	b.n	8017fae <__swbuf_r+0x1a>
 8018018:	4621      	mov	r1, r4
 801801a:	4628      	mov	r0, r5
 801801c:	f000 f80c 	bl	8018038 <__swsetup_r>
 8018020:	2800      	cmp	r0, #0
 8018022:	d0cb      	beq.n	8017fbc <__swbuf_r+0x28>
 8018024:	f04f 37ff 	mov.w	r7, #4294967295
 8018028:	e7ea      	b.n	8018000 <__swbuf_r+0x6c>
 801802a:	bf00      	nop
 801802c:	0804e090 	.word	0x0804e090
 8018030:	0804e0b0 	.word	0x0804e0b0
 8018034:	0804e070 	.word	0x0804e070

08018038 <__swsetup_r>:
 8018038:	4b32      	ldr	r3, [pc, #200]	; (8018104 <__swsetup_r+0xcc>)
 801803a:	b570      	push	{r4, r5, r6, lr}
 801803c:	681d      	ldr	r5, [r3, #0]
 801803e:	4606      	mov	r6, r0
 8018040:	460c      	mov	r4, r1
 8018042:	b125      	cbz	r5, 801804e <__swsetup_r+0x16>
 8018044:	69ab      	ldr	r3, [r5, #24]
 8018046:	b913      	cbnz	r3, 801804e <__swsetup_r+0x16>
 8018048:	4628      	mov	r0, r5
 801804a:	f000 fff9 	bl	8019040 <__sinit>
 801804e:	4b2e      	ldr	r3, [pc, #184]	; (8018108 <__swsetup_r+0xd0>)
 8018050:	429c      	cmp	r4, r3
 8018052:	d10f      	bne.n	8018074 <__swsetup_r+0x3c>
 8018054:	686c      	ldr	r4, [r5, #4]
 8018056:	89a3      	ldrh	r3, [r4, #12]
 8018058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801805c:	0719      	lsls	r1, r3, #28
 801805e:	d42c      	bmi.n	80180ba <__swsetup_r+0x82>
 8018060:	06dd      	lsls	r5, r3, #27
 8018062:	d411      	bmi.n	8018088 <__swsetup_r+0x50>
 8018064:	2309      	movs	r3, #9
 8018066:	6033      	str	r3, [r6, #0]
 8018068:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801806c:	81a3      	strh	r3, [r4, #12]
 801806e:	f04f 30ff 	mov.w	r0, #4294967295
 8018072:	e03e      	b.n	80180f2 <__swsetup_r+0xba>
 8018074:	4b25      	ldr	r3, [pc, #148]	; (801810c <__swsetup_r+0xd4>)
 8018076:	429c      	cmp	r4, r3
 8018078:	d101      	bne.n	801807e <__swsetup_r+0x46>
 801807a:	68ac      	ldr	r4, [r5, #8]
 801807c:	e7eb      	b.n	8018056 <__swsetup_r+0x1e>
 801807e:	4b24      	ldr	r3, [pc, #144]	; (8018110 <__swsetup_r+0xd8>)
 8018080:	429c      	cmp	r4, r3
 8018082:	bf08      	it	eq
 8018084:	68ec      	ldreq	r4, [r5, #12]
 8018086:	e7e6      	b.n	8018056 <__swsetup_r+0x1e>
 8018088:	0758      	lsls	r0, r3, #29
 801808a:	d512      	bpl.n	80180b2 <__swsetup_r+0x7a>
 801808c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801808e:	b141      	cbz	r1, 80180a2 <__swsetup_r+0x6a>
 8018090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018094:	4299      	cmp	r1, r3
 8018096:	d002      	beq.n	801809e <__swsetup_r+0x66>
 8018098:	4630      	mov	r0, r6
 801809a:	f001 fc7d 	bl	8019998 <_free_r>
 801809e:	2300      	movs	r3, #0
 80180a0:	6363      	str	r3, [r4, #52]	; 0x34
 80180a2:	89a3      	ldrh	r3, [r4, #12]
 80180a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80180a8:	81a3      	strh	r3, [r4, #12]
 80180aa:	2300      	movs	r3, #0
 80180ac:	6063      	str	r3, [r4, #4]
 80180ae:	6923      	ldr	r3, [r4, #16]
 80180b0:	6023      	str	r3, [r4, #0]
 80180b2:	89a3      	ldrh	r3, [r4, #12]
 80180b4:	f043 0308 	orr.w	r3, r3, #8
 80180b8:	81a3      	strh	r3, [r4, #12]
 80180ba:	6923      	ldr	r3, [r4, #16]
 80180bc:	b94b      	cbnz	r3, 80180d2 <__swsetup_r+0x9a>
 80180be:	89a3      	ldrh	r3, [r4, #12]
 80180c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80180c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80180c8:	d003      	beq.n	80180d2 <__swsetup_r+0x9a>
 80180ca:	4621      	mov	r1, r4
 80180cc:	4630      	mov	r0, r6
 80180ce:	f001 f881 	bl	80191d4 <__smakebuf_r>
 80180d2:	89a0      	ldrh	r0, [r4, #12]
 80180d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80180d8:	f010 0301 	ands.w	r3, r0, #1
 80180dc:	d00a      	beq.n	80180f4 <__swsetup_r+0xbc>
 80180de:	2300      	movs	r3, #0
 80180e0:	60a3      	str	r3, [r4, #8]
 80180e2:	6963      	ldr	r3, [r4, #20]
 80180e4:	425b      	negs	r3, r3
 80180e6:	61a3      	str	r3, [r4, #24]
 80180e8:	6923      	ldr	r3, [r4, #16]
 80180ea:	b943      	cbnz	r3, 80180fe <__swsetup_r+0xc6>
 80180ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80180f0:	d1ba      	bne.n	8018068 <__swsetup_r+0x30>
 80180f2:	bd70      	pop	{r4, r5, r6, pc}
 80180f4:	0781      	lsls	r1, r0, #30
 80180f6:	bf58      	it	pl
 80180f8:	6963      	ldrpl	r3, [r4, #20]
 80180fa:	60a3      	str	r3, [r4, #8]
 80180fc:	e7f4      	b.n	80180e8 <__swsetup_r+0xb0>
 80180fe:	2000      	movs	r0, #0
 8018100:	e7f7      	b.n	80180f2 <__swsetup_r+0xba>
 8018102:	bf00      	nop
 8018104:	200008c4 	.word	0x200008c4
 8018108:	0804e090 	.word	0x0804e090
 801810c:	0804e0b0 	.word	0x0804e0b0
 8018110:	0804e070 	.word	0x0804e070

08018114 <quorem>:
 8018114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018118:	6903      	ldr	r3, [r0, #16]
 801811a:	690c      	ldr	r4, [r1, #16]
 801811c:	42a3      	cmp	r3, r4
 801811e:	4607      	mov	r7, r0
 8018120:	f2c0 8081 	blt.w	8018226 <quorem+0x112>
 8018124:	3c01      	subs	r4, #1
 8018126:	f101 0814 	add.w	r8, r1, #20
 801812a:	f100 0514 	add.w	r5, r0, #20
 801812e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018132:	9301      	str	r3, [sp, #4]
 8018134:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018138:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801813c:	3301      	adds	r3, #1
 801813e:	429a      	cmp	r2, r3
 8018140:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018144:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018148:	fbb2 f6f3 	udiv	r6, r2, r3
 801814c:	d331      	bcc.n	80181b2 <quorem+0x9e>
 801814e:	f04f 0e00 	mov.w	lr, #0
 8018152:	4640      	mov	r0, r8
 8018154:	46ac      	mov	ip, r5
 8018156:	46f2      	mov	sl, lr
 8018158:	f850 2b04 	ldr.w	r2, [r0], #4
 801815c:	b293      	uxth	r3, r2
 801815e:	fb06 e303 	mla	r3, r6, r3, lr
 8018162:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018166:	b29b      	uxth	r3, r3
 8018168:	ebaa 0303 	sub.w	r3, sl, r3
 801816c:	f8dc a000 	ldr.w	sl, [ip]
 8018170:	0c12      	lsrs	r2, r2, #16
 8018172:	fa13 f38a 	uxtah	r3, r3, sl
 8018176:	fb06 e202 	mla	r2, r6, r2, lr
 801817a:	9300      	str	r3, [sp, #0]
 801817c:	9b00      	ldr	r3, [sp, #0]
 801817e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018182:	b292      	uxth	r2, r2
 8018184:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8018188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801818c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018190:	4581      	cmp	r9, r0
 8018192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018196:	f84c 3b04 	str.w	r3, [ip], #4
 801819a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801819e:	d2db      	bcs.n	8018158 <quorem+0x44>
 80181a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80181a4:	b92b      	cbnz	r3, 80181b2 <quorem+0x9e>
 80181a6:	9b01      	ldr	r3, [sp, #4]
 80181a8:	3b04      	subs	r3, #4
 80181aa:	429d      	cmp	r5, r3
 80181ac:	461a      	mov	r2, r3
 80181ae:	d32e      	bcc.n	801820e <quorem+0xfa>
 80181b0:	613c      	str	r4, [r7, #16]
 80181b2:	4638      	mov	r0, r7
 80181b4:	f001 fad8 	bl	8019768 <__mcmp>
 80181b8:	2800      	cmp	r0, #0
 80181ba:	db24      	blt.n	8018206 <quorem+0xf2>
 80181bc:	3601      	adds	r6, #1
 80181be:	4628      	mov	r0, r5
 80181c0:	f04f 0c00 	mov.w	ip, #0
 80181c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80181c8:	f8d0 e000 	ldr.w	lr, [r0]
 80181cc:	b293      	uxth	r3, r2
 80181ce:	ebac 0303 	sub.w	r3, ip, r3
 80181d2:	0c12      	lsrs	r2, r2, #16
 80181d4:	fa13 f38e 	uxtah	r3, r3, lr
 80181d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80181dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80181e0:	b29b      	uxth	r3, r3
 80181e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80181e6:	45c1      	cmp	r9, r8
 80181e8:	f840 3b04 	str.w	r3, [r0], #4
 80181ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80181f0:	d2e8      	bcs.n	80181c4 <quorem+0xb0>
 80181f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80181f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80181fa:	b922      	cbnz	r2, 8018206 <quorem+0xf2>
 80181fc:	3b04      	subs	r3, #4
 80181fe:	429d      	cmp	r5, r3
 8018200:	461a      	mov	r2, r3
 8018202:	d30a      	bcc.n	801821a <quorem+0x106>
 8018204:	613c      	str	r4, [r7, #16]
 8018206:	4630      	mov	r0, r6
 8018208:	b003      	add	sp, #12
 801820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801820e:	6812      	ldr	r2, [r2, #0]
 8018210:	3b04      	subs	r3, #4
 8018212:	2a00      	cmp	r2, #0
 8018214:	d1cc      	bne.n	80181b0 <quorem+0x9c>
 8018216:	3c01      	subs	r4, #1
 8018218:	e7c7      	b.n	80181aa <quorem+0x96>
 801821a:	6812      	ldr	r2, [r2, #0]
 801821c:	3b04      	subs	r3, #4
 801821e:	2a00      	cmp	r2, #0
 8018220:	d1f0      	bne.n	8018204 <quorem+0xf0>
 8018222:	3c01      	subs	r4, #1
 8018224:	e7eb      	b.n	80181fe <quorem+0xea>
 8018226:	2000      	movs	r0, #0
 8018228:	e7ee      	b.n	8018208 <quorem+0xf4>
 801822a:	0000      	movs	r0, r0
 801822c:	0000      	movs	r0, r0
	...

08018230 <_dtoa_r>:
 8018230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018234:	ed2d 8b04 	vpush	{d8-d9}
 8018238:	ec57 6b10 	vmov	r6, r7, d0
 801823c:	b093      	sub	sp, #76	; 0x4c
 801823e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018240:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018244:	9106      	str	r1, [sp, #24]
 8018246:	ee10 aa10 	vmov	sl, s0
 801824a:	4604      	mov	r4, r0
 801824c:	9209      	str	r2, [sp, #36]	; 0x24
 801824e:	930c      	str	r3, [sp, #48]	; 0x30
 8018250:	46bb      	mov	fp, r7
 8018252:	b975      	cbnz	r5, 8018272 <_dtoa_r+0x42>
 8018254:	2010      	movs	r0, #16
 8018256:	f000 fffd 	bl	8019254 <malloc>
 801825a:	4602      	mov	r2, r0
 801825c:	6260      	str	r0, [r4, #36]	; 0x24
 801825e:	b920      	cbnz	r0, 801826a <_dtoa_r+0x3a>
 8018260:	4ba7      	ldr	r3, [pc, #668]	; (8018500 <_dtoa_r+0x2d0>)
 8018262:	21ea      	movs	r1, #234	; 0xea
 8018264:	48a7      	ldr	r0, [pc, #668]	; (8018504 <_dtoa_r+0x2d4>)
 8018266:	f001 ff93 	bl	801a190 <__assert_func>
 801826a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801826e:	6005      	str	r5, [r0, #0]
 8018270:	60c5      	str	r5, [r0, #12]
 8018272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018274:	6819      	ldr	r1, [r3, #0]
 8018276:	b151      	cbz	r1, 801828e <_dtoa_r+0x5e>
 8018278:	685a      	ldr	r2, [r3, #4]
 801827a:	604a      	str	r2, [r1, #4]
 801827c:	2301      	movs	r3, #1
 801827e:	4093      	lsls	r3, r2
 8018280:	608b      	str	r3, [r1, #8]
 8018282:	4620      	mov	r0, r4
 8018284:	f001 f82e 	bl	80192e4 <_Bfree>
 8018288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801828a:	2200      	movs	r2, #0
 801828c:	601a      	str	r2, [r3, #0]
 801828e:	1e3b      	subs	r3, r7, #0
 8018290:	bfaa      	itet	ge
 8018292:	2300      	movge	r3, #0
 8018294:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8018298:	f8c8 3000 	strge.w	r3, [r8]
 801829c:	4b9a      	ldr	r3, [pc, #616]	; (8018508 <_dtoa_r+0x2d8>)
 801829e:	bfbc      	itt	lt
 80182a0:	2201      	movlt	r2, #1
 80182a2:	f8c8 2000 	strlt.w	r2, [r8]
 80182a6:	ea33 030b 	bics.w	r3, r3, fp
 80182aa:	d11b      	bne.n	80182e4 <_dtoa_r+0xb4>
 80182ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80182ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80182b2:	6013      	str	r3, [r2, #0]
 80182b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80182b8:	4333      	orrs	r3, r6
 80182ba:	f000 8592 	beq.w	8018de2 <_dtoa_r+0xbb2>
 80182be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80182c0:	b963      	cbnz	r3, 80182dc <_dtoa_r+0xac>
 80182c2:	4b92      	ldr	r3, [pc, #584]	; (801850c <_dtoa_r+0x2dc>)
 80182c4:	e022      	b.n	801830c <_dtoa_r+0xdc>
 80182c6:	4b92      	ldr	r3, [pc, #584]	; (8018510 <_dtoa_r+0x2e0>)
 80182c8:	9301      	str	r3, [sp, #4]
 80182ca:	3308      	adds	r3, #8
 80182cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80182ce:	6013      	str	r3, [r2, #0]
 80182d0:	9801      	ldr	r0, [sp, #4]
 80182d2:	b013      	add	sp, #76	; 0x4c
 80182d4:	ecbd 8b04 	vpop	{d8-d9}
 80182d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182dc:	4b8b      	ldr	r3, [pc, #556]	; (801850c <_dtoa_r+0x2dc>)
 80182de:	9301      	str	r3, [sp, #4]
 80182e0:	3303      	adds	r3, #3
 80182e2:	e7f3      	b.n	80182cc <_dtoa_r+0x9c>
 80182e4:	2200      	movs	r2, #0
 80182e6:	2300      	movs	r3, #0
 80182e8:	4650      	mov	r0, sl
 80182ea:	4659      	mov	r1, fp
 80182ec:	f7e8 fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80182f0:	ec4b ab19 	vmov	d9, sl, fp
 80182f4:	4680      	mov	r8, r0
 80182f6:	b158      	cbz	r0, 8018310 <_dtoa_r+0xe0>
 80182f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80182fa:	2301      	movs	r3, #1
 80182fc:	6013      	str	r3, [r2, #0]
 80182fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018300:	2b00      	cmp	r3, #0
 8018302:	f000 856b 	beq.w	8018ddc <_dtoa_r+0xbac>
 8018306:	4883      	ldr	r0, [pc, #524]	; (8018514 <_dtoa_r+0x2e4>)
 8018308:	6018      	str	r0, [r3, #0]
 801830a:	1e43      	subs	r3, r0, #1
 801830c:	9301      	str	r3, [sp, #4]
 801830e:	e7df      	b.n	80182d0 <_dtoa_r+0xa0>
 8018310:	ec4b ab10 	vmov	d0, sl, fp
 8018314:	aa10      	add	r2, sp, #64	; 0x40
 8018316:	a911      	add	r1, sp, #68	; 0x44
 8018318:	4620      	mov	r0, r4
 801831a:	f001 facb 	bl	80198b4 <__d2b>
 801831e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8018322:	ee08 0a10 	vmov	s16, r0
 8018326:	2d00      	cmp	r5, #0
 8018328:	f000 8084 	beq.w	8018434 <_dtoa_r+0x204>
 801832c:	ee19 3a90 	vmov	r3, s19
 8018330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018334:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018338:	4656      	mov	r6, sl
 801833a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801833e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018342:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8018346:	4b74      	ldr	r3, [pc, #464]	; (8018518 <_dtoa_r+0x2e8>)
 8018348:	2200      	movs	r2, #0
 801834a:	4630      	mov	r0, r6
 801834c:	4639      	mov	r1, r7
 801834e:	f7e7 ffa3 	bl	8000298 <__aeabi_dsub>
 8018352:	a365      	add	r3, pc, #404	; (adr r3, 80184e8 <_dtoa_r+0x2b8>)
 8018354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018358:	f7e8 f956 	bl	8000608 <__aeabi_dmul>
 801835c:	a364      	add	r3, pc, #400	; (adr r3, 80184f0 <_dtoa_r+0x2c0>)
 801835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018362:	f7e7 ff9b 	bl	800029c <__adddf3>
 8018366:	4606      	mov	r6, r0
 8018368:	4628      	mov	r0, r5
 801836a:	460f      	mov	r7, r1
 801836c:	f7e8 f8e2 	bl	8000534 <__aeabi_i2d>
 8018370:	a361      	add	r3, pc, #388	; (adr r3, 80184f8 <_dtoa_r+0x2c8>)
 8018372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018376:	f7e8 f947 	bl	8000608 <__aeabi_dmul>
 801837a:	4602      	mov	r2, r0
 801837c:	460b      	mov	r3, r1
 801837e:	4630      	mov	r0, r6
 8018380:	4639      	mov	r1, r7
 8018382:	f7e7 ff8b 	bl	800029c <__adddf3>
 8018386:	4606      	mov	r6, r0
 8018388:	460f      	mov	r7, r1
 801838a:	f7e8 fbed 	bl	8000b68 <__aeabi_d2iz>
 801838e:	2200      	movs	r2, #0
 8018390:	9000      	str	r0, [sp, #0]
 8018392:	2300      	movs	r3, #0
 8018394:	4630      	mov	r0, r6
 8018396:	4639      	mov	r1, r7
 8018398:	f7e8 fba8 	bl	8000aec <__aeabi_dcmplt>
 801839c:	b150      	cbz	r0, 80183b4 <_dtoa_r+0x184>
 801839e:	9800      	ldr	r0, [sp, #0]
 80183a0:	f7e8 f8c8 	bl	8000534 <__aeabi_i2d>
 80183a4:	4632      	mov	r2, r6
 80183a6:	463b      	mov	r3, r7
 80183a8:	f7e8 fb96 	bl	8000ad8 <__aeabi_dcmpeq>
 80183ac:	b910      	cbnz	r0, 80183b4 <_dtoa_r+0x184>
 80183ae:	9b00      	ldr	r3, [sp, #0]
 80183b0:	3b01      	subs	r3, #1
 80183b2:	9300      	str	r3, [sp, #0]
 80183b4:	9b00      	ldr	r3, [sp, #0]
 80183b6:	2b16      	cmp	r3, #22
 80183b8:	d85a      	bhi.n	8018470 <_dtoa_r+0x240>
 80183ba:	9a00      	ldr	r2, [sp, #0]
 80183bc:	4b57      	ldr	r3, [pc, #348]	; (801851c <_dtoa_r+0x2ec>)
 80183be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80183c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183c6:	ec51 0b19 	vmov	r0, r1, d9
 80183ca:	f7e8 fb8f 	bl	8000aec <__aeabi_dcmplt>
 80183ce:	2800      	cmp	r0, #0
 80183d0:	d050      	beq.n	8018474 <_dtoa_r+0x244>
 80183d2:	9b00      	ldr	r3, [sp, #0]
 80183d4:	3b01      	subs	r3, #1
 80183d6:	9300      	str	r3, [sp, #0]
 80183d8:	2300      	movs	r3, #0
 80183da:	930b      	str	r3, [sp, #44]	; 0x2c
 80183dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80183de:	1b5d      	subs	r5, r3, r5
 80183e0:	1e6b      	subs	r3, r5, #1
 80183e2:	9305      	str	r3, [sp, #20]
 80183e4:	bf45      	ittet	mi
 80183e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80183ea:	9304      	strmi	r3, [sp, #16]
 80183ec:	2300      	movpl	r3, #0
 80183ee:	2300      	movmi	r3, #0
 80183f0:	bf4c      	ite	mi
 80183f2:	9305      	strmi	r3, [sp, #20]
 80183f4:	9304      	strpl	r3, [sp, #16]
 80183f6:	9b00      	ldr	r3, [sp, #0]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	db3d      	blt.n	8018478 <_dtoa_r+0x248>
 80183fc:	9b05      	ldr	r3, [sp, #20]
 80183fe:	9a00      	ldr	r2, [sp, #0]
 8018400:	920a      	str	r2, [sp, #40]	; 0x28
 8018402:	4413      	add	r3, r2
 8018404:	9305      	str	r3, [sp, #20]
 8018406:	2300      	movs	r3, #0
 8018408:	9307      	str	r3, [sp, #28]
 801840a:	9b06      	ldr	r3, [sp, #24]
 801840c:	2b09      	cmp	r3, #9
 801840e:	f200 8089 	bhi.w	8018524 <_dtoa_r+0x2f4>
 8018412:	2b05      	cmp	r3, #5
 8018414:	bfc4      	itt	gt
 8018416:	3b04      	subgt	r3, #4
 8018418:	9306      	strgt	r3, [sp, #24]
 801841a:	9b06      	ldr	r3, [sp, #24]
 801841c:	f1a3 0302 	sub.w	r3, r3, #2
 8018420:	bfcc      	ite	gt
 8018422:	2500      	movgt	r5, #0
 8018424:	2501      	movle	r5, #1
 8018426:	2b03      	cmp	r3, #3
 8018428:	f200 8087 	bhi.w	801853a <_dtoa_r+0x30a>
 801842c:	e8df f003 	tbb	[pc, r3]
 8018430:	59383a2d 	.word	0x59383a2d
 8018434:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8018438:	441d      	add	r5, r3
 801843a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801843e:	2b20      	cmp	r3, #32
 8018440:	bfc1      	itttt	gt
 8018442:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018446:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801844a:	fa0b f303 	lslgt.w	r3, fp, r3
 801844e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018452:	bfda      	itte	le
 8018454:	f1c3 0320 	rsble	r3, r3, #32
 8018458:	fa06 f003 	lslle.w	r0, r6, r3
 801845c:	4318      	orrgt	r0, r3
 801845e:	f7e8 f859 	bl	8000514 <__aeabi_ui2d>
 8018462:	2301      	movs	r3, #1
 8018464:	4606      	mov	r6, r0
 8018466:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801846a:	3d01      	subs	r5, #1
 801846c:	930e      	str	r3, [sp, #56]	; 0x38
 801846e:	e76a      	b.n	8018346 <_dtoa_r+0x116>
 8018470:	2301      	movs	r3, #1
 8018472:	e7b2      	b.n	80183da <_dtoa_r+0x1aa>
 8018474:	900b      	str	r0, [sp, #44]	; 0x2c
 8018476:	e7b1      	b.n	80183dc <_dtoa_r+0x1ac>
 8018478:	9b04      	ldr	r3, [sp, #16]
 801847a:	9a00      	ldr	r2, [sp, #0]
 801847c:	1a9b      	subs	r3, r3, r2
 801847e:	9304      	str	r3, [sp, #16]
 8018480:	4253      	negs	r3, r2
 8018482:	9307      	str	r3, [sp, #28]
 8018484:	2300      	movs	r3, #0
 8018486:	930a      	str	r3, [sp, #40]	; 0x28
 8018488:	e7bf      	b.n	801840a <_dtoa_r+0x1da>
 801848a:	2300      	movs	r3, #0
 801848c:	9308      	str	r3, [sp, #32]
 801848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018490:	2b00      	cmp	r3, #0
 8018492:	dc55      	bgt.n	8018540 <_dtoa_r+0x310>
 8018494:	2301      	movs	r3, #1
 8018496:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801849a:	461a      	mov	r2, r3
 801849c:	9209      	str	r2, [sp, #36]	; 0x24
 801849e:	e00c      	b.n	80184ba <_dtoa_r+0x28a>
 80184a0:	2301      	movs	r3, #1
 80184a2:	e7f3      	b.n	801848c <_dtoa_r+0x25c>
 80184a4:	2300      	movs	r3, #0
 80184a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184a8:	9308      	str	r3, [sp, #32]
 80184aa:	9b00      	ldr	r3, [sp, #0]
 80184ac:	4413      	add	r3, r2
 80184ae:	9302      	str	r3, [sp, #8]
 80184b0:	3301      	adds	r3, #1
 80184b2:	2b01      	cmp	r3, #1
 80184b4:	9303      	str	r3, [sp, #12]
 80184b6:	bfb8      	it	lt
 80184b8:	2301      	movlt	r3, #1
 80184ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80184bc:	2200      	movs	r2, #0
 80184be:	6042      	str	r2, [r0, #4]
 80184c0:	2204      	movs	r2, #4
 80184c2:	f102 0614 	add.w	r6, r2, #20
 80184c6:	429e      	cmp	r6, r3
 80184c8:	6841      	ldr	r1, [r0, #4]
 80184ca:	d93d      	bls.n	8018548 <_dtoa_r+0x318>
 80184cc:	4620      	mov	r0, r4
 80184ce:	f000 fec9 	bl	8019264 <_Balloc>
 80184d2:	9001      	str	r0, [sp, #4]
 80184d4:	2800      	cmp	r0, #0
 80184d6:	d13b      	bne.n	8018550 <_dtoa_r+0x320>
 80184d8:	4b11      	ldr	r3, [pc, #68]	; (8018520 <_dtoa_r+0x2f0>)
 80184da:	4602      	mov	r2, r0
 80184dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80184e0:	e6c0      	b.n	8018264 <_dtoa_r+0x34>
 80184e2:	2301      	movs	r3, #1
 80184e4:	e7df      	b.n	80184a6 <_dtoa_r+0x276>
 80184e6:	bf00      	nop
 80184e8:	636f4361 	.word	0x636f4361
 80184ec:	3fd287a7 	.word	0x3fd287a7
 80184f0:	8b60c8b3 	.word	0x8b60c8b3
 80184f4:	3fc68a28 	.word	0x3fc68a28
 80184f8:	509f79fb 	.word	0x509f79fb
 80184fc:	3fd34413 	.word	0x3fd34413
 8018500:	0804dfed 	.word	0x0804dfed
 8018504:	0804e004 	.word	0x0804e004
 8018508:	7ff00000 	.word	0x7ff00000
 801850c:	0804dfe9 	.word	0x0804dfe9
 8018510:	0804dfe0 	.word	0x0804dfe0
 8018514:	0804dfbd 	.word	0x0804dfbd
 8018518:	3ff80000 	.word	0x3ff80000
 801851c:	0804e158 	.word	0x0804e158
 8018520:	0804e05f 	.word	0x0804e05f
 8018524:	2501      	movs	r5, #1
 8018526:	2300      	movs	r3, #0
 8018528:	9306      	str	r3, [sp, #24]
 801852a:	9508      	str	r5, [sp, #32]
 801852c:	f04f 33ff 	mov.w	r3, #4294967295
 8018530:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018534:	2200      	movs	r2, #0
 8018536:	2312      	movs	r3, #18
 8018538:	e7b0      	b.n	801849c <_dtoa_r+0x26c>
 801853a:	2301      	movs	r3, #1
 801853c:	9308      	str	r3, [sp, #32]
 801853e:	e7f5      	b.n	801852c <_dtoa_r+0x2fc>
 8018540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018542:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018546:	e7b8      	b.n	80184ba <_dtoa_r+0x28a>
 8018548:	3101      	adds	r1, #1
 801854a:	6041      	str	r1, [r0, #4]
 801854c:	0052      	lsls	r2, r2, #1
 801854e:	e7b8      	b.n	80184c2 <_dtoa_r+0x292>
 8018550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018552:	9a01      	ldr	r2, [sp, #4]
 8018554:	601a      	str	r2, [r3, #0]
 8018556:	9b03      	ldr	r3, [sp, #12]
 8018558:	2b0e      	cmp	r3, #14
 801855a:	f200 809d 	bhi.w	8018698 <_dtoa_r+0x468>
 801855e:	2d00      	cmp	r5, #0
 8018560:	f000 809a 	beq.w	8018698 <_dtoa_r+0x468>
 8018564:	9b00      	ldr	r3, [sp, #0]
 8018566:	2b00      	cmp	r3, #0
 8018568:	dd32      	ble.n	80185d0 <_dtoa_r+0x3a0>
 801856a:	4ab7      	ldr	r2, [pc, #732]	; (8018848 <_dtoa_r+0x618>)
 801856c:	f003 030f 	and.w	r3, r3, #15
 8018570:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018574:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018578:	9b00      	ldr	r3, [sp, #0]
 801857a:	05d8      	lsls	r0, r3, #23
 801857c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8018580:	d516      	bpl.n	80185b0 <_dtoa_r+0x380>
 8018582:	4bb2      	ldr	r3, [pc, #712]	; (801884c <_dtoa_r+0x61c>)
 8018584:	ec51 0b19 	vmov	r0, r1, d9
 8018588:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801858c:	f7e8 f966 	bl	800085c <__aeabi_ddiv>
 8018590:	f007 070f 	and.w	r7, r7, #15
 8018594:	4682      	mov	sl, r0
 8018596:	468b      	mov	fp, r1
 8018598:	2503      	movs	r5, #3
 801859a:	4eac      	ldr	r6, [pc, #688]	; (801884c <_dtoa_r+0x61c>)
 801859c:	b957      	cbnz	r7, 80185b4 <_dtoa_r+0x384>
 801859e:	4642      	mov	r2, r8
 80185a0:	464b      	mov	r3, r9
 80185a2:	4650      	mov	r0, sl
 80185a4:	4659      	mov	r1, fp
 80185a6:	f7e8 f959 	bl	800085c <__aeabi_ddiv>
 80185aa:	4682      	mov	sl, r0
 80185ac:	468b      	mov	fp, r1
 80185ae:	e028      	b.n	8018602 <_dtoa_r+0x3d2>
 80185b0:	2502      	movs	r5, #2
 80185b2:	e7f2      	b.n	801859a <_dtoa_r+0x36a>
 80185b4:	07f9      	lsls	r1, r7, #31
 80185b6:	d508      	bpl.n	80185ca <_dtoa_r+0x39a>
 80185b8:	4640      	mov	r0, r8
 80185ba:	4649      	mov	r1, r9
 80185bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80185c0:	f7e8 f822 	bl	8000608 <__aeabi_dmul>
 80185c4:	3501      	adds	r5, #1
 80185c6:	4680      	mov	r8, r0
 80185c8:	4689      	mov	r9, r1
 80185ca:	107f      	asrs	r7, r7, #1
 80185cc:	3608      	adds	r6, #8
 80185ce:	e7e5      	b.n	801859c <_dtoa_r+0x36c>
 80185d0:	f000 809b 	beq.w	801870a <_dtoa_r+0x4da>
 80185d4:	9b00      	ldr	r3, [sp, #0]
 80185d6:	4f9d      	ldr	r7, [pc, #628]	; (801884c <_dtoa_r+0x61c>)
 80185d8:	425e      	negs	r6, r3
 80185da:	4b9b      	ldr	r3, [pc, #620]	; (8018848 <_dtoa_r+0x618>)
 80185dc:	f006 020f 	and.w	r2, r6, #15
 80185e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80185e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185e8:	ec51 0b19 	vmov	r0, r1, d9
 80185ec:	f7e8 f80c 	bl	8000608 <__aeabi_dmul>
 80185f0:	1136      	asrs	r6, r6, #4
 80185f2:	4682      	mov	sl, r0
 80185f4:	468b      	mov	fp, r1
 80185f6:	2300      	movs	r3, #0
 80185f8:	2502      	movs	r5, #2
 80185fa:	2e00      	cmp	r6, #0
 80185fc:	d17a      	bne.n	80186f4 <_dtoa_r+0x4c4>
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d1d3      	bne.n	80185aa <_dtoa_r+0x37a>
 8018602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018604:	2b00      	cmp	r3, #0
 8018606:	f000 8082 	beq.w	801870e <_dtoa_r+0x4de>
 801860a:	4b91      	ldr	r3, [pc, #580]	; (8018850 <_dtoa_r+0x620>)
 801860c:	2200      	movs	r2, #0
 801860e:	4650      	mov	r0, sl
 8018610:	4659      	mov	r1, fp
 8018612:	f7e8 fa6b 	bl	8000aec <__aeabi_dcmplt>
 8018616:	2800      	cmp	r0, #0
 8018618:	d079      	beq.n	801870e <_dtoa_r+0x4de>
 801861a:	9b03      	ldr	r3, [sp, #12]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d076      	beq.n	801870e <_dtoa_r+0x4de>
 8018620:	9b02      	ldr	r3, [sp, #8]
 8018622:	2b00      	cmp	r3, #0
 8018624:	dd36      	ble.n	8018694 <_dtoa_r+0x464>
 8018626:	9b00      	ldr	r3, [sp, #0]
 8018628:	4650      	mov	r0, sl
 801862a:	4659      	mov	r1, fp
 801862c:	1e5f      	subs	r7, r3, #1
 801862e:	2200      	movs	r2, #0
 8018630:	4b88      	ldr	r3, [pc, #544]	; (8018854 <_dtoa_r+0x624>)
 8018632:	f7e7 ffe9 	bl	8000608 <__aeabi_dmul>
 8018636:	9e02      	ldr	r6, [sp, #8]
 8018638:	4682      	mov	sl, r0
 801863a:	468b      	mov	fp, r1
 801863c:	3501      	adds	r5, #1
 801863e:	4628      	mov	r0, r5
 8018640:	f7e7 ff78 	bl	8000534 <__aeabi_i2d>
 8018644:	4652      	mov	r2, sl
 8018646:	465b      	mov	r3, fp
 8018648:	f7e7 ffde 	bl	8000608 <__aeabi_dmul>
 801864c:	4b82      	ldr	r3, [pc, #520]	; (8018858 <_dtoa_r+0x628>)
 801864e:	2200      	movs	r2, #0
 8018650:	f7e7 fe24 	bl	800029c <__adddf3>
 8018654:	46d0      	mov	r8, sl
 8018656:	46d9      	mov	r9, fp
 8018658:	4682      	mov	sl, r0
 801865a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801865e:	2e00      	cmp	r6, #0
 8018660:	d158      	bne.n	8018714 <_dtoa_r+0x4e4>
 8018662:	4b7e      	ldr	r3, [pc, #504]	; (801885c <_dtoa_r+0x62c>)
 8018664:	2200      	movs	r2, #0
 8018666:	4640      	mov	r0, r8
 8018668:	4649      	mov	r1, r9
 801866a:	f7e7 fe15 	bl	8000298 <__aeabi_dsub>
 801866e:	4652      	mov	r2, sl
 8018670:	465b      	mov	r3, fp
 8018672:	4680      	mov	r8, r0
 8018674:	4689      	mov	r9, r1
 8018676:	f7e8 fa57 	bl	8000b28 <__aeabi_dcmpgt>
 801867a:	2800      	cmp	r0, #0
 801867c:	f040 8295 	bne.w	8018baa <_dtoa_r+0x97a>
 8018680:	4652      	mov	r2, sl
 8018682:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8018686:	4640      	mov	r0, r8
 8018688:	4649      	mov	r1, r9
 801868a:	f7e8 fa2f 	bl	8000aec <__aeabi_dcmplt>
 801868e:	2800      	cmp	r0, #0
 8018690:	f040 8289 	bne.w	8018ba6 <_dtoa_r+0x976>
 8018694:	ec5b ab19 	vmov	sl, fp, d9
 8018698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801869a:	2b00      	cmp	r3, #0
 801869c:	f2c0 8148 	blt.w	8018930 <_dtoa_r+0x700>
 80186a0:	9a00      	ldr	r2, [sp, #0]
 80186a2:	2a0e      	cmp	r2, #14
 80186a4:	f300 8144 	bgt.w	8018930 <_dtoa_r+0x700>
 80186a8:	4b67      	ldr	r3, [pc, #412]	; (8018848 <_dtoa_r+0x618>)
 80186aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80186ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80186b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	f280 80d5 	bge.w	8018864 <_dtoa_r+0x634>
 80186ba:	9b03      	ldr	r3, [sp, #12]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	f300 80d1 	bgt.w	8018864 <_dtoa_r+0x634>
 80186c2:	f040 826f 	bne.w	8018ba4 <_dtoa_r+0x974>
 80186c6:	4b65      	ldr	r3, [pc, #404]	; (801885c <_dtoa_r+0x62c>)
 80186c8:	2200      	movs	r2, #0
 80186ca:	4640      	mov	r0, r8
 80186cc:	4649      	mov	r1, r9
 80186ce:	f7e7 ff9b 	bl	8000608 <__aeabi_dmul>
 80186d2:	4652      	mov	r2, sl
 80186d4:	465b      	mov	r3, fp
 80186d6:	f7e8 fa1d 	bl	8000b14 <__aeabi_dcmpge>
 80186da:	9e03      	ldr	r6, [sp, #12]
 80186dc:	4637      	mov	r7, r6
 80186de:	2800      	cmp	r0, #0
 80186e0:	f040 8245 	bne.w	8018b6e <_dtoa_r+0x93e>
 80186e4:	9d01      	ldr	r5, [sp, #4]
 80186e6:	2331      	movs	r3, #49	; 0x31
 80186e8:	f805 3b01 	strb.w	r3, [r5], #1
 80186ec:	9b00      	ldr	r3, [sp, #0]
 80186ee:	3301      	adds	r3, #1
 80186f0:	9300      	str	r3, [sp, #0]
 80186f2:	e240      	b.n	8018b76 <_dtoa_r+0x946>
 80186f4:	07f2      	lsls	r2, r6, #31
 80186f6:	d505      	bpl.n	8018704 <_dtoa_r+0x4d4>
 80186f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80186fc:	f7e7 ff84 	bl	8000608 <__aeabi_dmul>
 8018700:	3501      	adds	r5, #1
 8018702:	2301      	movs	r3, #1
 8018704:	1076      	asrs	r6, r6, #1
 8018706:	3708      	adds	r7, #8
 8018708:	e777      	b.n	80185fa <_dtoa_r+0x3ca>
 801870a:	2502      	movs	r5, #2
 801870c:	e779      	b.n	8018602 <_dtoa_r+0x3d2>
 801870e:	9f00      	ldr	r7, [sp, #0]
 8018710:	9e03      	ldr	r6, [sp, #12]
 8018712:	e794      	b.n	801863e <_dtoa_r+0x40e>
 8018714:	9901      	ldr	r1, [sp, #4]
 8018716:	4b4c      	ldr	r3, [pc, #304]	; (8018848 <_dtoa_r+0x618>)
 8018718:	4431      	add	r1, r6
 801871a:	910d      	str	r1, [sp, #52]	; 0x34
 801871c:	9908      	ldr	r1, [sp, #32]
 801871e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8018722:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018726:	2900      	cmp	r1, #0
 8018728:	d043      	beq.n	80187b2 <_dtoa_r+0x582>
 801872a:	494d      	ldr	r1, [pc, #308]	; (8018860 <_dtoa_r+0x630>)
 801872c:	2000      	movs	r0, #0
 801872e:	f7e8 f895 	bl	800085c <__aeabi_ddiv>
 8018732:	4652      	mov	r2, sl
 8018734:	465b      	mov	r3, fp
 8018736:	f7e7 fdaf 	bl	8000298 <__aeabi_dsub>
 801873a:	9d01      	ldr	r5, [sp, #4]
 801873c:	4682      	mov	sl, r0
 801873e:	468b      	mov	fp, r1
 8018740:	4649      	mov	r1, r9
 8018742:	4640      	mov	r0, r8
 8018744:	f7e8 fa10 	bl	8000b68 <__aeabi_d2iz>
 8018748:	4606      	mov	r6, r0
 801874a:	f7e7 fef3 	bl	8000534 <__aeabi_i2d>
 801874e:	4602      	mov	r2, r0
 8018750:	460b      	mov	r3, r1
 8018752:	4640      	mov	r0, r8
 8018754:	4649      	mov	r1, r9
 8018756:	f7e7 fd9f 	bl	8000298 <__aeabi_dsub>
 801875a:	3630      	adds	r6, #48	; 0x30
 801875c:	f805 6b01 	strb.w	r6, [r5], #1
 8018760:	4652      	mov	r2, sl
 8018762:	465b      	mov	r3, fp
 8018764:	4680      	mov	r8, r0
 8018766:	4689      	mov	r9, r1
 8018768:	f7e8 f9c0 	bl	8000aec <__aeabi_dcmplt>
 801876c:	2800      	cmp	r0, #0
 801876e:	d163      	bne.n	8018838 <_dtoa_r+0x608>
 8018770:	4642      	mov	r2, r8
 8018772:	464b      	mov	r3, r9
 8018774:	4936      	ldr	r1, [pc, #216]	; (8018850 <_dtoa_r+0x620>)
 8018776:	2000      	movs	r0, #0
 8018778:	f7e7 fd8e 	bl	8000298 <__aeabi_dsub>
 801877c:	4652      	mov	r2, sl
 801877e:	465b      	mov	r3, fp
 8018780:	f7e8 f9b4 	bl	8000aec <__aeabi_dcmplt>
 8018784:	2800      	cmp	r0, #0
 8018786:	f040 80b5 	bne.w	80188f4 <_dtoa_r+0x6c4>
 801878a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801878c:	429d      	cmp	r5, r3
 801878e:	d081      	beq.n	8018694 <_dtoa_r+0x464>
 8018790:	4b30      	ldr	r3, [pc, #192]	; (8018854 <_dtoa_r+0x624>)
 8018792:	2200      	movs	r2, #0
 8018794:	4650      	mov	r0, sl
 8018796:	4659      	mov	r1, fp
 8018798:	f7e7 ff36 	bl	8000608 <__aeabi_dmul>
 801879c:	4b2d      	ldr	r3, [pc, #180]	; (8018854 <_dtoa_r+0x624>)
 801879e:	4682      	mov	sl, r0
 80187a0:	468b      	mov	fp, r1
 80187a2:	4640      	mov	r0, r8
 80187a4:	4649      	mov	r1, r9
 80187a6:	2200      	movs	r2, #0
 80187a8:	f7e7 ff2e 	bl	8000608 <__aeabi_dmul>
 80187ac:	4680      	mov	r8, r0
 80187ae:	4689      	mov	r9, r1
 80187b0:	e7c6      	b.n	8018740 <_dtoa_r+0x510>
 80187b2:	4650      	mov	r0, sl
 80187b4:	4659      	mov	r1, fp
 80187b6:	f7e7 ff27 	bl	8000608 <__aeabi_dmul>
 80187ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187bc:	9d01      	ldr	r5, [sp, #4]
 80187be:	930f      	str	r3, [sp, #60]	; 0x3c
 80187c0:	4682      	mov	sl, r0
 80187c2:	468b      	mov	fp, r1
 80187c4:	4649      	mov	r1, r9
 80187c6:	4640      	mov	r0, r8
 80187c8:	f7e8 f9ce 	bl	8000b68 <__aeabi_d2iz>
 80187cc:	4606      	mov	r6, r0
 80187ce:	f7e7 feb1 	bl	8000534 <__aeabi_i2d>
 80187d2:	3630      	adds	r6, #48	; 0x30
 80187d4:	4602      	mov	r2, r0
 80187d6:	460b      	mov	r3, r1
 80187d8:	4640      	mov	r0, r8
 80187da:	4649      	mov	r1, r9
 80187dc:	f7e7 fd5c 	bl	8000298 <__aeabi_dsub>
 80187e0:	f805 6b01 	strb.w	r6, [r5], #1
 80187e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187e6:	429d      	cmp	r5, r3
 80187e8:	4680      	mov	r8, r0
 80187ea:	4689      	mov	r9, r1
 80187ec:	f04f 0200 	mov.w	r2, #0
 80187f0:	d124      	bne.n	801883c <_dtoa_r+0x60c>
 80187f2:	4b1b      	ldr	r3, [pc, #108]	; (8018860 <_dtoa_r+0x630>)
 80187f4:	4650      	mov	r0, sl
 80187f6:	4659      	mov	r1, fp
 80187f8:	f7e7 fd50 	bl	800029c <__adddf3>
 80187fc:	4602      	mov	r2, r0
 80187fe:	460b      	mov	r3, r1
 8018800:	4640      	mov	r0, r8
 8018802:	4649      	mov	r1, r9
 8018804:	f7e8 f990 	bl	8000b28 <__aeabi_dcmpgt>
 8018808:	2800      	cmp	r0, #0
 801880a:	d173      	bne.n	80188f4 <_dtoa_r+0x6c4>
 801880c:	4652      	mov	r2, sl
 801880e:	465b      	mov	r3, fp
 8018810:	4913      	ldr	r1, [pc, #76]	; (8018860 <_dtoa_r+0x630>)
 8018812:	2000      	movs	r0, #0
 8018814:	f7e7 fd40 	bl	8000298 <__aeabi_dsub>
 8018818:	4602      	mov	r2, r0
 801881a:	460b      	mov	r3, r1
 801881c:	4640      	mov	r0, r8
 801881e:	4649      	mov	r1, r9
 8018820:	f7e8 f964 	bl	8000aec <__aeabi_dcmplt>
 8018824:	2800      	cmp	r0, #0
 8018826:	f43f af35 	beq.w	8018694 <_dtoa_r+0x464>
 801882a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801882c:	1e6b      	subs	r3, r5, #1
 801882e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018830:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018834:	2b30      	cmp	r3, #48	; 0x30
 8018836:	d0f8      	beq.n	801882a <_dtoa_r+0x5fa>
 8018838:	9700      	str	r7, [sp, #0]
 801883a:	e049      	b.n	80188d0 <_dtoa_r+0x6a0>
 801883c:	4b05      	ldr	r3, [pc, #20]	; (8018854 <_dtoa_r+0x624>)
 801883e:	f7e7 fee3 	bl	8000608 <__aeabi_dmul>
 8018842:	4680      	mov	r8, r0
 8018844:	4689      	mov	r9, r1
 8018846:	e7bd      	b.n	80187c4 <_dtoa_r+0x594>
 8018848:	0804e158 	.word	0x0804e158
 801884c:	0804e130 	.word	0x0804e130
 8018850:	3ff00000 	.word	0x3ff00000
 8018854:	40240000 	.word	0x40240000
 8018858:	401c0000 	.word	0x401c0000
 801885c:	40140000 	.word	0x40140000
 8018860:	3fe00000 	.word	0x3fe00000
 8018864:	9d01      	ldr	r5, [sp, #4]
 8018866:	4656      	mov	r6, sl
 8018868:	465f      	mov	r7, fp
 801886a:	4642      	mov	r2, r8
 801886c:	464b      	mov	r3, r9
 801886e:	4630      	mov	r0, r6
 8018870:	4639      	mov	r1, r7
 8018872:	f7e7 fff3 	bl	800085c <__aeabi_ddiv>
 8018876:	f7e8 f977 	bl	8000b68 <__aeabi_d2iz>
 801887a:	4682      	mov	sl, r0
 801887c:	f7e7 fe5a 	bl	8000534 <__aeabi_i2d>
 8018880:	4642      	mov	r2, r8
 8018882:	464b      	mov	r3, r9
 8018884:	f7e7 fec0 	bl	8000608 <__aeabi_dmul>
 8018888:	4602      	mov	r2, r0
 801888a:	460b      	mov	r3, r1
 801888c:	4630      	mov	r0, r6
 801888e:	4639      	mov	r1, r7
 8018890:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8018894:	f7e7 fd00 	bl	8000298 <__aeabi_dsub>
 8018898:	f805 6b01 	strb.w	r6, [r5], #1
 801889c:	9e01      	ldr	r6, [sp, #4]
 801889e:	9f03      	ldr	r7, [sp, #12]
 80188a0:	1bae      	subs	r6, r5, r6
 80188a2:	42b7      	cmp	r7, r6
 80188a4:	4602      	mov	r2, r0
 80188a6:	460b      	mov	r3, r1
 80188a8:	d135      	bne.n	8018916 <_dtoa_r+0x6e6>
 80188aa:	f7e7 fcf7 	bl	800029c <__adddf3>
 80188ae:	4642      	mov	r2, r8
 80188b0:	464b      	mov	r3, r9
 80188b2:	4606      	mov	r6, r0
 80188b4:	460f      	mov	r7, r1
 80188b6:	f7e8 f937 	bl	8000b28 <__aeabi_dcmpgt>
 80188ba:	b9d0      	cbnz	r0, 80188f2 <_dtoa_r+0x6c2>
 80188bc:	4642      	mov	r2, r8
 80188be:	464b      	mov	r3, r9
 80188c0:	4630      	mov	r0, r6
 80188c2:	4639      	mov	r1, r7
 80188c4:	f7e8 f908 	bl	8000ad8 <__aeabi_dcmpeq>
 80188c8:	b110      	cbz	r0, 80188d0 <_dtoa_r+0x6a0>
 80188ca:	f01a 0f01 	tst.w	sl, #1
 80188ce:	d110      	bne.n	80188f2 <_dtoa_r+0x6c2>
 80188d0:	4620      	mov	r0, r4
 80188d2:	ee18 1a10 	vmov	r1, s16
 80188d6:	f000 fd05 	bl	80192e4 <_Bfree>
 80188da:	2300      	movs	r3, #0
 80188dc:	9800      	ldr	r0, [sp, #0]
 80188de:	702b      	strb	r3, [r5, #0]
 80188e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188e2:	3001      	adds	r0, #1
 80188e4:	6018      	str	r0, [r3, #0]
 80188e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	f43f acf1 	beq.w	80182d0 <_dtoa_r+0xa0>
 80188ee:	601d      	str	r5, [r3, #0]
 80188f0:	e4ee      	b.n	80182d0 <_dtoa_r+0xa0>
 80188f2:	9f00      	ldr	r7, [sp, #0]
 80188f4:	462b      	mov	r3, r5
 80188f6:	461d      	mov	r5, r3
 80188f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80188fc:	2a39      	cmp	r2, #57	; 0x39
 80188fe:	d106      	bne.n	801890e <_dtoa_r+0x6de>
 8018900:	9a01      	ldr	r2, [sp, #4]
 8018902:	429a      	cmp	r2, r3
 8018904:	d1f7      	bne.n	80188f6 <_dtoa_r+0x6c6>
 8018906:	9901      	ldr	r1, [sp, #4]
 8018908:	2230      	movs	r2, #48	; 0x30
 801890a:	3701      	adds	r7, #1
 801890c:	700a      	strb	r2, [r1, #0]
 801890e:	781a      	ldrb	r2, [r3, #0]
 8018910:	3201      	adds	r2, #1
 8018912:	701a      	strb	r2, [r3, #0]
 8018914:	e790      	b.n	8018838 <_dtoa_r+0x608>
 8018916:	4ba6      	ldr	r3, [pc, #664]	; (8018bb0 <_dtoa_r+0x980>)
 8018918:	2200      	movs	r2, #0
 801891a:	f7e7 fe75 	bl	8000608 <__aeabi_dmul>
 801891e:	2200      	movs	r2, #0
 8018920:	2300      	movs	r3, #0
 8018922:	4606      	mov	r6, r0
 8018924:	460f      	mov	r7, r1
 8018926:	f7e8 f8d7 	bl	8000ad8 <__aeabi_dcmpeq>
 801892a:	2800      	cmp	r0, #0
 801892c:	d09d      	beq.n	801886a <_dtoa_r+0x63a>
 801892e:	e7cf      	b.n	80188d0 <_dtoa_r+0x6a0>
 8018930:	9a08      	ldr	r2, [sp, #32]
 8018932:	2a00      	cmp	r2, #0
 8018934:	f000 80d7 	beq.w	8018ae6 <_dtoa_r+0x8b6>
 8018938:	9a06      	ldr	r2, [sp, #24]
 801893a:	2a01      	cmp	r2, #1
 801893c:	f300 80ba 	bgt.w	8018ab4 <_dtoa_r+0x884>
 8018940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018942:	2a00      	cmp	r2, #0
 8018944:	f000 80b2 	beq.w	8018aac <_dtoa_r+0x87c>
 8018948:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801894c:	9e07      	ldr	r6, [sp, #28]
 801894e:	9d04      	ldr	r5, [sp, #16]
 8018950:	9a04      	ldr	r2, [sp, #16]
 8018952:	441a      	add	r2, r3
 8018954:	9204      	str	r2, [sp, #16]
 8018956:	9a05      	ldr	r2, [sp, #20]
 8018958:	2101      	movs	r1, #1
 801895a:	441a      	add	r2, r3
 801895c:	4620      	mov	r0, r4
 801895e:	9205      	str	r2, [sp, #20]
 8018960:	f000 fd78 	bl	8019454 <__i2b>
 8018964:	4607      	mov	r7, r0
 8018966:	2d00      	cmp	r5, #0
 8018968:	dd0c      	ble.n	8018984 <_dtoa_r+0x754>
 801896a:	9b05      	ldr	r3, [sp, #20]
 801896c:	2b00      	cmp	r3, #0
 801896e:	dd09      	ble.n	8018984 <_dtoa_r+0x754>
 8018970:	42ab      	cmp	r3, r5
 8018972:	9a04      	ldr	r2, [sp, #16]
 8018974:	bfa8      	it	ge
 8018976:	462b      	movge	r3, r5
 8018978:	1ad2      	subs	r2, r2, r3
 801897a:	9204      	str	r2, [sp, #16]
 801897c:	9a05      	ldr	r2, [sp, #20]
 801897e:	1aed      	subs	r5, r5, r3
 8018980:	1ad3      	subs	r3, r2, r3
 8018982:	9305      	str	r3, [sp, #20]
 8018984:	9b07      	ldr	r3, [sp, #28]
 8018986:	b31b      	cbz	r3, 80189d0 <_dtoa_r+0x7a0>
 8018988:	9b08      	ldr	r3, [sp, #32]
 801898a:	2b00      	cmp	r3, #0
 801898c:	f000 80af 	beq.w	8018aee <_dtoa_r+0x8be>
 8018990:	2e00      	cmp	r6, #0
 8018992:	dd13      	ble.n	80189bc <_dtoa_r+0x78c>
 8018994:	4639      	mov	r1, r7
 8018996:	4632      	mov	r2, r6
 8018998:	4620      	mov	r0, r4
 801899a:	f000 fe1b 	bl	80195d4 <__pow5mult>
 801899e:	ee18 2a10 	vmov	r2, s16
 80189a2:	4601      	mov	r1, r0
 80189a4:	4607      	mov	r7, r0
 80189a6:	4620      	mov	r0, r4
 80189a8:	f000 fd6a 	bl	8019480 <__multiply>
 80189ac:	ee18 1a10 	vmov	r1, s16
 80189b0:	4680      	mov	r8, r0
 80189b2:	4620      	mov	r0, r4
 80189b4:	f000 fc96 	bl	80192e4 <_Bfree>
 80189b8:	ee08 8a10 	vmov	s16, r8
 80189bc:	9b07      	ldr	r3, [sp, #28]
 80189be:	1b9a      	subs	r2, r3, r6
 80189c0:	d006      	beq.n	80189d0 <_dtoa_r+0x7a0>
 80189c2:	ee18 1a10 	vmov	r1, s16
 80189c6:	4620      	mov	r0, r4
 80189c8:	f000 fe04 	bl	80195d4 <__pow5mult>
 80189cc:	ee08 0a10 	vmov	s16, r0
 80189d0:	2101      	movs	r1, #1
 80189d2:	4620      	mov	r0, r4
 80189d4:	f000 fd3e 	bl	8019454 <__i2b>
 80189d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80189da:	2b00      	cmp	r3, #0
 80189dc:	4606      	mov	r6, r0
 80189de:	f340 8088 	ble.w	8018af2 <_dtoa_r+0x8c2>
 80189e2:	461a      	mov	r2, r3
 80189e4:	4601      	mov	r1, r0
 80189e6:	4620      	mov	r0, r4
 80189e8:	f000 fdf4 	bl	80195d4 <__pow5mult>
 80189ec:	9b06      	ldr	r3, [sp, #24]
 80189ee:	2b01      	cmp	r3, #1
 80189f0:	4606      	mov	r6, r0
 80189f2:	f340 8081 	ble.w	8018af8 <_dtoa_r+0x8c8>
 80189f6:	f04f 0800 	mov.w	r8, #0
 80189fa:	6933      	ldr	r3, [r6, #16]
 80189fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018a00:	6918      	ldr	r0, [r3, #16]
 8018a02:	f000 fcd7 	bl	80193b4 <__hi0bits>
 8018a06:	f1c0 0020 	rsb	r0, r0, #32
 8018a0a:	9b05      	ldr	r3, [sp, #20]
 8018a0c:	4418      	add	r0, r3
 8018a0e:	f010 001f 	ands.w	r0, r0, #31
 8018a12:	f000 8092 	beq.w	8018b3a <_dtoa_r+0x90a>
 8018a16:	f1c0 0320 	rsb	r3, r0, #32
 8018a1a:	2b04      	cmp	r3, #4
 8018a1c:	f340 808a 	ble.w	8018b34 <_dtoa_r+0x904>
 8018a20:	f1c0 001c 	rsb	r0, r0, #28
 8018a24:	9b04      	ldr	r3, [sp, #16]
 8018a26:	4403      	add	r3, r0
 8018a28:	9304      	str	r3, [sp, #16]
 8018a2a:	9b05      	ldr	r3, [sp, #20]
 8018a2c:	4403      	add	r3, r0
 8018a2e:	4405      	add	r5, r0
 8018a30:	9305      	str	r3, [sp, #20]
 8018a32:	9b04      	ldr	r3, [sp, #16]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	dd07      	ble.n	8018a48 <_dtoa_r+0x818>
 8018a38:	ee18 1a10 	vmov	r1, s16
 8018a3c:	461a      	mov	r2, r3
 8018a3e:	4620      	mov	r0, r4
 8018a40:	f000 fe22 	bl	8019688 <__lshift>
 8018a44:	ee08 0a10 	vmov	s16, r0
 8018a48:	9b05      	ldr	r3, [sp, #20]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	dd05      	ble.n	8018a5a <_dtoa_r+0x82a>
 8018a4e:	4631      	mov	r1, r6
 8018a50:	461a      	mov	r2, r3
 8018a52:	4620      	mov	r0, r4
 8018a54:	f000 fe18 	bl	8019688 <__lshift>
 8018a58:	4606      	mov	r6, r0
 8018a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d06e      	beq.n	8018b3e <_dtoa_r+0x90e>
 8018a60:	ee18 0a10 	vmov	r0, s16
 8018a64:	4631      	mov	r1, r6
 8018a66:	f000 fe7f 	bl	8019768 <__mcmp>
 8018a6a:	2800      	cmp	r0, #0
 8018a6c:	da67      	bge.n	8018b3e <_dtoa_r+0x90e>
 8018a6e:	9b00      	ldr	r3, [sp, #0]
 8018a70:	3b01      	subs	r3, #1
 8018a72:	ee18 1a10 	vmov	r1, s16
 8018a76:	9300      	str	r3, [sp, #0]
 8018a78:	220a      	movs	r2, #10
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	4620      	mov	r0, r4
 8018a7e:	f000 fc53 	bl	8019328 <__multadd>
 8018a82:	9b08      	ldr	r3, [sp, #32]
 8018a84:	ee08 0a10 	vmov	s16, r0
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	f000 81b1 	beq.w	8018df0 <_dtoa_r+0xbc0>
 8018a8e:	2300      	movs	r3, #0
 8018a90:	4639      	mov	r1, r7
 8018a92:	220a      	movs	r2, #10
 8018a94:	4620      	mov	r0, r4
 8018a96:	f000 fc47 	bl	8019328 <__multadd>
 8018a9a:	9b02      	ldr	r3, [sp, #8]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	4607      	mov	r7, r0
 8018aa0:	f300 808e 	bgt.w	8018bc0 <_dtoa_r+0x990>
 8018aa4:	9b06      	ldr	r3, [sp, #24]
 8018aa6:	2b02      	cmp	r3, #2
 8018aa8:	dc51      	bgt.n	8018b4e <_dtoa_r+0x91e>
 8018aaa:	e089      	b.n	8018bc0 <_dtoa_r+0x990>
 8018aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018ab2:	e74b      	b.n	801894c <_dtoa_r+0x71c>
 8018ab4:	9b03      	ldr	r3, [sp, #12]
 8018ab6:	1e5e      	subs	r6, r3, #1
 8018ab8:	9b07      	ldr	r3, [sp, #28]
 8018aba:	42b3      	cmp	r3, r6
 8018abc:	bfbf      	itttt	lt
 8018abe:	9b07      	ldrlt	r3, [sp, #28]
 8018ac0:	9607      	strlt	r6, [sp, #28]
 8018ac2:	1af2      	sublt	r2, r6, r3
 8018ac4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8018ac6:	bfb6      	itet	lt
 8018ac8:	189b      	addlt	r3, r3, r2
 8018aca:	1b9e      	subge	r6, r3, r6
 8018acc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8018ace:	9b03      	ldr	r3, [sp, #12]
 8018ad0:	bfb8      	it	lt
 8018ad2:	2600      	movlt	r6, #0
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	bfb7      	itett	lt
 8018ad8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8018adc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8018ae0:	1a9d      	sublt	r5, r3, r2
 8018ae2:	2300      	movlt	r3, #0
 8018ae4:	e734      	b.n	8018950 <_dtoa_r+0x720>
 8018ae6:	9e07      	ldr	r6, [sp, #28]
 8018ae8:	9d04      	ldr	r5, [sp, #16]
 8018aea:	9f08      	ldr	r7, [sp, #32]
 8018aec:	e73b      	b.n	8018966 <_dtoa_r+0x736>
 8018aee:	9a07      	ldr	r2, [sp, #28]
 8018af0:	e767      	b.n	80189c2 <_dtoa_r+0x792>
 8018af2:	9b06      	ldr	r3, [sp, #24]
 8018af4:	2b01      	cmp	r3, #1
 8018af6:	dc18      	bgt.n	8018b2a <_dtoa_r+0x8fa>
 8018af8:	f1ba 0f00 	cmp.w	sl, #0
 8018afc:	d115      	bne.n	8018b2a <_dtoa_r+0x8fa>
 8018afe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018b02:	b993      	cbnz	r3, 8018b2a <_dtoa_r+0x8fa>
 8018b04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018b08:	0d1b      	lsrs	r3, r3, #20
 8018b0a:	051b      	lsls	r3, r3, #20
 8018b0c:	b183      	cbz	r3, 8018b30 <_dtoa_r+0x900>
 8018b0e:	9b04      	ldr	r3, [sp, #16]
 8018b10:	3301      	adds	r3, #1
 8018b12:	9304      	str	r3, [sp, #16]
 8018b14:	9b05      	ldr	r3, [sp, #20]
 8018b16:	3301      	adds	r3, #1
 8018b18:	9305      	str	r3, [sp, #20]
 8018b1a:	f04f 0801 	mov.w	r8, #1
 8018b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	f47f af6a 	bne.w	80189fa <_dtoa_r+0x7ca>
 8018b26:	2001      	movs	r0, #1
 8018b28:	e76f      	b.n	8018a0a <_dtoa_r+0x7da>
 8018b2a:	f04f 0800 	mov.w	r8, #0
 8018b2e:	e7f6      	b.n	8018b1e <_dtoa_r+0x8ee>
 8018b30:	4698      	mov	r8, r3
 8018b32:	e7f4      	b.n	8018b1e <_dtoa_r+0x8ee>
 8018b34:	f43f af7d 	beq.w	8018a32 <_dtoa_r+0x802>
 8018b38:	4618      	mov	r0, r3
 8018b3a:	301c      	adds	r0, #28
 8018b3c:	e772      	b.n	8018a24 <_dtoa_r+0x7f4>
 8018b3e:	9b03      	ldr	r3, [sp, #12]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	dc37      	bgt.n	8018bb4 <_dtoa_r+0x984>
 8018b44:	9b06      	ldr	r3, [sp, #24]
 8018b46:	2b02      	cmp	r3, #2
 8018b48:	dd34      	ble.n	8018bb4 <_dtoa_r+0x984>
 8018b4a:	9b03      	ldr	r3, [sp, #12]
 8018b4c:	9302      	str	r3, [sp, #8]
 8018b4e:	9b02      	ldr	r3, [sp, #8]
 8018b50:	b96b      	cbnz	r3, 8018b6e <_dtoa_r+0x93e>
 8018b52:	4631      	mov	r1, r6
 8018b54:	2205      	movs	r2, #5
 8018b56:	4620      	mov	r0, r4
 8018b58:	f000 fbe6 	bl	8019328 <__multadd>
 8018b5c:	4601      	mov	r1, r0
 8018b5e:	4606      	mov	r6, r0
 8018b60:	ee18 0a10 	vmov	r0, s16
 8018b64:	f000 fe00 	bl	8019768 <__mcmp>
 8018b68:	2800      	cmp	r0, #0
 8018b6a:	f73f adbb 	bgt.w	80186e4 <_dtoa_r+0x4b4>
 8018b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b70:	9d01      	ldr	r5, [sp, #4]
 8018b72:	43db      	mvns	r3, r3
 8018b74:	9300      	str	r3, [sp, #0]
 8018b76:	f04f 0800 	mov.w	r8, #0
 8018b7a:	4631      	mov	r1, r6
 8018b7c:	4620      	mov	r0, r4
 8018b7e:	f000 fbb1 	bl	80192e4 <_Bfree>
 8018b82:	2f00      	cmp	r7, #0
 8018b84:	f43f aea4 	beq.w	80188d0 <_dtoa_r+0x6a0>
 8018b88:	f1b8 0f00 	cmp.w	r8, #0
 8018b8c:	d005      	beq.n	8018b9a <_dtoa_r+0x96a>
 8018b8e:	45b8      	cmp	r8, r7
 8018b90:	d003      	beq.n	8018b9a <_dtoa_r+0x96a>
 8018b92:	4641      	mov	r1, r8
 8018b94:	4620      	mov	r0, r4
 8018b96:	f000 fba5 	bl	80192e4 <_Bfree>
 8018b9a:	4639      	mov	r1, r7
 8018b9c:	4620      	mov	r0, r4
 8018b9e:	f000 fba1 	bl	80192e4 <_Bfree>
 8018ba2:	e695      	b.n	80188d0 <_dtoa_r+0x6a0>
 8018ba4:	2600      	movs	r6, #0
 8018ba6:	4637      	mov	r7, r6
 8018ba8:	e7e1      	b.n	8018b6e <_dtoa_r+0x93e>
 8018baa:	9700      	str	r7, [sp, #0]
 8018bac:	4637      	mov	r7, r6
 8018bae:	e599      	b.n	80186e4 <_dtoa_r+0x4b4>
 8018bb0:	40240000 	.word	0x40240000
 8018bb4:	9b08      	ldr	r3, [sp, #32]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	f000 80ca 	beq.w	8018d50 <_dtoa_r+0xb20>
 8018bbc:	9b03      	ldr	r3, [sp, #12]
 8018bbe:	9302      	str	r3, [sp, #8]
 8018bc0:	2d00      	cmp	r5, #0
 8018bc2:	dd05      	ble.n	8018bd0 <_dtoa_r+0x9a0>
 8018bc4:	4639      	mov	r1, r7
 8018bc6:	462a      	mov	r2, r5
 8018bc8:	4620      	mov	r0, r4
 8018bca:	f000 fd5d 	bl	8019688 <__lshift>
 8018bce:	4607      	mov	r7, r0
 8018bd0:	f1b8 0f00 	cmp.w	r8, #0
 8018bd4:	d05b      	beq.n	8018c8e <_dtoa_r+0xa5e>
 8018bd6:	6879      	ldr	r1, [r7, #4]
 8018bd8:	4620      	mov	r0, r4
 8018bda:	f000 fb43 	bl	8019264 <_Balloc>
 8018bde:	4605      	mov	r5, r0
 8018be0:	b928      	cbnz	r0, 8018bee <_dtoa_r+0x9be>
 8018be2:	4b87      	ldr	r3, [pc, #540]	; (8018e00 <_dtoa_r+0xbd0>)
 8018be4:	4602      	mov	r2, r0
 8018be6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018bea:	f7ff bb3b 	b.w	8018264 <_dtoa_r+0x34>
 8018bee:	693a      	ldr	r2, [r7, #16]
 8018bf0:	3202      	adds	r2, #2
 8018bf2:	0092      	lsls	r2, r2, #2
 8018bf4:	f107 010c 	add.w	r1, r7, #12
 8018bf8:	300c      	adds	r0, #12
 8018bfa:	f7fe fc85 	bl	8017508 <memcpy>
 8018bfe:	2201      	movs	r2, #1
 8018c00:	4629      	mov	r1, r5
 8018c02:	4620      	mov	r0, r4
 8018c04:	f000 fd40 	bl	8019688 <__lshift>
 8018c08:	9b01      	ldr	r3, [sp, #4]
 8018c0a:	f103 0901 	add.w	r9, r3, #1
 8018c0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018c12:	4413      	add	r3, r2
 8018c14:	9305      	str	r3, [sp, #20]
 8018c16:	f00a 0301 	and.w	r3, sl, #1
 8018c1a:	46b8      	mov	r8, r7
 8018c1c:	9304      	str	r3, [sp, #16]
 8018c1e:	4607      	mov	r7, r0
 8018c20:	4631      	mov	r1, r6
 8018c22:	ee18 0a10 	vmov	r0, s16
 8018c26:	f7ff fa75 	bl	8018114 <quorem>
 8018c2a:	4641      	mov	r1, r8
 8018c2c:	9002      	str	r0, [sp, #8]
 8018c2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8018c32:	ee18 0a10 	vmov	r0, s16
 8018c36:	f000 fd97 	bl	8019768 <__mcmp>
 8018c3a:	463a      	mov	r2, r7
 8018c3c:	9003      	str	r0, [sp, #12]
 8018c3e:	4631      	mov	r1, r6
 8018c40:	4620      	mov	r0, r4
 8018c42:	f000 fdad 	bl	80197a0 <__mdiff>
 8018c46:	68c2      	ldr	r2, [r0, #12]
 8018c48:	f109 3bff 	add.w	fp, r9, #4294967295
 8018c4c:	4605      	mov	r5, r0
 8018c4e:	bb02      	cbnz	r2, 8018c92 <_dtoa_r+0xa62>
 8018c50:	4601      	mov	r1, r0
 8018c52:	ee18 0a10 	vmov	r0, s16
 8018c56:	f000 fd87 	bl	8019768 <__mcmp>
 8018c5a:	4602      	mov	r2, r0
 8018c5c:	4629      	mov	r1, r5
 8018c5e:	4620      	mov	r0, r4
 8018c60:	9207      	str	r2, [sp, #28]
 8018c62:	f000 fb3f 	bl	80192e4 <_Bfree>
 8018c66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018c6a:	ea43 0102 	orr.w	r1, r3, r2
 8018c6e:	9b04      	ldr	r3, [sp, #16]
 8018c70:	430b      	orrs	r3, r1
 8018c72:	464d      	mov	r5, r9
 8018c74:	d10f      	bne.n	8018c96 <_dtoa_r+0xa66>
 8018c76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018c7a:	d02a      	beq.n	8018cd2 <_dtoa_r+0xaa2>
 8018c7c:	9b03      	ldr	r3, [sp, #12]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	dd02      	ble.n	8018c88 <_dtoa_r+0xa58>
 8018c82:	9b02      	ldr	r3, [sp, #8]
 8018c84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8018c88:	f88b a000 	strb.w	sl, [fp]
 8018c8c:	e775      	b.n	8018b7a <_dtoa_r+0x94a>
 8018c8e:	4638      	mov	r0, r7
 8018c90:	e7ba      	b.n	8018c08 <_dtoa_r+0x9d8>
 8018c92:	2201      	movs	r2, #1
 8018c94:	e7e2      	b.n	8018c5c <_dtoa_r+0xa2c>
 8018c96:	9b03      	ldr	r3, [sp, #12]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	db04      	blt.n	8018ca6 <_dtoa_r+0xa76>
 8018c9c:	9906      	ldr	r1, [sp, #24]
 8018c9e:	430b      	orrs	r3, r1
 8018ca0:	9904      	ldr	r1, [sp, #16]
 8018ca2:	430b      	orrs	r3, r1
 8018ca4:	d122      	bne.n	8018cec <_dtoa_r+0xabc>
 8018ca6:	2a00      	cmp	r2, #0
 8018ca8:	ddee      	ble.n	8018c88 <_dtoa_r+0xa58>
 8018caa:	ee18 1a10 	vmov	r1, s16
 8018cae:	2201      	movs	r2, #1
 8018cb0:	4620      	mov	r0, r4
 8018cb2:	f000 fce9 	bl	8019688 <__lshift>
 8018cb6:	4631      	mov	r1, r6
 8018cb8:	ee08 0a10 	vmov	s16, r0
 8018cbc:	f000 fd54 	bl	8019768 <__mcmp>
 8018cc0:	2800      	cmp	r0, #0
 8018cc2:	dc03      	bgt.n	8018ccc <_dtoa_r+0xa9c>
 8018cc4:	d1e0      	bne.n	8018c88 <_dtoa_r+0xa58>
 8018cc6:	f01a 0f01 	tst.w	sl, #1
 8018cca:	d0dd      	beq.n	8018c88 <_dtoa_r+0xa58>
 8018ccc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018cd0:	d1d7      	bne.n	8018c82 <_dtoa_r+0xa52>
 8018cd2:	2339      	movs	r3, #57	; 0x39
 8018cd4:	f88b 3000 	strb.w	r3, [fp]
 8018cd8:	462b      	mov	r3, r5
 8018cda:	461d      	mov	r5, r3
 8018cdc:	3b01      	subs	r3, #1
 8018cde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018ce2:	2a39      	cmp	r2, #57	; 0x39
 8018ce4:	d071      	beq.n	8018dca <_dtoa_r+0xb9a>
 8018ce6:	3201      	adds	r2, #1
 8018ce8:	701a      	strb	r2, [r3, #0]
 8018cea:	e746      	b.n	8018b7a <_dtoa_r+0x94a>
 8018cec:	2a00      	cmp	r2, #0
 8018cee:	dd07      	ble.n	8018d00 <_dtoa_r+0xad0>
 8018cf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018cf4:	d0ed      	beq.n	8018cd2 <_dtoa_r+0xaa2>
 8018cf6:	f10a 0301 	add.w	r3, sl, #1
 8018cfa:	f88b 3000 	strb.w	r3, [fp]
 8018cfe:	e73c      	b.n	8018b7a <_dtoa_r+0x94a>
 8018d00:	9b05      	ldr	r3, [sp, #20]
 8018d02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8018d06:	4599      	cmp	r9, r3
 8018d08:	d047      	beq.n	8018d9a <_dtoa_r+0xb6a>
 8018d0a:	ee18 1a10 	vmov	r1, s16
 8018d0e:	2300      	movs	r3, #0
 8018d10:	220a      	movs	r2, #10
 8018d12:	4620      	mov	r0, r4
 8018d14:	f000 fb08 	bl	8019328 <__multadd>
 8018d18:	45b8      	cmp	r8, r7
 8018d1a:	ee08 0a10 	vmov	s16, r0
 8018d1e:	f04f 0300 	mov.w	r3, #0
 8018d22:	f04f 020a 	mov.w	r2, #10
 8018d26:	4641      	mov	r1, r8
 8018d28:	4620      	mov	r0, r4
 8018d2a:	d106      	bne.n	8018d3a <_dtoa_r+0xb0a>
 8018d2c:	f000 fafc 	bl	8019328 <__multadd>
 8018d30:	4680      	mov	r8, r0
 8018d32:	4607      	mov	r7, r0
 8018d34:	f109 0901 	add.w	r9, r9, #1
 8018d38:	e772      	b.n	8018c20 <_dtoa_r+0x9f0>
 8018d3a:	f000 faf5 	bl	8019328 <__multadd>
 8018d3e:	4639      	mov	r1, r7
 8018d40:	4680      	mov	r8, r0
 8018d42:	2300      	movs	r3, #0
 8018d44:	220a      	movs	r2, #10
 8018d46:	4620      	mov	r0, r4
 8018d48:	f000 faee 	bl	8019328 <__multadd>
 8018d4c:	4607      	mov	r7, r0
 8018d4e:	e7f1      	b.n	8018d34 <_dtoa_r+0xb04>
 8018d50:	9b03      	ldr	r3, [sp, #12]
 8018d52:	9302      	str	r3, [sp, #8]
 8018d54:	9d01      	ldr	r5, [sp, #4]
 8018d56:	ee18 0a10 	vmov	r0, s16
 8018d5a:	4631      	mov	r1, r6
 8018d5c:	f7ff f9da 	bl	8018114 <quorem>
 8018d60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8018d64:	9b01      	ldr	r3, [sp, #4]
 8018d66:	f805 ab01 	strb.w	sl, [r5], #1
 8018d6a:	1aea      	subs	r2, r5, r3
 8018d6c:	9b02      	ldr	r3, [sp, #8]
 8018d6e:	4293      	cmp	r3, r2
 8018d70:	dd09      	ble.n	8018d86 <_dtoa_r+0xb56>
 8018d72:	ee18 1a10 	vmov	r1, s16
 8018d76:	2300      	movs	r3, #0
 8018d78:	220a      	movs	r2, #10
 8018d7a:	4620      	mov	r0, r4
 8018d7c:	f000 fad4 	bl	8019328 <__multadd>
 8018d80:	ee08 0a10 	vmov	s16, r0
 8018d84:	e7e7      	b.n	8018d56 <_dtoa_r+0xb26>
 8018d86:	9b02      	ldr	r3, [sp, #8]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	bfc8      	it	gt
 8018d8c:	461d      	movgt	r5, r3
 8018d8e:	9b01      	ldr	r3, [sp, #4]
 8018d90:	bfd8      	it	le
 8018d92:	2501      	movle	r5, #1
 8018d94:	441d      	add	r5, r3
 8018d96:	f04f 0800 	mov.w	r8, #0
 8018d9a:	ee18 1a10 	vmov	r1, s16
 8018d9e:	2201      	movs	r2, #1
 8018da0:	4620      	mov	r0, r4
 8018da2:	f000 fc71 	bl	8019688 <__lshift>
 8018da6:	4631      	mov	r1, r6
 8018da8:	ee08 0a10 	vmov	s16, r0
 8018dac:	f000 fcdc 	bl	8019768 <__mcmp>
 8018db0:	2800      	cmp	r0, #0
 8018db2:	dc91      	bgt.n	8018cd8 <_dtoa_r+0xaa8>
 8018db4:	d102      	bne.n	8018dbc <_dtoa_r+0xb8c>
 8018db6:	f01a 0f01 	tst.w	sl, #1
 8018dba:	d18d      	bne.n	8018cd8 <_dtoa_r+0xaa8>
 8018dbc:	462b      	mov	r3, r5
 8018dbe:	461d      	mov	r5, r3
 8018dc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018dc4:	2a30      	cmp	r2, #48	; 0x30
 8018dc6:	d0fa      	beq.n	8018dbe <_dtoa_r+0xb8e>
 8018dc8:	e6d7      	b.n	8018b7a <_dtoa_r+0x94a>
 8018dca:	9a01      	ldr	r2, [sp, #4]
 8018dcc:	429a      	cmp	r2, r3
 8018dce:	d184      	bne.n	8018cda <_dtoa_r+0xaaa>
 8018dd0:	9b00      	ldr	r3, [sp, #0]
 8018dd2:	3301      	adds	r3, #1
 8018dd4:	9300      	str	r3, [sp, #0]
 8018dd6:	2331      	movs	r3, #49	; 0x31
 8018dd8:	7013      	strb	r3, [r2, #0]
 8018dda:	e6ce      	b.n	8018b7a <_dtoa_r+0x94a>
 8018ddc:	4b09      	ldr	r3, [pc, #36]	; (8018e04 <_dtoa_r+0xbd4>)
 8018dde:	f7ff ba95 	b.w	801830c <_dtoa_r+0xdc>
 8018de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	f47f aa6e 	bne.w	80182c6 <_dtoa_r+0x96>
 8018dea:	4b07      	ldr	r3, [pc, #28]	; (8018e08 <_dtoa_r+0xbd8>)
 8018dec:	f7ff ba8e 	b.w	801830c <_dtoa_r+0xdc>
 8018df0:	9b02      	ldr	r3, [sp, #8]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	dcae      	bgt.n	8018d54 <_dtoa_r+0xb24>
 8018df6:	9b06      	ldr	r3, [sp, #24]
 8018df8:	2b02      	cmp	r3, #2
 8018dfa:	f73f aea8 	bgt.w	8018b4e <_dtoa_r+0x91e>
 8018dfe:	e7a9      	b.n	8018d54 <_dtoa_r+0xb24>
 8018e00:	0804e05f 	.word	0x0804e05f
 8018e04:	0804dfbc 	.word	0x0804dfbc
 8018e08:	0804dfe0 	.word	0x0804dfe0

08018e0c <__sflush_r>:
 8018e0c:	898a      	ldrh	r2, [r1, #12]
 8018e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e12:	4605      	mov	r5, r0
 8018e14:	0710      	lsls	r0, r2, #28
 8018e16:	460c      	mov	r4, r1
 8018e18:	d458      	bmi.n	8018ecc <__sflush_r+0xc0>
 8018e1a:	684b      	ldr	r3, [r1, #4]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	dc05      	bgt.n	8018e2c <__sflush_r+0x20>
 8018e20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	dc02      	bgt.n	8018e2c <__sflush_r+0x20>
 8018e26:	2000      	movs	r0, #0
 8018e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018e2e:	2e00      	cmp	r6, #0
 8018e30:	d0f9      	beq.n	8018e26 <__sflush_r+0x1a>
 8018e32:	2300      	movs	r3, #0
 8018e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018e38:	682f      	ldr	r7, [r5, #0]
 8018e3a:	602b      	str	r3, [r5, #0]
 8018e3c:	d032      	beq.n	8018ea4 <__sflush_r+0x98>
 8018e3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018e40:	89a3      	ldrh	r3, [r4, #12]
 8018e42:	075a      	lsls	r2, r3, #29
 8018e44:	d505      	bpl.n	8018e52 <__sflush_r+0x46>
 8018e46:	6863      	ldr	r3, [r4, #4]
 8018e48:	1ac0      	subs	r0, r0, r3
 8018e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018e4c:	b10b      	cbz	r3, 8018e52 <__sflush_r+0x46>
 8018e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018e50:	1ac0      	subs	r0, r0, r3
 8018e52:	2300      	movs	r3, #0
 8018e54:	4602      	mov	r2, r0
 8018e56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018e58:	6a21      	ldr	r1, [r4, #32]
 8018e5a:	4628      	mov	r0, r5
 8018e5c:	47b0      	blx	r6
 8018e5e:	1c43      	adds	r3, r0, #1
 8018e60:	89a3      	ldrh	r3, [r4, #12]
 8018e62:	d106      	bne.n	8018e72 <__sflush_r+0x66>
 8018e64:	6829      	ldr	r1, [r5, #0]
 8018e66:	291d      	cmp	r1, #29
 8018e68:	d82c      	bhi.n	8018ec4 <__sflush_r+0xb8>
 8018e6a:	4a2a      	ldr	r2, [pc, #168]	; (8018f14 <__sflush_r+0x108>)
 8018e6c:	40ca      	lsrs	r2, r1
 8018e6e:	07d6      	lsls	r6, r2, #31
 8018e70:	d528      	bpl.n	8018ec4 <__sflush_r+0xb8>
 8018e72:	2200      	movs	r2, #0
 8018e74:	6062      	str	r2, [r4, #4]
 8018e76:	04d9      	lsls	r1, r3, #19
 8018e78:	6922      	ldr	r2, [r4, #16]
 8018e7a:	6022      	str	r2, [r4, #0]
 8018e7c:	d504      	bpl.n	8018e88 <__sflush_r+0x7c>
 8018e7e:	1c42      	adds	r2, r0, #1
 8018e80:	d101      	bne.n	8018e86 <__sflush_r+0x7a>
 8018e82:	682b      	ldr	r3, [r5, #0]
 8018e84:	b903      	cbnz	r3, 8018e88 <__sflush_r+0x7c>
 8018e86:	6560      	str	r0, [r4, #84]	; 0x54
 8018e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e8a:	602f      	str	r7, [r5, #0]
 8018e8c:	2900      	cmp	r1, #0
 8018e8e:	d0ca      	beq.n	8018e26 <__sflush_r+0x1a>
 8018e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e94:	4299      	cmp	r1, r3
 8018e96:	d002      	beq.n	8018e9e <__sflush_r+0x92>
 8018e98:	4628      	mov	r0, r5
 8018e9a:	f000 fd7d 	bl	8019998 <_free_r>
 8018e9e:	2000      	movs	r0, #0
 8018ea0:	6360      	str	r0, [r4, #52]	; 0x34
 8018ea2:	e7c1      	b.n	8018e28 <__sflush_r+0x1c>
 8018ea4:	6a21      	ldr	r1, [r4, #32]
 8018ea6:	2301      	movs	r3, #1
 8018ea8:	4628      	mov	r0, r5
 8018eaa:	47b0      	blx	r6
 8018eac:	1c41      	adds	r1, r0, #1
 8018eae:	d1c7      	bne.n	8018e40 <__sflush_r+0x34>
 8018eb0:	682b      	ldr	r3, [r5, #0]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d0c4      	beq.n	8018e40 <__sflush_r+0x34>
 8018eb6:	2b1d      	cmp	r3, #29
 8018eb8:	d001      	beq.n	8018ebe <__sflush_r+0xb2>
 8018eba:	2b16      	cmp	r3, #22
 8018ebc:	d101      	bne.n	8018ec2 <__sflush_r+0xb6>
 8018ebe:	602f      	str	r7, [r5, #0]
 8018ec0:	e7b1      	b.n	8018e26 <__sflush_r+0x1a>
 8018ec2:	89a3      	ldrh	r3, [r4, #12]
 8018ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018ec8:	81a3      	strh	r3, [r4, #12]
 8018eca:	e7ad      	b.n	8018e28 <__sflush_r+0x1c>
 8018ecc:	690f      	ldr	r7, [r1, #16]
 8018ece:	2f00      	cmp	r7, #0
 8018ed0:	d0a9      	beq.n	8018e26 <__sflush_r+0x1a>
 8018ed2:	0793      	lsls	r3, r2, #30
 8018ed4:	680e      	ldr	r6, [r1, #0]
 8018ed6:	bf08      	it	eq
 8018ed8:	694b      	ldreq	r3, [r1, #20]
 8018eda:	600f      	str	r7, [r1, #0]
 8018edc:	bf18      	it	ne
 8018ede:	2300      	movne	r3, #0
 8018ee0:	eba6 0807 	sub.w	r8, r6, r7
 8018ee4:	608b      	str	r3, [r1, #8]
 8018ee6:	f1b8 0f00 	cmp.w	r8, #0
 8018eea:	dd9c      	ble.n	8018e26 <__sflush_r+0x1a>
 8018eec:	6a21      	ldr	r1, [r4, #32]
 8018eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018ef0:	4643      	mov	r3, r8
 8018ef2:	463a      	mov	r2, r7
 8018ef4:	4628      	mov	r0, r5
 8018ef6:	47b0      	blx	r6
 8018ef8:	2800      	cmp	r0, #0
 8018efa:	dc06      	bgt.n	8018f0a <__sflush_r+0xfe>
 8018efc:	89a3      	ldrh	r3, [r4, #12]
 8018efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f02:	81a3      	strh	r3, [r4, #12]
 8018f04:	f04f 30ff 	mov.w	r0, #4294967295
 8018f08:	e78e      	b.n	8018e28 <__sflush_r+0x1c>
 8018f0a:	4407      	add	r7, r0
 8018f0c:	eba8 0800 	sub.w	r8, r8, r0
 8018f10:	e7e9      	b.n	8018ee6 <__sflush_r+0xda>
 8018f12:	bf00      	nop
 8018f14:	20400001 	.word	0x20400001

08018f18 <_fflush_r>:
 8018f18:	b538      	push	{r3, r4, r5, lr}
 8018f1a:	690b      	ldr	r3, [r1, #16]
 8018f1c:	4605      	mov	r5, r0
 8018f1e:	460c      	mov	r4, r1
 8018f20:	b913      	cbnz	r3, 8018f28 <_fflush_r+0x10>
 8018f22:	2500      	movs	r5, #0
 8018f24:	4628      	mov	r0, r5
 8018f26:	bd38      	pop	{r3, r4, r5, pc}
 8018f28:	b118      	cbz	r0, 8018f32 <_fflush_r+0x1a>
 8018f2a:	6983      	ldr	r3, [r0, #24]
 8018f2c:	b90b      	cbnz	r3, 8018f32 <_fflush_r+0x1a>
 8018f2e:	f000 f887 	bl	8019040 <__sinit>
 8018f32:	4b14      	ldr	r3, [pc, #80]	; (8018f84 <_fflush_r+0x6c>)
 8018f34:	429c      	cmp	r4, r3
 8018f36:	d11b      	bne.n	8018f70 <_fflush_r+0x58>
 8018f38:	686c      	ldr	r4, [r5, #4]
 8018f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d0ef      	beq.n	8018f22 <_fflush_r+0xa>
 8018f42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018f44:	07d0      	lsls	r0, r2, #31
 8018f46:	d404      	bmi.n	8018f52 <_fflush_r+0x3a>
 8018f48:	0599      	lsls	r1, r3, #22
 8018f4a:	d402      	bmi.n	8018f52 <_fflush_r+0x3a>
 8018f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018f4e:	f000 f91a 	bl	8019186 <__retarget_lock_acquire_recursive>
 8018f52:	4628      	mov	r0, r5
 8018f54:	4621      	mov	r1, r4
 8018f56:	f7ff ff59 	bl	8018e0c <__sflush_r>
 8018f5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018f5c:	07da      	lsls	r2, r3, #31
 8018f5e:	4605      	mov	r5, r0
 8018f60:	d4e0      	bmi.n	8018f24 <_fflush_r+0xc>
 8018f62:	89a3      	ldrh	r3, [r4, #12]
 8018f64:	059b      	lsls	r3, r3, #22
 8018f66:	d4dd      	bmi.n	8018f24 <_fflush_r+0xc>
 8018f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018f6a:	f000 f90d 	bl	8019188 <__retarget_lock_release_recursive>
 8018f6e:	e7d9      	b.n	8018f24 <_fflush_r+0xc>
 8018f70:	4b05      	ldr	r3, [pc, #20]	; (8018f88 <_fflush_r+0x70>)
 8018f72:	429c      	cmp	r4, r3
 8018f74:	d101      	bne.n	8018f7a <_fflush_r+0x62>
 8018f76:	68ac      	ldr	r4, [r5, #8]
 8018f78:	e7df      	b.n	8018f3a <_fflush_r+0x22>
 8018f7a:	4b04      	ldr	r3, [pc, #16]	; (8018f8c <_fflush_r+0x74>)
 8018f7c:	429c      	cmp	r4, r3
 8018f7e:	bf08      	it	eq
 8018f80:	68ec      	ldreq	r4, [r5, #12]
 8018f82:	e7da      	b.n	8018f3a <_fflush_r+0x22>
 8018f84:	0804e090 	.word	0x0804e090
 8018f88:	0804e0b0 	.word	0x0804e0b0
 8018f8c:	0804e070 	.word	0x0804e070

08018f90 <std>:
 8018f90:	2300      	movs	r3, #0
 8018f92:	b510      	push	{r4, lr}
 8018f94:	4604      	mov	r4, r0
 8018f96:	e9c0 3300 	strd	r3, r3, [r0]
 8018f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018f9e:	6083      	str	r3, [r0, #8]
 8018fa0:	8181      	strh	r1, [r0, #12]
 8018fa2:	6643      	str	r3, [r0, #100]	; 0x64
 8018fa4:	81c2      	strh	r2, [r0, #14]
 8018fa6:	6183      	str	r3, [r0, #24]
 8018fa8:	4619      	mov	r1, r3
 8018faa:	2208      	movs	r2, #8
 8018fac:	305c      	adds	r0, #92	; 0x5c
 8018fae:	f7fe fab9 	bl	8017524 <memset>
 8018fb2:	4b05      	ldr	r3, [pc, #20]	; (8018fc8 <std+0x38>)
 8018fb4:	6263      	str	r3, [r4, #36]	; 0x24
 8018fb6:	4b05      	ldr	r3, [pc, #20]	; (8018fcc <std+0x3c>)
 8018fb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8018fba:	4b05      	ldr	r3, [pc, #20]	; (8018fd0 <std+0x40>)
 8018fbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018fbe:	4b05      	ldr	r3, [pc, #20]	; (8018fd4 <std+0x44>)
 8018fc0:	6224      	str	r4, [r4, #32]
 8018fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8018fc4:	bd10      	pop	{r4, pc}
 8018fc6:	bf00      	nop
 8018fc8:	0801a0e5 	.word	0x0801a0e5
 8018fcc:	0801a107 	.word	0x0801a107
 8018fd0:	0801a13f 	.word	0x0801a13f
 8018fd4:	0801a163 	.word	0x0801a163

08018fd8 <_cleanup_r>:
 8018fd8:	4901      	ldr	r1, [pc, #4]	; (8018fe0 <_cleanup_r+0x8>)
 8018fda:	f000 b8af 	b.w	801913c <_fwalk_reent>
 8018fde:	bf00      	nop
 8018fe0:	08018f19 	.word	0x08018f19

08018fe4 <__sfmoreglue>:
 8018fe4:	b570      	push	{r4, r5, r6, lr}
 8018fe6:	2268      	movs	r2, #104	; 0x68
 8018fe8:	1e4d      	subs	r5, r1, #1
 8018fea:	4355      	muls	r5, r2
 8018fec:	460e      	mov	r6, r1
 8018fee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018ff2:	f000 fd3d 	bl	8019a70 <_malloc_r>
 8018ff6:	4604      	mov	r4, r0
 8018ff8:	b140      	cbz	r0, 801900c <__sfmoreglue+0x28>
 8018ffa:	2100      	movs	r1, #0
 8018ffc:	e9c0 1600 	strd	r1, r6, [r0]
 8019000:	300c      	adds	r0, #12
 8019002:	60a0      	str	r0, [r4, #8]
 8019004:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019008:	f7fe fa8c 	bl	8017524 <memset>
 801900c:	4620      	mov	r0, r4
 801900e:	bd70      	pop	{r4, r5, r6, pc}

08019010 <__sfp_lock_acquire>:
 8019010:	4801      	ldr	r0, [pc, #4]	; (8019018 <__sfp_lock_acquire+0x8>)
 8019012:	f000 b8b8 	b.w	8019186 <__retarget_lock_acquire_recursive>
 8019016:	bf00      	nop
 8019018:	2001f819 	.word	0x2001f819

0801901c <__sfp_lock_release>:
 801901c:	4801      	ldr	r0, [pc, #4]	; (8019024 <__sfp_lock_release+0x8>)
 801901e:	f000 b8b3 	b.w	8019188 <__retarget_lock_release_recursive>
 8019022:	bf00      	nop
 8019024:	2001f819 	.word	0x2001f819

08019028 <__sinit_lock_acquire>:
 8019028:	4801      	ldr	r0, [pc, #4]	; (8019030 <__sinit_lock_acquire+0x8>)
 801902a:	f000 b8ac 	b.w	8019186 <__retarget_lock_acquire_recursive>
 801902e:	bf00      	nop
 8019030:	2001f81a 	.word	0x2001f81a

08019034 <__sinit_lock_release>:
 8019034:	4801      	ldr	r0, [pc, #4]	; (801903c <__sinit_lock_release+0x8>)
 8019036:	f000 b8a7 	b.w	8019188 <__retarget_lock_release_recursive>
 801903a:	bf00      	nop
 801903c:	2001f81a 	.word	0x2001f81a

08019040 <__sinit>:
 8019040:	b510      	push	{r4, lr}
 8019042:	4604      	mov	r4, r0
 8019044:	f7ff fff0 	bl	8019028 <__sinit_lock_acquire>
 8019048:	69a3      	ldr	r3, [r4, #24]
 801904a:	b11b      	cbz	r3, 8019054 <__sinit+0x14>
 801904c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019050:	f7ff bff0 	b.w	8019034 <__sinit_lock_release>
 8019054:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019058:	6523      	str	r3, [r4, #80]	; 0x50
 801905a:	4b13      	ldr	r3, [pc, #76]	; (80190a8 <__sinit+0x68>)
 801905c:	4a13      	ldr	r2, [pc, #76]	; (80190ac <__sinit+0x6c>)
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	62a2      	str	r2, [r4, #40]	; 0x28
 8019062:	42a3      	cmp	r3, r4
 8019064:	bf04      	itt	eq
 8019066:	2301      	moveq	r3, #1
 8019068:	61a3      	streq	r3, [r4, #24]
 801906a:	4620      	mov	r0, r4
 801906c:	f000 f820 	bl	80190b0 <__sfp>
 8019070:	6060      	str	r0, [r4, #4]
 8019072:	4620      	mov	r0, r4
 8019074:	f000 f81c 	bl	80190b0 <__sfp>
 8019078:	60a0      	str	r0, [r4, #8]
 801907a:	4620      	mov	r0, r4
 801907c:	f000 f818 	bl	80190b0 <__sfp>
 8019080:	2200      	movs	r2, #0
 8019082:	60e0      	str	r0, [r4, #12]
 8019084:	2104      	movs	r1, #4
 8019086:	6860      	ldr	r0, [r4, #4]
 8019088:	f7ff ff82 	bl	8018f90 <std>
 801908c:	68a0      	ldr	r0, [r4, #8]
 801908e:	2201      	movs	r2, #1
 8019090:	2109      	movs	r1, #9
 8019092:	f7ff ff7d 	bl	8018f90 <std>
 8019096:	68e0      	ldr	r0, [r4, #12]
 8019098:	2202      	movs	r2, #2
 801909a:	2112      	movs	r1, #18
 801909c:	f7ff ff78 	bl	8018f90 <std>
 80190a0:	2301      	movs	r3, #1
 80190a2:	61a3      	str	r3, [r4, #24]
 80190a4:	e7d2      	b.n	801904c <__sinit+0xc>
 80190a6:	bf00      	nop
 80190a8:	0804dfa8 	.word	0x0804dfa8
 80190ac:	08018fd9 	.word	0x08018fd9

080190b0 <__sfp>:
 80190b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190b2:	4607      	mov	r7, r0
 80190b4:	f7ff ffac 	bl	8019010 <__sfp_lock_acquire>
 80190b8:	4b1e      	ldr	r3, [pc, #120]	; (8019134 <__sfp+0x84>)
 80190ba:	681e      	ldr	r6, [r3, #0]
 80190bc:	69b3      	ldr	r3, [r6, #24]
 80190be:	b913      	cbnz	r3, 80190c6 <__sfp+0x16>
 80190c0:	4630      	mov	r0, r6
 80190c2:	f7ff ffbd 	bl	8019040 <__sinit>
 80190c6:	3648      	adds	r6, #72	; 0x48
 80190c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80190cc:	3b01      	subs	r3, #1
 80190ce:	d503      	bpl.n	80190d8 <__sfp+0x28>
 80190d0:	6833      	ldr	r3, [r6, #0]
 80190d2:	b30b      	cbz	r3, 8019118 <__sfp+0x68>
 80190d4:	6836      	ldr	r6, [r6, #0]
 80190d6:	e7f7      	b.n	80190c8 <__sfp+0x18>
 80190d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80190dc:	b9d5      	cbnz	r5, 8019114 <__sfp+0x64>
 80190de:	4b16      	ldr	r3, [pc, #88]	; (8019138 <__sfp+0x88>)
 80190e0:	60e3      	str	r3, [r4, #12]
 80190e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80190e6:	6665      	str	r5, [r4, #100]	; 0x64
 80190e8:	f000 f84c 	bl	8019184 <__retarget_lock_init_recursive>
 80190ec:	f7ff ff96 	bl	801901c <__sfp_lock_release>
 80190f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80190f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80190f8:	6025      	str	r5, [r4, #0]
 80190fa:	61a5      	str	r5, [r4, #24]
 80190fc:	2208      	movs	r2, #8
 80190fe:	4629      	mov	r1, r5
 8019100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019104:	f7fe fa0e 	bl	8017524 <memset>
 8019108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801910c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019110:	4620      	mov	r0, r4
 8019112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019114:	3468      	adds	r4, #104	; 0x68
 8019116:	e7d9      	b.n	80190cc <__sfp+0x1c>
 8019118:	2104      	movs	r1, #4
 801911a:	4638      	mov	r0, r7
 801911c:	f7ff ff62 	bl	8018fe4 <__sfmoreglue>
 8019120:	4604      	mov	r4, r0
 8019122:	6030      	str	r0, [r6, #0]
 8019124:	2800      	cmp	r0, #0
 8019126:	d1d5      	bne.n	80190d4 <__sfp+0x24>
 8019128:	f7ff ff78 	bl	801901c <__sfp_lock_release>
 801912c:	230c      	movs	r3, #12
 801912e:	603b      	str	r3, [r7, #0]
 8019130:	e7ee      	b.n	8019110 <__sfp+0x60>
 8019132:	bf00      	nop
 8019134:	0804dfa8 	.word	0x0804dfa8
 8019138:	ffff0001 	.word	0xffff0001

0801913c <_fwalk_reent>:
 801913c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019140:	4606      	mov	r6, r0
 8019142:	4688      	mov	r8, r1
 8019144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019148:	2700      	movs	r7, #0
 801914a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801914e:	f1b9 0901 	subs.w	r9, r9, #1
 8019152:	d505      	bpl.n	8019160 <_fwalk_reent+0x24>
 8019154:	6824      	ldr	r4, [r4, #0]
 8019156:	2c00      	cmp	r4, #0
 8019158:	d1f7      	bne.n	801914a <_fwalk_reent+0xe>
 801915a:	4638      	mov	r0, r7
 801915c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019160:	89ab      	ldrh	r3, [r5, #12]
 8019162:	2b01      	cmp	r3, #1
 8019164:	d907      	bls.n	8019176 <_fwalk_reent+0x3a>
 8019166:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801916a:	3301      	adds	r3, #1
 801916c:	d003      	beq.n	8019176 <_fwalk_reent+0x3a>
 801916e:	4629      	mov	r1, r5
 8019170:	4630      	mov	r0, r6
 8019172:	47c0      	blx	r8
 8019174:	4307      	orrs	r7, r0
 8019176:	3568      	adds	r5, #104	; 0x68
 8019178:	e7e9      	b.n	801914e <_fwalk_reent+0x12>
	...

0801917c <_localeconv_r>:
 801917c:	4800      	ldr	r0, [pc, #0]	; (8019180 <_localeconv_r+0x4>)
 801917e:	4770      	bx	lr
 8019180:	20000a18 	.word	0x20000a18

08019184 <__retarget_lock_init_recursive>:
 8019184:	4770      	bx	lr

08019186 <__retarget_lock_acquire_recursive>:
 8019186:	4770      	bx	lr

08019188 <__retarget_lock_release_recursive>:
 8019188:	4770      	bx	lr

0801918a <__swhatbuf_r>:
 801918a:	b570      	push	{r4, r5, r6, lr}
 801918c:	460e      	mov	r6, r1
 801918e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019192:	2900      	cmp	r1, #0
 8019194:	b096      	sub	sp, #88	; 0x58
 8019196:	4614      	mov	r4, r2
 8019198:	461d      	mov	r5, r3
 801919a:	da08      	bge.n	80191ae <__swhatbuf_r+0x24>
 801919c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80191a0:	2200      	movs	r2, #0
 80191a2:	602a      	str	r2, [r5, #0]
 80191a4:	061a      	lsls	r2, r3, #24
 80191a6:	d410      	bmi.n	80191ca <__swhatbuf_r+0x40>
 80191a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80191ac:	e00e      	b.n	80191cc <__swhatbuf_r+0x42>
 80191ae:	466a      	mov	r2, sp
 80191b0:	f001 f82e 	bl	801a210 <_fstat_r>
 80191b4:	2800      	cmp	r0, #0
 80191b6:	dbf1      	blt.n	801919c <__swhatbuf_r+0x12>
 80191b8:	9a01      	ldr	r2, [sp, #4]
 80191ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80191be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80191c2:	425a      	negs	r2, r3
 80191c4:	415a      	adcs	r2, r3
 80191c6:	602a      	str	r2, [r5, #0]
 80191c8:	e7ee      	b.n	80191a8 <__swhatbuf_r+0x1e>
 80191ca:	2340      	movs	r3, #64	; 0x40
 80191cc:	2000      	movs	r0, #0
 80191ce:	6023      	str	r3, [r4, #0]
 80191d0:	b016      	add	sp, #88	; 0x58
 80191d2:	bd70      	pop	{r4, r5, r6, pc}

080191d4 <__smakebuf_r>:
 80191d4:	898b      	ldrh	r3, [r1, #12]
 80191d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80191d8:	079d      	lsls	r5, r3, #30
 80191da:	4606      	mov	r6, r0
 80191dc:	460c      	mov	r4, r1
 80191de:	d507      	bpl.n	80191f0 <__smakebuf_r+0x1c>
 80191e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80191e4:	6023      	str	r3, [r4, #0]
 80191e6:	6123      	str	r3, [r4, #16]
 80191e8:	2301      	movs	r3, #1
 80191ea:	6163      	str	r3, [r4, #20]
 80191ec:	b002      	add	sp, #8
 80191ee:	bd70      	pop	{r4, r5, r6, pc}
 80191f0:	ab01      	add	r3, sp, #4
 80191f2:	466a      	mov	r2, sp
 80191f4:	f7ff ffc9 	bl	801918a <__swhatbuf_r>
 80191f8:	9900      	ldr	r1, [sp, #0]
 80191fa:	4605      	mov	r5, r0
 80191fc:	4630      	mov	r0, r6
 80191fe:	f000 fc37 	bl	8019a70 <_malloc_r>
 8019202:	b948      	cbnz	r0, 8019218 <__smakebuf_r+0x44>
 8019204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019208:	059a      	lsls	r2, r3, #22
 801920a:	d4ef      	bmi.n	80191ec <__smakebuf_r+0x18>
 801920c:	f023 0303 	bic.w	r3, r3, #3
 8019210:	f043 0302 	orr.w	r3, r3, #2
 8019214:	81a3      	strh	r3, [r4, #12]
 8019216:	e7e3      	b.n	80191e0 <__smakebuf_r+0xc>
 8019218:	4b0d      	ldr	r3, [pc, #52]	; (8019250 <__smakebuf_r+0x7c>)
 801921a:	62b3      	str	r3, [r6, #40]	; 0x28
 801921c:	89a3      	ldrh	r3, [r4, #12]
 801921e:	6020      	str	r0, [r4, #0]
 8019220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019224:	81a3      	strh	r3, [r4, #12]
 8019226:	9b00      	ldr	r3, [sp, #0]
 8019228:	6163      	str	r3, [r4, #20]
 801922a:	9b01      	ldr	r3, [sp, #4]
 801922c:	6120      	str	r0, [r4, #16]
 801922e:	b15b      	cbz	r3, 8019248 <__smakebuf_r+0x74>
 8019230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019234:	4630      	mov	r0, r6
 8019236:	f000 fffd 	bl	801a234 <_isatty_r>
 801923a:	b128      	cbz	r0, 8019248 <__smakebuf_r+0x74>
 801923c:	89a3      	ldrh	r3, [r4, #12]
 801923e:	f023 0303 	bic.w	r3, r3, #3
 8019242:	f043 0301 	orr.w	r3, r3, #1
 8019246:	81a3      	strh	r3, [r4, #12]
 8019248:	89a0      	ldrh	r0, [r4, #12]
 801924a:	4305      	orrs	r5, r0
 801924c:	81a5      	strh	r5, [r4, #12]
 801924e:	e7cd      	b.n	80191ec <__smakebuf_r+0x18>
 8019250:	08018fd9 	.word	0x08018fd9

08019254 <malloc>:
 8019254:	4b02      	ldr	r3, [pc, #8]	; (8019260 <malloc+0xc>)
 8019256:	4601      	mov	r1, r0
 8019258:	6818      	ldr	r0, [r3, #0]
 801925a:	f000 bc09 	b.w	8019a70 <_malloc_r>
 801925e:	bf00      	nop
 8019260:	200008c4 	.word	0x200008c4

08019264 <_Balloc>:
 8019264:	b570      	push	{r4, r5, r6, lr}
 8019266:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019268:	4604      	mov	r4, r0
 801926a:	460d      	mov	r5, r1
 801926c:	b976      	cbnz	r6, 801928c <_Balloc+0x28>
 801926e:	2010      	movs	r0, #16
 8019270:	f7ff fff0 	bl	8019254 <malloc>
 8019274:	4602      	mov	r2, r0
 8019276:	6260      	str	r0, [r4, #36]	; 0x24
 8019278:	b920      	cbnz	r0, 8019284 <_Balloc+0x20>
 801927a:	4b18      	ldr	r3, [pc, #96]	; (80192dc <_Balloc+0x78>)
 801927c:	4818      	ldr	r0, [pc, #96]	; (80192e0 <_Balloc+0x7c>)
 801927e:	2166      	movs	r1, #102	; 0x66
 8019280:	f000 ff86 	bl	801a190 <__assert_func>
 8019284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019288:	6006      	str	r6, [r0, #0]
 801928a:	60c6      	str	r6, [r0, #12]
 801928c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801928e:	68f3      	ldr	r3, [r6, #12]
 8019290:	b183      	cbz	r3, 80192b4 <_Balloc+0x50>
 8019292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019294:	68db      	ldr	r3, [r3, #12]
 8019296:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801929a:	b9b8      	cbnz	r0, 80192cc <_Balloc+0x68>
 801929c:	2101      	movs	r1, #1
 801929e:	fa01 f605 	lsl.w	r6, r1, r5
 80192a2:	1d72      	adds	r2, r6, #5
 80192a4:	0092      	lsls	r2, r2, #2
 80192a6:	4620      	mov	r0, r4
 80192a8:	f000 fb60 	bl	801996c <_calloc_r>
 80192ac:	b160      	cbz	r0, 80192c8 <_Balloc+0x64>
 80192ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80192b2:	e00e      	b.n	80192d2 <_Balloc+0x6e>
 80192b4:	2221      	movs	r2, #33	; 0x21
 80192b6:	2104      	movs	r1, #4
 80192b8:	4620      	mov	r0, r4
 80192ba:	f000 fb57 	bl	801996c <_calloc_r>
 80192be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80192c0:	60f0      	str	r0, [r6, #12]
 80192c2:	68db      	ldr	r3, [r3, #12]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d1e4      	bne.n	8019292 <_Balloc+0x2e>
 80192c8:	2000      	movs	r0, #0
 80192ca:	bd70      	pop	{r4, r5, r6, pc}
 80192cc:	6802      	ldr	r2, [r0, #0]
 80192ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80192d2:	2300      	movs	r3, #0
 80192d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80192d8:	e7f7      	b.n	80192ca <_Balloc+0x66>
 80192da:	bf00      	nop
 80192dc:	0804dfed 	.word	0x0804dfed
 80192e0:	0804e0d0 	.word	0x0804e0d0

080192e4 <_Bfree>:
 80192e4:	b570      	push	{r4, r5, r6, lr}
 80192e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80192e8:	4605      	mov	r5, r0
 80192ea:	460c      	mov	r4, r1
 80192ec:	b976      	cbnz	r6, 801930c <_Bfree+0x28>
 80192ee:	2010      	movs	r0, #16
 80192f0:	f7ff ffb0 	bl	8019254 <malloc>
 80192f4:	4602      	mov	r2, r0
 80192f6:	6268      	str	r0, [r5, #36]	; 0x24
 80192f8:	b920      	cbnz	r0, 8019304 <_Bfree+0x20>
 80192fa:	4b09      	ldr	r3, [pc, #36]	; (8019320 <_Bfree+0x3c>)
 80192fc:	4809      	ldr	r0, [pc, #36]	; (8019324 <_Bfree+0x40>)
 80192fe:	218a      	movs	r1, #138	; 0x8a
 8019300:	f000 ff46 	bl	801a190 <__assert_func>
 8019304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019308:	6006      	str	r6, [r0, #0]
 801930a:	60c6      	str	r6, [r0, #12]
 801930c:	b13c      	cbz	r4, 801931e <_Bfree+0x3a>
 801930e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019310:	6862      	ldr	r2, [r4, #4]
 8019312:	68db      	ldr	r3, [r3, #12]
 8019314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019318:	6021      	str	r1, [r4, #0]
 801931a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801931e:	bd70      	pop	{r4, r5, r6, pc}
 8019320:	0804dfed 	.word	0x0804dfed
 8019324:	0804e0d0 	.word	0x0804e0d0

08019328 <__multadd>:
 8019328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801932c:	690d      	ldr	r5, [r1, #16]
 801932e:	4607      	mov	r7, r0
 8019330:	460c      	mov	r4, r1
 8019332:	461e      	mov	r6, r3
 8019334:	f101 0c14 	add.w	ip, r1, #20
 8019338:	2000      	movs	r0, #0
 801933a:	f8dc 3000 	ldr.w	r3, [ip]
 801933e:	b299      	uxth	r1, r3
 8019340:	fb02 6101 	mla	r1, r2, r1, r6
 8019344:	0c1e      	lsrs	r6, r3, #16
 8019346:	0c0b      	lsrs	r3, r1, #16
 8019348:	fb02 3306 	mla	r3, r2, r6, r3
 801934c:	b289      	uxth	r1, r1
 801934e:	3001      	adds	r0, #1
 8019350:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019354:	4285      	cmp	r5, r0
 8019356:	f84c 1b04 	str.w	r1, [ip], #4
 801935a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801935e:	dcec      	bgt.n	801933a <__multadd+0x12>
 8019360:	b30e      	cbz	r6, 80193a6 <__multadd+0x7e>
 8019362:	68a3      	ldr	r3, [r4, #8]
 8019364:	42ab      	cmp	r3, r5
 8019366:	dc19      	bgt.n	801939c <__multadd+0x74>
 8019368:	6861      	ldr	r1, [r4, #4]
 801936a:	4638      	mov	r0, r7
 801936c:	3101      	adds	r1, #1
 801936e:	f7ff ff79 	bl	8019264 <_Balloc>
 8019372:	4680      	mov	r8, r0
 8019374:	b928      	cbnz	r0, 8019382 <__multadd+0x5a>
 8019376:	4602      	mov	r2, r0
 8019378:	4b0c      	ldr	r3, [pc, #48]	; (80193ac <__multadd+0x84>)
 801937a:	480d      	ldr	r0, [pc, #52]	; (80193b0 <__multadd+0x88>)
 801937c:	21b5      	movs	r1, #181	; 0xb5
 801937e:	f000 ff07 	bl	801a190 <__assert_func>
 8019382:	6922      	ldr	r2, [r4, #16]
 8019384:	3202      	adds	r2, #2
 8019386:	f104 010c 	add.w	r1, r4, #12
 801938a:	0092      	lsls	r2, r2, #2
 801938c:	300c      	adds	r0, #12
 801938e:	f7fe f8bb 	bl	8017508 <memcpy>
 8019392:	4621      	mov	r1, r4
 8019394:	4638      	mov	r0, r7
 8019396:	f7ff ffa5 	bl	80192e4 <_Bfree>
 801939a:	4644      	mov	r4, r8
 801939c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80193a0:	3501      	adds	r5, #1
 80193a2:	615e      	str	r6, [r3, #20]
 80193a4:	6125      	str	r5, [r4, #16]
 80193a6:	4620      	mov	r0, r4
 80193a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193ac:	0804e05f 	.word	0x0804e05f
 80193b0:	0804e0d0 	.word	0x0804e0d0

080193b4 <__hi0bits>:
 80193b4:	0c03      	lsrs	r3, r0, #16
 80193b6:	041b      	lsls	r3, r3, #16
 80193b8:	b9d3      	cbnz	r3, 80193f0 <__hi0bits+0x3c>
 80193ba:	0400      	lsls	r0, r0, #16
 80193bc:	2310      	movs	r3, #16
 80193be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80193c2:	bf04      	itt	eq
 80193c4:	0200      	lsleq	r0, r0, #8
 80193c6:	3308      	addeq	r3, #8
 80193c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80193cc:	bf04      	itt	eq
 80193ce:	0100      	lsleq	r0, r0, #4
 80193d0:	3304      	addeq	r3, #4
 80193d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80193d6:	bf04      	itt	eq
 80193d8:	0080      	lsleq	r0, r0, #2
 80193da:	3302      	addeq	r3, #2
 80193dc:	2800      	cmp	r0, #0
 80193de:	db05      	blt.n	80193ec <__hi0bits+0x38>
 80193e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80193e4:	f103 0301 	add.w	r3, r3, #1
 80193e8:	bf08      	it	eq
 80193ea:	2320      	moveq	r3, #32
 80193ec:	4618      	mov	r0, r3
 80193ee:	4770      	bx	lr
 80193f0:	2300      	movs	r3, #0
 80193f2:	e7e4      	b.n	80193be <__hi0bits+0xa>

080193f4 <__lo0bits>:
 80193f4:	6803      	ldr	r3, [r0, #0]
 80193f6:	f013 0207 	ands.w	r2, r3, #7
 80193fa:	4601      	mov	r1, r0
 80193fc:	d00b      	beq.n	8019416 <__lo0bits+0x22>
 80193fe:	07da      	lsls	r2, r3, #31
 8019400:	d423      	bmi.n	801944a <__lo0bits+0x56>
 8019402:	0798      	lsls	r0, r3, #30
 8019404:	bf49      	itett	mi
 8019406:	085b      	lsrmi	r3, r3, #1
 8019408:	089b      	lsrpl	r3, r3, #2
 801940a:	2001      	movmi	r0, #1
 801940c:	600b      	strmi	r3, [r1, #0]
 801940e:	bf5c      	itt	pl
 8019410:	600b      	strpl	r3, [r1, #0]
 8019412:	2002      	movpl	r0, #2
 8019414:	4770      	bx	lr
 8019416:	b298      	uxth	r0, r3
 8019418:	b9a8      	cbnz	r0, 8019446 <__lo0bits+0x52>
 801941a:	0c1b      	lsrs	r3, r3, #16
 801941c:	2010      	movs	r0, #16
 801941e:	b2da      	uxtb	r2, r3
 8019420:	b90a      	cbnz	r2, 8019426 <__lo0bits+0x32>
 8019422:	3008      	adds	r0, #8
 8019424:	0a1b      	lsrs	r3, r3, #8
 8019426:	071a      	lsls	r2, r3, #28
 8019428:	bf04      	itt	eq
 801942a:	091b      	lsreq	r3, r3, #4
 801942c:	3004      	addeq	r0, #4
 801942e:	079a      	lsls	r2, r3, #30
 8019430:	bf04      	itt	eq
 8019432:	089b      	lsreq	r3, r3, #2
 8019434:	3002      	addeq	r0, #2
 8019436:	07da      	lsls	r2, r3, #31
 8019438:	d403      	bmi.n	8019442 <__lo0bits+0x4e>
 801943a:	085b      	lsrs	r3, r3, #1
 801943c:	f100 0001 	add.w	r0, r0, #1
 8019440:	d005      	beq.n	801944e <__lo0bits+0x5a>
 8019442:	600b      	str	r3, [r1, #0]
 8019444:	4770      	bx	lr
 8019446:	4610      	mov	r0, r2
 8019448:	e7e9      	b.n	801941e <__lo0bits+0x2a>
 801944a:	2000      	movs	r0, #0
 801944c:	4770      	bx	lr
 801944e:	2020      	movs	r0, #32
 8019450:	4770      	bx	lr
	...

08019454 <__i2b>:
 8019454:	b510      	push	{r4, lr}
 8019456:	460c      	mov	r4, r1
 8019458:	2101      	movs	r1, #1
 801945a:	f7ff ff03 	bl	8019264 <_Balloc>
 801945e:	4602      	mov	r2, r0
 8019460:	b928      	cbnz	r0, 801946e <__i2b+0x1a>
 8019462:	4b05      	ldr	r3, [pc, #20]	; (8019478 <__i2b+0x24>)
 8019464:	4805      	ldr	r0, [pc, #20]	; (801947c <__i2b+0x28>)
 8019466:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801946a:	f000 fe91 	bl	801a190 <__assert_func>
 801946e:	2301      	movs	r3, #1
 8019470:	6144      	str	r4, [r0, #20]
 8019472:	6103      	str	r3, [r0, #16]
 8019474:	bd10      	pop	{r4, pc}
 8019476:	bf00      	nop
 8019478:	0804e05f 	.word	0x0804e05f
 801947c:	0804e0d0 	.word	0x0804e0d0

08019480 <__multiply>:
 8019480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019484:	4691      	mov	r9, r2
 8019486:	690a      	ldr	r2, [r1, #16]
 8019488:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801948c:	429a      	cmp	r2, r3
 801948e:	bfb8      	it	lt
 8019490:	460b      	movlt	r3, r1
 8019492:	460c      	mov	r4, r1
 8019494:	bfbc      	itt	lt
 8019496:	464c      	movlt	r4, r9
 8019498:	4699      	movlt	r9, r3
 801949a:	6927      	ldr	r7, [r4, #16]
 801949c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80194a0:	68a3      	ldr	r3, [r4, #8]
 80194a2:	6861      	ldr	r1, [r4, #4]
 80194a4:	eb07 060a 	add.w	r6, r7, sl
 80194a8:	42b3      	cmp	r3, r6
 80194aa:	b085      	sub	sp, #20
 80194ac:	bfb8      	it	lt
 80194ae:	3101      	addlt	r1, #1
 80194b0:	f7ff fed8 	bl	8019264 <_Balloc>
 80194b4:	b930      	cbnz	r0, 80194c4 <__multiply+0x44>
 80194b6:	4602      	mov	r2, r0
 80194b8:	4b44      	ldr	r3, [pc, #272]	; (80195cc <__multiply+0x14c>)
 80194ba:	4845      	ldr	r0, [pc, #276]	; (80195d0 <__multiply+0x150>)
 80194bc:	f240 115d 	movw	r1, #349	; 0x15d
 80194c0:	f000 fe66 	bl	801a190 <__assert_func>
 80194c4:	f100 0514 	add.w	r5, r0, #20
 80194c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80194cc:	462b      	mov	r3, r5
 80194ce:	2200      	movs	r2, #0
 80194d0:	4543      	cmp	r3, r8
 80194d2:	d321      	bcc.n	8019518 <__multiply+0x98>
 80194d4:	f104 0314 	add.w	r3, r4, #20
 80194d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80194dc:	f109 0314 	add.w	r3, r9, #20
 80194e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80194e4:	9202      	str	r2, [sp, #8]
 80194e6:	1b3a      	subs	r2, r7, r4
 80194e8:	3a15      	subs	r2, #21
 80194ea:	f022 0203 	bic.w	r2, r2, #3
 80194ee:	3204      	adds	r2, #4
 80194f0:	f104 0115 	add.w	r1, r4, #21
 80194f4:	428f      	cmp	r7, r1
 80194f6:	bf38      	it	cc
 80194f8:	2204      	movcc	r2, #4
 80194fa:	9201      	str	r2, [sp, #4]
 80194fc:	9a02      	ldr	r2, [sp, #8]
 80194fe:	9303      	str	r3, [sp, #12]
 8019500:	429a      	cmp	r2, r3
 8019502:	d80c      	bhi.n	801951e <__multiply+0x9e>
 8019504:	2e00      	cmp	r6, #0
 8019506:	dd03      	ble.n	8019510 <__multiply+0x90>
 8019508:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801950c:	2b00      	cmp	r3, #0
 801950e:	d05a      	beq.n	80195c6 <__multiply+0x146>
 8019510:	6106      	str	r6, [r0, #16]
 8019512:	b005      	add	sp, #20
 8019514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019518:	f843 2b04 	str.w	r2, [r3], #4
 801951c:	e7d8      	b.n	80194d0 <__multiply+0x50>
 801951e:	f8b3 a000 	ldrh.w	sl, [r3]
 8019522:	f1ba 0f00 	cmp.w	sl, #0
 8019526:	d024      	beq.n	8019572 <__multiply+0xf2>
 8019528:	f104 0e14 	add.w	lr, r4, #20
 801952c:	46a9      	mov	r9, r5
 801952e:	f04f 0c00 	mov.w	ip, #0
 8019532:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019536:	f8d9 1000 	ldr.w	r1, [r9]
 801953a:	fa1f fb82 	uxth.w	fp, r2
 801953e:	b289      	uxth	r1, r1
 8019540:	fb0a 110b 	mla	r1, sl, fp, r1
 8019544:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019548:	f8d9 2000 	ldr.w	r2, [r9]
 801954c:	4461      	add	r1, ip
 801954e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019552:	fb0a c20b 	mla	r2, sl, fp, ip
 8019556:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801955a:	b289      	uxth	r1, r1
 801955c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019560:	4577      	cmp	r7, lr
 8019562:	f849 1b04 	str.w	r1, [r9], #4
 8019566:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801956a:	d8e2      	bhi.n	8019532 <__multiply+0xb2>
 801956c:	9a01      	ldr	r2, [sp, #4]
 801956e:	f845 c002 	str.w	ip, [r5, r2]
 8019572:	9a03      	ldr	r2, [sp, #12]
 8019574:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019578:	3304      	adds	r3, #4
 801957a:	f1b9 0f00 	cmp.w	r9, #0
 801957e:	d020      	beq.n	80195c2 <__multiply+0x142>
 8019580:	6829      	ldr	r1, [r5, #0]
 8019582:	f104 0c14 	add.w	ip, r4, #20
 8019586:	46ae      	mov	lr, r5
 8019588:	f04f 0a00 	mov.w	sl, #0
 801958c:	f8bc b000 	ldrh.w	fp, [ip]
 8019590:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019594:	fb09 220b 	mla	r2, r9, fp, r2
 8019598:	4492      	add	sl, r2
 801959a:	b289      	uxth	r1, r1
 801959c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80195a0:	f84e 1b04 	str.w	r1, [lr], #4
 80195a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80195a8:	f8be 1000 	ldrh.w	r1, [lr]
 80195ac:	0c12      	lsrs	r2, r2, #16
 80195ae:	fb09 1102 	mla	r1, r9, r2, r1
 80195b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80195b6:	4567      	cmp	r7, ip
 80195b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80195bc:	d8e6      	bhi.n	801958c <__multiply+0x10c>
 80195be:	9a01      	ldr	r2, [sp, #4]
 80195c0:	50a9      	str	r1, [r5, r2]
 80195c2:	3504      	adds	r5, #4
 80195c4:	e79a      	b.n	80194fc <__multiply+0x7c>
 80195c6:	3e01      	subs	r6, #1
 80195c8:	e79c      	b.n	8019504 <__multiply+0x84>
 80195ca:	bf00      	nop
 80195cc:	0804e05f 	.word	0x0804e05f
 80195d0:	0804e0d0 	.word	0x0804e0d0

080195d4 <__pow5mult>:
 80195d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195d8:	4615      	mov	r5, r2
 80195da:	f012 0203 	ands.w	r2, r2, #3
 80195de:	4606      	mov	r6, r0
 80195e0:	460f      	mov	r7, r1
 80195e2:	d007      	beq.n	80195f4 <__pow5mult+0x20>
 80195e4:	4c25      	ldr	r4, [pc, #148]	; (801967c <__pow5mult+0xa8>)
 80195e6:	3a01      	subs	r2, #1
 80195e8:	2300      	movs	r3, #0
 80195ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80195ee:	f7ff fe9b 	bl	8019328 <__multadd>
 80195f2:	4607      	mov	r7, r0
 80195f4:	10ad      	asrs	r5, r5, #2
 80195f6:	d03d      	beq.n	8019674 <__pow5mult+0xa0>
 80195f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80195fa:	b97c      	cbnz	r4, 801961c <__pow5mult+0x48>
 80195fc:	2010      	movs	r0, #16
 80195fe:	f7ff fe29 	bl	8019254 <malloc>
 8019602:	4602      	mov	r2, r0
 8019604:	6270      	str	r0, [r6, #36]	; 0x24
 8019606:	b928      	cbnz	r0, 8019614 <__pow5mult+0x40>
 8019608:	4b1d      	ldr	r3, [pc, #116]	; (8019680 <__pow5mult+0xac>)
 801960a:	481e      	ldr	r0, [pc, #120]	; (8019684 <__pow5mult+0xb0>)
 801960c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019610:	f000 fdbe 	bl	801a190 <__assert_func>
 8019614:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019618:	6004      	str	r4, [r0, #0]
 801961a:	60c4      	str	r4, [r0, #12]
 801961c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019620:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019624:	b94c      	cbnz	r4, 801963a <__pow5mult+0x66>
 8019626:	f240 2171 	movw	r1, #625	; 0x271
 801962a:	4630      	mov	r0, r6
 801962c:	f7ff ff12 	bl	8019454 <__i2b>
 8019630:	2300      	movs	r3, #0
 8019632:	f8c8 0008 	str.w	r0, [r8, #8]
 8019636:	4604      	mov	r4, r0
 8019638:	6003      	str	r3, [r0, #0]
 801963a:	f04f 0900 	mov.w	r9, #0
 801963e:	07eb      	lsls	r3, r5, #31
 8019640:	d50a      	bpl.n	8019658 <__pow5mult+0x84>
 8019642:	4639      	mov	r1, r7
 8019644:	4622      	mov	r2, r4
 8019646:	4630      	mov	r0, r6
 8019648:	f7ff ff1a 	bl	8019480 <__multiply>
 801964c:	4639      	mov	r1, r7
 801964e:	4680      	mov	r8, r0
 8019650:	4630      	mov	r0, r6
 8019652:	f7ff fe47 	bl	80192e4 <_Bfree>
 8019656:	4647      	mov	r7, r8
 8019658:	106d      	asrs	r5, r5, #1
 801965a:	d00b      	beq.n	8019674 <__pow5mult+0xa0>
 801965c:	6820      	ldr	r0, [r4, #0]
 801965e:	b938      	cbnz	r0, 8019670 <__pow5mult+0x9c>
 8019660:	4622      	mov	r2, r4
 8019662:	4621      	mov	r1, r4
 8019664:	4630      	mov	r0, r6
 8019666:	f7ff ff0b 	bl	8019480 <__multiply>
 801966a:	6020      	str	r0, [r4, #0]
 801966c:	f8c0 9000 	str.w	r9, [r0]
 8019670:	4604      	mov	r4, r0
 8019672:	e7e4      	b.n	801963e <__pow5mult+0x6a>
 8019674:	4638      	mov	r0, r7
 8019676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801967a:	bf00      	nop
 801967c:	0804e220 	.word	0x0804e220
 8019680:	0804dfed 	.word	0x0804dfed
 8019684:	0804e0d0 	.word	0x0804e0d0

08019688 <__lshift>:
 8019688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801968c:	460c      	mov	r4, r1
 801968e:	6849      	ldr	r1, [r1, #4]
 8019690:	6923      	ldr	r3, [r4, #16]
 8019692:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019696:	68a3      	ldr	r3, [r4, #8]
 8019698:	4607      	mov	r7, r0
 801969a:	4691      	mov	r9, r2
 801969c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80196a0:	f108 0601 	add.w	r6, r8, #1
 80196a4:	42b3      	cmp	r3, r6
 80196a6:	db0b      	blt.n	80196c0 <__lshift+0x38>
 80196a8:	4638      	mov	r0, r7
 80196aa:	f7ff fddb 	bl	8019264 <_Balloc>
 80196ae:	4605      	mov	r5, r0
 80196b0:	b948      	cbnz	r0, 80196c6 <__lshift+0x3e>
 80196b2:	4602      	mov	r2, r0
 80196b4:	4b2a      	ldr	r3, [pc, #168]	; (8019760 <__lshift+0xd8>)
 80196b6:	482b      	ldr	r0, [pc, #172]	; (8019764 <__lshift+0xdc>)
 80196b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80196bc:	f000 fd68 	bl	801a190 <__assert_func>
 80196c0:	3101      	adds	r1, #1
 80196c2:	005b      	lsls	r3, r3, #1
 80196c4:	e7ee      	b.n	80196a4 <__lshift+0x1c>
 80196c6:	2300      	movs	r3, #0
 80196c8:	f100 0114 	add.w	r1, r0, #20
 80196cc:	f100 0210 	add.w	r2, r0, #16
 80196d0:	4618      	mov	r0, r3
 80196d2:	4553      	cmp	r3, sl
 80196d4:	db37      	blt.n	8019746 <__lshift+0xbe>
 80196d6:	6920      	ldr	r0, [r4, #16]
 80196d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80196dc:	f104 0314 	add.w	r3, r4, #20
 80196e0:	f019 091f 	ands.w	r9, r9, #31
 80196e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80196e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80196ec:	d02f      	beq.n	801974e <__lshift+0xc6>
 80196ee:	f1c9 0e20 	rsb	lr, r9, #32
 80196f2:	468a      	mov	sl, r1
 80196f4:	f04f 0c00 	mov.w	ip, #0
 80196f8:	681a      	ldr	r2, [r3, #0]
 80196fa:	fa02 f209 	lsl.w	r2, r2, r9
 80196fe:	ea42 020c 	orr.w	r2, r2, ip
 8019702:	f84a 2b04 	str.w	r2, [sl], #4
 8019706:	f853 2b04 	ldr.w	r2, [r3], #4
 801970a:	4298      	cmp	r0, r3
 801970c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019710:	d8f2      	bhi.n	80196f8 <__lshift+0x70>
 8019712:	1b03      	subs	r3, r0, r4
 8019714:	3b15      	subs	r3, #21
 8019716:	f023 0303 	bic.w	r3, r3, #3
 801971a:	3304      	adds	r3, #4
 801971c:	f104 0215 	add.w	r2, r4, #21
 8019720:	4290      	cmp	r0, r2
 8019722:	bf38      	it	cc
 8019724:	2304      	movcc	r3, #4
 8019726:	f841 c003 	str.w	ip, [r1, r3]
 801972a:	f1bc 0f00 	cmp.w	ip, #0
 801972e:	d001      	beq.n	8019734 <__lshift+0xac>
 8019730:	f108 0602 	add.w	r6, r8, #2
 8019734:	3e01      	subs	r6, #1
 8019736:	4638      	mov	r0, r7
 8019738:	612e      	str	r6, [r5, #16]
 801973a:	4621      	mov	r1, r4
 801973c:	f7ff fdd2 	bl	80192e4 <_Bfree>
 8019740:	4628      	mov	r0, r5
 8019742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019746:	f842 0f04 	str.w	r0, [r2, #4]!
 801974a:	3301      	adds	r3, #1
 801974c:	e7c1      	b.n	80196d2 <__lshift+0x4a>
 801974e:	3904      	subs	r1, #4
 8019750:	f853 2b04 	ldr.w	r2, [r3], #4
 8019754:	f841 2f04 	str.w	r2, [r1, #4]!
 8019758:	4298      	cmp	r0, r3
 801975a:	d8f9      	bhi.n	8019750 <__lshift+0xc8>
 801975c:	e7ea      	b.n	8019734 <__lshift+0xac>
 801975e:	bf00      	nop
 8019760:	0804e05f 	.word	0x0804e05f
 8019764:	0804e0d0 	.word	0x0804e0d0

08019768 <__mcmp>:
 8019768:	b530      	push	{r4, r5, lr}
 801976a:	6902      	ldr	r2, [r0, #16]
 801976c:	690c      	ldr	r4, [r1, #16]
 801976e:	1b12      	subs	r2, r2, r4
 8019770:	d10e      	bne.n	8019790 <__mcmp+0x28>
 8019772:	f100 0314 	add.w	r3, r0, #20
 8019776:	3114      	adds	r1, #20
 8019778:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801977c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019780:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019784:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019788:	42a5      	cmp	r5, r4
 801978a:	d003      	beq.n	8019794 <__mcmp+0x2c>
 801978c:	d305      	bcc.n	801979a <__mcmp+0x32>
 801978e:	2201      	movs	r2, #1
 8019790:	4610      	mov	r0, r2
 8019792:	bd30      	pop	{r4, r5, pc}
 8019794:	4283      	cmp	r3, r0
 8019796:	d3f3      	bcc.n	8019780 <__mcmp+0x18>
 8019798:	e7fa      	b.n	8019790 <__mcmp+0x28>
 801979a:	f04f 32ff 	mov.w	r2, #4294967295
 801979e:	e7f7      	b.n	8019790 <__mcmp+0x28>

080197a0 <__mdiff>:
 80197a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197a4:	460c      	mov	r4, r1
 80197a6:	4606      	mov	r6, r0
 80197a8:	4611      	mov	r1, r2
 80197aa:	4620      	mov	r0, r4
 80197ac:	4690      	mov	r8, r2
 80197ae:	f7ff ffdb 	bl	8019768 <__mcmp>
 80197b2:	1e05      	subs	r5, r0, #0
 80197b4:	d110      	bne.n	80197d8 <__mdiff+0x38>
 80197b6:	4629      	mov	r1, r5
 80197b8:	4630      	mov	r0, r6
 80197ba:	f7ff fd53 	bl	8019264 <_Balloc>
 80197be:	b930      	cbnz	r0, 80197ce <__mdiff+0x2e>
 80197c0:	4b3a      	ldr	r3, [pc, #232]	; (80198ac <__mdiff+0x10c>)
 80197c2:	4602      	mov	r2, r0
 80197c4:	f240 2132 	movw	r1, #562	; 0x232
 80197c8:	4839      	ldr	r0, [pc, #228]	; (80198b0 <__mdiff+0x110>)
 80197ca:	f000 fce1 	bl	801a190 <__assert_func>
 80197ce:	2301      	movs	r3, #1
 80197d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80197d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197d8:	bfa4      	itt	ge
 80197da:	4643      	movge	r3, r8
 80197dc:	46a0      	movge	r8, r4
 80197de:	4630      	mov	r0, r6
 80197e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80197e4:	bfa6      	itte	ge
 80197e6:	461c      	movge	r4, r3
 80197e8:	2500      	movge	r5, #0
 80197ea:	2501      	movlt	r5, #1
 80197ec:	f7ff fd3a 	bl	8019264 <_Balloc>
 80197f0:	b920      	cbnz	r0, 80197fc <__mdiff+0x5c>
 80197f2:	4b2e      	ldr	r3, [pc, #184]	; (80198ac <__mdiff+0x10c>)
 80197f4:	4602      	mov	r2, r0
 80197f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80197fa:	e7e5      	b.n	80197c8 <__mdiff+0x28>
 80197fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019800:	6926      	ldr	r6, [r4, #16]
 8019802:	60c5      	str	r5, [r0, #12]
 8019804:	f104 0914 	add.w	r9, r4, #20
 8019808:	f108 0514 	add.w	r5, r8, #20
 801980c:	f100 0e14 	add.w	lr, r0, #20
 8019810:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019814:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019818:	f108 0210 	add.w	r2, r8, #16
 801981c:	46f2      	mov	sl, lr
 801981e:	2100      	movs	r1, #0
 8019820:	f859 3b04 	ldr.w	r3, [r9], #4
 8019824:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019828:	fa1f f883 	uxth.w	r8, r3
 801982c:	fa11 f18b 	uxtah	r1, r1, fp
 8019830:	0c1b      	lsrs	r3, r3, #16
 8019832:	eba1 0808 	sub.w	r8, r1, r8
 8019836:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801983a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801983e:	fa1f f888 	uxth.w	r8, r8
 8019842:	1419      	asrs	r1, r3, #16
 8019844:	454e      	cmp	r6, r9
 8019846:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801984a:	f84a 3b04 	str.w	r3, [sl], #4
 801984e:	d8e7      	bhi.n	8019820 <__mdiff+0x80>
 8019850:	1b33      	subs	r3, r6, r4
 8019852:	3b15      	subs	r3, #21
 8019854:	f023 0303 	bic.w	r3, r3, #3
 8019858:	3304      	adds	r3, #4
 801985a:	3415      	adds	r4, #21
 801985c:	42a6      	cmp	r6, r4
 801985e:	bf38      	it	cc
 8019860:	2304      	movcc	r3, #4
 8019862:	441d      	add	r5, r3
 8019864:	4473      	add	r3, lr
 8019866:	469e      	mov	lr, r3
 8019868:	462e      	mov	r6, r5
 801986a:	4566      	cmp	r6, ip
 801986c:	d30e      	bcc.n	801988c <__mdiff+0xec>
 801986e:	f10c 0203 	add.w	r2, ip, #3
 8019872:	1b52      	subs	r2, r2, r5
 8019874:	f022 0203 	bic.w	r2, r2, #3
 8019878:	3d03      	subs	r5, #3
 801987a:	45ac      	cmp	ip, r5
 801987c:	bf38      	it	cc
 801987e:	2200      	movcc	r2, #0
 8019880:	441a      	add	r2, r3
 8019882:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019886:	b17b      	cbz	r3, 80198a8 <__mdiff+0x108>
 8019888:	6107      	str	r7, [r0, #16]
 801988a:	e7a3      	b.n	80197d4 <__mdiff+0x34>
 801988c:	f856 8b04 	ldr.w	r8, [r6], #4
 8019890:	fa11 f288 	uxtah	r2, r1, r8
 8019894:	1414      	asrs	r4, r2, #16
 8019896:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801989a:	b292      	uxth	r2, r2
 801989c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80198a0:	f84e 2b04 	str.w	r2, [lr], #4
 80198a4:	1421      	asrs	r1, r4, #16
 80198a6:	e7e0      	b.n	801986a <__mdiff+0xca>
 80198a8:	3f01      	subs	r7, #1
 80198aa:	e7ea      	b.n	8019882 <__mdiff+0xe2>
 80198ac:	0804e05f 	.word	0x0804e05f
 80198b0:	0804e0d0 	.word	0x0804e0d0

080198b4 <__d2b>:
 80198b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80198b8:	4689      	mov	r9, r1
 80198ba:	2101      	movs	r1, #1
 80198bc:	ec57 6b10 	vmov	r6, r7, d0
 80198c0:	4690      	mov	r8, r2
 80198c2:	f7ff fccf 	bl	8019264 <_Balloc>
 80198c6:	4604      	mov	r4, r0
 80198c8:	b930      	cbnz	r0, 80198d8 <__d2b+0x24>
 80198ca:	4602      	mov	r2, r0
 80198cc:	4b25      	ldr	r3, [pc, #148]	; (8019964 <__d2b+0xb0>)
 80198ce:	4826      	ldr	r0, [pc, #152]	; (8019968 <__d2b+0xb4>)
 80198d0:	f240 310a 	movw	r1, #778	; 0x30a
 80198d4:	f000 fc5c 	bl	801a190 <__assert_func>
 80198d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80198dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80198e0:	bb35      	cbnz	r5, 8019930 <__d2b+0x7c>
 80198e2:	2e00      	cmp	r6, #0
 80198e4:	9301      	str	r3, [sp, #4]
 80198e6:	d028      	beq.n	801993a <__d2b+0x86>
 80198e8:	4668      	mov	r0, sp
 80198ea:	9600      	str	r6, [sp, #0]
 80198ec:	f7ff fd82 	bl	80193f4 <__lo0bits>
 80198f0:	9900      	ldr	r1, [sp, #0]
 80198f2:	b300      	cbz	r0, 8019936 <__d2b+0x82>
 80198f4:	9a01      	ldr	r2, [sp, #4]
 80198f6:	f1c0 0320 	rsb	r3, r0, #32
 80198fa:	fa02 f303 	lsl.w	r3, r2, r3
 80198fe:	430b      	orrs	r3, r1
 8019900:	40c2      	lsrs	r2, r0
 8019902:	6163      	str	r3, [r4, #20]
 8019904:	9201      	str	r2, [sp, #4]
 8019906:	9b01      	ldr	r3, [sp, #4]
 8019908:	61a3      	str	r3, [r4, #24]
 801990a:	2b00      	cmp	r3, #0
 801990c:	bf14      	ite	ne
 801990e:	2202      	movne	r2, #2
 8019910:	2201      	moveq	r2, #1
 8019912:	6122      	str	r2, [r4, #16]
 8019914:	b1d5      	cbz	r5, 801994c <__d2b+0x98>
 8019916:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801991a:	4405      	add	r5, r0
 801991c:	f8c9 5000 	str.w	r5, [r9]
 8019920:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019924:	f8c8 0000 	str.w	r0, [r8]
 8019928:	4620      	mov	r0, r4
 801992a:	b003      	add	sp, #12
 801992c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019934:	e7d5      	b.n	80198e2 <__d2b+0x2e>
 8019936:	6161      	str	r1, [r4, #20]
 8019938:	e7e5      	b.n	8019906 <__d2b+0x52>
 801993a:	a801      	add	r0, sp, #4
 801993c:	f7ff fd5a 	bl	80193f4 <__lo0bits>
 8019940:	9b01      	ldr	r3, [sp, #4]
 8019942:	6163      	str	r3, [r4, #20]
 8019944:	2201      	movs	r2, #1
 8019946:	6122      	str	r2, [r4, #16]
 8019948:	3020      	adds	r0, #32
 801994a:	e7e3      	b.n	8019914 <__d2b+0x60>
 801994c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019950:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019954:	f8c9 0000 	str.w	r0, [r9]
 8019958:	6918      	ldr	r0, [r3, #16]
 801995a:	f7ff fd2b 	bl	80193b4 <__hi0bits>
 801995e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019962:	e7df      	b.n	8019924 <__d2b+0x70>
 8019964:	0804e05f 	.word	0x0804e05f
 8019968:	0804e0d0 	.word	0x0804e0d0

0801996c <_calloc_r>:
 801996c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801996e:	fba1 2402 	umull	r2, r4, r1, r2
 8019972:	b94c      	cbnz	r4, 8019988 <_calloc_r+0x1c>
 8019974:	4611      	mov	r1, r2
 8019976:	9201      	str	r2, [sp, #4]
 8019978:	f000 f87a 	bl	8019a70 <_malloc_r>
 801997c:	9a01      	ldr	r2, [sp, #4]
 801997e:	4605      	mov	r5, r0
 8019980:	b930      	cbnz	r0, 8019990 <_calloc_r+0x24>
 8019982:	4628      	mov	r0, r5
 8019984:	b003      	add	sp, #12
 8019986:	bd30      	pop	{r4, r5, pc}
 8019988:	220c      	movs	r2, #12
 801998a:	6002      	str	r2, [r0, #0]
 801998c:	2500      	movs	r5, #0
 801998e:	e7f8      	b.n	8019982 <_calloc_r+0x16>
 8019990:	4621      	mov	r1, r4
 8019992:	f7fd fdc7 	bl	8017524 <memset>
 8019996:	e7f4      	b.n	8019982 <_calloc_r+0x16>

08019998 <_free_r>:
 8019998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801999a:	2900      	cmp	r1, #0
 801999c:	d044      	beq.n	8019a28 <_free_r+0x90>
 801999e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80199a2:	9001      	str	r0, [sp, #4]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	f1a1 0404 	sub.w	r4, r1, #4
 80199aa:	bfb8      	it	lt
 80199ac:	18e4      	addlt	r4, r4, r3
 80199ae:	f000 fc8f 	bl	801a2d0 <__malloc_lock>
 80199b2:	4a1e      	ldr	r2, [pc, #120]	; (8019a2c <_free_r+0x94>)
 80199b4:	9801      	ldr	r0, [sp, #4]
 80199b6:	6813      	ldr	r3, [r2, #0]
 80199b8:	b933      	cbnz	r3, 80199c8 <_free_r+0x30>
 80199ba:	6063      	str	r3, [r4, #4]
 80199bc:	6014      	str	r4, [r2, #0]
 80199be:	b003      	add	sp, #12
 80199c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80199c4:	f000 bc8a 	b.w	801a2dc <__malloc_unlock>
 80199c8:	42a3      	cmp	r3, r4
 80199ca:	d908      	bls.n	80199de <_free_r+0x46>
 80199cc:	6825      	ldr	r5, [r4, #0]
 80199ce:	1961      	adds	r1, r4, r5
 80199d0:	428b      	cmp	r3, r1
 80199d2:	bf01      	itttt	eq
 80199d4:	6819      	ldreq	r1, [r3, #0]
 80199d6:	685b      	ldreq	r3, [r3, #4]
 80199d8:	1949      	addeq	r1, r1, r5
 80199da:	6021      	streq	r1, [r4, #0]
 80199dc:	e7ed      	b.n	80199ba <_free_r+0x22>
 80199de:	461a      	mov	r2, r3
 80199e0:	685b      	ldr	r3, [r3, #4]
 80199e2:	b10b      	cbz	r3, 80199e8 <_free_r+0x50>
 80199e4:	42a3      	cmp	r3, r4
 80199e6:	d9fa      	bls.n	80199de <_free_r+0x46>
 80199e8:	6811      	ldr	r1, [r2, #0]
 80199ea:	1855      	adds	r5, r2, r1
 80199ec:	42a5      	cmp	r5, r4
 80199ee:	d10b      	bne.n	8019a08 <_free_r+0x70>
 80199f0:	6824      	ldr	r4, [r4, #0]
 80199f2:	4421      	add	r1, r4
 80199f4:	1854      	adds	r4, r2, r1
 80199f6:	42a3      	cmp	r3, r4
 80199f8:	6011      	str	r1, [r2, #0]
 80199fa:	d1e0      	bne.n	80199be <_free_r+0x26>
 80199fc:	681c      	ldr	r4, [r3, #0]
 80199fe:	685b      	ldr	r3, [r3, #4]
 8019a00:	6053      	str	r3, [r2, #4]
 8019a02:	4421      	add	r1, r4
 8019a04:	6011      	str	r1, [r2, #0]
 8019a06:	e7da      	b.n	80199be <_free_r+0x26>
 8019a08:	d902      	bls.n	8019a10 <_free_r+0x78>
 8019a0a:	230c      	movs	r3, #12
 8019a0c:	6003      	str	r3, [r0, #0]
 8019a0e:	e7d6      	b.n	80199be <_free_r+0x26>
 8019a10:	6825      	ldr	r5, [r4, #0]
 8019a12:	1961      	adds	r1, r4, r5
 8019a14:	428b      	cmp	r3, r1
 8019a16:	bf04      	itt	eq
 8019a18:	6819      	ldreq	r1, [r3, #0]
 8019a1a:	685b      	ldreq	r3, [r3, #4]
 8019a1c:	6063      	str	r3, [r4, #4]
 8019a1e:	bf04      	itt	eq
 8019a20:	1949      	addeq	r1, r1, r5
 8019a22:	6021      	streq	r1, [r4, #0]
 8019a24:	6054      	str	r4, [r2, #4]
 8019a26:	e7ca      	b.n	80199be <_free_r+0x26>
 8019a28:	b003      	add	sp, #12
 8019a2a:	bd30      	pop	{r4, r5, pc}
 8019a2c:	2001f81c 	.word	0x2001f81c

08019a30 <sbrk_aligned>:
 8019a30:	b570      	push	{r4, r5, r6, lr}
 8019a32:	4e0e      	ldr	r6, [pc, #56]	; (8019a6c <sbrk_aligned+0x3c>)
 8019a34:	460c      	mov	r4, r1
 8019a36:	6831      	ldr	r1, [r6, #0]
 8019a38:	4605      	mov	r5, r0
 8019a3a:	b911      	cbnz	r1, 8019a42 <sbrk_aligned+0x12>
 8019a3c:	f000 fb42 	bl	801a0c4 <_sbrk_r>
 8019a40:	6030      	str	r0, [r6, #0]
 8019a42:	4621      	mov	r1, r4
 8019a44:	4628      	mov	r0, r5
 8019a46:	f000 fb3d 	bl	801a0c4 <_sbrk_r>
 8019a4a:	1c43      	adds	r3, r0, #1
 8019a4c:	d00a      	beq.n	8019a64 <sbrk_aligned+0x34>
 8019a4e:	1cc4      	adds	r4, r0, #3
 8019a50:	f024 0403 	bic.w	r4, r4, #3
 8019a54:	42a0      	cmp	r0, r4
 8019a56:	d007      	beq.n	8019a68 <sbrk_aligned+0x38>
 8019a58:	1a21      	subs	r1, r4, r0
 8019a5a:	4628      	mov	r0, r5
 8019a5c:	f000 fb32 	bl	801a0c4 <_sbrk_r>
 8019a60:	3001      	adds	r0, #1
 8019a62:	d101      	bne.n	8019a68 <sbrk_aligned+0x38>
 8019a64:	f04f 34ff 	mov.w	r4, #4294967295
 8019a68:	4620      	mov	r0, r4
 8019a6a:	bd70      	pop	{r4, r5, r6, pc}
 8019a6c:	2001f820 	.word	0x2001f820

08019a70 <_malloc_r>:
 8019a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a74:	1ccd      	adds	r5, r1, #3
 8019a76:	f025 0503 	bic.w	r5, r5, #3
 8019a7a:	3508      	adds	r5, #8
 8019a7c:	2d0c      	cmp	r5, #12
 8019a7e:	bf38      	it	cc
 8019a80:	250c      	movcc	r5, #12
 8019a82:	2d00      	cmp	r5, #0
 8019a84:	4607      	mov	r7, r0
 8019a86:	db01      	blt.n	8019a8c <_malloc_r+0x1c>
 8019a88:	42a9      	cmp	r1, r5
 8019a8a:	d905      	bls.n	8019a98 <_malloc_r+0x28>
 8019a8c:	230c      	movs	r3, #12
 8019a8e:	603b      	str	r3, [r7, #0]
 8019a90:	2600      	movs	r6, #0
 8019a92:	4630      	mov	r0, r6
 8019a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a98:	4e2e      	ldr	r6, [pc, #184]	; (8019b54 <_malloc_r+0xe4>)
 8019a9a:	f000 fc19 	bl	801a2d0 <__malloc_lock>
 8019a9e:	6833      	ldr	r3, [r6, #0]
 8019aa0:	461c      	mov	r4, r3
 8019aa2:	bb34      	cbnz	r4, 8019af2 <_malloc_r+0x82>
 8019aa4:	4629      	mov	r1, r5
 8019aa6:	4638      	mov	r0, r7
 8019aa8:	f7ff ffc2 	bl	8019a30 <sbrk_aligned>
 8019aac:	1c43      	adds	r3, r0, #1
 8019aae:	4604      	mov	r4, r0
 8019ab0:	d14d      	bne.n	8019b4e <_malloc_r+0xde>
 8019ab2:	6834      	ldr	r4, [r6, #0]
 8019ab4:	4626      	mov	r6, r4
 8019ab6:	2e00      	cmp	r6, #0
 8019ab8:	d140      	bne.n	8019b3c <_malloc_r+0xcc>
 8019aba:	6823      	ldr	r3, [r4, #0]
 8019abc:	4631      	mov	r1, r6
 8019abe:	4638      	mov	r0, r7
 8019ac0:	eb04 0803 	add.w	r8, r4, r3
 8019ac4:	f000 fafe 	bl	801a0c4 <_sbrk_r>
 8019ac8:	4580      	cmp	r8, r0
 8019aca:	d13a      	bne.n	8019b42 <_malloc_r+0xd2>
 8019acc:	6821      	ldr	r1, [r4, #0]
 8019ace:	3503      	adds	r5, #3
 8019ad0:	1a6d      	subs	r5, r5, r1
 8019ad2:	f025 0503 	bic.w	r5, r5, #3
 8019ad6:	3508      	adds	r5, #8
 8019ad8:	2d0c      	cmp	r5, #12
 8019ada:	bf38      	it	cc
 8019adc:	250c      	movcc	r5, #12
 8019ade:	4629      	mov	r1, r5
 8019ae0:	4638      	mov	r0, r7
 8019ae2:	f7ff ffa5 	bl	8019a30 <sbrk_aligned>
 8019ae6:	3001      	adds	r0, #1
 8019ae8:	d02b      	beq.n	8019b42 <_malloc_r+0xd2>
 8019aea:	6823      	ldr	r3, [r4, #0]
 8019aec:	442b      	add	r3, r5
 8019aee:	6023      	str	r3, [r4, #0]
 8019af0:	e00e      	b.n	8019b10 <_malloc_r+0xa0>
 8019af2:	6822      	ldr	r2, [r4, #0]
 8019af4:	1b52      	subs	r2, r2, r5
 8019af6:	d41e      	bmi.n	8019b36 <_malloc_r+0xc6>
 8019af8:	2a0b      	cmp	r2, #11
 8019afa:	d916      	bls.n	8019b2a <_malloc_r+0xba>
 8019afc:	1961      	adds	r1, r4, r5
 8019afe:	42a3      	cmp	r3, r4
 8019b00:	6025      	str	r5, [r4, #0]
 8019b02:	bf18      	it	ne
 8019b04:	6059      	strne	r1, [r3, #4]
 8019b06:	6863      	ldr	r3, [r4, #4]
 8019b08:	bf08      	it	eq
 8019b0a:	6031      	streq	r1, [r6, #0]
 8019b0c:	5162      	str	r2, [r4, r5]
 8019b0e:	604b      	str	r3, [r1, #4]
 8019b10:	4638      	mov	r0, r7
 8019b12:	f104 060b 	add.w	r6, r4, #11
 8019b16:	f000 fbe1 	bl	801a2dc <__malloc_unlock>
 8019b1a:	f026 0607 	bic.w	r6, r6, #7
 8019b1e:	1d23      	adds	r3, r4, #4
 8019b20:	1af2      	subs	r2, r6, r3
 8019b22:	d0b6      	beq.n	8019a92 <_malloc_r+0x22>
 8019b24:	1b9b      	subs	r3, r3, r6
 8019b26:	50a3      	str	r3, [r4, r2]
 8019b28:	e7b3      	b.n	8019a92 <_malloc_r+0x22>
 8019b2a:	6862      	ldr	r2, [r4, #4]
 8019b2c:	42a3      	cmp	r3, r4
 8019b2e:	bf0c      	ite	eq
 8019b30:	6032      	streq	r2, [r6, #0]
 8019b32:	605a      	strne	r2, [r3, #4]
 8019b34:	e7ec      	b.n	8019b10 <_malloc_r+0xa0>
 8019b36:	4623      	mov	r3, r4
 8019b38:	6864      	ldr	r4, [r4, #4]
 8019b3a:	e7b2      	b.n	8019aa2 <_malloc_r+0x32>
 8019b3c:	4634      	mov	r4, r6
 8019b3e:	6876      	ldr	r6, [r6, #4]
 8019b40:	e7b9      	b.n	8019ab6 <_malloc_r+0x46>
 8019b42:	230c      	movs	r3, #12
 8019b44:	603b      	str	r3, [r7, #0]
 8019b46:	4638      	mov	r0, r7
 8019b48:	f000 fbc8 	bl	801a2dc <__malloc_unlock>
 8019b4c:	e7a1      	b.n	8019a92 <_malloc_r+0x22>
 8019b4e:	6025      	str	r5, [r4, #0]
 8019b50:	e7de      	b.n	8019b10 <_malloc_r+0xa0>
 8019b52:	bf00      	nop
 8019b54:	2001f81c 	.word	0x2001f81c

08019b58 <__ssputs_r>:
 8019b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b5c:	688e      	ldr	r6, [r1, #8]
 8019b5e:	429e      	cmp	r6, r3
 8019b60:	4682      	mov	sl, r0
 8019b62:	460c      	mov	r4, r1
 8019b64:	4690      	mov	r8, r2
 8019b66:	461f      	mov	r7, r3
 8019b68:	d838      	bhi.n	8019bdc <__ssputs_r+0x84>
 8019b6a:	898a      	ldrh	r2, [r1, #12]
 8019b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019b70:	d032      	beq.n	8019bd8 <__ssputs_r+0x80>
 8019b72:	6825      	ldr	r5, [r4, #0]
 8019b74:	6909      	ldr	r1, [r1, #16]
 8019b76:	eba5 0901 	sub.w	r9, r5, r1
 8019b7a:	6965      	ldr	r5, [r4, #20]
 8019b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019b80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019b84:	3301      	adds	r3, #1
 8019b86:	444b      	add	r3, r9
 8019b88:	106d      	asrs	r5, r5, #1
 8019b8a:	429d      	cmp	r5, r3
 8019b8c:	bf38      	it	cc
 8019b8e:	461d      	movcc	r5, r3
 8019b90:	0553      	lsls	r3, r2, #21
 8019b92:	d531      	bpl.n	8019bf8 <__ssputs_r+0xa0>
 8019b94:	4629      	mov	r1, r5
 8019b96:	f7ff ff6b 	bl	8019a70 <_malloc_r>
 8019b9a:	4606      	mov	r6, r0
 8019b9c:	b950      	cbnz	r0, 8019bb4 <__ssputs_r+0x5c>
 8019b9e:	230c      	movs	r3, #12
 8019ba0:	f8ca 3000 	str.w	r3, [sl]
 8019ba4:	89a3      	ldrh	r3, [r4, #12]
 8019ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019baa:	81a3      	strh	r3, [r4, #12]
 8019bac:	f04f 30ff 	mov.w	r0, #4294967295
 8019bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bb4:	6921      	ldr	r1, [r4, #16]
 8019bb6:	464a      	mov	r2, r9
 8019bb8:	f7fd fca6 	bl	8017508 <memcpy>
 8019bbc:	89a3      	ldrh	r3, [r4, #12]
 8019bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019bc6:	81a3      	strh	r3, [r4, #12]
 8019bc8:	6126      	str	r6, [r4, #16]
 8019bca:	6165      	str	r5, [r4, #20]
 8019bcc:	444e      	add	r6, r9
 8019bce:	eba5 0509 	sub.w	r5, r5, r9
 8019bd2:	6026      	str	r6, [r4, #0]
 8019bd4:	60a5      	str	r5, [r4, #8]
 8019bd6:	463e      	mov	r6, r7
 8019bd8:	42be      	cmp	r6, r7
 8019bda:	d900      	bls.n	8019bde <__ssputs_r+0x86>
 8019bdc:	463e      	mov	r6, r7
 8019bde:	6820      	ldr	r0, [r4, #0]
 8019be0:	4632      	mov	r2, r6
 8019be2:	4641      	mov	r1, r8
 8019be4:	f000 fb5a 	bl	801a29c <memmove>
 8019be8:	68a3      	ldr	r3, [r4, #8]
 8019bea:	1b9b      	subs	r3, r3, r6
 8019bec:	60a3      	str	r3, [r4, #8]
 8019bee:	6823      	ldr	r3, [r4, #0]
 8019bf0:	4433      	add	r3, r6
 8019bf2:	6023      	str	r3, [r4, #0]
 8019bf4:	2000      	movs	r0, #0
 8019bf6:	e7db      	b.n	8019bb0 <__ssputs_r+0x58>
 8019bf8:	462a      	mov	r2, r5
 8019bfa:	f000 fb75 	bl	801a2e8 <_realloc_r>
 8019bfe:	4606      	mov	r6, r0
 8019c00:	2800      	cmp	r0, #0
 8019c02:	d1e1      	bne.n	8019bc8 <__ssputs_r+0x70>
 8019c04:	6921      	ldr	r1, [r4, #16]
 8019c06:	4650      	mov	r0, sl
 8019c08:	f7ff fec6 	bl	8019998 <_free_r>
 8019c0c:	e7c7      	b.n	8019b9e <__ssputs_r+0x46>
	...

08019c10 <_svfiprintf_r>:
 8019c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c14:	4698      	mov	r8, r3
 8019c16:	898b      	ldrh	r3, [r1, #12]
 8019c18:	061b      	lsls	r3, r3, #24
 8019c1a:	b09d      	sub	sp, #116	; 0x74
 8019c1c:	4607      	mov	r7, r0
 8019c1e:	460d      	mov	r5, r1
 8019c20:	4614      	mov	r4, r2
 8019c22:	d50e      	bpl.n	8019c42 <_svfiprintf_r+0x32>
 8019c24:	690b      	ldr	r3, [r1, #16]
 8019c26:	b963      	cbnz	r3, 8019c42 <_svfiprintf_r+0x32>
 8019c28:	2140      	movs	r1, #64	; 0x40
 8019c2a:	f7ff ff21 	bl	8019a70 <_malloc_r>
 8019c2e:	6028      	str	r0, [r5, #0]
 8019c30:	6128      	str	r0, [r5, #16]
 8019c32:	b920      	cbnz	r0, 8019c3e <_svfiprintf_r+0x2e>
 8019c34:	230c      	movs	r3, #12
 8019c36:	603b      	str	r3, [r7, #0]
 8019c38:	f04f 30ff 	mov.w	r0, #4294967295
 8019c3c:	e0d1      	b.n	8019de2 <_svfiprintf_r+0x1d2>
 8019c3e:	2340      	movs	r3, #64	; 0x40
 8019c40:	616b      	str	r3, [r5, #20]
 8019c42:	2300      	movs	r3, #0
 8019c44:	9309      	str	r3, [sp, #36]	; 0x24
 8019c46:	2320      	movs	r3, #32
 8019c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c50:	2330      	movs	r3, #48	; 0x30
 8019c52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019dfc <_svfiprintf_r+0x1ec>
 8019c56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019c5a:	f04f 0901 	mov.w	r9, #1
 8019c5e:	4623      	mov	r3, r4
 8019c60:	469a      	mov	sl, r3
 8019c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c66:	b10a      	cbz	r2, 8019c6c <_svfiprintf_r+0x5c>
 8019c68:	2a25      	cmp	r2, #37	; 0x25
 8019c6a:	d1f9      	bne.n	8019c60 <_svfiprintf_r+0x50>
 8019c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8019c70:	d00b      	beq.n	8019c8a <_svfiprintf_r+0x7a>
 8019c72:	465b      	mov	r3, fp
 8019c74:	4622      	mov	r2, r4
 8019c76:	4629      	mov	r1, r5
 8019c78:	4638      	mov	r0, r7
 8019c7a:	f7ff ff6d 	bl	8019b58 <__ssputs_r>
 8019c7e:	3001      	adds	r0, #1
 8019c80:	f000 80aa 	beq.w	8019dd8 <_svfiprintf_r+0x1c8>
 8019c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c86:	445a      	add	r2, fp
 8019c88:	9209      	str	r2, [sp, #36]	; 0x24
 8019c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	f000 80a2 	beq.w	8019dd8 <_svfiprintf_r+0x1c8>
 8019c94:	2300      	movs	r3, #0
 8019c96:	f04f 32ff 	mov.w	r2, #4294967295
 8019c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c9e:	f10a 0a01 	add.w	sl, sl, #1
 8019ca2:	9304      	str	r3, [sp, #16]
 8019ca4:	9307      	str	r3, [sp, #28]
 8019ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019caa:	931a      	str	r3, [sp, #104]	; 0x68
 8019cac:	4654      	mov	r4, sl
 8019cae:	2205      	movs	r2, #5
 8019cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cb4:	4851      	ldr	r0, [pc, #324]	; (8019dfc <_svfiprintf_r+0x1ec>)
 8019cb6:	f7e6 fa9b 	bl	80001f0 <memchr>
 8019cba:	9a04      	ldr	r2, [sp, #16]
 8019cbc:	b9d8      	cbnz	r0, 8019cf6 <_svfiprintf_r+0xe6>
 8019cbe:	06d0      	lsls	r0, r2, #27
 8019cc0:	bf44      	itt	mi
 8019cc2:	2320      	movmi	r3, #32
 8019cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019cc8:	0711      	lsls	r1, r2, #28
 8019cca:	bf44      	itt	mi
 8019ccc:	232b      	movmi	r3, #43	; 0x2b
 8019cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8019cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8019cd8:	d015      	beq.n	8019d06 <_svfiprintf_r+0xf6>
 8019cda:	9a07      	ldr	r2, [sp, #28]
 8019cdc:	4654      	mov	r4, sl
 8019cde:	2000      	movs	r0, #0
 8019ce0:	f04f 0c0a 	mov.w	ip, #10
 8019ce4:	4621      	mov	r1, r4
 8019ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019cea:	3b30      	subs	r3, #48	; 0x30
 8019cec:	2b09      	cmp	r3, #9
 8019cee:	d94e      	bls.n	8019d8e <_svfiprintf_r+0x17e>
 8019cf0:	b1b0      	cbz	r0, 8019d20 <_svfiprintf_r+0x110>
 8019cf2:	9207      	str	r2, [sp, #28]
 8019cf4:	e014      	b.n	8019d20 <_svfiprintf_r+0x110>
 8019cf6:	eba0 0308 	sub.w	r3, r0, r8
 8019cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8019cfe:	4313      	orrs	r3, r2
 8019d00:	9304      	str	r3, [sp, #16]
 8019d02:	46a2      	mov	sl, r4
 8019d04:	e7d2      	b.n	8019cac <_svfiprintf_r+0x9c>
 8019d06:	9b03      	ldr	r3, [sp, #12]
 8019d08:	1d19      	adds	r1, r3, #4
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	9103      	str	r1, [sp, #12]
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	bfbb      	ittet	lt
 8019d12:	425b      	neglt	r3, r3
 8019d14:	f042 0202 	orrlt.w	r2, r2, #2
 8019d18:	9307      	strge	r3, [sp, #28]
 8019d1a:	9307      	strlt	r3, [sp, #28]
 8019d1c:	bfb8      	it	lt
 8019d1e:	9204      	strlt	r2, [sp, #16]
 8019d20:	7823      	ldrb	r3, [r4, #0]
 8019d22:	2b2e      	cmp	r3, #46	; 0x2e
 8019d24:	d10c      	bne.n	8019d40 <_svfiprintf_r+0x130>
 8019d26:	7863      	ldrb	r3, [r4, #1]
 8019d28:	2b2a      	cmp	r3, #42	; 0x2a
 8019d2a:	d135      	bne.n	8019d98 <_svfiprintf_r+0x188>
 8019d2c:	9b03      	ldr	r3, [sp, #12]
 8019d2e:	1d1a      	adds	r2, r3, #4
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	9203      	str	r2, [sp, #12]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	bfb8      	it	lt
 8019d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8019d3c:	3402      	adds	r4, #2
 8019d3e:	9305      	str	r3, [sp, #20]
 8019d40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019e0c <_svfiprintf_r+0x1fc>
 8019d44:	7821      	ldrb	r1, [r4, #0]
 8019d46:	2203      	movs	r2, #3
 8019d48:	4650      	mov	r0, sl
 8019d4a:	f7e6 fa51 	bl	80001f0 <memchr>
 8019d4e:	b140      	cbz	r0, 8019d62 <_svfiprintf_r+0x152>
 8019d50:	2340      	movs	r3, #64	; 0x40
 8019d52:	eba0 000a 	sub.w	r0, r0, sl
 8019d56:	fa03 f000 	lsl.w	r0, r3, r0
 8019d5a:	9b04      	ldr	r3, [sp, #16]
 8019d5c:	4303      	orrs	r3, r0
 8019d5e:	3401      	adds	r4, #1
 8019d60:	9304      	str	r3, [sp, #16]
 8019d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d66:	4826      	ldr	r0, [pc, #152]	; (8019e00 <_svfiprintf_r+0x1f0>)
 8019d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019d6c:	2206      	movs	r2, #6
 8019d6e:	f7e6 fa3f 	bl	80001f0 <memchr>
 8019d72:	2800      	cmp	r0, #0
 8019d74:	d038      	beq.n	8019de8 <_svfiprintf_r+0x1d8>
 8019d76:	4b23      	ldr	r3, [pc, #140]	; (8019e04 <_svfiprintf_r+0x1f4>)
 8019d78:	bb1b      	cbnz	r3, 8019dc2 <_svfiprintf_r+0x1b2>
 8019d7a:	9b03      	ldr	r3, [sp, #12]
 8019d7c:	3307      	adds	r3, #7
 8019d7e:	f023 0307 	bic.w	r3, r3, #7
 8019d82:	3308      	adds	r3, #8
 8019d84:	9303      	str	r3, [sp, #12]
 8019d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d88:	4433      	add	r3, r6
 8019d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8019d8c:	e767      	b.n	8019c5e <_svfiprintf_r+0x4e>
 8019d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d92:	460c      	mov	r4, r1
 8019d94:	2001      	movs	r0, #1
 8019d96:	e7a5      	b.n	8019ce4 <_svfiprintf_r+0xd4>
 8019d98:	2300      	movs	r3, #0
 8019d9a:	3401      	adds	r4, #1
 8019d9c:	9305      	str	r3, [sp, #20]
 8019d9e:	4619      	mov	r1, r3
 8019da0:	f04f 0c0a 	mov.w	ip, #10
 8019da4:	4620      	mov	r0, r4
 8019da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019daa:	3a30      	subs	r2, #48	; 0x30
 8019dac:	2a09      	cmp	r2, #9
 8019dae:	d903      	bls.n	8019db8 <_svfiprintf_r+0x1a8>
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d0c5      	beq.n	8019d40 <_svfiprintf_r+0x130>
 8019db4:	9105      	str	r1, [sp, #20]
 8019db6:	e7c3      	b.n	8019d40 <_svfiprintf_r+0x130>
 8019db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8019dbc:	4604      	mov	r4, r0
 8019dbe:	2301      	movs	r3, #1
 8019dc0:	e7f0      	b.n	8019da4 <_svfiprintf_r+0x194>
 8019dc2:	ab03      	add	r3, sp, #12
 8019dc4:	9300      	str	r3, [sp, #0]
 8019dc6:	462a      	mov	r2, r5
 8019dc8:	4b0f      	ldr	r3, [pc, #60]	; (8019e08 <_svfiprintf_r+0x1f8>)
 8019dca:	a904      	add	r1, sp, #16
 8019dcc:	4638      	mov	r0, r7
 8019dce:	f7fd fc51 	bl	8017674 <_printf_float>
 8019dd2:	1c42      	adds	r2, r0, #1
 8019dd4:	4606      	mov	r6, r0
 8019dd6:	d1d6      	bne.n	8019d86 <_svfiprintf_r+0x176>
 8019dd8:	89ab      	ldrh	r3, [r5, #12]
 8019dda:	065b      	lsls	r3, r3, #25
 8019ddc:	f53f af2c 	bmi.w	8019c38 <_svfiprintf_r+0x28>
 8019de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019de2:	b01d      	add	sp, #116	; 0x74
 8019de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019de8:	ab03      	add	r3, sp, #12
 8019dea:	9300      	str	r3, [sp, #0]
 8019dec:	462a      	mov	r2, r5
 8019dee:	4b06      	ldr	r3, [pc, #24]	; (8019e08 <_svfiprintf_r+0x1f8>)
 8019df0:	a904      	add	r1, sp, #16
 8019df2:	4638      	mov	r0, r7
 8019df4:	f7fd fee2 	bl	8017bbc <_printf_i>
 8019df8:	e7eb      	b.n	8019dd2 <_svfiprintf_r+0x1c2>
 8019dfa:	bf00      	nop
 8019dfc:	0804e22c 	.word	0x0804e22c
 8019e00:	0804e236 	.word	0x0804e236
 8019e04:	08017675 	.word	0x08017675
 8019e08:	08019b59 	.word	0x08019b59
 8019e0c:	0804e232 	.word	0x0804e232

08019e10 <__sfputc_r>:
 8019e10:	6893      	ldr	r3, [r2, #8]
 8019e12:	3b01      	subs	r3, #1
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	b410      	push	{r4}
 8019e18:	6093      	str	r3, [r2, #8]
 8019e1a:	da08      	bge.n	8019e2e <__sfputc_r+0x1e>
 8019e1c:	6994      	ldr	r4, [r2, #24]
 8019e1e:	42a3      	cmp	r3, r4
 8019e20:	db01      	blt.n	8019e26 <__sfputc_r+0x16>
 8019e22:	290a      	cmp	r1, #10
 8019e24:	d103      	bne.n	8019e2e <__sfputc_r+0x1e>
 8019e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e2a:	f7fe b8b3 	b.w	8017f94 <__swbuf_r>
 8019e2e:	6813      	ldr	r3, [r2, #0]
 8019e30:	1c58      	adds	r0, r3, #1
 8019e32:	6010      	str	r0, [r2, #0]
 8019e34:	7019      	strb	r1, [r3, #0]
 8019e36:	4608      	mov	r0, r1
 8019e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e3c:	4770      	bx	lr

08019e3e <__sfputs_r>:
 8019e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e40:	4606      	mov	r6, r0
 8019e42:	460f      	mov	r7, r1
 8019e44:	4614      	mov	r4, r2
 8019e46:	18d5      	adds	r5, r2, r3
 8019e48:	42ac      	cmp	r4, r5
 8019e4a:	d101      	bne.n	8019e50 <__sfputs_r+0x12>
 8019e4c:	2000      	movs	r0, #0
 8019e4e:	e007      	b.n	8019e60 <__sfputs_r+0x22>
 8019e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e54:	463a      	mov	r2, r7
 8019e56:	4630      	mov	r0, r6
 8019e58:	f7ff ffda 	bl	8019e10 <__sfputc_r>
 8019e5c:	1c43      	adds	r3, r0, #1
 8019e5e:	d1f3      	bne.n	8019e48 <__sfputs_r+0xa>
 8019e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019e64 <_vfiprintf_r>:
 8019e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e68:	460d      	mov	r5, r1
 8019e6a:	b09d      	sub	sp, #116	; 0x74
 8019e6c:	4614      	mov	r4, r2
 8019e6e:	4698      	mov	r8, r3
 8019e70:	4606      	mov	r6, r0
 8019e72:	b118      	cbz	r0, 8019e7c <_vfiprintf_r+0x18>
 8019e74:	6983      	ldr	r3, [r0, #24]
 8019e76:	b90b      	cbnz	r3, 8019e7c <_vfiprintf_r+0x18>
 8019e78:	f7ff f8e2 	bl	8019040 <__sinit>
 8019e7c:	4b89      	ldr	r3, [pc, #548]	; (801a0a4 <_vfiprintf_r+0x240>)
 8019e7e:	429d      	cmp	r5, r3
 8019e80:	d11b      	bne.n	8019eba <_vfiprintf_r+0x56>
 8019e82:	6875      	ldr	r5, [r6, #4]
 8019e84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e86:	07d9      	lsls	r1, r3, #31
 8019e88:	d405      	bmi.n	8019e96 <_vfiprintf_r+0x32>
 8019e8a:	89ab      	ldrh	r3, [r5, #12]
 8019e8c:	059a      	lsls	r2, r3, #22
 8019e8e:	d402      	bmi.n	8019e96 <_vfiprintf_r+0x32>
 8019e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e92:	f7ff f978 	bl	8019186 <__retarget_lock_acquire_recursive>
 8019e96:	89ab      	ldrh	r3, [r5, #12]
 8019e98:	071b      	lsls	r3, r3, #28
 8019e9a:	d501      	bpl.n	8019ea0 <_vfiprintf_r+0x3c>
 8019e9c:	692b      	ldr	r3, [r5, #16]
 8019e9e:	b9eb      	cbnz	r3, 8019edc <_vfiprintf_r+0x78>
 8019ea0:	4629      	mov	r1, r5
 8019ea2:	4630      	mov	r0, r6
 8019ea4:	f7fe f8c8 	bl	8018038 <__swsetup_r>
 8019ea8:	b1c0      	cbz	r0, 8019edc <_vfiprintf_r+0x78>
 8019eaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019eac:	07dc      	lsls	r4, r3, #31
 8019eae:	d50e      	bpl.n	8019ece <_vfiprintf_r+0x6a>
 8019eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8019eb4:	b01d      	add	sp, #116	; 0x74
 8019eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eba:	4b7b      	ldr	r3, [pc, #492]	; (801a0a8 <_vfiprintf_r+0x244>)
 8019ebc:	429d      	cmp	r5, r3
 8019ebe:	d101      	bne.n	8019ec4 <_vfiprintf_r+0x60>
 8019ec0:	68b5      	ldr	r5, [r6, #8]
 8019ec2:	e7df      	b.n	8019e84 <_vfiprintf_r+0x20>
 8019ec4:	4b79      	ldr	r3, [pc, #484]	; (801a0ac <_vfiprintf_r+0x248>)
 8019ec6:	429d      	cmp	r5, r3
 8019ec8:	bf08      	it	eq
 8019eca:	68f5      	ldreq	r5, [r6, #12]
 8019ecc:	e7da      	b.n	8019e84 <_vfiprintf_r+0x20>
 8019ece:	89ab      	ldrh	r3, [r5, #12]
 8019ed0:	0598      	lsls	r0, r3, #22
 8019ed2:	d4ed      	bmi.n	8019eb0 <_vfiprintf_r+0x4c>
 8019ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ed6:	f7ff f957 	bl	8019188 <__retarget_lock_release_recursive>
 8019eda:	e7e9      	b.n	8019eb0 <_vfiprintf_r+0x4c>
 8019edc:	2300      	movs	r3, #0
 8019ede:	9309      	str	r3, [sp, #36]	; 0x24
 8019ee0:	2320      	movs	r3, #32
 8019ee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8019eea:	2330      	movs	r3, #48	; 0x30
 8019eec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a0b0 <_vfiprintf_r+0x24c>
 8019ef0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ef4:	f04f 0901 	mov.w	r9, #1
 8019ef8:	4623      	mov	r3, r4
 8019efa:	469a      	mov	sl, r3
 8019efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f00:	b10a      	cbz	r2, 8019f06 <_vfiprintf_r+0xa2>
 8019f02:	2a25      	cmp	r2, #37	; 0x25
 8019f04:	d1f9      	bne.n	8019efa <_vfiprintf_r+0x96>
 8019f06:	ebba 0b04 	subs.w	fp, sl, r4
 8019f0a:	d00b      	beq.n	8019f24 <_vfiprintf_r+0xc0>
 8019f0c:	465b      	mov	r3, fp
 8019f0e:	4622      	mov	r2, r4
 8019f10:	4629      	mov	r1, r5
 8019f12:	4630      	mov	r0, r6
 8019f14:	f7ff ff93 	bl	8019e3e <__sfputs_r>
 8019f18:	3001      	adds	r0, #1
 8019f1a:	f000 80aa 	beq.w	801a072 <_vfiprintf_r+0x20e>
 8019f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f20:	445a      	add	r2, fp
 8019f22:	9209      	str	r2, [sp, #36]	; 0x24
 8019f24:	f89a 3000 	ldrb.w	r3, [sl]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	f000 80a2 	beq.w	801a072 <_vfiprintf_r+0x20e>
 8019f2e:	2300      	movs	r3, #0
 8019f30:	f04f 32ff 	mov.w	r2, #4294967295
 8019f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f38:	f10a 0a01 	add.w	sl, sl, #1
 8019f3c:	9304      	str	r3, [sp, #16]
 8019f3e:	9307      	str	r3, [sp, #28]
 8019f40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019f44:	931a      	str	r3, [sp, #104]	; 0x68
 8019f46:	4654      	mov	r4, sl
 8019f48:	2205      	movs	r2, #5
 8019f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f4e:	4858      	ldr	r0, [pc, #352]	; (801a0b0 <_vfiprintf_r+0x24c>)
 8019f50:	f7e6 f94e 	bl	80001f0 <memchr>
 8019f54:	9a04      	ldr	r2, [sp, #16]
 8019f56:	b9d8      	cbnz	r0, 8019f90 <_vfiprintf_r+0x12c>
 8019f58:	06d1      	lsls	r1, r2, #27
 8019f5a:	bf44      	itt	mi
 8019f5c:	2320      	movmi	r3, #32
 8019f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f62:	0713      	lsls	r3, r2, #28
 8019f64:	bf44      	itt	mi
 8019f66:	232b      	movmi	r3, #43	; 0x2b
 8019f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8019f70:	2b2a      	cmp	r3, #42	; 0x2a
 8019f72:	d015      	beq.n	8019fa0 <_vfiprintf_r+0x13c>
 8019f74:	9a07      	ldr	r2, [sp, #28]
 8019f76:	4654      	mov	r4, sl
 8019f78:	2000      	movs	r0, #0
 8019f7a:	f04f 0c0a 	mov.w	ip, #10
 8019f7e:	4621      	mov	r1, r4
 8019f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f84:	3b30      	subs	r3, #48	; 0x30
 8019f86:	2b09      	cmp	r3, #9
 8019f88:	d94e      	bls.n	801a028 <_vfiprintf_r+0x1c4>
 8019f8a:	b1b0      	cbz	r0, 8019fba <_vfiprintf_r+0x156>
 8019f8c:	9207      	str	r2, [sp, #28]
 8019f8e:	e014      	b.n	8019fba <_vfiprintf_r+0x156>
 8019f90:	eba0 0308 	sub.w	r3, r0, r8
 8019f94:	fa09 f303 	lsl.w	r3, r9, r3
 8019f98:	4313      	orrs	r3, r2
 8019f9a:	9304      	str	r3, [sp, #16]
 8019f9c:	46a2      	mov	sl, r4
 8019f9e:	e7d2      	b.n	8019f46 <_vfiprintf_r+0xe2>
 8019fa0:	9b03      	ldr	r3, [sp, #12]
 8019fa2:	1d19      	adds	r1, r3, #4
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	9103      	str	r1, [sp, #12]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	bfbb      	ittet	lt
 8019fac:	425b      	neglt	r3, r3
 8019fae:	f042 0202 	orrlt.w	r2, r2, #2
 8019fb2:	9307      	strge	r3, [sp, #28]
 8019fb4:	9307      	strlt	r3, [sp, #28]
 8019fb6:	bfb8      	it	lt
 8019fb8:	9204      	strlt	r2, [sp, #16]
 8019fba:	7823      	ldrb	r3, [r4, #0]
 8019fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8019fbe:	d10c      	bne.n	8019fda <_vfiprintf_r+0x176>
 8019fc0:	7863      	ldrb	r3, [r4, #1]
 8019fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8019fc4:	d135      	bne.n	801a032 <_vfiprintf_r+0x1ce>
 8019fc6:	9b03      	ldr	r3, [sp, #12]
 8019fc8:	1d1a      	adds	r2, r3, #4
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	9203      	str	r2, [sp, #12]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	bfb8      	it	lt
 8019fd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8019fd6:	3402      	adds	r4, #2
 8019fd8:	9305      	str	r3, [sp, #20]
 8019fda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a0c0 <_vfiprintf_r+0x25c>
 8019fde:	7821      	ldrb	r1, [r4, #0]
 8019fe0:	2203      	movs	r2, #3
 8019fe2:	4650      	mov	r0, sl
 8019fe4:	f7e6 f904 	bl	80001f0 <memchr>
 8019fe8:	b140      	cbz	r0, 8019ffc <_vfiprintf_r+0x198>
 8019fea:	2340      	movs	r3, #64	; 0x40
 8019fec:	eba0 000a 	sub.w	r0, r0, sl
 8019ff0:	fa03 f000 	lsl.w	r0, r3, r0
 8019ff4:	9b04      	ldr	r3, [sp, #16]
 8019ff6:	4303      	orrs	r3, r0
 8019ff8:	3401      	adds	r4, #1
 8019ffa:	9304      	str	r3, [sp, #16]
 8019ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a000:	482c      	ldr	r0, [pc, #176]	; (801a0b4 <_vfiprintf_r+0x250>)
 801a002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a006:	2206      	movs	r2, #6
 801a008:	f7e6 f8f2 	bl	80001f0 <memchr>
 801a00c:	2800      	cmp	r0, #0
 801a00e:	d03f      	beq.n	801a090 <_vfiprintf_r+0x22c>
 801a010:	4b29      	ldr	r3, [pc, #164]	; (801a0b8 <_vfiprintf_r+0x254>)
 801a012:	bb1b      	cbnz	r3, 801a05c <_vfiprintf_r+0x1f8>
 801a014:	9b03      	ldr	r3, [sp, #12]
 801a016:	3307      	adds	r3, #7
 801a018:	f023 0307 	bic.w	r3, r3, #7
 801a01c:	3308      	adds	r3, #8
 801a01e:	9303      	str	r3, [sp, #12]
 801a020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a022:	443b      	add	r3, r7
 801a024:	9309      	str	r3, [sp, #36]	; 0x24
 801a026:	e767      	b.n	8019ef8 <_vfiprintf_r+0x94>
 801a028:	fb0c 3202 	mla	r2, ip, r2, r3
 801a02c:	460c      	mov	r4, r1
 801a02e:	2001      	movs	r0, #1
 801a030:	e7a5      	b.n	8019f7e <_vfiprintf_r+0x11a>
 801a032:	2300      	movs	r3, #0
 801a034:	3401      	adds	r4, #1
 801a036:	9305      	str	r3, [sp, #20]
 801a038:	4619      	mov	r1, r3
 801a03a:	f04f 0c0a 	mov.w	ip, #10
 801a03e:	4620      	mov	r0, r4
 801a040:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a044:	3a30      	subs	r2, #48	; 0x30
 801a046:	2a09      	cmp	r2, #9
 801a048:	d903      	bls.n	801a052 <_vfiprintf_r+0x1ee>
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d0c5      	beq.n	8019fda <_vfiprintf_r+0x176>
 801a04e:	9105      	str	r1, [sp, #20]
 801a050:	e7c3      	b.n	8019fda <_vfiprintf_r+0x176>
 801a052:	fb0c 2101 	mla	r1, ip, r1, r2
 801a056:	4604      	mov	r4, r0
 801a058:	2301      	movs	r3, #1
 801a05a:	e7f0      	b.n	801a03e <_vfiprintf_r+0x1da>
 801a05c:	ab03      	add	r3, sp, #12
 801a05e:	9300      	str	r3, [sp, #0]
 801a060:	462a      	mov	r2, r5
 801a062:	4b16      	ldr	r3, [pc, #88]	; (801a0bc <_vfiprintf_r+0x258>)
 801a064:	a904      	add	r1, sp, #16
 801a066:	4630      	mov	r0, r6
 801a068:	f7fd fb04 	bl	8017674 <_printf_float>
 801a06c:	4607      	mov	r7, r0
 801a06e:	1c78      	adds	r0, r7, #1
 801a070:	d1d6      	bne.n	801a020 <_vfiprintf_r+0x1bc>
 801a072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a074:	07d9      	lsls	r1, r3, #31
 801a076:	d405      	bmi.n	801a084 <_vfiprintf_r+0x220>
 801a078:	89ab      	ldrh	r3, [r5, #12]
 801a07a:	059a      	lsls	r2, r3, #22
 801a07c:	d402      	bmi.n	801a084 <_vfiprintf_r+0x220>
 801a07e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a080:	f7ff f882 	bl	8019188 <__retarget_lock_release_recursive>
 801a084:	89ab      	ldrh	r3, [r5, #12]
 801a086:	065b      	lsls	r3, r3, #25
 801a088:	f53f af12 	bmi.w	8019eb0 <_vfiprintf_r+0x4c>
 801a08c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a08e:	e711      	b.n	8019eb4 <_vfiprintf_r+0x50>
 801a090:	ab03      	add	r3, sp, #12
 801a092:	9300      	str	r3, [sp, #0]
 801a094:	462a      	mov	r2, r5
 801a096:	4b09      	ldr	r3, [pc, #36]	; (801a0bc <_vfiprintf_r+0x258>)
 801a098:	a904      	add	r1, sp, #16
 801a09a:	4630      	mov	r0, r6
 801a09c:	f7fd fd8e 	bl	8017bbc <_printf_i>
 801a0a0:	e7e4      	b.n	801a06c <_vfiprintf_r+0x208>
 801a0a2:	bf00      	nop
 801a0a4:	0804e090 	.word	0x0804e090
 801a0a8:	0804e0b0 	.word	0x0804e0b0
 801a0ac:	0804e070 	.word	0x0804e070
 801a0b0:	0804e22c 	.word	0x0804e22c
 801a0b4:	0804e236 	.word	0x0804e236
 801a0b8:	08017675 	.word	0x08017675
 801a0bc:	08019e3f 	.word	0x08019e3f
 801a0c0:	0804e232 	.word	0x0804e232

0801a0c4 <_sbrk_r>:
 801a0c4:	b538      	push	{r3, r4, r5, lr}
 801a0c6:	4d06      	ldr	r5, [pc, #24]	; (801a0e0 <_sbrk_r+0x1c>)
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	4604      	mov	r4, r0
 801a0cc:	4608      	mov	r0, r1
 801a0ce:	602b      	str	r3, [r5, #0]
 801a0d0:	f7e8 f950 	bl	8002374 <_sbrk>
 801a0d4:	1c43      	adds	r3, r0, #1
 801a0d6:	d102      	bne.n	801a0de <_sbrk_r+0x1a>
 801a0d8:	682b      	ldr	r3, [r5, #0]
 801a0da:	b103      	cbz	r3, 801a0de <_sbrk_r+0x1a>
 801a0dc:	6023      	str	r3, [r4, #0]
 801a0de:	bd38      	pop	{r3, r4, r5, pc}
 801a0e0:	2001f824 	.word	0x2001f824

0801a0e4 <__sread>:
 801a0e4:	b510      	push	{r4, lr}
 801a0e6:	460c      	mov	r4, r1
 801a0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0ec:	f000 f92c 	bl	801a348 <_read_r>
 801a0f0:	2800      	cmp	r0, #0
 801a0f2:	bfab      	itete	ge
 801a0f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a0f6:	89a3      	ldrhlt	r3, [r4, #12]
 801a0f8:	181b      	addge	r3, r3, r0
 801a0fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a0fe:	bfac      	ite	ge
 801a100:	6563      	strge	r3, [r4, #84]	; 0x54
 801a102:	81a3      	strhlt	r3, [r4, #12]
 801a104:	bd10      	pop	{r4, pc}

0801a106 <__swrite>:
 801a106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a10a:	461f      	mov	r7, r3
 801a10c:	898b      	ldrh	r3, [r1, #12]
 801a10e:	05db      	lsls	r3, r3, #23
 801a110:	4605      	mov	r5, r0
 801a112:	460c      	mov	r4, r1
 801a114:	4616      	mov	r6, r2
 801a116:	d505      	bpl.n	801a124 <__swrite+0x1e>
 801a118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a11c:	2302      	movs	r3, #2
 801a11e:	2200      	movs	r2, #0
 801a120:	f000 f898 	bl	801a254 <_lseek_r>
 801a124:	89a3      	ldrh	r3, [r4, #12]
 801a126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a12a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a12e:	81a3      	strh	r3, [r4, #12]
 801a130:	4632      	mov	r2, r6
 801a132:	463b      	mov	r3, r7
 801a134:	4628      	mov	r0, r5
 801a136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a13a:	f000 b817 	b.w	801a16c <_write_r>

0801a13e <__sseek>:
 801a13e:	b510      	push	{r4, lr}
 801a140:	460c      	mov	r4, r1
 801a142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a146:	f000 f885 	bl	801a254 <_lseek_r>
 801a14a:	1c43      	adds	r3, r0, #1
 801a14c:	89a3      	ldrh	r3, [r4, #12]
 801a14e:	bf15      	itete	ne
 801a150:	6560      	strne	r0, [r4, #84]	; 0x54
 801a152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a15a:	81a3      	strheq	r3, [r4, #12]
 801a15c:	bf18      	it	ne
 801a15e:	81a3      	strhne	r3, [r4, #12]
 801a160:	bd10      	pop	{r4, pc}

0801a162 <__sclose>:
 801a162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a166:	f000 b831 	b.w	801a1cc <_close_r>
	...

0801a16c <_write_r>:
 801a16c:	b538      	push	{r3, r4, r5, lr}
 801a16e:	4d07      	ldr	r5, [pc, #28]	; (801a18c <_write_r+0x20>)
 801a170:	4604      	mov	r4, r0
 801a172:	4608      	mov	r0, r1
 801a174:	4611      	mov	r1, r2
 801a176:	2200      	movs	r2, #0
 801a178:	602a      	str	r2, [r5, #0]
 801a17a:	461a      	mov	r2, r3
 801a17c:	f7e8 f8a9 	bl	80022d2 <_write>
 801a180:	1c43      	adds	r3, r0, #1
 801a182:	d102      	bne.n	801a18a <_write_r+0x1e>
 801a184:	682b      	ldr	r3, [r5, #0]
 801a186:	b103      	cbz	r3, 801a18a <_write_r+0x1e>
 801a188:	6023      	str	r3, [r4, #0]
 801a18a:	bd38      	pop	{r3, r4, r5, pc}
 801a18c:	2001f824 	.word	0x2001f824

0801a190 <__assert_func>:
 801a190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a192:	4614      	mov	r4, r2
 801a194:	461a      	mov	r2, r3
 801a196:	4b09      	ldr	r3, [pc, #36]	; (801a1bc <__assert_func+0x2c>)
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	4605      	mov	r5, r0
 801a19c:	68d8      	ldr	r0, [r3, #12]
 801a19e:	b14c      	cbz	r4, 801a1b4 <__assert_func+0x24>
 801a1a0:	4b07      	ldr	r3, [pc, #28]	; (801a1c0 <__assert_func+0x30>)
 801a1a2:	9100      	str	r1, [sp, #0]
 801a1a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a1a8:	4906      	ldr	r1, [pc, #24]	; (801a1c4 <__assert_func+0x34>)
 801a1aa:	462b      	mov	r3, r5
 801a1ac:	f000 f81e 	bl	801a1ec <fiprintf>
 801a1b0:	f000 f8e9 	bl	801a386 <abort>
 801a1b4:	4b04      	ldr	r3, [pc, #16]	; (801a1c8 <__assert_func+0x38>)
 801a1b6:	461c      	mov	r4, r3
 801a1b8:	e7f3      	b.n	801a1a2 <__assert_func+0x12>
 801a1ba:	bf00      	nop
 801a1bc:	200008c4 	.word	0x200008c4
 801a1c0:	0804e23d 	.word	0x0804e23d
 801a1c4:	0804e24a 	.word	0x0804e24a
 801a1c8:	0804e278 	.word	0x0804e278

0801a1cc <_close_r>:
 801a1cc:	b538      	push	{r3, r4, r5, lr}
 801a1ce:	4d06      	ldr	r5, [pc, #24]	; (801a1e8 <_close_r+0x1c>)
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	4604      	mov	r4, r0
 801a1d4:	4608      	mov	r0, r1
 801a1d6:	602b      	str	r3, [r5, #0]
 801a1d8:	f7e8 f897 	bl	800230a <_close>
 801a1dc:	1c43      	adds	r3, r0, #1
 801a1de:	d102      	bne.n	801a1e6 <_close_r+0x1a>
 801a1e0:	682b      	ldr	r3, [r5, #0]
 801a1e2:	b103      	cbz	r3, 801a1e6 <_close_r+0x1a>
 801a1e4:	6023      	str	r3, [r4, #0]
 801a1e6:	bd38      	pop	{r3, r4, r5, pc}
 801a1e8:	2001f824 	.word	0x2001f824

0801a1ec <fiprintf>:
 801a1ec:	b40e      	push	{r1, r2, r3}
 801a1ee:	b503      	push	{r0, r1, lr}
 801a1f0:	4601      	mov	r1, r0
 801a1f2:	ab03      	add	r3, sp, #12
 801a1f4:	4805      	ldr	r0, [pc, #20]	; (801a20c <fiprintf+0x20>)
 801a1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a1fa:	6800      	ldr	r0, [r0, #0]
 801a1fc:	9301      	str	r3, [sp, #4]
 801a1fe:	f7ff fe31 	bl	8019e64 <_vfiprintf_r>
 801a202:	b002      	add	sp, #8
 801a204:	f85d eb04 	ldr.w	lr, [sp], #4
 801a208:	b003      	add	sp, #12
 801a20a:	4770      	bx	lr
 801a20c:	200008c4 	.word	0x200008c4

0801a210 <_fstat_r>:
 801a210:	b538      	push	{r3, r4, r5, lr}
 801a212:	4d07      	ldr	r5, [pc, #28]	; (801a230 <_fstat_r+0x20>)
 801a214:	2300      	movs	r3, #0
 801a216:	4604      	mov	r4, r0
 801a218:	4608      	mov	r0, r1
 801a21a:	4611      	mov	r1, r2
 801a21c:	602b      	str	r3, [r5, #0]
 801a21e:	f7e8 f880 	bl	8002322 <_fstat>
 801a222:	1c43      	adds	r3, r0, #1
 801a224:	d102      	bne.n	801a22c <_fstat_r+0x1c>
 801a226:	682b      	ldr	r3, [r5, #0]
 801a228:	b103      	cbz	r3, 801a22c <_fstat_r+0x1c>
 801a22a:	6023      	str	r3, [r4, #0]
 801a22c:	bd38      	pop	{r3, r4, r5, pc}
 801a22e:	bf00      	nop
 801a230:	2001f824 	.word	0x2001f824

0801a234 <_isatty_r>:
 801a234:	b538      	push	{r3, r4, r5, lr}
 801a236:	4d06      	ldr	r5, [pc, #24]	; (801a250 <_isatty_r+0x1c>)
 801a238:	2300      	movs	r3, #0
 801a23a:	4604      	mov	r4, r0
 801a23c:	4608      	mov	r0, r1
 801a23e:	602b      	str	r3, [r5, #0]
 801a240:	f7e8 f87f 	bl	8002342 <_isatty>
 801a244:	1c43      	adds	r3, r0, #1
 801a246:	d102      	bne.n	801a24e <_isatty_r+0x1a>
 801a248:	682b      	ldr	r3, [r5, #0]
 801a24a:	b103      	cbz	r3, 801a24e <_isatty_r+0x1a>
 801a24c:	6023      	str	r3, [r4, #0]
 801a24e:	bd38      	pop	{r3, r4, r5, pc}
 801a250:	2001f824 	.word	0x2001f824

0801a254 <_lseek_r>:
 801a254:	b538      	push	{r3, r4, r5, lr}
 801a256:	4d07      	ldr	r5, [pc, #28]	; (801a274 <_lseek_r+0x20>)
 801a258:	4604      	mov	r4, r0
 801a25a:	4608      	mov	r0, r1
 801a25c:	4611      	mov	r1, r2
 801a25e:	2200      	movs	r2, #0
 801a260:	602a      	str	r2, [r5, #0]
 801a262:	461a      	mov	r2, r3
 801a264:	f7e8 f878 	bl	8002358 <_lseek>
 801a268:	1c43      	adds	r3, r0, #1
 801a26a:	d102      	bne.n	801a272 <_lseek_r+0x1e>
 801a26c:	682b      	ldr	r3, [r5, #0]
 801a26e:	b103      	cbz	r3, 801a272 <_lseek_r+0x1e>
 801a270:	6023      	str	r3, [r4, #0]
 801a272:	bd38      	pop	{r3, r4, r5, pc}
 801a274:	2001f824 	.word	0x2001f824

0801a278 <__ascii_mbtowc>:
 801a278:	b082      	sub	sp, #8
 801a27a:	b901      	cbnz	r1, 801a27e <__ascii_mbtowc+0x6>
 801a27c:	a901      	add	r1, sp, #4
 801a27e:	b142      	cbz	r2, 801a292 <__ascii_mbtowc+0x1a>
 801a280:	b14b      	cbz	r3, 801a296 <__ascii_mbtowc+0x1e>
 801a282:	7813      	ldrb	r3, [r2, #0]
 801a284:	600b      	str	r3, [r1, #0]
 801a286:	7812      	ldrb	r2, [r2, #0]
 801a288:	1e10      	subs	r0, r2, #0
 801a28a:	bf18      	it	ne
 801a28c:	2001      	movne	r0, #1
 801a28e:	b002      	add	sp, #8
 801a290:	4770      	bx	lr
 801a292:	4610      	mov	r0, r2
 801a294:	e7fb      	b.n	801a28e <__ascii_mbtowc+0x16>
 801a296:	f06f 0001 	mvn.w	r0, #1
 801a29a:	e7f8      	b.n	801a28e <__ascii_mbtowc+0x16>

0801a29c <memmove>:
 801a29c:	4288      	cmp	r0, r1
 801a29e:	b510      	push	{r4, lr}
 801a2a0:	eb01 0402 	add.w	r4, r1, r2
 801a2a4:	d902      	bls.n	801a2ac <memmove+0x10>
 801a2a6:	4284      	cmp	r4, r0
 801a2a8:	4623      	mov	r3, r4
 801a2aa:	d807      	bhi.n	801a2bc <memmove+0x20>
 801a2ac:	1e43      	subs	r3, r0, #1
 801a2ae:	42a1      	cmp	r1, r4
 801a2b0:	d008      	beq.n	801a2c4 <memmove+0x28>
 801a2b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a2b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a2ba:	e7f8      	b.n	801a2ae <memmove+0x12>
 801a2bc:	4402      	add	r2, r0
 801a2be:	4601      	mov	r1, r0
 801a2c0:	428a      	cmp	r2, r1
 801a2c2:	d100      	bne.n	801a2c6 <memmove+0x2a>
 801a2c4:	bd10      	pop	{r4, pc}
 801a2c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a2ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a2ce:	e7f7      	b.n	801a2c0 <memmove+0x24>

0801a2d0 <__malloc_lock>:
 801a2d0:	4801      	ldr	r0, [pc, #4]	; (801a2d8 <__malloc_lock+0x8>)
 801a2d2:	f7fe bf58 	b.w	8019186 <__retarget_lock_acquire_recursive>
 801a2d6:	bf00      	nop
 801a2d8:	2001f818 	.word	0x2001f818

0801a2dc <__malloc_unlock>:
 801a2dc:	4801      	ldr	r0, [pc, #4]	; (801a2e4 <__malloc_unlock+0x8>)
 801a2de:	f7fe bf53 	b.w	8019188 <__retarget_lock_release_recursive>
 801a2e2:	bf00      	nop
 801a2e4:	2001f818 	.word	0x2001f818

0801a2e8 <_realloc_r>:
 801a2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2ec:	4680      	mov	r8, r0
 801a2ee:	4614      	mov	r4, r2
 801a2f0:	460e      	mov	r6, r1
 801a2f2:	b921      	cbnz	r1, 801a2fe <_realloc_r+0x16>
 801a2f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2f8:	4611      	mov	r1, r2
 801a2fa:	f7ff bbb9 	b.w	8019a70 <_malloc_r>
 801a2fe:	b92a      	cbnz	r2, 801a30c <_realloc_r+0x24>
 801a300:	f7ff fb4a 	bl	8019998 <_free_r>
 801a304:	4625      	mov	r5, r4
 801a306:	4628      	mov	r0, r5
 801a308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a30c:	f000 f842 	bl	801a394 <_malloc_usable_size_r>
 801a310:	4284      	cmp	r4, r0
 801a312:	4607      	mov	r7, r0
 801a314:	d802      	bhi.n	801a31c <_realloc_r+0x34>
 801a316:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a31a:	d812      	bhi.n	801a342 <_realloc_r+0x5a>
 801a31c:	4621      	mov	r1, r4
 801a31e:	4640      	mov	r0, r8
 801a320:	f7ff fba6 	bl	8019a70 <_malloc_r>
 801a324:	4605      	mov	r5, r0
 801a326:	2800      	cmp	r0, #0
 801a328:	d0ed      	beq.n	801a306 <_realloc_r+0x1e>
 801a32a:	42bc      	cmp	r4, r7
 801a32c:	4622      	mov	r2, r4
 801a32e:	4631      	mov	r1, r6
 801a330:	bf28      	it	cs
 801a332:	463a      	movcs	r2, r7
 801a334:	f7fd f8e8 	bl	8017508 <memcpy>
 801a338:	4631      	mov	r1, r6
 801a33a:	4640      	mov	r0, r8
 801a33c:	f7ff fb2c 	bl	8019998 <_free_r>
 801a340:	e7e1      	b.n	801a306 <_realloc_r+0x1e>
 801a342:	4635      	mov	r5, r6
 801a344:	e7df      	b.n	801a306 <_realloc_r+0x1e>
	...

0801a348 <_read_r>:
 801a348:	b538      	push	{r3, r4, r5, lr}
 801a34a:	4d07      	ldr	r5, [pc, #28]	; (801a368 <_read_r+0x20>)
 801a34c:	4604      	mov	r4, r0
 801a34e:	4608      	mov	r0, r1
 801a350:	4611      	mov	r1, r2
 801a352:	2200      	movs	r2, #0
 801a354:	602a      	str	r2, [r5, #0]
 801a356:	461a      	mov	r2, r3
 801a358:	f7e7 ff9e 	bl	8002298 <_read>
 801a35c:	1c43      	adds	r3, r0, #1
 801a35e:	d102      	bne.n	801a366 <_read_r+0x1e>
 801a360:	682b      	ldr	r3, [r5, #0]
 801a362:	b103      	cbz	r3, 801a366 <_read_r+0x1e>
 801a364:	6023      	str	r3, [r4, #0]
 801a366:	bd38      	pop	{r3, r4, r5, pc}
 801a368:	2001f824 	.word	0x2001f824

0801a36c <__ascii_wctomb>:
 801a36c:	b149      	cbz	r1, 801a382 <__ascii_wctomb+0x16>
 801a36e:	2aff      	cmp	r2, #255	; 0xff
 801a370:	bf85      	ittet	hi
 801a372:	238a      	movhi	r3, #138	; 0x8a
 801a374:	6003      	strhi	r3, [r0, #0]
 801a376:	700a      	strbls	r2, [r1, #0]
 801a378:	f04f 30ff 	movhi.w	r0, #4294967295
 801a37c:	bf98      	it	ls
 801a37e:	2001      	movls	r0, #1
 801a380:	4770      	bx	lr
 801a382:	4608      	mov	r0, r1
 801a384:	4770      	bx	lr

0801a386 <abort>:
 801a386:	b508      	push	{r3, lr}
 801a388:	2006      	movs	r0, #6
 801a38a:	f000 f833 	bl	801a3f4 <raise>
 801a38e:	2001      	movs	r0, #1
 801a390:	f7e7 ff78 	bl	8002284 <_exit>

0801a394 <_malloc_usable_size_r>:
 801a394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a398:	1f18      	subs	r0, r3, #4
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	bfbc      	itt	lt
 801a39e:	580b      	ldrlt	r3, [r1, r0]
 801a3a0:	18c0      	addlt	r0, r0, r3
 801a3a2:	4770      	bx	lr

0801a3a4 <_raise_r>:
 801a3a4:	291f      	cmp	r1, #31
 801a3a6:	b538      	push	{r3, r4, r5, lr}
 801a3a8:	4604      	mov	r4, r0
 801a3aa:	460d      	mov	r5, r1
 801a3ac:	d904      	bls.n	801a3b8 <_raise_r+0x14>
 801a3ae:	2316      	movs	r3, #22
 801a3b0:	6003      	str	r3, [r0, #0]
 801a3b2:	f04f 30ff 	mov.w	r0, #4294967295
 801a3b6:	bd38      	pop	{r3, r4, r5, pc}
 801a3b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a3ba:	b112      	cbz	r2, 801a3c2 <_raise_r+0x1e>
 801a3bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a3c0:	b94b      	cbnz	r3, 801a3d6 <_raise_r+0x32>
 801a3c2:	4620      	mov	r0, r4
 801a3c4:	f000 f830 	bl	801a428 <_getpid_r>
 801a3c8:	462a      	mov	r2, r5
 801a3ca:	4601      	mov	r1, r0
 801a3cc:	4620      	mov	r0, r4
 801a3ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a3d2:	f000 b817 	b.w	801a404 <_kill_r>
 801a3d6:	2b01      	cmp	r3, #1
 801a3d8:	d00a      	beq.n	801a3f0 <_raise_r+0x4c>
 801a3da:	1c59      	adds	r1, r3, #1
 801a3dc:	d103      	bne.n	801a3e6 <_raise_r+0x42>
 801a3de:	2316      	movs	r3, #22
 801a3e0:	6003      	str	r3, [r0, #0]
 801a3e2:	2001      	movs	r0, #1
 801a3e4:	e7e7      	b.n	801a3b6 <_raise_r+0x12>
 801a3e6:	2400      	movs	r4, #0
 801a3e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a3ec:	4628      	mov	r0, r5
 801a3ee:	4798      	blx	r3
 801a3f0:	2000      	movs	r0, #0
 801a3f2:	e7e0      	b.n	801a3b6 <_raise_r+0x12>

0801a3f4 <raise>:
 801a3f4:	4b02      	ldr	r3, [pc, #8]	; (801a400 <raise+0xc>)
 801a3f6:	4601      	mov	r1, r0
 801a3f8:	6818      	ldr	r0, [r3, #0]
 801a3fa:	f7ff bfd3 	b.w	801a3a4 <_raise_r>
 801a3fe:	bf00      	nop
 801a400:	200008c4 	.word	0x200008c4

0801a404 <_kill_r>:
 801a404:	b538      	push	{r3, r4, r5, lr}
 801a406:	4d07      	ldr	r5, [pc, #28]	; (801a424 <_kill_r+0x20>)
 801a408:	2300      	movs	r3, #0
 801a40a:	4604      	mov	r4, r0
 801a40c:	4608      	mov	r0, r1
 801a40e:	4611      	mov	r1, r2
 801a410:	602b      	str	r3, [r5, #0]
 801a412:	f7e7 ff27 	bl	8002264 <_kill>
 801a416:	1c43      	adds	r3, r0, #1
 801a418:	d102      	bne.n	801a420 <_kill_r+0x1c>
 801a41a:	682b      	ldr	r3, [r5, #0]
 801a41c:	b103      	cbz	r3, 801a420 <_kill_r+0x1c>
 801a41e:	6023      	str	r3, [r4, #0]
 801a420:	bd38      	pop	{r3, r4, r5, pc}
 801a422:	bf00      	nop
 801a424:	2001f824 	.word	0x2001f824

0801a428 <_getpid_r>:
 801a428:	f7e7 bf14 	b.w	8002254 <_getpid>

0801a42c <_init>:
 801a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a42e:	bf00      	nop
 801a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a432:	bc08      	pop	{r3}
 801a434:	469e      	mov	lr, r3
 801a436:	4770      	bx	lr

0801a438 <_fini>:
 801a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a43a:	bf00      	nop
 801a43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a43e:	bc08      	pop	{r3}
 801a440:	469e      	mov	lr, r3
 801a442:	4770      	bx	lr
